# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package gcc;
use base qw(Exporter);
use base qw(DynaLoader);
package gccc;
bootstrap gcc;
package gcc;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package gcc;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package gcc;

*__fxstat = *gccc::__fxstat;
*__xstat = *gccc::__xstat;
*__lxstat = *gccc::__lxstat;
*__fxstatat = *gccc::__fxstatat;
*__xmknod = *gccc::__xmknod;
*__xmknodat = *gccc::__xmknodat;
*stat = *gccc::stat;
*lstat = *gccc::lstat;
*fstat = *gccc::fstat;
*fstatat = *gccc::fstatat;
*mknod = *gccc::mknod;
*mknodat = *gccc::mknodat;
*filename_cmp = *gccc::filename_cmp;
*filename_ncmp = *gccc::filename_ncmp;
*dlopen = *gccc::dlopen;
*dlclose = *gccc::dlclose;
*dlsym = *gccc::dlsym;
*dlerror = *gccc::dlerror;
*unlock_stream = *gccc::unlock_stream;
*unlock_std_streams = *gccc::unlock_std_streams;
*fopen_unlocked = *gccc::fopen_unlocked;
*fdopen_unlocked = *gccc::fdopen_unlocked;
*freopen_unlocked = *gccc::freopen_unlocked;
*buildargv = *gccc::buildargv;
*freeargv = *gccc::freeargv;
*dupargv = *gccc::dupargv;
*expandargv = *gccc::expandargv;
*writeargv = *gccc::writeargv;
*lbasename = *gccc::lbasename;
*dos_lbasename = *gccc::dos_lbasename;
*unix_lbasename = *gccc::unix_lbasename;
*lrealpath = *gccc::lrealpath;
*concat = *gccc::concat;
*reconcat = *gccc::reconcat;
*concat_length = *gccc::concat_length;
*concat_copy = *gccc::concat_copy;
*concat_copy2 = *gccc::concat_copy2;
*fdmatch = *gccc::fdmatch;
*getpwd = *gccc::getpwd;
*get_run_time = *gccc::get_run_time;
*make_relative_prefix = *gccc::make_relative_prefix;
*make_relative_prefix_ignore_links = *gccc::make_relative_prefix_ignore_links;
*choose_temp_base = *gccc::choose_temp_base;
*make_temp_file = *gccc::make_temp_file;
*unlink_if_ordinary = *gccc::unlink_if_ordinary;
*spaces = *gccc::spaces;
*errno_max = *gccc::errno_max;
*strerrno = *gccc::strerrno;
*strtoerrno = *gccc::strtoerrno;
*xstrerror = *gccc::xstrerror;
*signo_max = *gccc::signo_max;
*strsigno = *gccc::strsigno;
*strtosigno = *gccc::strtosigno;
*xatexit = *gccc::xatexit;
*xexit = *gccc::xexit;
*xmalloc_set_program_name = *gccc::xmalloc_set_program_name;
*xmalloc_failed = *gccc::xmalloc_failed;
*xmalloc = *gccc::xmalloc;
*xrealloc = *gccc::xrealloc;
*xcalloc = *gccc::xcalloc;
*xstrdup = *gccc::xstrdup;
*xstrndup = *gccc::xstrndup;
*xmemdup = *gccc::xmemdup;
*physmem_total = *gccc::physmem_total;
*physmem_available = *gccc::physmem_available;
*xcrc32 = *gccc::xcrc32;
*hex_init = *gccc::hex_init;
*pex_init = *gccc::pex_init;
*pex_run = *gccc::pex_run;
*pex_run_in_environment = *gccc::pex_run_in_environment;
*pex_input_file = *gccc::pex_input_file;
*pex_input_pipe = *gccc::pex_input_pipe;
*pex_read_output = *gccc::pex_read_output;
*pex_read_err = *gccc::pex_read_err;
*pex_get_status = *gccc::pex_get_status;
*pex_get_times = *gccc::pex_get_times;
*pex_free = *gccc::pex_free;
*pex_one = *gccc::pex_one;
*pexecute = *gccc::pexecute;
*pwait = *gccc::pwait;
*setproctitle = *gccc::setproctitle;
*stack_limit_increase = *gccc::stack_limit_increase;
*C_alloca = *gccc::C_alloca;
*fancy_abort = *gccc::fancy_abort;
*htab_create_alloc = *gccc::htab_create_alloc;
*htab_create_alloc_ex = *gccc::htab_create_alloc_ex;
*htab_create_typed_alloc = *gccc::htab_create_typed_alloc;
*htab_create = *gccc::htab_create;
*htab_try_create = *gccc::htab_try_create;
*htab_set_functions_ex = *gccc::htab_set_functions_ex;
*htab_delete = *gccc::htab_delete;
*htab_empty = *gccc::htab_empty;
*htab_find = *gccc::htab_find;
*htab_find_slot = *gccc::htab_find_slot;
*htab_find_with_hash = *gccc::htab_find_with_hash;
*htab_find_slot_with_hash = *gccc::htab_find_slot_with_hash;
*htab_clear_slot = *gccc::htab_clear_slot;
*htab_remove_elt = *gccc::htab_remove_elt;
*htab_remove_elt_with_hash = *gccc::htab_remove_elt_with_hash;
*htab_traverse = *gccc::htab_traverse;
*htab_traverse_noresize = *gccc::htab_traverse_noresize;
*htab_size = *gccc::htab_size;
*htab_elements = *gccc::htab_elements;
*htab_collisions = *gccc::htab_collisions;
*htab_hash_string = *gccc::htab_hash_string;
*iterative_hash = *gccc::iterative_hash;
*plugin_default_version_check = *gccc::plugin_default_version_check;
*plugin_init = *gccc::plugin_init;
*get_event_last = *gccc::get_event_last;
*get_named_event_id = *gccc::get_named_event_id;
*register_callback = *gccc::register_callback;
*unregister_callback = *gccc::unregister_callback;
*default_plugin_dir_name = *gccc::default_plugin_dir_name;
*mode_for_size = *gccc::mode_for_size;
*smallest_mode_for_size = *gccc::smallest_mode_for_size;
*int_mode_for_mode = *gccc::int_mode_for_mode;
*mode_for_vector = *gccc::mode_for_vector;
*get_best_mode = *gccc::get_best_mode;
*get_mode_alignment = *gccc::get_mode_alignment;
*init_adjust_machine_modes = *gccc::init_adjust_machine_modes;
*linemap_init = *gccc::linemap_init;
*linemap_free = *gccc::linemap_free;
*linemap_check_files_exited = *gccc::linemap_check_files_exited;
*linemap_line_start = *gccc::linemap_line_start;
*linemap_add = *gccc::linemap_add;
*linemap_lookup = *gccc::linemap_lookup;
*linemap_position_for_column = *gccc::linemap_position_for_column;
*expand_location = *gccc::expand_location;
*statistics_early_init = *gccc::statistics_early_init;
*statistics_init = *gccc::statistics_init;
*statistics_fini = *gccc::statistics_fini;
*statistics_fini_pass = *gccc::statistics_fini_pass;
*statistics_counter_event = *gccc::statistics_counter_event;
*statistics_histogram_event = *gccc::statistics_histogram_event;
*vec_gc_p_reserve = *gccc::vec_gc_p_reserve;
*vec_gc_p_reserve_exact = *gccc::vec_gc_p_reserve_exact;
*vec_gc_o_reserve = *gccc::vec_gc_o_reserve;
*vec_gc_o_reserve_exact = *gccc::vec_gc_o_reserve_exact;
*ggc_free = *gccc::ggc_free;
*vec_heap_p_reserve = *gccc::vec_heap_p_reserve;
*vec_heap_p_reserve_exact = *gccc::vec_heap_p_reserve_exact;
*vec_heap_o_reserve = *gccc::vec_heap_o_reserve;
*vec_heap_o_reserve_exact = *gccc::vec_heap_o_reserve_exact;
*dump_vec_loc_statistics = *gccc::dump_vec_loc_statistics;
*vec_stack_p_reserve = *gccc::vec_stack_p_reserve;
*vec_stack_p_reserve_exact = *gccc::vec_stack_p_reserve_exact;
*vec_stack_p_reserve_exact_1 = *gccc::vec_stack_p_reserve_exact_1;
*vec_stack_o_reserve = *gccc::vec_stack_o_reserve;
*vec_stack_o_reserve_exact = *gccc::vec_stack_o_reserve_exact;
*vec_stack_free = *gccc::vec_stack_free;
*VEC_tree_must_be_pointer_type = *gccc::VEC_tree_must_be_pointer_type;
*VEC_tree_base_length = *gccc::VEC_tree_base_length;
*VEC_tree_base_last = *gccc::VEC_tree_base_last;
*VEC_tree_base_index = *gccc::VEC_tree_base_index;
*VEC_tree_base_iterate = *gccc::VEC_tree_base_iterate;
*VEC_tree_base_embedded_size = *gccc::VEC_tree_base_embedded_size;
*VEC_tree_base_embedded_init = *gccc::VEC_tree_base_embedded_init;
*VEC_tree_base_space = *gccc::VEC_tree_base_space;
*VEC_tree_base_splice = *gccc::VEC_tree_base_splice;
*VEC_tree_base_quick_push = *gccc::VEC_tree_base_quick_push;
*VEC_tree_base_pop = *gccc::VEC_tree_base_pop;
*VEC_tree_base_truncate = *gccc::VEC_tree_base_truncate;
*VEC_tree_base_replace = *gccc::VEC_tree_base_replace;
*VEC_tree_base_quick_insert = *gccc::VEC_tree_base_quick_insert;
*VEC_tree_base_ordered_remove = *gccc::VEC_tree_base_ordered_remove;
*VEC_tree_base_unordered_remove = *gccc::VEC_tree_base_unordered_remove;
*VEC_tree_base_block_remove = *gccc::VEC_tree_base_block_remove;
*VEC_tree_base_address = *gccc::VEC_tree_base_address;
*VEC_tree_base_lower_bound = *gccc::VEC_tree_base_lower_bound;
*VEC_tree_gc_alloc = *gccc::VEC_tree_gc_alloc;
*VEC_tree_gc_free = *gccc::VEC_tree_gc_free;
*VEC_tree_gc_copy = *gccc::VEC_tree_gc_copy;
*VEC_tree_gc_reserve = *gccc::VEC_tree_gc_reserve;
*VEC_tree_gc_reserve_exact = *gccc::VEC_tree_gc_reserve_exact;
*VEC_tree_gc_safe_grow = *gccc::VEC_tree_gc_safe_grow;
*VEC_tree_gc_safe_grow_cleared = *gccc::VEC_tree_gc_safe_grow_cleared;
*VEC_tree_gc_safe_splice = *gccc::VEC_tree_gc_safe_splice;
*VEC_tree_gc_safe_push = *gccc::VEC_tree_gc_safe_push;
*VEC_tree_gc_safe_insert = *gccc::VEC_tree_gc_safe_insert;
*VEC_tree_heap_alloc = *gccc::VEC_tree_heap_alloc;
*VEC_tree_heap_free = *gccc::VEC_tree_heap_free;
*VEC_tree_heap_copy = *gccc::VEC_tree_heap_copy;
*VEC_tree_heap_reserve = *gccc::VEC_tree_heap_reserve;
*VEC_tree_heap_reserve_exact = *gccc::VEC_tree_heap_reserve_exact;
*VEC_tree_heap_safe_grow = *gccc::VEC_tree_heap_safe_grow;
*VEC_tree_heap_safe_grow_cleared = *gccc::VEC_tree_heap_safe_grow_cleared;
*VEC_tree_heap_safe_splice = *gccc::VEC_tree_heap_safe_splice;
*VEC_tree_heap_safe_push = *gccc::VEC_tree_heap_safe_push;
*VEC_tree_heap_safe_insert = *gccc::VEC_tree_heap_safe_insert;
*VEC_gimple_must_be_pointer_type = *gccc::VEC_gimple_must_be_pointer_type;
*VEC_gimple_base_length = *gccc::VEC_gimple_base_length;
*VEC_gimple_base_last = *gccc::VEC_gimple_base_last;
*VEC_gimple_base_index = *gccc::VEC_gimple_base_index;
*VEC_gimple_base_iterate = *gccc::VEC_gimple_base_iterate;
*VEC_gimple_base_embedded_size = *gccc::VEC_gimple_base_embedded_size;
*VEC_gimple_base_embedded_init = *gccc::VEC_gimple_base_embedded_init;
*VEC_gimple_base_space = *gccc::VEC_gimple_base_space;
*VEC_gimple_base_splice = *gccc::VEC_gimple_base_splice;
*VEC_gimple_base_quick_push = *gccc::VEC_gimple_base_quick_push;
*VEC_gimple_base_pop = *gccc::VEC_gimple_base_pop;
*VEC_gimple_base_truncate = *gccc::VEC_gimple_base_truncate;
*VEC_gimple_base_replace = *gccc::VEC_gimple_base_replace;
*VEC_gimple_base_quick_insert = *gccc::VEC_gimple_base_quick_insert;
*VEC_gimple_base_ordered_remove = *gccc::VEC_gimple_base_ordered_remove;
*VEC_gimple_base_unordered_remove = *gccc::VEC_gimple_base_unordered_remove;
*VEC_gimple_base_block_remove = *gccc::VEC_gimple_base_block_remove;
*VEC_gimple_base_address = *gccc::VEC_gimple_base_address;
*VEC_gimple_base_lower_bound = *gccc::VEC_gimple_base_lower_bound;
*VEC_gimple_heap_alloc = *gccc::VEC_gimple_heap_alloc;
*VEC_gimple_heap_free = *gccc::VEC_gimple_heap_free;
*VEC_gimple_heap_copy = *gccc::VEC_gimple_heap_copy;
*VEC_gimple_heap_reserve = *gccc::VEC_gimple_heap_reserve;
*VEC_gimple_heap_reserve_exact = *gccc::VEC_gimple_heap_reserve_exact;
*VEC_gimple_heap_safe_grow = *gccc::VEC_gimple_heap_safe_grow;
*VEC_gimple_heap_safe_grow_cleared = *gccc::VEC_gimple_heap_safe_grow_cleared;
*VEC_gimple_heap_safe_splice = *gccc::VEC_gimple_heap_safe_splice;
*VEC_gimple_heap_safe_push = *gccc::VEC_gimple_heap_safe_push;
*VEC_gimple_heap_safe_insert = *gccc::VEC_gimple_heap_safe_insert;
*VEC_gimple_gc_alloc = *gccc::VEC_gimple_gc_alloc;
*VEC_gimple_gc_free = *gccc::VEC_gimple_gc_free;
*VEC_gimple_gc_copy = *gccc::VEC_gimple_gc_copy;
*VEC_gimple_gc_reserve = *gccc::VEC_gimple_gc_reserve;
*VEC_gimple_gc_reserve_exact = *gccc::VEC_gimple_gc_reserve_exact;
*VEC_gimple_gc_safe_grow = *gccc::VEC_gimple_gc_safe_grow;
*VEC_gimple_gc_safe_grow_cleared = *gccc::VEC_gimple_gc_safe_grow_cleared;
*VEC_gimple_gc_safe_splice = *gccc::VEC_gimple_gc_safe_splice;
*VEC_gimple_gc_safe_push = *gccc::VEC_gimple_gc_safe_push;
*VEC_gimple_gc_safe_insert = *gccc::VEC_gimple_gc_safe_insert;
*VEC_gimple_p_must_be_pointer_type = *gccc::VEC_gimple_p_must_be_pointer_type;
*VEC_gimple_p_base_length = *gccc::VEC_gimple_p_base_length;
*VEC_gimple_p_base_last = *gccc::VEC_gimple_p_base_last;
*VEC_gimple_p_base_index = *gccc::VEC_gimple_p_base_index;
*VEC_gimple_p_base_iterate = *gccc::VEC_gimple_p_base_iterate;
*VEC_gimple_p_base_embedded_size = *gccc::VEC_gimple_p_base_embedded_size;
*VEC_gimple_p_base_embedded_init = *gccc::VEC_gimple_p_base_embedded_init;
*VEC_gimple_p_base_space = *gccc::VEC_gimple_p_base_space;
*VEC_gimple_p_base_splice = *gccc::VEC_gimple_p_base_splice;
*VEC_gimple_p_base_quick_push = *gccc::VEC_gimple_p_base_quick_push;
*VEC_gimple_p_base_pop = *gccc::VEC_gimple_p_base_pop;
*VEC_gimple_p_base_truncate = *gccc::VEC_gimple_p_base_truncate;
*VEC_gimple_p_base_replace = *gccc::VEC_gimple_p_base_replace;
*VEC_gimple_p_base_quick_insert = *gccc::VEC_gimple_p_base_quick_insert;
*VEC_gimple_p_base_ordered_remove = *gccc::VEC_gimple_p_base_ordered_remove;
*VEC_gimple_p_base_unordered_remove = *gccc::VEC_gimple_p_base_unordered_remove;
*VEC_gimple_p_base_block_remove = *gccc::VEC_gimple_p_base_block_remove;
*VEC_gimple_p_base_address = *gccc::VEC_gimple_p_base_address;
*VEC_gimple_p_base_lower_bound = *gccc::VEC_gimple_p_base_lower_bound;
*VEC_gimple_p_heap_alloc = *gccc::VEC_gimple_p_heap_alloc;
*VEC_gimple_p_heap_free = *gccc::VEC_gimple_p_heap_free;
*VEC_gimple_p_heap_copy = *gccc::VEC_gimple_p_heap_copy;
*VEC_gimple_p_heap_reserve = *gccc::VEC_gimple_p_heap_reserve;
*VEC_gimple_p_heap_reserve_exact = *gccc::VEC_gimple_p_heap_reserve_exact;
*VEC_gimple_p_heap_safe_grow = *gccc::VEC_gimple_p_heap_safe_grow;
*VEC_gimple_p_heap_safe_grow_cleared = *gccc::VEC_gimple_p_heap_safe_grow_cleared;
*VEC_gimple_p_heap_safe_splice = *gccc::VEC_gimple_p_heap_safe_splice;
*VEC_gimple_p_heap_safe_push = *gccc::VEC_gimple_p_heap_safe_push;
*VEC_gimple_p_heap_safe_insert = *gccc::VEC_gimple_p_heap_safe_insert;
*VEC_gimple_seq_must_be_pointer_type = *gccc::VEC_gimple_seq_must_be_pointer_type;
*VEC_gimple_seq_base_length = *gccc::VEC_gimple_seq_base_length;
*VEC_gimple_seq_base_last = *gccc::VEC_gimple_seq_base_last;
*VEC_gimple_seq_base_index = *gccc::VEC_gimple_seq_base_index;
*VEC_gimple_seq_base_iterate = *gccc::VEC_gimple_seq_base_iterate;
*VEC_gimple_seq_base_embedded_size = *gccc::VEC_gimple_seq_base_embedded_size;
*VEC_gimple_seq_base_embedded_init = *gccc::VEC_gimple_seq_base_embedded_init;
*VEC_gimple_seq_base_space = *gccc::VEC_gimple_seq_base_space;
*VEC_gimple_seq_base_splice = *gccc::VEC_gimple_seq_base_splice;
*VEC_gimple_seq_base_quick_push = *gccc::VEC_gimple_seq_base_quick_push;
*VEC_gimple_seq_base_pop = *gccc::VEC_gimple_seq_base_pop;
*VEC_gimple_seq_base_truncate = *gccc::VEC_gimple_seq_base_truncate;
*VEC_gimple_seq_base_replace = *gccc::VEC_gimple_seq_base_replace;
*VEC_gimple_seq_base_quick_insert = *gccc::VEC_gimple_seq_base_quick_insert;
*VEC_gimple_seq_base_ordered_remove = *gccc::VEC_gimple_seq_base_ordered_remove;
*VEC_gimple_seq_base_unordered_remove = *gccc::VEC_gimple_seq_base_unordered_remove;
*VEC_gimple_seq_base_block_remove = *gccc::VEC_gimple_seq_base_block_remove;
*VEC_gimple_seq_base_address = *gccc::VEC_gimple_seq_base_address;
*VEC_gimple_seq_base_lower_bound = *gccc::VEC_gimple_seq_base_lower_bound;
*VEC_gimple_seq_gc_alloc = *gccc::VEC_gimple_seq_gc_alloc;
*VEC_gimple_seq_gc_free = *gccc::VEC_gimple_seq_gc_free;
*VEC_gimple_seq_gc_copy = *gccc::VEC_gimple_seq_gc_copy;
*VEC_gimple_seq_gc_reserve = *gccc::VEC_gimple_seq_gc_reserve;
*VEC_gimple_seq_gc_reserve_exact = *gccc::VEC_gimple_seq_gc_reserve_exact;
*VEC_gimple_seq_gc_safe_grow = *gccc::VEC_gimple_seq_gc_safe_grow;
*VEC_gimple_seq_gc_safe_grow_cleared = *gccc::VEC_gimple_seq_gc_safe_grow_cleared;
*VEC_gimple_seq_gc_safe_splice = *gccc::VEC_gimple_seq_gc_safe_splice;
*VEC_gimple_seq_gc_safe_push = *gccc::VEC_gimple_seq_gc_safe_push;
*VEC_gimple_seq_gc_safe_insert = *gccc::VEC_gimple_seq_gc_safe_insert;
*VEC_gimple_seq_heap_alloc = *gccc::VEC_gimple_seq_heap_alloc;
*VEC_gimple_seq_heap_free = *gccc::VEC_gimple_seq_heap_free;
*VEC_gimple_seq_heap_copy = *gccc::VEC_gimple_seq_heap_copy;
*VEC_gimple_seq_heap_reserve = *gccc::VEC_gimple_seq_heap_reserve;
*VEC_gimple_seq_heap_reserve_exact = *gccc::VEC_gimple_seq_heap_reserve_exact;
*VEC_gimple_seq_heap_safe_grow = *gccc::VEC_gimple_seq_heap_safe_grow;
*VEC_gimple_seq_heap_safe_grow_cleared = *gccc::VEC_gimple_seq_heap_safe_grow_cleared;
*VEC_gimple_seq_heap_safe_splice = *gccc::VEC_gimple_seq_heap_safe_splice;
*VEC_gimple_seq_heap_safe_push = *gccc::VEC_gimple_seq_heap_safe_push;
*VEC_gimple_seq_heap_safe_insert = *gccc::VEC_gimple_seq_heap_safe_insert;
*VEC_rtx_must_be_pointer_type = *gccc::VEC_rtx_must_be_pointer_type;
*VEC_rtx_base_length = *gccc::VEC_rtx_base_length;
*VEC_rtx_base_last = *gccc::VEC_rtx_base_last;
*VEC_rtx_base_index = *gccc::VEC_rtx_base_index;
*VEC_rtx_base_iterate = *gccc::VEC_rtx_base_iterate;
*VEC_rtx_base_embedded_size = *gccc::VEC_rtx_base_embedded_size;
*VEC_rtx_base_embedded_init = *gccc::VEC_rtx_base_embedded_init;
*VEC_rtx_base_space = *gccc::VEC_rtx_base_space;
*VEC_rtx_base_splice = *gccc::VEC_rtx_base_splice;
*VEC_rtx_base_quick_push = *gccc::VEC_rtx_base_quick_push;
*VEC_rtx_base_pop = *gccc::VEC_rtx_base_pop;
*VEC_rtx_base_truncate = *gccc::VEC_rtx_base_truncate;
*VEC_rtx_base_replace = *gccc::VEC_rtx_base_replace;
*VEC_rtx_base_quick_insert = *gccc::VEC_rtx_base_quick_insert;
*VEC_rtx_base_ordered_remove = *gccc::VEC_rtx_base_ordered_remove;
*VEC_rtx_base_unordered_remove = *gccc::VEC_rtx_base_unordered_remove;
*VEC_rtx_base_block_remove = *gccc::VEC_rtx_base_block_remove;
*VEC_rtx_base_address = *gccc::VEC_rtx_base_address;
*VEC_rtx_base_lower_bound = *gccc::VEC_rtx_base_lower_bound;
*VEC_rtx_heap_alloc = *gccc::VEC_rtx_heap_alloc;
*VEC_rtx_heap_free = *gccc::VEC_rtx_heap_free;
*VEC_rtx_heap_copy = *gccc::VEC_rtx_heap_copy;
*VEC_rtx_heap_reserve = *gccc::VEC_rtx_heap_reserve;
*VEC_rtx_heap_reserve_exact = *gccc::VEC_rtx_heap_reserve_exact;
*VEC_rtx_heap_safe_grow = *gccc::VEC_rtx_heap_safe_grow;
*VEC_rtx_heap_safe_grow_cleared = *gccc::VEC_rtx_heap_safe_grow_cleared;
*VEC_rtx_heap_safe_splice = *gccc::VEC_rtx_heap_safe_splice;
*VEC_rtx_heap_safe_push = *gccc::VEC_rtx_heap_safe_push;
*VEC_rtx_heap_safe_insert = *gccc::VEC_rtx_heap_safe_insert;
*VEC_rtx_gc_alloc = *gccc::VEC_rtx_gc_alloc;
*VEC_rtx_gc_free = *gccc::VEC_rtx_gc_free;
*VEC_rtx_gc_copy = *gccc::VEC_rtx_gc_copy;
*VEC_rtx_gc_reserve = *gccc::VEC_rtx_gc_reserve;
*VEC_rtx_gc_reserve_exact = *gccc::VEC_rtx_gc_reserve_exact;
*VEC_rtx_gc_safe_grow = *gccc::VEC_rtx_gc_safe_grow;
*VEC_rtx_gc_safe_grow_cleared = *gccc::VEC_rtx_gc_safe_grow_cleared;
*VEC_rtx_gc_safe_splice = *gccc::VEC_rtx_gc_safe_splice;
*VEC_rtx_gc_safe_push = *gccc::VEC_rtx_gc_safe_push;
*VEC_rtx_gc_safe_insert = *gccc::VEC_rtx_gc_safe_insert;
*__gmp_set_memory_functions = *gccc::__gmp_set_memory_functions;
*__gmp_get_memory_functions = *gccc::__gmp_get_memory_functions;
*__gmp_randinit = *gccc::__gmp_randinit;
*__gmp_randinit_default = *gccc::__gmp_randinit_default;
*__gmp_randinit_lc_2exp = *gccc::__gmp_randinit_lc_2exp;
*__gmp_randinit_lc_2exp_size = *gccc::__gmp_randinit_lc_2exp_size;
*__gmp_randinit_mt = *gccc::__gmp_randinit_mt;
*__gmp_randinit_set = *gccc::__gmp_randinit_set;
*__gmp_randseed = *gccc::__gmp_randseed;
*__gmp_randseed_ui = *gccc::__gmp_randseed_ui;
*__gmp_randclear = *gccc::__gmp_randclear;
*__gmp_urandomb_ui = *gccc::__gmp_urandomb_ui;
*__gmp_urandomm_ui = *gccc::__gmp_urandomm_ui;
*__gmp_asprintf = *gccc::__gmp_asprintf;
*__gmp_fprintf = *gccc::__gmp_fprintf;
*__gmp_printf = *gccc::__gmp_printf;
*__gmp_snprintf = *gccc::__gmp_snprintf;
*__gmp_sprintf = *gccc::__gmp_sprintf;
*__gmp_vasprintf = *gccc::__gmp_vasprintf;
*__gmp_vfprintf = *gccc::__gmp_vfprintf;
*__gmp_vprintf = *gccc::__gmp_vprintf;
*__gmp_vsnprintf = *gccc::__gmp_vsnprintf;
*__gmp_vsprintf = *gccc::__gmp_vsprintf;
*__gmp_fscanf = *gccc::__gmp_fscanf;
*__gmp_scanf = *gccc::__gmp_scanf;
*__gmp_sscanf = *gccc::__gmp_sscanf;
*__gmp_vfscanf = *gccc::__gmp_vfscanf;
*__gmp_vscanf = *gccc::__gmp_vscanf;
*__gmp_vsscanf = *gccc::__gmp_vsscanf;
*__gmpz_realloc = *gccc::__gmpz_realloc;
*__gmpz_abs = *gccc::__gmpz_abs;
*__gmpz_add = *gccc::__gmpz_add;
*__gmpz_add_ui = *gccc::__gmpz_add_ui;
*__gmpz_addmul = *gccc::__gmpz_addmul;
*__gmpz_addmul_ui = *gccc::__gmpz_addmul_ui;
*__gmpz_and = *gccc::__gmpz_and;
*__gmpz_array_init = *gccc::__gmpz_array_init;
*__gmpz_bin_ui = *gccc::__gmpz_bin_ui;
*__gmpz_bin_uiui = *gccc::__gmpz_bin_uiui;
*__gmpz_cdiv_q = *gccc::__gmpz_cdiv_q;
*__gmpz_cdiv_q_2exp = *gccc::__gmpz_cdiv_q_2exp;
*__gmpz_cdiv_q_ui = *gccc::__gmpz_cdiv_q_ui;
*__gmpz_cdiv_qr = *gccc::__gmpz_cdiv_qr;
*__gmpz_cdiv_qr_ui = *gccc::__gmpz_cdiv_qr_ui;
*__gmpz_cdiv_r = *gccc::__gmpz_cdiv_r;
*__gmpz_cdiv_r_2exp = *gccc::__gmpz_cdiv_r_2exp;
*__gmpz_cdiv_r_ui = *gccc::__gmpz_cdiv_r_ui;
*__gmpz_cdiv_ui = *gccc::__gmpz_cdiv_ui;
*__gmpz_clear = *gccc::__gmpz_clear;
*__gmpz_clears = *gccc::__gmpz_clears;
*__gmpz_clrbit = *gccc::__gmpz_clrbit;
*__gmpz_cmp = *gccc::__gmpz_cmp;
*__gmpz_cmp_d = *gccc::__gmpz_cmp_d;
*__gmpz_cmp_si = *gccc::__gmpz_cmp_si;
*__gmpz_cmp_ui = *gccc::__gmpz_cmp_ui;
*__gmpz_cmpabs = *gccc::__gmpz_cmpabs;
*__gmpz_cmpabs_d = *gccc::__gmpz_cmpabs_d;
*__gmpz_cmpabs_ui = *gccc::__gmpz_cmpabs_ui;
*__gmpz_com = *gccc::__gmpz_com;
*__gmpz_combit = *gccc::__gmpz_combit;
*__gmpz_congruent_p = *gccc::__gmpz_congruent_p;
*__gmpz_congruent_2exp_p = *gccc::__gmpz_congruent_2exp_p;
*__gmpz_congruent_ui_p = *gccc::__gmpz_congruent_ui_p;
*__gmpz_divexact = *gccc::__gmpz_divexact;
*__gmpz_divexact_ui = *gccc::__gmpz_divexact_ui;
*__gmpz_divisible_p = *gccc::__gmpz_divisible_p;
*__gmpz_divisible_ui_p = *gccc::__gmpz_divisible_ui_p;
*__gmpz_divisible_2exp_p = *gccc::__gmpz_divisible_2exp_p;
*__gmpz_dump = *gccc::__gmpz_dump;
*__gmpz_export = *gccc::__gmpz_export;
*__gmpz_fac_ui = *gccc::__gmpz_fac_ui;
*__gmpz_fdiv_q = *gccc::__gmpz_fdiv_q;
*__gmpz_fdiv_q_2exp = *gccc::__gmpz_fdiv_q_2exp;
*__gmpz_fdiv_q_ui = *gccc::__gmpz_fdiv_q_ui;
*__gmpz_fdiv_qr = *gccc::__gmpz_fdiv_qr;
*__gmpz_fdiv_qr_ui = *gccc::__gmpz_fdiv_qr_ui;
*__gmpz_fdiv_r = *gccc::__gmpz_fdiv_r;
*__gmpz_fdiv_r_2exp = *gccc::__gmpz_fdiv_r_2exp;
*__gmpz_fdiv_r_ui = *gccc::__gmpz_fdiv_r_ui;
*__gmpz_fdiv_ui = *gccc::__gmpz_fdiv_ui;
*__gmpz_fib_ui = *gccc::__gmpz_fib_ui;
*__gmpz_fib2_ui = *gccc::__gmpz_fib2_ui;
*__gmpz_fits_sint_p = *gccc::__gmpz_fits_sint_p;
*__gmpz_fits_slong_p = *gccc::__gmpz_fits_slong_p;
*__gmpz_fits_sshort_p = *gccc::__gmpz_fits_sshort_p;
*__gmpz_fits_uint_p = *gccc::__gmpz_fits_uint_p;
*__gmpz_fits_ulong_p = *gccc::__gmpz_fits_ulong_p;
*__gmpz_fits_ushort_p = *gccc::__gmpz_fits_ushort_p;
*__gmpz_gcd = *gccc::__gmpz_gcd;
*__gmpz_gcd_ui = *gccc::__gmpz_gcd_ui;
*__gmpz_gcdext = *gccc::__gmpz_gcdext;
*__gmpz_get_d = *gccc::__gmpz_get_d;
*__gmpz_get_d_2exp = *gccc::__gmpz_get_d_2exp;
*__gmpz_get_si = *gccc::__gmpz_get_si;
*__gmpz_get_str = *gccc::__gmpz_get_str;
*__gmpz_get_ui = *gccc::__gmpz_get_ui;
*__gmpz_getlimbn = *gccc::__gmpz_getlimbn;
*__gmpz_hamdist = *gccc::__gmpz_hamdist;
*__gmpz_import = *gccc::__gmpz_import;
*__gmpz_init = *gccc::__gmpz_init;
*__gmpz_init2 = *gccc::__gmpz_init2;
*__gmpz_inits = *gccc::__gmpz_inits;
*__gmpz_init_set = *gccc::__gmpz_init_set;
*__gmpz_init_set_d = *gccc::__gmpz_init_set_d;
*__gmpz_init_set_si = *gccc::__gmpz_init_set_si;
*__gmpz_init_set_str = *gccc::__gmpz_init_set_str;
*__gmpz_init_set_ui = *gccc::__gmpz_init_set_ui;
*__gmpz_inp_raw = *gccc::__gmpz_inp_raw;
*__gmpz_inp_str = *gccc::__gmpz_inp_str;
*__gmpz_invert = *gccc::__gmpz_invert;
*__gmpz_ior = *gccc::__gmpz_ior;
*__gmpz_jacobi = *gccc::__gmpz_jacobi;
*__gmpz_kronecker_si = *gccc::__gmpz_kronecker_si;
*__gmpz_kronecker_ui = *gccc::__gmpz_kronecker_ui;
*__gmpz_si_kronecker = *gccc::__gmpz_si_kronecker;
*__gmpz_ui_kronecker = *gccc::__gmpz_ui_kronecker;
*__gmpz_lcm = *gccc::__gmpz_lcm;
*__gmpz_lcm_ui = *gccc::__gmpz_lcm_ui;
*__gmpz_lucnum_ui = *gccc::__gmpz_lucnum_ui;
*__gmpz_lucnum2_ui = *gccc::__gmpz_lucnum2_ui;
*__gmpz_millerrabin = *gccc::__gmpz_millerrabin;
*__gmpz_mod = *gccc::__gmpz_mod;
*__gmpz_mul = *gccc::__gmpz_mul;
*__gmpz_mul_2exp = *gccc::__gmpz_mul_2exp;
*__gmpz_mul_si = *gccc::__gmpz_mul_si;
*__gmpz_mul_ui = *gccc::__gmpz_mul_ui;
*__gmpz_neg = *gccc::__gmpz_neg;
*__gmpz_nextprime = *gccc::__gmpz_nextprime;
*__gmpz_out_raw = *gccc::__gmpz_out_raw;
*__gmpz_out_str = *gccc::__gmpz_out_str;
*__gmpz_perfect_power_p = *gccc::__gmpz_perfect_power_p;
*__gmpz_perfect_square_p = *gccc::__gmpz_perfect_square_p;
*__gmpz_popcount = *gccc::__gmpz_popcount;
*__gmpz_pow_ui = *gccc::__gmpz_pow_ui;
*__gmpz_powm = *gccc::__gmpz_powm;
*__gmpz_powm_sec = *gccc::__gmpz_powm_sec;
*__gmpz_powm_ui = *gccc::__gmpz_powm_ui;
*__gmpz_probab_prime_p = *gccc::__gmpz_probab_prime_p;
*__gmpz_random = *gccc::__gmpz_random;
*__gmpz_random2 = *gccc::__gmpz_random2;
*__gmpz_realloc2 = *gccc::__gmpz_realloc2;
*__gmpz_remove = *gccc::__gmpz_remove;
*__gmpz_root = *gccc::__gmpz_root;
*__gmpz_rootrem = *gccc::__gmpz_rootrem;
*__gmpz_rrandomb = *gccc::__gmpz_rrandomb;
*__gmpz_scan0 = *gccc::__gmpz_scan0;
*__gmpz_scan1 = *gccc::__gmpz_scan1;
*__gmpz_set = *gccc::__gmpz_set;
*__gmpz_set_d = *gccc::__gmpz_set_d;
*__gmpz_set_f = *gccc::__gmpz_set_f;
*__gmpz_set_q = *gccc::__gmpz_set_q;
*__gmpz_set_si = *gccc::__gmpz_set_si;
*__gmpz_set_str = *gccc::__gmpz_set_str;
*__gmpz_set_ui = *gccc::__gmpz_set_ui;
*__gmpz_setbit = *gccc::__gmpz_setbit;
*__gmpz_size = *gccc::__gmpz_size;
*__gmpz_sizeinbase = *gccc::__gmpz_sizeinbase;
*__gmpz_sqrt = *gccc::__gmpz_sqrt;
*__gmpz_sqrtrem = *gccc::__gmpz_sqrtrem;
*__gmpz_sub = *gccc::__gmpz_sub;
*__gmpz_sub_ui = *gccc::__gmpz_sub_ui;
*__gmpz_ui_sub = *gccc::__gmpz_ui_sub;
*__gmpz_submul = *gccc::__gmpz_submul;
*__gmpz_submul_ui = *gccc::__gmpz_submul_ui;
*__gmpz_swap = *gccc::__gmpz_swap;
*__gmpz_tdiv_ui = *gccc::__gmpz_tdiv_ui;
*__gmpz_tdiv_q = *gccc::__gmpz_tdiv_q;
*__gmpz_tdiv_q_2exp = *gccc::__gmpz_tdiv_q_2exp;
*__gmpz_tdiv_q_ui = *gccc::__gmpz_tdiv_q_ui;
*__gmpz_tdiv_qr = *gccc::__gmpz_tdiv_qr;
*__gmpz_tdiv_qr_ui = *gccc::__gmpz_tdiv_qr_ui;
*__gmpz_tdiv_r = *gccc::__gmpz_tdiv_r;
*__gmpz_tdiv_r_2exp = *gccc::__gmpz_tdiv_r_2exp;
*__gmpz_tdiv_r_ui = *gccc::__gmpz_tdiv_r_ui;
*__gmpz_tstbit = *gccc::__gmpz_tstbit;
*__gmpz_ui_pow_ui = *gccc::__gmpz_ui_pow_ui;
*__gmpz_urandomb = *gccc::__gmpz_urandomb;
*__gmpz_urandomm = *gccc::__gmpz_urandomm;
*__gmpz_xor = *gccc::__gmpz_xor;
*__gmpq_abs = *gccc::__gmpq_abs;
*__gmpq_add = *gccc::__gmpq_add;
*__gmpq_canonicalize = *gccc::__gmpq_canonicalize;
*__gmpq_clear = *gccc::__gmpq_clear;
*__gmpq_clears = *gccc::__gmpq_clears;
*__gmpq_cmp = *gccc::__gmpq_cmp;
*__gmpq_cmp_si = *gccc::__gmpq_cmp_si;
*__gmpq_cmp_ui = *gccc::__gmpq_cmp_ui;
*__gmpq_div = *gccc::__gmpq_div;
*__gmpq_div_2exp = *gccc::__gmpq_div_2exp;
*__gmpq_equal = *gccc::__gmpq_equal;
*__gmpq_get_num = *gccc::__gmpq_get_num;
*__gmpq_get_den = *gccc::__gmpq_get_den;
*__gmpq_get_d = *gccc::__gmpq_get_d;
*__gmpq_get_str = *gccc::__gmpq_get_str;
*__gmpq_init = *gccc::__gmpq_init;
*__gmpq_inits = *gccc::__gmpq_inits;
*__gmpq_inp_str = *gccc::__gmpq_inp_str;
*__gmpq_inv = *gccc::__gmpq_inv;
*__gmpq_mul = *gccc::__gmpq_mul;
*__gmpq_mul_2exp = *gccc::__gmpq_mul_2exp;
*__gmpq_neg = *gccc::__gmpq_neg;
*__gmpq_out_str = *gccc::__gmpq_out_str;
*__gmpq_set = *gccc::__gmpq_set;
*__gmpq_set_d = *gccc::__gmpq_set_d;
*__gmpq_set_den = *gccc::__gmpq_set_den;
*__gmpq_set_f = *gccc::__gmpq_set_f;
*__gmpq_set_num = *gccc::__gmpq_set_num;
*__gmpq_set_si = *gccc::__gmpq_set_si;
*__gmpq_set_str = *gccc::__gmpq_set_str;
*__gmpq_set_ui = *gccc::__gmpq_set_ui;
*__gmpq_set_z = *gccc::__gmpq_set_z;
*__gmpq_sub = *gccc::__gmpq_sub;
*__gmpq_swap = *gccc::__gmpq_swap;
*__gmpf_abs = *gccc::__gmpf_abs;
*__gmpf_add = *gccc::__gmpf_add;
*__gmpf_add_ui = *gccc::__gmpf_add_ui;
*__gmpf_ceil = *gccc::__gmpf_ceil;
*__gmpf_clear = *gccc::__gmpf_clear;
*__gmpf_clears = *gccc::__gmpf_clears;
*__gmpf_cmp = *gccc::__gmpf_cmp;
*__gmpf_cmp_d = *gccc::__gmpf_cmp_d;
*__gmpf_cmp_si = *gccc::__gmpf_cmp_si;
*__gmpf_cmp_ui = *gccc::__gmpf_cmp_ui;
*__gmpf_div = *gccc::__gmpf_div;
*__gmpf_div_2exp = *gccc::__gmpf_div_2exp;
*__gmpf_div_ui = *gccc::__gmpf_div_ui;
*__gmpf_dump = *gccc::__gmpf_dump;
*__gmpf_eq = *gccc::__gmpf_eq;
*__gmpf_fits_sint_p = *gccc::__gmpf_fits_sint_p;
*__gmpf_fits_slong_p = *gccc::__gmpf_fits_slong_p;
*__gmpf_fits_sshort_p = *gccc::__gmpf_fits_sshort_p;
*__gmpf_fits_uint_p = *gccc::__gmpf_fits_uint_p;
*__gmpf_fits_ulong_p = *gccc::__gmpf_fits_ulong_p;
*__gmpf_fits_ushort_p = *gccc::__gmpf_fits_ushort_p;
*__gmpf_floor = *gccc::__gmpf_floor;
*__gmpf_get_d = *gccc::__gmpf_get_d;
*__gmpf_get_d_2exp = *gccc::__gmpf_get_d_2exp;
*__gmpf_get_default_prec = *gccc::__gmpf_get_default_prec;
*__gmpf_get_prec = *gccc::__gmpf_get_prec;
*__gmpf_get_si = *gccc::__gmpf_get_si;
*__gmpf_get_str = *gccc::__gmpf_get_str;
*__gmpf_get_ui = *gccc::__gmpf_get_ui;
*__gmpf_init = *gccc::__gmpf_init;
*__gmpf_init2 = *gccc::__gmpf_init2;
*__gmpf_inits = *gccc::__gmpf_inits;
*__gmpf_init_set = *gccc::__gmpf_init_set;
*__gmpf_init_set_d = *gccc::__gmpf_init_set_d;
*__gmpf_init_set_si = *gccc::__gmpf_init_set_si;
*__gmpf_init_set_str = *gccc::__gmpf_init_set_str;
*__gmpf_init_set_ui = *gccc::__gmpf_init_set_ui;
*__gmpf_inp_str = *gccc::__gmpf_inp_str;
*__gmpf_integer_p = *gccc::__gmpf_integer_p;
*__gmpf_mul = *gccc::__gmpf_mul;
*__gmpf_mul_2exp = *gccc::__gmpf_mul_2exp;
*__gmpf_mul_ui = *gccc::__gmpf_mul_ui;
*__gmpf_neg = *gccc::__gmpf_neg;
*__gmpf_out_str = *gccc::__gmpf_out_str;
*__gmpf_pow_ui = *gccc::__gmpf_pow_ui;
*__gmpf_random2 = *gccc::__gmpf_random2;
*__gmpf_reldiff = *gccc::__gmpf_reldiff;
*__gmpf_set = *gccc::__gmpf_set;
*__gmpf_set_d = *gccc::__gmpf_set_d;
*__gmpf_set_default_prec = *gccc::__gmpf_set_default_prec;
*__gmpf_set_prec = *gccc::__gmpf_set_prec;
*__gmpf_set_prec_raw = *gccc::__gmpf_set_prec_raw;
*__gmpf_set_q = *gccc::__gmpf_set_q;
*__gmpf_set_si = *gccc::__gmpf_set_si;
*__gmpf_set_str = *gccc::__gmpf_set_str;
*__gmpf_set_ui = *gccc::__gmpf_set_ui;
*__gmpf_set_z = *gccc::__gmpf_set_z;
*__gmpf_size = *gccc::__gmpf_size;
*__gmpf_sqrt = *gccc::__gmpf_sqrt;
*__gmpf_sqrt_ui = *gccc::__gmpf_sqrt_ui;
*__gmpf_sub = *gccc::__gmpf_sub;
*__gmpf_sub_ui = *gccc::__gmpf_sub_ui;
*__gmpf_swap = *gccc::__gmpf_swap;
*__gmpf_trunc = *gccc::__gmpf_trunc;
*__gmpf_ui_div = *gccc::__gmpf_ui_div;
*__gmpf_ui_sub = *gccc::__gmpf_ui_sub;
*__gmpf_urandomb = *gccc::__gmpf_urandomb;
*__gmpn_add = *gccc::__gmpn_add;
*__gmpn_add_1 = *gccc::__gmpn_add_1;
*__gmpn_add_n = *gccc::__gmpn_add_n;
*__gmpn_addmul_1 = *gccc::__gmpn_addmul_1;
*__gmpn_cmp = *gccc::__gmpn_cmp;
*__gmpn_divexact_by3c = *gccc::__gmpn_divexact_by3c;
*__gmpn_divrem = *gccc::__gmpn_divrem;
*__gmpn_divrem_1 = *gccc::__gmpn_divrem_1;
*__gmpn_divrem_2 = *gccc::__gmpn_divrem_2;
*__gmpn_gcd = *gccc::__gmpn_gcd;
*__gmpn_gcd_1 = *gccc::__gmpn_gcd_1;
*__gmpn_gcdext_1 = *gccc::__gmpn_gcdext_1;
*__gmpn_gcdext = *gccc::__gmpn_gcdext;
*__gmpn_get_str = *gccc::__gmpn_get_str;
*__gmpn_hamdist = *gccc::__gmpn_hamdist;
*__gmpn_lshift = *gccc::__gmpn_lshift;
*__gmpn_mod_1 = *gccc::__gmpn_mod_1;
*__gmpn_mul = *gccc::__gmpn_mul;
*__gmpn_mul_1 = *gccc::__gmpn_mul_1;
*__gmpn_mul_n = *gccc::__gmpn_mul_n;
*__gmpn_sqr = *gccc::__gmpn_sqr;
*__gmpn_neg = *gccc::__gmpn_neg;
*__gmpn_com = *gccc::__gmpn_com;
*__gmpn_perfect_square_p = *gccc::__gmpn_perfect_square_p;
*__gmpn_perfect_power_p = *gccc::__gmpn_perfect_power_p;
*__gmpn_popcount = *gccc::__gmpn_popcount;
*__gmpn_pow_1 = *gccc::__gmpn_pow_1;
*__gmpn_preinv_mod_1 = *gccc::__gmpn_preinv_mod_1;
*__gmpn_random = *gccc::__gmpn_random;
*__gmpn_random2 = *gccc::__gmpn_random2;
*__gmpn_rshift = *gccc::__gmpn_rshift;
*__gmpn_scan0 = *gccc::__gmpn_scan0;
*__gmpn_scan1 = *gccc::__gmpn_scan1;
*__gmpn_set_str = *gccc::__gmpn_set_str;
*__gmpn_sqrtrem = *gccc::__gmpn_sqrtrem;
*__gmpn_sub = *gccc::__gmpn_sub;
*__gmpn_sub_1 = *gccc::__gmpn_sub_1;
*__gmpn_sub_n = *gccc::__gmpn_sub_n;
*__gmpn_submul_1 = *gccc::__gmpn_submul_1;
*__gmpn_tdiv_qr = *gccc::__gmpn_tdiv_qr;
*__gmpn_and_n = *gccc::__gmpn_and_n;
*__gmpn_andn_n = *gccc::__gmpn_andn_n;
*__gmpn_nand_n = *gccc::__gmpn_nand_n;
*__gmpn_ior_n = *gccc::__gmpn_ior_n;
*__gmpn_iorn_n = *gccc::__gmpn_iorn_n;
*__gmpn_nior_n = *gccc::__gmpn_nior_n;
*__gmpn_xor_n = *gccc::__gmpn_xor_n;
*__gmpn_xnor_n = *gccc::__gmpn_xnor_n;
*__gmpn_copyi = *gccc::__gmpn_copyi;
*__gmpn_copyd = *gccc::__gmpn_copyd;
*__gmpn_zero = *gccc::__gmpn_zero;
*shwi_to_double_int = *gccc::shwi_to_double_int;
*uhwi_to_double_int = *gccc::uhwi_to_double_int;
*double_int_to_shwi = *gccc::double_int_to_shwi;
*double_int_to_uhwi = *gccc::double_int_to_uhwi;
*double_int_fits_in_hwi_p = *gccc::double_int_fits_in_hwi_p;
*double_int_fits_in_shwi_p = *gccc::double_int_fits_in_shwi_p;
*double_int_fits_in_uhwi_p = *gccc::double_int_fits_in_uhwi_p;
*double_int_mul = *gccc::double_int_mul;
*double_int_mul_with_sign = *gccc::double_int_mul_with_sign;
*double_int_add = *gccc::double_int_add;
*double_int_sub = *gccc::double_int_sub;
*double_int_neg = *gccc::double_int_neg;
*double_int_div = *gccc::double_int_div;
*double_int_sdiv = *gccc::double_int_sdiv;
*double_int_udiv = *gccc::double_int_udiv;
*double_int_mod = *gccc::double_int_mod;
*double_int_smod = *gccc::double_int_smod;
*double_int_umod = *gccc::double_int_umod;
*double_int_divmod = *gccc::double_int_divmod;
*double_int_sdivmod = *gccc::double_int_sdivmod;
*double_int_udivmod = *gccc::double_int_udivmod;
*double_int_setbit = *gccc::double_int_setbit;
*double_int_ctz = *gccc::double_int_ctz;
*double_int_not = *gccc::double_int_not;
*double_int_ior = *gccc::double_int_ior;
*double_int_and = *gccc::double_int_and;
*double_int_and_not = *gccc::double_int_and_not;
*double_int_xor = *gccc::double_int_xor;
*double_int_lshift = *gccc::double_int_lshift;
*double_int_rshift = *gccc::double_int_rshift;
*double_int_lrotate = *gccc::double_int_lrotate;
*double_int_rrotate = *gccc::double_int_rrotate;
*double_int_negative_p = *gccc::double_int_negative_p;
*double_int_cmp = *gccc::double_int_cmp;
*double_int_scmp = *gccc::double_int_scmp;
*double_int_ucmp = *gccc::double_int_ucmp;
*double_int_max = *gccc::double_int_max;
*double_int_smax = *gccc::double_int_smax;
*double_int_umax = *gccc::double_int_umax;
*double_int_min = *gccc::double_int_min;
*double_int_smin = *gccc::double_int_smin;
*double_int_umin = *gccc::double_int_umin;
*dump_double_int = *gccc::dump_double_int;
*double_int_ext = *gccc::double_int_ext;
*double_int_sext = *gccc::double_int_sext;
*double_int_zext = *gccc::double_int_zext;
*double_int_mask = *gccc::double_int_mask;
*double_int_zero_p = *gccc::double_int_zero_p;
*double_int_one_p = *gccc::double_int_one_p;
*double_int_minus_one_p = *gccc::double_int_minus_one_p;
*double_int_equal_p = *gccc::double_int_equal_p;
*add_double_with_sign = *gccc::add_double_with_sign;
*neg_double = *gccc::neg_double;
*mul_double_with_sign = *gccc::mul_double_with_sign;
*lshift_double = *gccc::lshift_double;
*rshift_double = *gccc::rshift_double;
*div_and_round_double = *gccc::div_and_round_double;
*mpz_set_double_int = *gccc::mpz_set_double_int;
*mpz_get_double_int = *gccc::mpz_get_double_int;
*real_arithmetic = *gccc::real_arithmetic;
*real_compare = *gccc::real_compare;
*real_isinf = *gccc::real_isinf;
*real_isnan = *gccc::real_isnan;
*real_isfinite = *gccc::real_isfinite;
*real_isneg = *gccc::real_isneg;
*real_isnegzero = *gccc::real_isnegzero;
*real_identical = *gccc::real_identical;
*real_convert = *gccc::real_convert;
*exact_real_truncate = *gccc::exact_real_truncate;
*real_to_decimal = *gccc::real_to_decimal;
*real_to_decimal_for_mode = *gccc::real_to_decimal_for_mode;
*real_to_hexadecimal = *gccc::real_to_hexadecimal;
*real_to_integer = *gccc::real_to_integer;
*real_to_integer2 = *gccc::real_to_integer2;
*real_from_string = *gccc::real_from_string;
*real_from_string3 = *gccc::real_from_string3;
*real_from_integer = *gccc::real_from_integer;
*real_to_target_fmt = *gccc::real_to_target_fmt;
*real_to_target = *gccc::real_to_target;
*real_from_target_fmt = *gccc::real_from_target_fmt;
*real_from_target = *gccc::real_from_target;
*real_inf = *gccc::real_inf;
*real_nan = *gccc::real_nan;
*real_maxval = *gccc::real_maxval;
*real_2expN = *gccc::real_2expN;
*real_hash = *gccc::real_hash;
*real_value_truncate = *gccc::real_value_truncate;
*real_value_negate = *gccc::real_value_negate;
*real_value_abs = *gccc::real_value_abs;
*significand_size = *gccc::significand_size;
*real_from_string2 = *gccc::real_from_string2;
*real_exponent = *gccc::real_exponent;
*real_ldexp = *gccc::real_ldexp;
*dconst_e_ptr = *gccc::dconst_e_ptr;
*dconst_third_ptr = *gccc::dconst_third_ptr;
*dconst_sqrt2_ptr = *gccc::dconst_sqrt2_ptr;
*real_value_from_int_cst = *gccc::real_value_from_int_cst;
*const_double_from_real_value = *gccc::const_double_from_real_value;
*exact_real_inverse = *gccc::exact_real_inverse;
*real_can_shorten_arithmetic = *gccc::real_can_shorten_arithmetic;
*build_real = *gccc::build_real;
*real_sqrt = *gccc::real_sqrt;
*real_powi = *gccc::real_powi;
*real_trunc = *gccc::real_trunc;
*real_floor = *gccc::real_floor;
*real_ceil = *gccc::real_ceil;
*real_round = *gccc::real_round;
*real_copysign = *gccc::real_copysign;
*real_isinteger = *gccc::real_isinteger;
*get_max_float = *gccc::get_max_float;
*const_fixed_from_fixed_value = *gccc::const_fixed_from_fixed_value;
*fixed_from_string = *gccc::fixed_from_string;
*build_fixed = *gccc::build_fixed;
*fixed_convert = *gccc::fixed_convert;
*fixed_convert_from_int = *gccc::fixed_convert_from_int;
*fixed_convert_from_real = *gccc::fixed_convert_from_real;
*real_convert_from_fixed = *gccc::real_convert_from_fixed;
*fixed_identical = *gccc::fixed_identical;
*fixed_hash = *gccc::fixed_hash;
*fixed_to_decimal = *gccc::fixed_to_decimal;
*fixed_arithmetic = *gccc::fixed_arithmetic;
*fixed_compare = *gccc::fixed_compare;
*fixed_isneg = *gccc::fixed_isneg;
*new_alias_set = *gccc::new_alias_set;
*get_alias_set = *gccc::get_alias_set;
*get_deref_alias_set = *gccc::get_deref_alias_set;
*get_varargs_alias_set = *gccc::get_varargs_alias_set;
*get_frame_alias_set = *gccc::get_frame_alias_set;
*component_uses_parent_alias_set = *gccc::component_uses_parent_alias_set;
*alias_set_subset_of = *gccc::alias_set_subset_of;
*record_alias_subset = *gccc::record_alias_subset;
*record_component_aliases = *gccc::record_component_aliases;
*alias_sets_conflict_p = *gccc::alias_sets_conflict_p;
*alias_sets_must_conflict_p = *gccc::alias_sets_must_conflict_p;
*objects_must_conflict_p = *gccc::objects_must_conflict_p;
*nonoverlapping_memrefs_p = *gccc::nonoverlapping_memrefs_p;
*cl_optimization_save = *gccc::cl_optimization_save;
*cl_optimization_restore = *gccc::cl_optimization_restore;
*cl_optimization_print = *gccc::cl_optimization_print;
*cl_target_option_save = *gccc::cl_target_option_save;
*cl_target_option_restore = *gccc::cl_target_option_restore;
*cl_target_option_print = *gccc::cl_target_option_print;
*strip_off_ending = *gccc::strip_off_ending;
*base_of_path = *gccc::base_of_path;
*fast_math_flags_set_p = *gccc::fast_math_flags_set_p;
*fast_math_flags_struct_set_p = *gccc::fast_math_flags_struct_set_p;
*set_Wstrict_aliasing = *gccc::set_Wstrict_aliasing;
*VEC_alias_pair_base_length = *gccc::VEC_alias_pair_base_length;
*VEC_alias_pair_base_last = *gccc::VEC_alias_pair_base_last;
*VEC_alias_pair_base_index = *gccc::VEC_alias_pair_base_index;
*VEC_alias_pair_base_iterate = *gccc::VEC_alias_pair_base_iterate;
*VEC_alias_pair_base_embedded_size = *gccc::VEC_alias_pair_base_embedded_size;
*VEC_alias_pair_base_embedded_init = *gccc::VEC_alias_pair_base_embedded_init;
*VEC_alias_pair_base_space = *gccc::VEC_alias_pair_base_space;
*VEC_alias_pair_base_splice = *gccc::VEC_alias_pair_base_splice;
*VEC_alias_pair_base_quick_push = *gccc::VEC_alias_pair_base_quick_push;
*VEC_alias_pair_base_pop = *gccc::VEC_alias_pair_base_pop;
*VEC_alias_pair_base_truncate = *gccc::VEC_alias_pair_base_truncate;
*VEC_alias_pair_base_replace = *gccc::VEC_alias_pair_base_replace;
*VEC_alias_pair_base_quick_insert = *gccc::VEC_alias_pair_base_quick_insert;
*VEC_alias_pair_base_ordered_remove = *gccc::VEC_alias_pair_base_ordered_remove;
*VEC_alias_pair_base_unordered_remove = *gccc::VEC_alias_pair_base_unordered_remove;
*VEC_alias_pair_base_block_remove = *gccc::VEC_alias_pair_base_block_remove;
*VEC_alias_pair_base_address = *gccc::VEC_alias_pair_base_address;
*VEC_alias_pair_base_lower_bound = *gccc::VEC_alias_pair_base_lower_bound;
*VEC_alias_pair_gc_alloc = *gccc::VEC_alias_pair_gc_alloc;
*VEC_alias_pair_gc_copy = *gccc::VEC_alias_pair_gc_copy;
*VEC_alias_pair_gc_free = *gccc::VEC_alias_pair_gc_free;
*VEC_alias_pair_gc_reserve = *gccc::VEC_alias_pair_gc_reserve;
*VEC_alias_pair_gc_reserve_exact = *gccc::VEC_alias_pair_gc_reserve_exact;
*VEC_alias_pair_gc_safe_grow = *gccc::VEC_alias_pair_gc_safe_grow;
*VEC_alias_pair_gc_safe_grow_cleared = *gccc::VEC_alias_pair_gc_safe_grow_cleared;
*VEC_alias_pair_gc_safe_splice = *gccc::VEC_alias_pair_gc_safe_splice;
*VEC_alias_pair_gc_safe_push = *gccc::VEC_alias_pair_gc_safe_push;
*VEC_alias_pair_gc_safe_insert = *gccc::VEC_alias_pair_gc_safe_insert;
*_obstack_newchunk = *gccc::_obstack_newchunk;
*_obstack_free = *gccc::_obstack_free;
*_obstack_begin = *gccc::_obstack_begin;
*_obstack_begin_1 = *gccc::_obstack_begin_1;
*_obstack_memory_used = *gccc::_obstack_memory_used;
*obstack_init = *gccc::obstack_init;
*obstack_alloc = *gccc::obstack_alloc;
*obstack_copy = *gccc::obstack_copy;
*obstack_copy0 = *gccc::obstack_copy0;
*obstack_free = *gccc::obstack_free;
*obstack_blank = *gccc::obstack_blank;
*obstack_grow = *gccc::obstack_grow;
*obstack_grow0 = *gccc::obstack_grow0;
*obstack_1grow = *gccc::obstack_1grow;
*obstack_ptr_grow = *gccc::obstack_ptr_grow;
*obstack_int_grow = *gccc::obstack_int_grow;
*obstack_finish = *gccc::obstack_finish;
*obstack_object_size = *gccc::obstack_object_size;
*obstack_room = *gccc::obstack_room;
*obstack_make_room = *gccc::obstack_make_room;
*obstack_1grow_fast = *gccc::obstack_1grow_fast;
*obstack_ptr_grow_fast = *gccc::obstack_ptr_grow_fast;
*obstack_int_grow_fast = *gccc::obstack_int_grow_fast;
*obstack_blank_fast = *gccc::obstack_blank_fast;
*obstack_base = *gccc::obstack_base;
*obstack_next_free = *gccc::obstack_next_free;
*obstack_alignment_mask = *gccc::obstack_alignment_mask;
*obstack_chunk_size = *gccc::obstack_chunk_size;
*obstack_memory_used = *gccc::obstack_memory_used;
*ht_create = *gccc::ht_create;
*ht_destroy = *gccc::ht_destroy;
*ht_lookup = *gccc::ht_lookup;
*ht_lookup_with_hash = *gccc::ht_lookup_with_hash;
*ht_forall = *gccc::ht_forall;
*ht_purge = *gccc::ht_purge;
*ht_load = *gccc::ht_load;
*ht_dump_statistics = *gccc::ht_dump_statistics;
*VEC_constructor_elt_base_length = *gccc::VEC_constructor_elt_base_length;
*VEC_constructor_elt_base_last = *gccc::VEC_constructor_elt_base_last;
*VEC_constructor_elt_base_index = *gccc::VEC_constructor_elt_base_index;
*VEC_constructor_elt_base_iterate = *gccc::VEC_constructor_elt_base_iterate;
*VEC_constructor_elt_base_embedded_size = *gccc::VEC_constructor_elt_base_embedded_size;
*VEC_constructor_elt_base_embedded_init = *gccc::VEC_constructor_elt_base_embedded_init;
*VEC_constructor_elt_base_space = *gccc::VEC_constructor_elt_base_space;
*VEC_constructor_elt_base_splice = *gccc::VEC_constructor_elt_base_splice;
*VEC_constructor_elt_base_quick_push = *gccc::VEC_constructor_elt_base_quick_push;
*VEC_constructor_elt_base_pop = *gccc::VEC_constructor_elt_base_pop;
*VEC_constructor_elt_base_truncate = *gccc::VEC_constructor_elt_base_truncate;
*VEC_constructor_elt_base_replace = *gccc::VEC_constructor_elt_base_replace;
*VEC_constructor_elt_base_quick_insert = *gccc::VEC_constructor_elt_base_quick_insert;
*VEC_constructor_elt_base_ordered_remove = *gccc::VEC_constructor_elt_base_ordered_remove;
*VEC_constructor_elt_base_unordered_remove = *gccc::VEC_constructor_elt_base_unordered_remove;
*VEC_constructor_elt_base_block_remove = *gccc::VEC_constructor_elt_base_block_remove;
*VEC_constructor_elt_base_address = *gccc::VEC_constructor_elt_base_address;
*VEC_constructor_elt_base_lower_bound = *gccc::VEC_constructor_elt_base_lower_bound;
*VEC_constructor_elt_gc_alloc = *gccc::VEC_constructor_elt_gc_alloc;
*VEC_constructor_elt_gc_copy = *gccc::VEC_constructor_elt_gc_copy;
*VEC_constructor_elt_gc_free = *gccc::VEC_constructor_elt_gc_free;
*VEC_constructor_elt_gc_reserve = *gccc::VEC_constructor_elt_gc_reserve;
*VEC_constructor_elt_gc_reserve_exact = *gccc::VEC_constructor_elt_gc_reserve_exact;
*VEC_constructor_elt_gc_safe_grow = *gccc::VEC_constructor_elt_gc_safe_grow;
*VEC_constructor_elt_gc_safe_grow_cleared = *gccc::VEC_constructor_elt_gc_safe_grow_cleared;
*VEC_constructor_elt_gc_safe_splice = *gccc::VEC_constructor_elt_gc_safe_splice;
*VEC_constructor_elt_gc_safe_push = *gccc::VEC_constructor_elt_gc_safe_push;
*VEC_constructor_elt_gc_safe_insert = *gccc::VEC_constructor_elt_gc_safe_insert;
*protected_set_expr_location = *gccc::protected_set_expr_location;
*vector_type_mode = *gccc::vector_type_mode;
*decl_value_expr_lookup = *gccc::decl_value_expr_lookup;
*decl_value_expr_insert = *gccc::decl_value_expr_insert;
*decl_debug_expr_lookup = *gccc::decl_debug_expr_lookup;
*decl_debug_expr_insert = *gccc::decl_debug_expr_insert;
*decl_init_priority_lookup = *gccc::decl_init_priority_lookup;
*decl_fini_priority_lookup = *gccc::decl_fini_priority_lookup;
*decl_init_priority_insert = *gccc::decl_init_priority_insert;
*decl_fini_priority_insert = *gccc::decl_fini_priority_insert;
*build_optimization_node = *gccc::build_optimization_node;
*build_target_option_node = *gccc::build_target_option_node;
*decl_assembler_name = *gccc::decl_assembler_name;
*decl_assembler_name_equal = *gccc::decl_assembler_name_equal;
*decl_assembler_name_hash = *gccc::decl_assembler_name_hash;
*tree_size = *gccc::tree_size;
*tree_code_size = *gccc::tree_code_size;
*make_node_stat = *gccc::make_node_stat;
*copy_node_stat = *gccc::copy_node_stat;
*copy_list = *gccc::copy_list;
*make_tree_binfo_stat = *gccc::make_tree_binfo_stat;
*make_tree_vec_stat = *gccc::make_tree_vec_stat;
*get_identifier = *gccc::get_identifier;
*get_identifier_with_length = *gccc::get_identifier_with_length;
*maybe_get_identifier = *gccc::maybe_get_identifier;
*build_nt = *gccc::build_nt;
*build_nt_call_vec = *gccc::build_nt_call_vec;
*build0_stat = *gccc::build0_stat;
*build1_stat = *gccc::build1_stat;
*build2_stat = *gccc::build2_stat;
*build3_stat = *gccc::build3_stat;
*build4_stat = *gccc::build4_stat;
*build5_stat = *gccc::build5_stat;
*build6_stat = *gccc::build6_stat;
*build1_stat_loc = *gccc::build1_stat_loc;
*build2_stat_loc = *gccc::build2_stat_loc;
*build3_stat_loc = *gccc::build3_stat_loc;
*build4_stat_loc = *gccc::build4_stat_loc;
*build5_stat_loc = *gccc::build5_stat_loc;
*build6_stat_loc = *gccc::build6_stat_loc;
*build_var_debug_value_stat = *gccc::build_var_debug_value_stat;
*tree_to_double_int = *gccc::tree_to_double_int;
*double_int_to_tree = *gccc::double_int_to_tree;
*double_int_fits_to_tree_p = *gccc::double_int_fits_to_tree_p;
*force_fit_type_double = *gccc::force_fit_type_double;
*build_int_cstu = *gccc::build_int_cstu;
*build_int_cst = *gccc::build_int_cst;
*build_int_cst_type = *gccc::build_int_cst_type;
*build_int_cst_wide = *gccc::build_int_cst_wide;
*build_vector = *gccc::build_vector;
*build_vector_from_ctor = *gccc::build_vector_from_ctor;
*build_vector_from_val = *gccc::build_vector_from_val;
*build_constructor = *gccc::build_constructor;
*build_constructor_single = *gccc::build_constructor_single;
*build_constructor_from_list = *gccc::build_constructor_from_list;
*build_real_from_int_cst = *gccc::build_real_from_int_cst;
*build_complex = *gccc::build_complex;
*build_one_cst = *gccc::build_one_cst;
*build_zero_cst = *gccc::build_zero_cst;
*build_string = *gccc::build_string;
*build_tree_list_stat = *gccc::build_tree_list_stat;
*build_tree_list_vec_stat = *gccc::build_tree_list_vec_stat;
*build_decl_stat = *gccc::build_decl_stat;
*build_fn_decl = *gccc::build_fn_decl;
*build_translation_unit_decl = *gccc::build_translation_unit_decl;
*build_block = *gccc::build_block;
*build_empty_stmt = *gccc::build_empty_stmt;
*build_omp_clause = *gccc::build_omp_clause;
*build_vl_exp_stat = *gccc::build_vl_exp_stat;
*build_call_nary = *gccc::build_call_nary;
*build_call_valist = *gccc::build_call_valist;
*build_call_array_loc = *gccc::build_call_array_loc;
*build_call_vec = *gccc::build_call_vec;
*make_signed_type = *gccc::make_signed_type;
*make_unsigned_type = *gccc::make_unsigned_type;
*signed_or_unsigned_type_for = *gccc::signed_or_unsigned_type_for;
*signed_type_for = *gccc::signed_type_for;
*unsigned_type_for = *gccc::unsigned_type_for;
*initialize_sizetypes = *gccc::initialize_sizetypes;
*set_sizetype = *gccc::set_sizetype;
*fixup_unsigned_type = *gccc::fixup_unsigned_type;
*build_pointer_type_for_mode = *gccc::build_pointer_type_for_mode;
*build_pointer_type = *gccc::build_pointer_type;
*build_reference_type_for_mode = *gccc::build_reference_type_for_mode;
*build_reference_type = *gccc::build_reference_type;
*build_vector_type_for_mode = *gccc::build_vector_type_for_mode;
*build_vector_type = *gccc::build_vector_type;
*build_opaque_vector_type = *gccc::build_opaque_vector_type;
*build_type_no_quals = *gccc::build_type_no_quals;
*build_index_type = *gccc::build_index_type;
*build_array_type = *gccc::build_array_type;
*build_nonshared_array_type = *gccc::build_nonshared_array_type;
*build_array_type_nelts = *gccc::build_array_type_nelts;
*build_function_type = *gccc::build_function_type;
*build_function_type_list = *gccc::build_function_type_list;
*build_function_type_skip_args = *gccc::build_function_type_skip_args;
*build_function_decl_skip_args = *gccc::build_function_decl_skip_args;
*build_varargs_function_type_list = *gccc::build_varargs_function_type_list;
*build_method_type_directly = *gccc::build_method_type_directly;
*build_method_type = *gccc::build_method_type;
*build_offset_type = *gccc::build_offset_type;
*build_complex_type = *gccc::build_complex_type;
*array_type_nelts = *gccc::array_type_nelts;
*in_array_bounds_p = *gccc::in_array_bounds_p;
*range_in_array_bounds_p = *gccc::range_in_array_bounds_p;
*value_member = *gccc::value_member;
*purpose_member = *gccc::purpose_member;
*vec_member = *gccc::vec_member;
*chain_index = *gccc::chain_index;
*attribute_list_equal = *gccc::attribute_list_equal;
*attribute_list_contained = *gccc::attribute_list_contained;
*tree_int_cst_equal = *gccc::tree_int_cst_equal;
*tree_int_cst_lt = *gccc::tree_int_cst_lt;
*tree_int_cst_compare = *gccc::tree_int_cst_compare;
*host_integerp = *gccc::host_integerp;
*tree_low_cst = *gccc::tree_low_cst;
*tree_int_cst_msb = *gccc::tree_int_cst_msb;
*tree_int_cst_sgn = *gccc::tree_int_cst_sgn;
*tree_int_cst_sign_bit = *gccc::tree_int_cst_sign_bit;
*tree_int_cst_min_precision = *gccc::tree_int_cst_min_precision;
*tree_expr_nonnegative_p = *gccc::tree_expr_nonnegative_p;
*tree_expr_nonnegative_warnv_p = *gccc::tree_expr_nonnegative_warnv_p;
*may_negate_without_overflow_p = *gccc::may_negate_without_overflow_p;
*strip_array_types = *gccc::strip_array_types;
*excess_precision_type = *gccc::excess_precision_type;
*make_fract_type = *gccc::make_fract_type;
*make_accum_type = *gccc::make_accum_type;
*make_tree = *gccc::make_tree;
*build_type_attribute_variant = *gccc::build_type_attribute_variant;
*build_decl_attribute_variant = *gccc::build_decl_attribute_variant;
*build_type_attribute_qual_variant = *gccc::build_type_attribute_qual_variant;
*merge_decl_attributes = *gccc::merge_decl_attributes;
*merge_type_attributes = *gccc::merge_type_attributes;
*is_attribute_p = *gccc::is_attribute_p;
*lookup_attribute = *gccc::lookup_attribute;
*remove_attribute = *gccc::remove_attribute;
*merge_attributes = *gccc::merge_attributes;
*check_qualified_type = *gccc::check_qualified_type;
*get_qualified_type = *gccc::get_qualified_type;
*build_qualified_type = *gccc::build_qualified_type;
*build_aligned_type = *gccc::build_aligned_type;
*build_distinct_type_copy = *gccc::build_distinct_type_copy;
*build_variant_type_copy = *gccc::build_variant_type_copy;
*finish_builtin_struct = *gccc::finish_builtin_struct;
*layout_type = *gccc::layout_type;
*start_record_layout = *gccc::start_record_layout;
*bit_from_pos = *gccc::bit_from_pos;
*byte_from_pos = *gccc::byte_from_pos;
*pos_from_bit = *gccc::pos_from_bit;
*normalize_offset = *gccc::normalize_offset;
*rli_size_unit_so_far = *gccc::rli_size_unit_so_far;
*rli_size_so_far = *gccc::rli_size_so_far;
*normalize_rli = *gccc::normalize_rli;
*place_field = *gccc::place_field;
*compute_record_mode = *gccc::compute_record_mode;
*finish_record_layout = *gccc::finish_record_layout;
*type_hash_canon = *gccc::type_hash_canon;
*layout_decl = *gccc::layout_decl;
*relayout_decl = *gccc::relayout_decl;
*mode_for_size_tree = *gccc::mode_for_size_tree;
*non_lvalue_loc = *gccc::non_lvalue_loc;
*convert = *gccc::convert;
*expr_align = *gccc::expr_align;
*expr_first = *gccc::expr_first;
*expr_last = *gccc::expr_last;
*size_in_bytes = *gccc::size_in_bytes;
*int_size_in_bytes = *gccc::int_size_in_bytes;
*max_int_size_in_bytes = *gccc::max_int_size_in_bytes;
*tree_expr_size = *gccc::tree_expr_size;
*bit_position = *gccc::bit_position;
*int_bit_position = *gccc::int_bit_position;
*byte_position = *gccc::byte_position;
*int_byte_position = *gccc::int_byte_position;
*size_int_kind = *gccc::size_int_kind;
*size_binop_loc = *gccc::size_binop_loc;
*size_diffop_loc = *gccc::size_diffop_loc;
*round_up_loc = *gccc::round_up_loc;
*round_down_loc = *gccc::round_down_loc;
*get_pending_sizes = *gccc::get_pending_sizes;
*put_pending_size = *gccc::put_pending_size;
*put_pending_sizes = *gccc::put_pending_sizes;
*finalize_size_functions = *gccc::finalize_size_functions;
*chainon = *gccc::chainon;
*tree_cons_stat = *gccc::tree_cons_stat;
*tree_last = *gccc::tree_last;
*nreverse = *gccc::nreverse;
*list_length = *gccc::list_length;
*fields_length = *gccc::fields_length;
*first_field = *gccc::first_field;
*initializer_zerop = *gccc::initializer_zerop;
*ctor_to_vec = *gccc::ctor_to_vec;
*categorize_ctor_elements = *gccc::categorize_ctor_elements;
*complete_ctor_at_level_p = *gccc::complete_ctor_at_level_p;
*integer_zerop = *gccc::integer_zerop;
*integer_onep = *gccc::integer_onep;
*integer_all_onesp = *gccc::integer_all_onesp;
*integer_pow2p = *gccc::integer_pow2p;
*integer_nonzerop = *gccc::integer_nonzerop;
*cst_and_fits_in_hwi = *gccc::cst_and_fits_in_hwi;
*num_ending_zeros = *gccc::num_ending_zeros;
*fixed_zerop = *gccc::fixed_zerop;
*staticp = *gccc::staticp;
*save_expr = *gccc::save_expr;
*skip_simple_arithmetic = *gccc::skip_simple_arithmetic;
*tree_node_structure = *gccc::tree_node_structure;
*contains_placeholder_p = *gccc::contains_placeholder_p;
*type_contains_placeholder_p = *gccc::type_contains_placeholder_p;
*find_placeholder_in_expr = *gccc::find_placeholder_in_expr;
*substitute_in_expr = *gccc::substitute_in_expr;
*substitute_placeholder_in_expr = *gccc::substitute_placeholder_in_expr;
*variable_size = *gccc::variable_size;
*stabilize_reference = *gccc::stabilize_reference;
*stabilize_reference_1 = *gccc::stabilize_reference_1;
*get_unwidened = *gccc::get_unwidened;
*get_narrower = *gccc::get_narrower;
*handled_component_p = *gccc::handled_component_p;
*get_inner_reference = *gccc::get_inner_reference;
*contains_packed_reference = *gccc::contains_packed_reference;
*array_ref_element_size = *gccc::array_ref_element_size;
*array_ref_low_bound = *gccc::array_ref_low_bound;
*array_ref_up_bound = *gccc::array_ref_up_bound;
*component_ref_field_offset = *gccc::component_ref_field_offset;
*get_containing_scope = *gccc::get_containing_scope;
*decl_function_context = *gccc::decl_function_context;
*decl_type_context = *gccc::decl_type_context;
*real_zerop = *gccc::real_zerop;
*function_args_iter_init = *gccc::function_args_iter_init;
*function_args_iter_cond_ptr = *gccc::function_args_iter_cond_ptr;
*function_args_iter_cond = *gccc::function_args_iter_cond;
*function_args_iter_next = *gccc::function_args_iter_next;
*inlined_function_outer_scope_p = *gccc::inlined_function_outer_scope_p;
*crc32_string = *gccc::crc32_string;
*clean_symbol_name = *gccc::clean_symbol_name;
*get_file_function_name = *gccc::get_file_function_name;
*get_callee_fndecl = *gccc::get_callee_fndecl;
*type_num_arguments = *gccc::type_num_arguments;
*associative_tree_code = *gccc::associative_tree_code;
*commutative_tree_code = *gccc::commutative_tree_code;
*commutative_ternary_tree_code = *gccc::commutative_ternary_tree_code;
*upper_bound_in_type = *gccc::upper_bound_in_type;
*lower_bound_in_type = *gccc::lower_bound_in_type;
*operand_equal_for_phi_arg_p = *gccc::operand_equal_for_phi_arg_p;
*call_expr_arg = *gccc::call_expr_arg;
*call_expr_argp = *gccc::call_expr_argp;
*create_artificial_label = *gccc::create_artificial_label;
*get_name = *gccc::get_name;
*stdarg_p = *gccc::stdarg_p;
*prototype_p = *gccc::prototype_p;
*is_typedef_decl = *gccc::is_typedef_decl;
*typedef_variant_p = *gccc::typedef_variant_p;
*auto_var_in_fn_p = *gccc::auto_var_in_fn_p;
*build_low_bits_mask = *gccc::build_low_bits_mask;
*tree_strip_nop_conversions = *gccc::tree_strip_nop_conversions;
*tree_strip_sign_nop_conversions = *gccc::tree_strip_sign_nop_conversions;
*lhd_gcc_personality = *gccc::lhd_gcc_personality;
*assign_assembler_name_if_neeeded = *gccc::assign_assembler_name_if_neeeded;
*warn_deprecated_use = *gccc::warn_deprecated_use;
*change_decl_assembler_name = *gccc::change_decl_assembler_name;
*unshare_expr = *gccc::unshare_expr;
*expand_expr_stmt = *gccc::expand_expr_stmt;
*warn_if_unused_value = *gccc::warn_if_unused_value;
*expand_label = *gccc::expand_label;
*expand_goto = *gccc::expand_goto;
*expand_stack_save = *gccc::expand_stack_save;
*expand_stack_restore = *gccc::expand_stack_restore;
*expand_return = *gccc::expand_return;
*using_eh_for_cleanups = *gccc::using_eh_for_cleanups;
*native_encode_expr = *gccc::native_encode_expr;
*native_interpret_expr = *gccc::native_interpret_expr;
*fold = *gccc::fold;
*fold_unary_loc = *gccc::fold_unary_loc;
*fold_unary_ignore_overflow_loc = *gccc::fold_unary_ignore_overflow_loc;
*fold_binary_loc = *gccc::fold_binary_loc;
*fold_ternary_loc = *gccc::fold_ternary_loc;
*fold_build1_stat_loc = *gccc::fold_build1_stat_loc;
*fold_build2_stat_loc = *gccc::fold_build2_stat_loc;
*fold_build3_stat_loc = *gccc::fold_build3_stat_loc;
*fold_build1_initializer_loc = *gccc::fold_build1_initializer_loc;
*fold_build2_initializer_loc = *gccc::fold_build2_initializer_loc;
*fold_build3_initializer_loc = *gccc::fold_build3_initializer_loc;
*fold_build_call_array_loc = *gccc::fold_build_call_array_loc;
*fold_build_call_array_initializer_loc = *gccc::fold_build_call_array_initializer_loc;
*fold_convertible_p = *gccc::fold_convertible_p;
*fold_convert_loc = *gccc::fold_convert_loc;
*fold_single_bit_test = *gccc::fold_single_bit_test;
*fold_ignored_result = *gccc::fold_ignored_result;
*fold_abs_const = *gccc::fold_abs_const;
*fold_indirect_ref_1 = *gccc::fold_indirect_ref_1;
*fold_defer_overflow_warnings = *gccc::fold_defer_overflow_warnings;
*fold_undefer_overflow_warnings = *gccc::fold_undefer_overflow_warnings;
*fold_undefer_and_ignore_overflow_warnings = *gccc::fold_undefer_and_ignore_overflow_warnings;
*fold_deferring_overflow_warnings_p = *gccc::fold_deferring_overflow_warnings_p;
*fold_fma = *gccc::fold_fma;
*operand_equal_p = *gccc::operand_equal_p;
*multiple_of_p = *gccc::multiple_of_p;
*omit_one_operand_loc = *gccc::omit_one_operand_loc;
*omit_two_operands_loc = *gccc::omit_two_operands_loc;
*invert_truthvalue_loc = *gccc::invert_truthvalue_loc;
*fold_truth_not_expr = *gccc::fold_truth_not_expr;
*fold_unary_to_constant = *gccc::fold_unary_to_constant;
*fold_binary_to_constant = *gccc::fold_binary_to_constant;
*fold_read_from_constant_string = *gccc::fold_read_from_constant_string;
*int_const_binop = *gccc::int_const_binop;
*build_fold_addr_expr_loc = *gccc::build_fold_addr_expr_loc;
*build_fold_addr_expr_with_type_loc = *gccc::build_fold_addr_expr_with_type_loc;
*fold_build_cleanup_point_expr = *gccc::fold_build_cleanup_point_expr;
*fold_strip_sign_ops = *gccc::fold_strip_sign_ops;
*build_fold_indirect_ref_loc = *gccc::build_fold_indirect_ref_loc;
*fold_indirect_ref_loc = *gccc::fold_indirect_ref_loc;
*build_simple_mem_ref_loc = *gccc::build_simple_mem_ref_loc;
*mem_ref_offset = *gccc::mem_ref_offset;
*reference_alias_ptr_type = *gccc::reference_alias_ptr_type;
*constant_boolean_node = *gccc::constant_boolean_node;
*div_if_zero_remainder = *gccc::div_if_zero_remainder;
*tree_swap_operands_p = *gccc::tree_swap_operands_p;
*swap_tree_comparison = *gccc::swap_tree_comparison;
*ptr_difference_const = *gccc::ptr_difference_const;
*invert_tree_comparison = *gccc::invert_tree_comparison;
*tree_expr_nonzero_p = *gccc::tree_expr_nonzero_p;
*tree_unary_nonzero_warnv_p = *gccc::tree_unary_nonzero_warnv_p;
*tree_binary_nonzero_warnv_p = *gccc::tree_binary_nonzero_warnv_p;
*tree_single_nonzero_warnv_p = *gccc::tree_single_nonzero_warnv_p;
*tree_unary_nonnegative_warnv_p = *gccc::tree_unary_nonnegative_warnv_p;
*tree_binary_nonnegative_warnv_p = *gccc::tree_binary_nonnegative_warnv_p;
*tree_single_nonnegative_warnv_p = *gccc::tree_single_nonnegative_warnv_p;
*tree_invalid_nonnegative_warnv_p = *gccc::tree_invalid_nonnegative_warnv_p;
*tree_call_nonnegative_warnv_p = *gccc::tree_call_nonnegative_warnv_p;
*tree_expr_nonzero_warnv_p = *gccc::tree_expr_nonzero_warnv_p;
*fold_real_zero_addition_p = *gccc::fold_real_zero_addition_p;
*combine_comparisons = *gccc::combine_comparisons;
*debug_fold_checksum = *gccc::debug_fold_checksum;
*truth_value_p = *gccc::truth_value_p;
*fold_call_expr = *gccc::fold_call_expr;
*fold_builtin_fputs = *gccc::fold_builtin_fputs;
*fold_builtin_strcpy = *gccc::fold_builtin_strcpy;
*fold_builtin_strncpy = *gccc::fold_builtin_strncpy;
*fold_builtin_memory_chk = *gccc::fold_builtin_memory_chk;
*fold_builtin_stxcpy_chk = *gccc::fold_builtin_stxcpy_chk;
*fold_builtin_strncpy_chk = *gccc::fold_builtin_strncpy_chk;
*fold_builtin_snprintf_chk = *gccc::fold_builtin_snprintf_chk;
*fold_builtin_next_arg = *gccc::fold_builtin_next_arg;
*builtin_mathfn_code = *gccc::builtin_mathfn_code;
*fold_builtin_call_array = *gccc::fold_builtin_call_array;
*build_call_expr_loc_array = *gccc::build_call_expr_loc_array;
*build_call_expr_loc_vec = *gccc::build_call_expr_loc_vec;
*build_call_expr_loc = *gccc::build_call_expr_loc;
*build_call_expr = *gccc::build_call_expr;
*mathfn_built_in = *gccc::mathfn_built_in;
*c_strlen = *gccc::c_strlen;
*std_gimplify_va_arg_expr = *gccc::std_gimplify_va_arg_expr;
*build_va_arg_indirect_ref = *gccc::build_va_arg_indirect_ref;
*build_string_literal = *gccc::build_string_literal;
*validate_arglist = *gccc::validate_arglist;
*builtin_memset_read_str = *gccc::builtin_memset_read_str;
*can_trust_pointer_alignment = *gccc::can_trust_pointer_alignment;
*get_pointer_alignment = *gccc::get_pointer_alignment;
*is_builtin_name = *gccc::is_builtin_name;
*is_builtin_fn = *gccc::is_builtin_fn;
*get_object_alignment = *gccc::get_object_alignment;
*fold_call_stmt = *gccc::fold_call_stmt;
*gimple_fold_builtin_snprintf_chk = *gccc::gimple_fold_builtin_snprintf_chk;
*make_range = *gccc::make_range;
*build_range_check = *gccc::build_range_check;
*merge_ranges = *gccc::merge_ranges;
*set_builtin_user_assembler_name = *gccc::set_builtin_user_assembler_name;
*is_simple_builtin = *gccc::is_simple_builtin;
*is_inexpensive_builtin = *gccc::is_inexpensive_builtin;
*strip_float_extensions = *gccc::strip_float_extensions;
*really_constant_p = *gccc::really_constant_p;
*decl_address_invariant_p = *gccc::decl_address_invariant_p;
*decl_address_ip_invariant_p = *gccc::decl_address_ip_invariant_p;
*int_fits_type_p = *gccc::int_fits_type_p;
*get_type_static_bounds = *gccc::get_type_static_bounds;
*variably_modified_type_p = *gccc::variably_modified_type_p;
*tree_log2 = *gccc::tree_log2;
*tree_floor_log2 = *gccc::tree_floor_log2;
*simple_cst_equal = *gccc::simple_cst_equal;
*iterative_hash_expr = *gccc::iterative_hash_expr;
*iterative_hash_exprs_commutative = *gccc::iterative_hash_exprs_commutative;
*iterative_hash_host_wide_int = *gccc::iterative_hash_host_wide_int;
*iterative_hash_hashval_t = *gccc::iterative_hash_hashval_t;
*compare_tree_int = *gccc::compare_tree_int;
*type_list_equal = *gccc::type_list_equal;
*chain_member = *gccc::chain_member;
*type_hash_lookup = *gccc::type_hash_lookup;
*type_hash_add = *gccc::type_hash_add;
*simple_cst_list_equal = *gccc::simple_cst_list_equal;
*dump_tree_statistics = *gccc::dump_tree_statistics;
*recompute_tree_invariant_for_addr_expr = *gccc::recompute_tree_invariant_for_addr_expr;
*needs_to_live_in_memory = *gccc::needs_to_live_in_memory;
*reconstruct_complex_type = *gccc::reconstruct_complex_type;
*real_onep = *gccc::real_onep;
*real_twop = *gccc::real_twop;
*real_minus_onep = *gccc::real_minus_onep;
*init_ttree = *gccc::init_ttree;
*build_common_tree_nodes = *gccc::build_common_tree_nodes;
*build_common_tree_nodes_2 = *gccc::build_common_tree_nodes_2;
*build_common_builtin_nodes = *gccc::build_common_builtin_nodes;
*build_nonstandard_integer_type = *gccc::build_nonstandard_integer_type;
*build_range_type = *gccc::build_range_type;
*build_nonshared_range_type = *gccc::build_nonshared_range_type;
*subrange_type_for_debug_p = *gccc::subrange_type_for_debug_p;
*int_cst_value = *gccc::int_cst_value;
*widest_int_cst_value = *gccc::widest_int_cst_value;
*fields_compatible_p = *gccc::fields_compatible_p;
*find_compatible_field = *gccc::find_compatible_field;
*block_nonartificial_location = *gccc::block_nonartificial_location;
*tree_nonartificial_location = *gccc::tree_nonartificial_location;
*block_ultimate_origin = *gccc::block_ultimate_origin;
*get_binfo_at_offset = *gccc::get_binfo_at_offset;
*build_addr = *gccc::build_addr;
*expand_main_function = *gccc::expand_main_function;
*expand_function_end = *gccc::expand_function_end;
*expand_function_start = *gccc::expand_function_start;
*stack_protect_prologue = *gccc::stack_protect_prologue;
*stack_protect_epilogue = *gccc::stack_protect_epilogue;
*init_dummy_function_start = *gccc::init_dummy_function_start;
*expand_dummy_function_end = *gccc::expand_dummy_function_end;
*init_function_for_compilation = *gccc::init_function_for_compilation;
*allocate_struct_function = *gccc::allocate_struct_function;
*push_struct_function = *gccc::push_struct_function;
*init_function_start = *gccc::init_function_start;
*use_register_for_decl = *gccc::use_register_for_decl;
*generate_setjmp_warnings = *gccc::generate_setjmp_warnings;
*init_temp_slots = *gccc::init_temp_slots;
*free_temp_slots = *gccc::free_temp_slots;
*pop_temp_slots = *gccc::pop_temp_slots;
*push_temp_slots = *gccc::push_temp_slots;
*preserve_temp_slots = *gccc::preserve_temp_slots;
*aggregate_value_p = *gccc::aggregate_value_p;
*push_function_context = *gccc::push_function_context;
*pop_function_context = *gccc::pop_function_context;
*gimplify_parameters = *gccc::gimplify_parameters;
*print_rtl = *gccc::print_rtl;
*debug_tree = *gccc::debug_tree;
*debug_vec_tree = *gccc::debug_vec_tree;
*dump_addr = *gccc::dump_addr;
*print_node = *gccc::print_node;
*print_vec_tree = *gccc::print_vec_tree;
*print_node_brief = *gccc::print_node_brief;
*indent_to = *gccc::indent_to;
*debug_find_tree = *gccc::debug_find_tree;
*unsave_expr_now = *gccc::unsave_expr_now;
*build_duplicate_type = *gccc::build_duplicate_type;
*flags_from_decl_or_type = *gccc::flags_from_decl_or_type;
*call_expr_flags = *gccc::call_expr_flags;
*setjmp_call_p = *gccc::setjmp_call_p;
*gimple_alloca_call_p = *gccc::gimple_alloca_call_p;
*alloca_call_p = *gccc::alloca_call_p;
*must_pass_in_stack_var_size = *gccc::must_pass_in_stack_var_size;
*must_pass_in_stack_var_size_or_pad = *gccc::must_pass_in_stack_var_size_or_pad;
*lookup_attribute_spec = *gccc::lookup_attribute_spec;
*decl_attributes = *gccc::decl_attributes;
*set_decl_abstract_flags = *gccc::set_decl_abstract_flags;
*set_decl_origin_self = *gccc::set_decl_origin_self;
*set_min_and_max_values_for_integral_type = *gccc::set_min_and_max_values_for_integral_type;
*fixup_signed_type = *gccc::fixup_signed_type;
*internal_reference_types = *gccc::internal_reference_types;
*update_alignment_for_field = *gccc::update_alignment_for_field;
*tree_output_constant_def = *gccc::tree_output_constant_def;
*make_decl_rtl = *gccc::make_decl_rtl;
*make_decl_rtl_for_debug = *gccc::make_decl_rtl_for_debug;
*make_decl_one_only = *gccc::make_decl_one_only;
*supports_one_only = *gccc::supports_one_only;
*resolve_unique_section = *gccc::resolve_unique_section;
*mark_referenced = *gccc::mark_referenced;
*mark_decl_referenced = *gccc::mark_decl_referenced;
*notice_global_symbol = *gccc::notice_global_symbol;
*set_user_assembler_name = *gccc::set_user_assembler_name;
*process_pending_assemble_externals = *gccc::process_pending_assemble_externals;
*finish_aliases_1 = *gccc::finish_aliases_1;
*finish_aliases_2 = *gccc::finish_aliases_2;
*remove_unreachable_alias_pairs = *gccc::remove_unreachable_alias_pairs;
*decl_replaceable_p = *gccc::decl_replaceable_p;
*decl_binds_to_current_def_p = *gccc::decl_binds_to_current_def_p;
*symbol_alias_set_destroy = *gccc::symbol_alias_set_destroy;
*symbol_alias_set_contains = *gccc::symbol_alias_set_contains;
*propagate_aliases_backward = *gccc::propagate_aliases_backward;
*expand_computed_goto = *gccc::expand_computed_goto;
*parse_output_constraint = *gccc::parse_output_constraint;
*parse_input_constraint = *gccc::parse_input_constraint;
*expand_asm_stmt = *gccc::expand_asm_stmt;
*resolve_asm_operand_names = *gccc::resolve_asm_operand_names;
*expand_switch_using_bit_tests_p = *gccc::expand_switch_using_bit_tests_p;
*expand_case = *gccc::expand_case;
*expand_decl = *gccc::expand_decl;
*dwarf2out_cfi_label = *gccc::dwarf2out_cfi_label;
*dwarf2out_def_cfa = *gccc::dwarf2out_def_cfa;
*dwarf2out_window_save = *gccc::dwarf2out_window_save;
*dwarf2out_reg_save = *gccc::dwarf2out_reg_save;
*dwarf2out_return_save = *gccc::dwarf2out_return_save;
*dwarf2out_return_reg = *gccc::dwarf2out_return_reg;
*dwarf2out_reg_save_reg = *gccc::dwarf2out_reg_save_reg;
*walk_tree_1 = *gccc::walk_tree_1;
*walk_tree_without_duplicates_1 = *gccc::walk_tree_without_duplicates_1;
*set_decl_rtl = *gccc::set_decl_rtl;
*set_decl_incoming_rtl = *gccc::set_decl_incoming_rtl;
*get_base_address = *gccc::get_base_address;
*mark_addressable = *gccc::mark_addressable;
*tree_map_base_eq = *gccc::tree_map_base_eq;
*tree_map_base_hash = *gccc::tree_map_base_hash;
*tree_map_base_marked_p = *gccc::tree_map_base_marked_p;
*list_equal_p = *gccc::list_equal_p;
*tree_map_hash = *gccc::tree_map_hash;
*tree_decl_map_hash = *gccc::tree_decl_map_hash;
*target_for_debug_bind = *gccc::target_for_debug_bind;
*tree_mem_ref_addr = *gccc::tree_mem_ref_addr;
*copy_mem_ref_info = *gccc::copy_mem_ref_info;
*ssa_name_nonnegative_p = *gccc::ssa_name_nonnegative_p;
*init_object_sizes = *gccc::init_object_sizes;
*fini_object_sizes = *gccc::fini_object_sizes;
*compute_builtin_object_size = *gccc::compute_builtin_object_size;
*highest_pow2_factor = *gccc::highest_pow2_factor;
*build_personality_function = *gccc::build_personality_function;
*init_inline_once = *gccc::init_inline_once;
*tree_operand_length = *gccc::tree_operand_length;
*init_call_expr_arg_iterator = *gccc::init_call_expr_arg_iterator;
*init_const_call_expr_arg_iterator = *gccc::init_const_call_expr_arg_iterator;
*next_call_expr_arg = *gccc::next_call_expr_arg;
*next_const_call_expr_arg = *gccc::next_const_call_expr_arg;
*first_call_expr_arg = *gccc::first_call_expr_arg;
*first_const_call_expr_arg = *gccc::first_const_call_expr_arg;
*more_call_expr_args_p = *gccc::more_call_expr_args_p;
*more_const_call_expr_args_p = *gccc::more_const_call_expr_args_p;
*is_lang_specific = *gccc::is_lang_specific;
*block_may_fallthru = *gccc::block_may_fallthru;
*gt_ggc_mx_c_inline_static = *gccc::gt_ggc_mx_c_inline_static;
*gt_ggc_mx_VEC_c_goto_bindings_p_gc = *gccc::gt_ggc_mx_VEC_c_goto_bindings_p_gc;
*gt_ggc_mx_c_goto_bindings = *gccc::gt_ggc_mx_c_goto_bindings;
*gt_ggc_mx_c_scope = *gccc::gt_ggc_mx_c_scope;
*gt_ggc_mx_c_binding = *gccc::gt_ggc_mx_c_binding;
*gt_ggc_mx_c_label_vars = *gccc::gt_ggc_mx_c_label_vars;
*gt_ggc_mx_c_parser = *gccc::gt_ggc_mx_c_parser;
*gt_ggc_mx_VEC_ivarref_entry_gc = *gccc::gt_ggc_mx_VEC_ivarref_entry_gc;
*gt_ggc_mx_VEC_prot_list_entry_gc = *gccc::gt_ggc_mx_VEC_prot_list_entry_gc;
*gt_ggc_mx_VEC_msgref_entry_gc = *gccc::gt_ggc_mx_VEC_msgref_entry_gc;
*gt_ggc_mx_VEC_ident_data_tuple_gc = *gccc::gt_ggc_mx_VEC_ident_data_tuple_gc;
*gt_ggc_mx_interface_tuple = *gccc::gt_ggc_mx_interface_tuple;
*gt_ggc_mx_string_descriptor = *gccc::gt_ggc_mx_string_descriptor;
*gt_ggc_mx_imp_entry = *gccc::gt_ggc_mx_imp_entry;
*gt_ggc_mx_hashed_attribute = *gccc::gt_ggc_mx_hashed_attribute;
*gt_ggc_mx_hashed_entry = *gccc::gt_ggc_mx_hashed_entry;
*gt_ggc_mx_VEC_ltrans_partition_gc = *gccc::gt_ggc_mx_VEC_ltrans_partition_gc;
*gt_ggc_mx_ltrans_partition_def = *gccc::gt_ggc_mx_ltrans_partition_def;
*gt_ggc_mx_VEC_method_entry_gc = *gccc::gt_ggc_mx_VEC_method_entry_gc;
*gt_ggc_mx_type_assertion = *gccc::gt_ggc_mx_type_assertion;
*gt_ggc_mx_treetreehash_entry = *gccc::gt_ggc_mx_treetreehash_entry;
*gt_ggc_mx_CPool = *gccc::gt_ggc_mx_CPool;
*gt_ggc_mx_JCF = *gccc::gt_ggc_mx_JCF;
*gt_ggc_mx_module_htab_entry = *gccc::gt_ggc_mx_module_htab_entry;
*gt_ggc_mx_binding_level = *gccc::gt_ggc_mx_binding_level;
*gt_ggc_mx_opt_stack = *gccc::gt_ggc_mx_opt_stack;
*gt_ggc_mx_VEC_pending_redefinition_gc = *gccc::gt_ggc_mx_VEC_pending_redefinition_gc;
*gt_ggc_mx_VEC_pending_weak_gc = *gccc::gt_ggc_mx_VEC_pending_weak_gc;
*gt_ggc_mx_align_stack = *gccc::gt_ggc_mx_align_stack;
*gt_ggc_mx_VEC_tree_gc_vec_gc = *gccc::gt_ggc_mx_VEC_tree_gc_vec_gc;
*gt_ggc_mx_VEC_const_char_p_gc = *gccc::gt_ggc_mx_VEC_const_char_p_gc;
*gt_ggc_mx_pending_abstract_type = *gccc::gt_ggc_mx_pending_abstract_type;
*gt_ggc_mx_VEC_tree_int_gc = *gccc::gt_ggc_mx_VEC_tree_int_gc;
*gt_ggc_mx_cp_parser = *gccc::gt_ggc_mx_cp_parser;
*gt_ggc_mx_VEC_cp_unparsed_functions_entry_gc = *gccc::gt_ggc_mx_VEC_cp_unparsed_functions_entry_gc;
*gt_ggc_mx_VEC_cp_default_arg_entry_gc = *gccc::gt_ggc_mx_VEC_cp_default_arg_entry_gc;
*gt_ggc_mx_cp_parser_context = *gccc::gt_ggc_mx_cp_parser_context;
*gt_ggc_mx_cp_lexer = *gccc::gt_ggc_mx_cp_lexer;
*gt_ggc_mx_tree_check = *gccc::gt_ggc_mx_tree_check;
*gt_ggc_mx_constexpr_call = *gccc::gt_ggc_mx_constexpr_call;
*gt_ggc_mx_constexpr_fundef = *gccc::gt_ggc_mx_constexpr_fundef;
*gt_ggc_mx_VEC_deferred_access_gc = *gccc::gt_ggc_mx_VEC_deferred_access_gc;
*gt_ggc_mx_spec_entry = *gccc::gt_ggc_mx_spec_entry;
*gt_ggc_mx_pending_template = *gccc::gt_ggc_mx_pending_template;
*gt_ggc_mx_VEC_incomplete_var_gc = *gccc::gt_ggc_mx_VEC_incomplete_var_gc;
*gt_ggc_mx_named_label_use_entry = *gccc::gt_ggc_mx_named_label_use_entry;
*gt_ggc_mx_VEC_deferred_access_check_gc = *gccc::gt_ggc_mx_VEC_deferred_access_check_gc;
*gt_ggc_mx_sorted_fields_type = *gccc::gt_ggc_mx_sorted_fields_type;
*gt_ggc_mx_VEC_tree_pair_s_gc = *gccc::gt_ggc_mx_VEC_tree_pair_s_gc;
*gt_ggc_mx_named_label_entry = *gccc::gt_ggc_mx_named_label_entry;
*gt_ggc_mx_VEC_qualified_typedef_usage_t_gc = *gccc::gt_ggc_mx_VEC_qualified_typedef_usage_t_gc;
*gt_ggc_mx_cp_token_cache = *gccc::gt_ggc_mx_cp_token_cache;
*gt_ggc_mx_saved_scope = *gccc::gt_ggc_mx_saved_scope;
*gt_ggc_mx_cxx_int_tree_map = *gccc::gt_ggc_mx_cxx_int_tree_map;
*gt_ggc_mx_VEC_cp_label_binding_gc = *gccc::gt_ggc_mx_VEC_cp_label_binding_gc;
*gt_ggc_mx_VEC_cp_class_binding_gc = *gccc::gt_ggc_mx_VEC_cp_class_binding_gc;
*gt_ggc_mx_VEC_cxx_saved_binding_gc = *gccc::gt_ggc_mx_VEC_cxx_saved_binding_gc;
*gt_ggc_mx_cp_binding_level = *gccc::gt_ggc_mx_cp_binding_level;
*gt_ggc_mx_cxx_binding = *gccc::gt_ggc_mx_cxx_binding;
*gt_ggc_mx_binding_entry_s = *gccc::gt_ggc_mx_binding_entry_s;
*gt_ggc_mx_binding_table_s = *gccc::gt_ggc_mx_binding_table_s;
*gt_ggc_mx_tinst_level = *gccc::gt_ggc_mx_tinst_level;
*gt_ggc_mx_VEC_tinfo_s_gc = *gccc::gt_ggc_mx_VEC_tinfo_s_gc;
*gt_ggc_mx_gnat_binding_level = *gccc::gt_ggc_mx_gnat_binding_level;
*gt_ggc_mx_elab_info = *gccc::gt_ggc_mx_elab_info;
*gt_ggc_mx_stmt_group = *gccc::gt_ggc_mx_stmt_group;
*gt_ggc_mx_VEC_parm_attr_gc = *gccc::gt_ggc_mx_VEC_parm_attr_gc;
*gt_ggc_mx_parm_attr_d = *gccc::gt_ggc_mx_parm_attr_d;
*gt_ggc_mx_lto_in_decl_state = *gccc::gt_ggc_mx_lto_in_decl_state;
*gt_ggc_mx_VEC_ipa_edge_args_t_gc = *gccc::gt_ggc_mx_VEC_ipa_edge_args_t_gc;
*gt_ggc_mx_lto_symtab_entry_def = *gccc::gt_ggc_mx_lto_symtab_entry_def;
*gt_ggc_mx_heapvar_map = *gccc::gt_ggc_mx_heapvar_map;
*gt_ggc_mx_ssa_operand_memory_d = *gccc::gt_ggc_mx_ssa_operand_memory_d;
*gt_ggc_mx_scev_info_str = *gccc::gt_ggc_mx_scev_info_str;
*gt_ggc_mx_VEC_mem_addr_template_gc = *gccc::gt_ggc_mx_VEC_mem_addr_template_gc;
*gt_ggc_mx_gimple_type_leader_entry_s = *gccc::gt_ggc_mx_gimple_type_leader_entry_s;
*gt_ggc_mx_gimple_seq_node_d = *gccc::gt_ggc_mx_gimple_seq_node_d;
*gt_ggc_mx_type_hash = *gccc::gt_ggc_mx_type_hash;
*gt_ggc_mx_string_pool_data = *gccc::gt_ggc_mx_string_pool_data;
*gt_ggc_mx_temp_slot_address_entry = *gccc::gt_ggc_mx_temp_slot_address_entry;
*gt_ggc_mx_throw_stmt_node = *gccc::gt_ggc_mx_throw_stmt_node;
*gt_ggc_mx_VEC_eh_landing_pad_gc = *gccc::gt_ggc_mx_VEC_eh_landing_pad_gc;
*gt_ggc_mx_VEC_eh_region_gc = *gccc::gt_ggc_mx_VEC_eh_region_gc;
*gt_ggc_mx_eh_catch_d = *gccc::gt_ggc_mx_eh_catch_d;
*gt_ggc_mx_eh_landing_pad_d = *gccc::gt_ggc_mx_eh_landing_pad_d;
*gt_ggc_mx_eh_region_d = *gccc::gt_ggc_mx_eh_region_d;
*gt_ggc_mx_vcall_insn = *gccc::gt_ggc_mx_vcall_insn;
*gt_ggc_mx_VEC_vcall_entry_gc = *gccc::gt_ggc_mx_VEC_vcall_entry_gc;
*gt_ggc_mx_VEC_dcall_entry_gc = *gccc::gt_ggc_mx_VEC_dcall_entry_gc;
*gt_ggc_mx_cached_dw_loc_list_def = *gccc::gt_ggc_mx_cached_dw_loc_list_def;
*gt_ggc_mx_var_loc_list_def = *gccc::gt_ggc_mx_var_loc_list_def;
*gt_ggc_mx_var_loc_node = *gccc::gt_ggc_mx_var_loc_node;
*gt_ggc_mx_VEC_die_arg_entry_gc = *gccc::gt_ggc_mx_VEC_die_arg_entry_gc;
*gt_ggc_mx_limbo_die_struct = *gccc::gt_ggc_mx_limbo_die_struct;
*gt_ggc_mx_VEC_macinfo_entry_gc = *gccc::gt_ggc_mx_VEC_macinfo_entry_gc;
*gt_ggc_mx_VEC_pubname_entry_gc = *gccc::gt_ggc_mx_VEC_pubname_entry_gc;
*gt_ggc_mx_VEC_dw_attr_node_gc = *gccc::gt_ggc_mx_VEC_dw_attr_node_gc;
*gt_ggc_mx_comdat_type_struct = *gccc::gt_ggc_mx_comdat_type_struct;
*gt_ggc_mx_dw_ranges_by_label_struct = *gccc::gt_ggc_mx_dw_ranges_by_label_struct;
*gt_ggc_mx_dw_ranges_struct = *gccc::gt_ggc_mx_dw_ranges_struct;
*gt_ggc_mx_dw_separate_line_info_struct = *gccc::gt_ggc_mx_dw_separate_line_info_struct;
*gt_ggc_mx_dw_line_info_struct = *gccc::gt_ggc_mx_dw_line_info_struct;
*gt_ggc_mx_VEC_deferred_locations_gc = *gccc::gt_ggc_mx_VEC_deferred_locations_gc;
*gt_ggc_mx_dw_loc_list_struct = *gccc::gt_ggc_mx_dw_loc_list_struct;
*gt_ggc_mx_dwarf_file_data = *gccc::gt_ggc_mx_dwarf_file_data;
*gt_ggc_mx_queued_reg_save = *gccc::gt_ggc_mx_queued_reg_save;
*gt_ggc_mx_indirect_string_node = *gccc::gt_ggc_mx_indirect_string_node;
*gt_ggc_mx_dw_loc_descr_struct = *gccc::gt_ggc_mx_dw_loc_descr_struct;
*gt_ggc_mx_dw_fde_struct = *gccc::gt_ggc_mx_dw_fde_struct;
*gt_ggc_mx_dw_cfi_struct = *gccc::gt_ggc_mx_dw_cfi_struct;
*gt_ggc_mx_typeinfo = *gccc::gt_ggc_mx_typeinfo;
*gt_ggc_mx_VEC_alias_set_entry_gc = *gccc::gt_ggc_mx_VEC_alias_set_entry_gc;
*gt_ggc_mx_alias_set_entry_d = *gccc::gt_ggc_mx_alias_set_entry_d;
*gt_ggc_mx_constant_descriptor_tree = *gccc::gt_ggc_mx_constant_descriptor_tree;
*gt_ggc_mx_cgraph_asm_node = *gccc::gt_ggc_mx_cgraph_asm_node;
*gt_ggc_mx_cgraph_indirect_call_info = *gccc::gt_ggc_mx_cgraph_indirect_call_info;
*gt_ggc_mx_varpool_node_set_def = *gccc::gt_ggc_mx_varpool_node_set_def;
*gt_ggc_mx_varpool_node_set_element_def = *gccc::gt_ggc_mx_varpool_node_set_element_def;
*gt_ggc_mx_VEC_varpool_node_ptr_gc = *gccc::gt_ggc_mx_VEC_varpool_node_ptr_gc;
*gt_ggc_mx_cgraph_node_set_def = *gccc::gt_ggc_mx_cgraph_node_set_def;
*gt_ggc_mx_cgraph_node_set_element_def = *gccc::gt_ggc_mx_cgraph_node_set_element_def;
*gt_ggc_mx_VEC_cgraph_node_ptr_gc = *gccc::gt_ggc_mx_VEC_cgraph_node_ptr_gc;
*gt_ggc_mx_cgraph_edge = *gccc::gt_ggc_mx_cgraph_edge;
*gt_ggc_mx_VEC_ipa_replace_map_p_gc = *gccc::gt_ggc_mx_VEC_ipa_replace_map_p_gc;
*gt_ggc_mx_ipa_replace_map = *gccc::gt_ggc_mx_ipa_replace_map;
*gt_ggc_mx_lto_file_decl_data = *gccc::gt_ggc_mx_lto_file_decl_data;
*gt_ggc_mx_VEC_ipa_ref_t_gc = *gccc::gt_ggc_mx_VEC_ipa_ref_t_gc;
*gt_ggc_mx_varpool_node = *gccc::gt_ggc_mx_varpool_node;
*gt_ggc_mx_cgraph_node = *gccc::gt_ggc_mx_cgraph_node;
*gt_ggc_mx_VEC_basic_block_gc = *gccc::gt_ggc_mx_VEC_basic_block_gc;
*gt_ggc_mx_gimple_bb_info = *gccc::gt_ggc_mx_gimple_bb_info;
*gt_ggc_mx_rtl_bb_info = *gccc::gt_ggc_mx_rtl_bb_info;
*gt_ggc_mx_VEC_edge_gc = *gccc::gt_ggc_mx_VEC_edge_gc;
*gt_ggc_mx_VEC_loop_p_gc = *gccc::gt_ggc_mx_VEC_loop_p_gc;
*gt_ggc_mx_loop = *gccc::gt_ggc_mx_loop;
*gt_ggc_mx_loop_exit = *gccc::gt_ggc_mx_loop_exit;
*gt_ggc_mx_nb_iter_bound = *gccc::gt_ggc_mx_nb_iter_bound;
*gt_ggc_mx_types_used_by_vars_entry = *gccc::gt_ggc_mx_types_used_by_vars_entry;
*gt_ggc_mx_language_function = *gccc::gt_ggc_mx_language_function;
*gt_ggc_mx_loops = *gccc::gt_ggc_mx_loops;
*gt_ggc_mx_control_flow_graph = *gccc::gt_ggc_mx_control_flow_graph;
*gt_ggc_mx_eh_status = *gccc::gt_ggc_mx_eh_status;
*gt_ggc_mx_stack_usage = *gccc::gt_ggc_mx_stack_usage;
*gt_ggc_mx_initial_value_struct = *gccc::gt_ggc_mx_initial_value_struct;
*gt_ggc_mx_frame_space = *gccc::gt_ggc_mx_frame_space;
*gt_ggc_mx_rtx_constant_pool = *gccc::gt_ggc_mx_rtx_constant_pool;
*gt_ggc_mx_VEC_temp_slot_p_gc = *gccc::gt_ggc_mx_VEC_temp_slot_p_gc;
*gt_ggc_mx_temp_slot = *gccc::gt_ggc_mx_temp_slot;
*gt_ggc_mx_gimple_df = *gccc::gt_ggc_mx_gimple_df;
*gt_ggc_mx_VEC_call_site_record_gc = *gccc::gt_ggc_mx_VEC_call_site_record_gc;
*gt_ggc_mx_call_site_record_d = *gccc::gt_ggc_mx_call_site_record_d;
*gt_ggc_mx_sequence_stack = *gccc::gt_ggc_mx_sequence_stack;
*gt_ggc_mx_libfunc_entry = *gccc::gt_ggc_mx_libfunc_entry;
*gt_ggc_mx_tree_priority_map = *gccc::gt_ggc_mx_tree_priority_map;
*gt_ggc_mx_tree_int_map = *gccc::gt_ggc_mx_tree_int_map;
*gt_ggc_mx_tree_decl_map = *gccc::gt_ggc_mx_tree_decl_map;
*gt_ggc_mx_tree_map = *gccc::gt_ggc_mx_tree_map;
*gt_ggc_mx_lang_tree_node = *gccc::gt_ggc_mx_lang_tree_node;
*gt_ggc_mx_tree_statement_list_node = *gccc::gt_ggc_mx_tree_statement_list_node;
*gt_ggc_mx_var_ann_d = *gccc::gt_ggc_mx_var_ann_d;
*gt_ggc_mx_lang_decl = *gccc::gt_ggc_mx_lang_decl;
*gt_ggc_mx_lang_type = *gccc::gt_ggc_mx_lang_type;
*gt_ggc_mx_die_struct = *gccc::gt_ggc_mx_die_struct;
*gt_ggc_mx_ptr_info_def = *gccc::gt_ggc_mx_ptr_info_def;
*gt_ggc_mx_VEC_constructor_elt_gc = *gccc::gt_ggc_mx_VEC_constructor_elt_gc;
*gt_ggc_mx_VEC_alias_pair_gc = *gccc::gt_ggc_mx_VEC_alias_pair_gc;
*gt_ggc_mx_function = *gccc::gt_ggc_mx_function;
*gt_ggc_mx_constant_descriptor_rtx = *gccc::gt_ggc_mx_constant_descriptor_rtx;
*gt_ggc_mx_fixed_value = *gccc::gt_ggc_mx_fixed_value;
*gt_ggc_mx_real_value = *gccc::gt_ggc_mx_real_value;
*gt_ggc_mx_object_block = *gccc::gt_ggc_mx_object_block;
*gt_ggc_mx_reg_attrs = *gccc::gt_ggc_mx_reg_attrs;
*gt_ggc_mx_mem_attrs = *gccc::gt_ggc_mx_mem_attrs;
*gt_ggc_mx_bitmap_obstack = *gccc::gt_ggc_mx_bitmap_obstack;
*gt_ggc_mx_bitmap_element_def = *gccc::gt_ggc_mx_bitmap_element_def;
*gt_ggc_mx_machine_function = *gccc::gt_ggc_mx_machine_function;
*gt_ggc_mx_stack_local_entry = *gccc::gt_ggc_mx_stack_local_entry;
*gt_ggc_mx_VEC_rtx_gc = *gccc::gt_ggc_mx_VEC_rtx_gc;
*gt_ggc_mx_VEC_gimple_gc = *gccc::gt_ggc_mx_VEC_gimple_gc;
*gt_ggc_mx_VEC_tree_gc = *gccc::gt_ggc_mx_VEC_tree_gc;
*gt_ggc_mx_VEC_uchar_gc = *gccc::gt_ggc_mx_VEC_uchar_gc;
*gt_ggc_mx_basic_block_def = *gccc::gt_ggc_mx_basic_block_def;
*gt_ggc_mx_edge_def = *gccc::gt_ggc_mx_edge_def;
*gt_ggc_mx_gimple_seq_d = *gccc::gt_ggc_mx_gimple_seq_d;
*gt_ggc_mx_section = *gccc::gt_ggc_mx_section;
*gt_ggc_mx_gimple_statement_d = *gccc::gt_ggc_mx_gimple_statement_d;
*gt_ggc_mx_rtvec_def = *gccc::gt_ggc_mx_rtvec_def;
*gt_ggc_mx_rtx_def = *gccc::gt_ggc_mx_rtx_def;
*gt_ggc_mx_bitmap_head_def = *gccc::gt_ggc_mx_bitmap_head_def;
*gt_ggc_mx_answer = *gccc::gt_ggc_mx_answer;
*gt_ggc_mx_cpp_macro = *gccc::gt_ggc_mx_cpp_macro;
*gt_ggc_mx_cpp_token = *gccc::gt_ggc_mx_cpp_token;
*gt_ggc_mx_line_maps = *gccc::gt_ggc_mx_line_maps;
*gt_ggc_m_II17splay_tree_node_s = *gccc::gt_ggc_m_II17splay_tree_node_s;
*gt_ggc_m_SP9tree_node17splay_tree_node_s = *gccc::gt_ggc_m_SP9tree_node17splay_tree_node_s;
*gt_ggc_m_P9tree_nodeP9tree_node17splay_tree_node_s = *gccc::gt_ggc_m_P9tree_nodeP9tree_node17splay_tree_node_s;
*gt_ggc_m_P15interface_tuple4htab = *gccc::gt_ggc_m_P15interface_tuple4htab;
*gt_ggc_m_P17string_descriptor4htab = *gccc::gt_ggc_m_P17string_descriptor4htab;
*gt_ggc_m_P14type_assertion4htab = *gccc::gt_ggc_m_P14type_assertion4htab;
*gt_ggc_m_P18treetreehash_entry4htab = *gccc::gt_ggc_m_P18treetreehash_entry4htab;
*gt_ggc_m_P17module_htab_entry4htab = *gccc::gt_ggc_m_P17module_htab_entry4htab;
*gt_ggc_m_P21pending_abstract_type4htab = *gccc::gt_ggc_m_P21pending_abstract_type4htab;
*gt_ggc_m_P14constexpr_call4htab = *gccc::gt_ggc_m_P14constexpr_call4htab;
*gt_ggc_m_P16constexpr_fundef4htab = *gccc::gt_ggc_m_P16constexpr_fundef4htab;
*gt_ggc_m_P10spec_entry4htab = *gccc::gt_ggc_m_P10spec_entry4htab;
*gt_ggc_m_P16cxx_int_tree_map4htab = *gccc::gt_ggc_m_P16cxx_int_tree_map4htab;
*gt_ggc_m_P17named_label_entry4htab = *gccc::gt_ggc_m_P17named_label_entry4htab;
*gt_ggc_m_P17lto_in_decl_state4htab = *gccc::gt_ggc_m_P17lto_in_decl_state4htab;
*gt_ggc_m_P20lto_symtab_entry_def4htab = *gccc::gt_ggc_m_P20lto_symtab_entry_def4htab;
*gt_ggc_m_P11heapvar_map4htab = *gccc::gt_ggc_m_P11heapvar_map4htab;
*gt_ggc_m_P8tree_map4htab = *gccc::gt_ggc_m_P8tree_map4htab;
*gt_ggc_m_P9tree_nodeP9tree_node12splay_tree_s = *gccc::gt_ggc_m_P9tree_nodeP9tree_node12splay_tree_s;
*gt_ggc_m_P12varpool_node4htab = *gccc::gt_ggc_m_P12varpool_node4htab;
*gt_ggc_m_P13scev_info_str4htab = *gccc::gt_ggc_m_P13scev_info_str4htab;
*gt_ggc_m_P12tree_int_map4htab = *gccc::gt_ggc_m_P12tree_int_map4htab;
*gt_ggc_m_P23constant_descriptor_rtx4htab = *gccc::gt_ggc_m_P23constant_descriptor_rtx4htab;
*gt_ggc_m_P24constant_descriptor_tree4htab = *gccc::gt_ggc_m_P24constant_descriptor_tree4htab;
*gt_ggc_m_P12object_block4htab = *gccc::gt_ggc_m_P12object_block4htab;
*gt_ggc_m_P7section4htab = *gccc::gt_ggc_m_P7section4htab;
*gt_ggc_m_P17tree_priority_map4htab = *gccc::gt_ggc_m_P17tree_priority_map4htab;
*gt_ggc_m_P13tree_decl_map4htab = *gccc::gt_ggc_m_P13tree_decl_map4htab;
*gt_ggc_m_P9type_hash4htab = *gccc::gt_ggc_m_P9type_hash4htab;
*gt_ggc_m_P23temp_slot_address_entry4htab = *gccc::gt_ggc_m_P23temp_slot_address_entry4htab;
*gt_ggc_m_P15throw_stmt_node4htab = *gccc::gt_ggc_m_P15throw_stmt_node4htab;
*gt_ggc_m_P9reg_attrs4htab = *gccc::gt_ggc_m_P9reg_attrs4htab;
*gt_ggc_m_P9mem_attrs4htab = *gccc::gt_ggc_m_P9mem_attrs4htab;
*gt_ggc_m_P7rtx_def4htab = *gccc::gt_ggc_m_P7rtx_def4htab;
*gt_ggc_m_SP9tree_node12splay_tree_s = *gccc::gt_ggc_m_SP9tree_node12splay_tree_s;
*gt_ggc_m_P10vcall_insn4htab = *gccc::gt_ggc_m_P10vcall_insn4htab;
*gt_ggc_m_P22cached_dw_loc_list_def4htab = *gccc::gt_ggc_m_P22cached_dw_loc_list_def4htab;
*gt_ggc_m_P16var_loc_list_def4htab = *gccc::gt_ggc_m_P16var_loc_list_def4htab;
*gt_ggc_m_P10die_struct4htab = *gccc::gt_ggc_m_P10die_struct4htab;
*gt_ggc_m_P15dwarf_file_data4htab = *gccc::gt_ggc_m_P15dwarf_file_data4htab;
*gt_ggc_m_P20indirect_string_node4htab = *gccc::gt_ggc_m_P20indirect_string_node4htab;
*gt_ggc_m_P11cgraph_node4htab = *gccc::gt_ggc_m_P11cgraph_node4htab;
*gt_ggc_m_II12splay_tree_s = *gccc::gt_ggc_m_II12splay_tree_s;
*gt_ggc_m_P28varpool_node_set_element_def4htab = *gccc::gt_ggc_m_P28varpool_node_set_element_def4htab;
*gt_ggc_m_P27cgraph_node_set_element_def4htab = *gccc::gt_ggc_m_P27cgraph_node_set_element_def4htab;
*gt_ggc_m_P11cgraph_edge4htab = *gccc::gt_ggc_m_P11cgraph_edge4htab;
*gt_ggc_m_P9loop_exit4htab = *gccc::gt_ggc_m_P9loop_exit4htab;
*gt_ggc_m_P24types_used_by_vars_entry4htab = *gccc::gt_ggc_m_P24types_used_by_vars_entry4htab;
*gt_ggc_m_P9tree_node4htab = *gccc::gt_ggc_m_P9tree_node4htab;
*gt_ggc_m_P13libfunc_entry4htab = *gccc::gt_ggc_m_P13libfunc_entry4htab;
*gt_pch_nx_c_inline_static = *gccc::gt_pch_nx_c_inline_static;
*gt_pch_nx_VEC_c_goto_bindings_p_gc = *gccc::gt_pch_nx_VEC_c_goto_bindings_p_gc;
*gt_pch_nx_c_goto_bindings = *gccc::gt_pch_nx_c_goto_bindings;
*gt_pch_nx_c_scope = *gccc::gt_pch_nx_c_scope;
*gt_pch_nx_c_binding = *gccc::gt_pch_nx_c_binding;
*gt_pch_nx_c_label_vars = *gccc::gt_pch_nx_c_label_vars;
*gt_pch_nx_c_parser = *gccc::gt_pch_nx_c_parser;
*gt_pch_nx_VEC_ivarref_entry_gc = *gccc::gt_pch_nx_VEC_ivarref_entry_gc;
*gt_pch_nx_VEC_prot_list_entry_gc = *gccc::gt_pch_nx_VEC_prot_list_entry_gc;
*gt_pch_nx_VEC_msgref_entry_gc = *gccc::gt_pch_nx_VEC_msgref_entry_gc;
*gt_pch_nx_VEC_ident_data_tuple_gc = *gccc::gt_pch_nx_VEC_ident_data_tuple_gc;
*gt_pch_nx_interface_tuple = *gccc::gt_pch_nx_interface_tuple;
*gt_pch_nx_string_descriptor = *gccc::gt_pch_nx_string_descriptor;
*gt_pch_nx_imp_entry = *gccc::gt_pch_nx_imp_entry;
*gt_pch_nx_hashed_attribute = *gccc::gt_pch_nx_hashed_attribute;
*gt_pch_nx_hashed_entry = *gccc::gt_pch_nx_hashed_entry;
*gt_pch_nx_VEC_ltrans_partition_gc = *gccc::gt_pch_nx_VEC_ltrans_partition_gc;
*gt_pch_nx_ltrans_partition_def = *gccc::gt_pch_nx_ltrans_partition_def;
*gt_pch_nx_VEC_method_entry_gc = *gccc::gt_pch_nx_VEC_method_entry_gc;
*gt_pch_nx_type_assertion = *gccc::gt_pch_nx_type_assertion;
*gt_pch_nx_treetreehash_entry = *gccc::gt_pch_nx_treetreehash_entry;
*gt_pch_nx_CPool = *gccc::gt_pch_nx_CPool;
*gt_pch_nx_JCF = *gccc::gt_pch_nx_JCF;
*gt_pch_nx_module_htab_entry = *gccc::gt_pch_nx_module_htab_entry;
*gt_pch_nx_binding_level = *gccc::gt_pch_nx_binding_level;
*gt_pch_nx_opt_stack = *gccc::gt_pch_nx_opt_stack;
*gt_pch_nx_VEC_pending_redefinition_gc = *gccc::gt_pch_nx_VEC_pending_redefinition_gc;
*gt_pch_nx_VEC_pending_weak_gc = *gccc::gt_pch_nx_VEC_pending_weak_gc;
*gt_pch_nx_align_stack = *gccc::gt_pch_nx_align_stack;
*gt_pch_nx_VEC_tree_gc_vec_gc = *gccc::gt_pch_nx_VEC_tree_gc_vec_gc;
*gt_pch_nx_VEC_const_char_p_gc = *gccc::gt_pch_nx_VEC_const_char_p_gc;
*gt_pch_nx_pending_abstract_type = *gccc::gt_pch_nx_pending_abstract_type;
*gt_pch_nx_VEC_tree_int_gc = *gccc::gt_pch_nx_VEC_tree_int_gc;
*gt_pch_nx_cp_parser = *gccc::gt_pch_nx_cp_parser;
*gt_pch_nx_VEC_cp_unparsed_functions_entry_gc = *gccc::gt_pch_nx_VEC_cp_unparsed_functions_entry_gc;
*gt_pch_nx_VEC_cp_default_arg_entry_gc = *gccc::gt_pch_nx_VEC_cp_default_arg_entry_gc;
*gt_pch_nx_cp_parser_context = *gccc::gt_pch_nx_cp_parser_context;
*gt_pch_nx_cp_lexer = *gccc::gt_pch_nx_cp_lexer;
*gt_pch_nx_tree_check = *gccc::gt_pch_nx_tree_check;
*gt_pch_nx_constexpr_call = *gccc::gt_pch_nx_constexpr_call;
*gt_pch_nx_constexpr_fundef = *gccc::gt_pch_nx_constexpr_fundef;
*gt_pch_nx_VEC_deferred_access_gc = *gccc::gt_pch_nx_VEC_deferred_access_gc;
*gt_pch_nx_spec_entry = *gccc::gt_pch_nx_spec_entry;
*gt_pch_nx_pending_template = *gccc::gt_pch_nx_pending_template;
*gt_pch_nx_VEC_incomplete_var_gc = *gccc::gt_pch_nx_VEC_incomplete_var_gc;
*gt_pch_nx_named_label_use_entry = *gccc::gt_pch_nx_named_label_use_entry;
*gt_pch_nx_VEC_deferred_access_check_gc = *gccc::gt_pch_nx_VEC_deferred_access_check_gc;
*gt_pch_nx_sorted_fields_type = *gccc::gt_pch_nx_sorted_fields_type;
*gt_pch_nx_VEC_tree_pair_s_gc = *gccc::gt_pch_nx_VEC_tree_pair_s_gc;
*gt_pch_nx_named_label_entry = *gccc::gt_pch_nx_named_label_entry;
*gt_pch_nx_VEC_qualified_typedef_usage_t_gc = *gccc::gt_pch_nx_VEC_qualified_typedef_usage_t_gc;
*gt_pch_nx_cp_token_cache = *gccc::gt_pch_nx_cp_token_cache;
*gt_pch_nx_saved_scope = *gccc::gt_pch_nx_saved_scope;
*gt_pch_nx_cxx_int_tree_map = *gccc::gt_pch_nx_cxx_int_tree_map;
*gt_pch_nx_VEC_cp_label_binding_gc = *gccc::gt_pch_nx_VEC_cp_label_binding_gc;
*gt_pch_nx_VEC_cp_class_binding_gc = *gccc::gt_pch_nx_VEC_cp_class_binding_gc;
*gt_pch_nx_VEC_cxx_saved_binding_gc = *gccc::gt_pch_nx_VEC_cxx_saved_binding_gc;
*gt_pch_nx_cp_binding_level = *gccc::gt_pch_nx_cp_binding_level;
*gt_pch_nx_cxx_binding = *gccc::gt_pch_nx_cxx_binding;
*gt_pch_nx_binding_entry_s = *gccc::gt_pch_nx_binding_entry_s;
*gt_pch_nx_binding_table_s = *gccc::gt_pch_nx_binding_table_s;
*gt_pch_nx_tinst_level = *gccc::gt_pch_nx_tinst_level;
*gt_pch_nx_VEC_tinfo_s_gc = *gccc::gt_pch_nx_VEC_tinfo_s_gc;
*gt_pch_nx_gnat_binding_level = *gccc::gt_pch_nx_gnat_binding_level;
*gt_pch_nx_elab_info = *gccc::gt_pch_nx_elab_info;
*gt_pch_nx_stmt_group = *gccc::gt_pch_nx_stmt_group;
*gt_pch_nx_VEC_parm_attr_gc = *gccc::gt_pch_nx_VEC_parm_attr_gc;
*gt_pch_nx_parm_attr_d = *gccc::gt_pch_nx_parm_attr_d;
*gt_pch_nx_lto_in_decl_state = *gccc::gt_pch_nx_lto_in_decl_state;
*gt_pch_nx_VEC_ipa_edge_args_t_gc = *gccc::gt_pch_nx_VEC_ipa_edge_args_t_gc;
*gt_pch_nx_lto_symtab_entry_def = *gccc::gt_pch_nx_lto_symtab_entry_def;
*gt_pch_nx_heapvar_map = *gccc::gt_pch_nx_heapvar_map;
*gt_pch_nx_ssa_operand_memory_d = *gccc::gt_pch_nx_ssa_operand_memory_d;
*gt_pch_nx_scev_info_str = *gccc::gt_pch_nx_scev_info_str;
*gt_pch_nx_VEC_mem_addr_template_gc = *gccc::gt_pch_nx_VEC_mem_addr_template_gc;
*gt_pch_nx_gimple_type_leader_entry_s = *gccc::gt_pch_nx_gimple_type_leader_entry_s;
*gt_pch_nx_gimple_seq_node_d = *gccc::gt_pch_nx_gimple_seq_node_d;
*gt_pch_nx_type_hash = *gccc::gt_pch_nx_type_hash;
*gt_pch_nx_string_pool_data = *gccc::gt_pch_nx_string_pool_data;
*gt_pch_nx_temp_slot_address_entry = *gccc::gt_pch_nx_temp_slot_address_entry;
*gt_pch_nx_throw_stmt_node = *gccc::gt_pch_nx_throw_stmt_node;
*gt_pch_nx_VEC_eh_landing_pad_gc = *gccc::gt_pch_nx_VEC_eh_landing_pad_gc;
*gt_pch_nx_VEC_eh_region_gc = *gccc::gt_pch_nx_VEC_eh_region_gc;
*gt_pch_nx_eh_catch_d = *gccc::gt_pch_nx_eh_catch_d;
*gt_pch_nx_eh_landing_pad_d = *gccc::gt_pch_nx_eh_landing_pad_d;
*gt_pch_nx_eh_region_d = *gccc::gt_pch_nx_eh_region_d;
*gt_pch_nx_vcall_insn = *gccc::gt_pch_nx_vcall_insn;
*gt_pch_nx_VEC_vcall_entry_gc = *gccc::gt_pch_nx_VEC_vcall_entry_gc;
*gt_pch_nx_VEC_dcall_entry_gc = *gccc::gt_pch_nx_VEC_dcall_entry_gc;
*gt_pch_nx_cached_dw_loc_list_def = *gccc::gt_pch_nx_cached_dw_loc_list_def;
*gt_pch_nx_var_loc_list_def = *gccc::gt_pch_nx_var_loc_list_def;
*gt_pch_nx_var_loc_node = *gccc::gt_pch_nx_var_loc_node;
*gt_pch_nx_VEC_die_arg_entry_gc = *gccc::gt_pch_nx_VEC_die_arg_entry_gc;
*gt_pch_nx_limbo_die_struct = *gccc::gt_pch_nx_limbo_die_struct;
*gt_pch_nx_VEC_macinfo_entry_gc = *gccc::gt_pch_nx_VEC_macinfo_entry_gc;
*gt_pch_nx_VEC_pubname_entry_gc = *gccc::gt_pch_nx_VEC_pubname_entry_gc;
*gt_pch_nx_VEC_dw_attr_node_gc = *gccc::gt_pch_nx_VEC_dw_attr_node_gc;
*gt_pch_nx_comdat_type_struct = *gccc::gt_pch_nx_comdat_type_struct;
*gt_pch_nx_dw_ranges_by_label_struct = *gccc::gt_pch_nx_dw_ranges_by_label_struct;
*gt_pch_nx_dw_ranges_struct = *gccc::gt_pch_nx_dw_ranges_struct;
*gt_pch_nx_dw_separate_line_info_struct = *gccc::gt_pch_nx_dw_separate_line_info_struct;
*gt_pch_nx_dw_line_info_struct = *gccc::gt_pch_nx_dw_line_info_struct;
*gt_pch_nx_VEC_deferred_locations_gc = *gccc::gt_pch_nx_VEC_deferred_locations_gc;
*gt_pch_nx_dw_loc_list_struct = *gccc::gt_pch_nx_dw_loc_list_struct;
*gt_pch_nx_dwarf_file_data = *gccc::gt_pch_nx_dwarf_file_data;
*gt_pch_nx_queued_reg_save = *gccc::gt_pch_nx_queued_reg_save;
*gt_pch_nx_indirect_string_node = *gccc::gt_pch_nx_indirect_string_node;
*gt_pch_nx_dw_loc_descr_struct = *gccc::gt_pch_nx_dw_loc_descr_struct;
*gt_pch_nx_dw_fde_struct = *gccc::gt_pch_nx_dw_fde_struct;
*gt_pch_nx_dw_cfi_struct = *gccc::gt_pch_nx_dw_cfi_struct;
*gt_pch_nx_typeinfo = *gccc::gt_pch_nx_typeinfo;
*gt_pch_nx_VEC_alias_set_entry_gc = *gccc::gt_pch_nx_VEC_alias_set_entry_gc;
*gt_pch_nx_alias_set_entry_d = *gccc::gt_pch_nx_alias_set_entry_d;
*gt_pch_nx_constant_descriptor_tree = *gccc::gt_pch_nx_constant_descriptor_tree;
*gt_pch_nx_cgraph_asm_node = *gccc::gt_pch_nx_cgraph_asm_node;
*gt_pch_nx_cgraph_indirect_call_info = *gccc::gt_pch_nx_cgraph_indirect_call_info;
*gt_pch_nx_varpool_node_set_def = *gccc::gt_pch_nx_varpool_node_set_def;
*gt_pch_nx_varpool_node_set_element_def = *gccc::gt_pch_nx_varpool_node_set_element_def;
*gt_pch_nx_VEC_varpool_node_ptr_gc = *gccc::gt_pch_nx_VEC_varpool_node_ptr_gc;
*gt_pch_nx_cgraph_node_set_def = *gccc::gt_pch_nx_cgraph_node_set_def;
*gt_pch_nx_cgraph_node_set_element_def = *gccc::gt_pch_nx_cgraph_node_set_element_def;
*gt_pch_nx_VEC_cgraph_node_ptr_gc = *gccc::gt_pch_nx_VEC_cgraph_node_ptr_gc;
*gt_pch_nx_cgraph_edge = *gccc::gt_pch_nx_cgraph_edge;
*gt_pch_nx_VEC_ipa_replace_map_p_gc = *gccc::gt_pch_nx_VEC_ipa_replace_map_p_gc;
*gt_pch_nx_ipa_replace_map = *gccc::gt_pch_nx_ipa_replace_map;
*gt_pch_nx_lto_file_decl_data = *gccc::gt_pch_nx_lto_file_decl_data;
*gt_pch_nx_VEC_ipa_ref_t_gc = *gccc::gt_pch_nx_VEC_ipa_ref_t_gc;
*gt_pch_nx_varpool_node = *gccc::gt_pch_nx_varpool_node;
*gt_pch_nx_cgraph_node = *gccc::gt_pch_nx_cgraph_node;
*gt_pch_nx_VEC_basic_block_gc = *gccc::gt_pch_nx_VEC_basic_block_gc;
*gt_pch_nx_gimple_bb_info = *gccc::gt_pch_nx_gimple_bb_info;
*gt_pch_nx_rtl_bb_info = *gccc::gt_pch_nx_rtl_bb_info;
*gt_pch_nx_VEC_edge_gc = *gccc::gt_pch_nx_VEC_edge_gc;
*gt_pch_nx_VEC_loop_p_gc = *gccc::gt_pch_nx_VEC_loop_p_gc;
*gt_pch_nx_loop = *gccc::gt_pch_nx_loop;
*gt_pch_nx_loop_exit = *gccc::gt_pch_nx_loop_exit;
*gt_pch_nx_nb_iter_bound = *gccc::gt_pch_nx_nb_iter_bound;
*gt_pch_nx_types_used_by_vars_entry = *gccc::gt_pch_nx_types_used_by_vars_entry;
*gt_pch_nx_language_function = *gccc::gt_pch_nx_language_function;
*gt_pch_nx_loops = *gccc::gt_pch_nx_loops;
*gt_pch_nx_control_flow_graph = *gccc::gt_pch_nx_control_flow_graph;
*gt_pch_nx_eh_status = *gccc::gt_pch_nx_eh_status;
*gt_pch_nx_stack_usage = *gccc::gt_pch_nx_stack_usage;
*gt_pch_nx_initial_value_struct = *gccc::gt_pch_nx_initial_value_struct;
*gt_pch_nx_frame_space = *gccc::gt_pch_nx_frame_space;
*gt_pch_nx_rtx_constant_pool = *gccc::gt_pch_nx_rtx_constant_pool;
*gt_pch_nx_VEC_temp_slot_p_gc = *gccc::gt_pch_nx_VEC_temp_slot_p_gc;
*gt_pch_nx_temp_slot = *gccc::gt_pch_nx_temp_slot;
*gt_pch_nx_gimple_df = *gccc::gt_pch_nx_gimple_df;
*gt_pch_nx_VEC_call_site_record_gc = *gccc::gt_pch_nx_VEC_call_site_record_gc;
*gt_pch_nx_call_site_record_d = *gccc::gt_pch_nx_call_site_record_d;
*gt_pch_nx_sequence_stack = *gccc::gt_pch_nx_sequence_stack;
*gt_pch_nx_libfunc_entry = *gccc::gt_pch_nx_libfunc_entry;
*gt_pch_nx_tree_priority_map = *gccc::gt_pch_nx_tree_priority_map;
*gt_pch_nx_tree_int_map = *gccc::gt_pch_nx_tree_int_map;
*gt_pch_nx_tree_decl_map = *gccc::gt_pch_nx_tree_decl_map;
*gt_pch_nx_tree_map = *gccc::gt_pch_nx_tree_map;
*gt_pch_nx_lang_tree_node = *gccc::gt_pch_nx_lang_tree_node;
*gt_pch_nx_tree_statement_list_node = *gccc::gt_pch_nx_tree_statement_list_node;
*gt_pch_nx_var_ann_d = *gccc::gt_pch_nx_var_ann_d;
*gt_pch_nx_lang_decl = *gccc::gt_pch_nx_lang_decl;
*gt_pch_nx_lang_type = *gccc::gt_pch_nx_lang_type;
*gt_pch_nx_die_struct = *gccc::gt_pch_nx_die_struct;
*gt_pch_nx_ptr_info_def = *gccc::gt_pch_nx_ptr_info_def;
*gt_pch_nx_VEC_constructor_elt_gc = *gccc::gt_pch_nx_VEC_constructor_elt_gc;
*gt_pch_nx_VEC_alias_pair_gc = *gccc::gt_pch_nx_VEC_alias_pair_gc;
*gt_pch_nx_function = *gccc::gt_pch_nx_function;
*gt_pch_nx_constant_descriptor_rtx = *gccc::gt_pch_nx_constant_descriptor_rtx;
*gt_pch_nx_fixed_value = *gccc::gt_pch_nx_fixed_value;
*gt_pch_nx_real_value = *gccc::gt_pch_nx_real_value;
*gt_pch_nx_object_block = *gccc::gt_pch_nx_object_block;
*gt_pch_nx_reg_attrs = *gccc::gt_pch_nx_reg_attrs;
*gt_pch_nx_mem_attrs = *gccc::gt_pch_nx_mem_attrs;
*gt_pch_nx_bitmap_obstack = *gccc::gt_pch_nx_bitmap_obstack;
*gt_pch_nx_bitmap_element_def = *gccc::gt_pch_nx_bitmap_element_def;
*gt_pch_nx_machine_function = *gccc::gt_pch_nx_machine_function;
*gt_pch_nx_stack_local_entry = *gccc::gt_pch_nx_stack_local_entry;
*gt_pch_nx_VEC_rtx_gc = *gccc::gt_pch_nx_VEC_rtx_gc;
*gt_pch_nx_VEC_gimple_gc = *gccc::gt_pch_nx_VEC_gimple_gc;
*gt_pch_nx_VEC_tree_gc = *gccc::gt_pch_nx_VEC_tree_gc;
*gt_pch_nx_VEC_uchar_gc = *gccc::gt_pch_nx_VEC_uchar_gc;
*gt_pch_nx_basic_block_def = *gccc::gt_pch_nx_basic_block_def;
*gt_pch_nx_edge_def = *gccc::gt_pch_nx_edge_def;
*gt_pch_nx_gimple_seq_d = *gccc::gt_pch_nx_gimple_seq_d;
*gt_pch_nx_section = *gccc::gt_pch_nx_section;
*gt_pch_nx_gimple_statement_d = *gccc::gt_pch_nx_gimple_statement_d;
*gt_pch_nx_rtvec_def = *gccc::gt_pch_nx_rtvec_def;
*gt_pch_nx_rtx_def = *gccc::gt_pch_nx_rtx_def;
*gt_pch_nx_bitmap_head_def = *gccc::gt_pch_nx_bitmap_head_def;
*gt_pch_nx_answer = *gccc::gt_pch_nx_answer;
*gt_pch_nx_cpp_macro = *gccc::gt_pch_nx_cpp_macro;
*gt_pch_nx_cpp_token = *gccc::gt_pch_nx_cpp_token;
*gt_pch_nx_line_maps = *gccc::gt_pch_nx_line_maps;
*gt_pch_n_II17splay_tree_node_s = *gccc::gt_pch_n_II17splay_tree_node_s;
*gt_pch_n_SP9tree_node17splay_tree_node_s = *gccc::gt_pch_n_SP9tree_node17splay_tree_node_s;
*gt_pch_n_P9tree_nodeP9tree_node17splay_tree_node_s = *gccc::gt_pch_n_P9tree_nodeP9tree_node17splay_tree_node_s;
*gt_pch_n_P15interface_tuple4htab = *gccc::gt_pch_n_P15interface_tuple4htab;
*gt_pch_n_P17string_descriptor4htab = *gccc::gt_pch_n_P17string_descriptor4htab;
*gt_pch_n_P14type_assertion4htab = *gccc::gt_pch_n_P14type_assertion4htab;
*gt_pch_n_P18treetreehash_entry4htab = *gccc::gt_pch_n_P18treetreehash_entry4htab;
*gt_pch_n_P17module_htab_entry4htab = *gccc::gt_pch_n_P17module_htab_entry4htab;
*gt_pch_n_P21pending_abstract_type4htab = *gccc::gt_pch_n_P21pending_abstract_type4htab;
*gt_pch_n_P14constexpr_call4htab = *gccc::gt_pch_n_P14constexpr_call4htab;
*gt_pch_n_P16constexpr_fundef4htab = *gccc::gt_pch_n_P16constexpr_fundef4htab;
*gt_pch_n_P10spec_entry4htab = *gccc::gt_pch_n_P10spec_entry4htab;
*gt_pch_n_P16cxx_int_tree_map4htab = *gccc::gt_pch_n_P16cxx_int_tree_map4htab;
*gt_pch_n_P17named_label_entry4htab = *gccc::gt_pch_n_P17named_label_entry4htab;
*gt_pch_n_P17lto_in_decl_state4htab = *gccc::gt_pch_n_P17lto_in_decl_state4htab;
*gt_pch_n_P20lto_symtab_entry_def4htab = *gccc::gt_pch_n_P20lto_symtab_entry_def4htab;
*gt_pch_n_P11heapvar_map4htab = *gccc::gt_pch_n_P11heapvar_map4htab;
*gt_pch_n_P8tree_map4htab = *gccc::gt_pch_n_P8tree_map4htab;
*gt_pch_n_P9tree_nodeP9tree_node12splay_tree_s = *gccc::gt_pch_n_P9tree_nodeP9tree_node12splay_tree_s;
*gt_pch_n_P12varpool_node4htab = *gccc::gt_pch_n_P12varpool_node4htab;
*gt_pch_n_P13scev_info_str4htab = *gccc::gt_pch_n_P13scev_info_str4htab;
*gt_pch_n_P12tree_int_map4htab = *gccc::gt_pch_n_P12tree_int_map4htab;
*gt_pch_n_P23constant_descriptor_rtx4htab = *gccc::gt_pch_n_P23constant_descriptor_rtx4htab;
*gt_pch_n_P24constant_descriptor_tree4htab = *gccc::gt_pch_n_P24constant_descriptor_tree4htab;
*gt_pch_n_P12object_block4htab = *gccc::gt_pch_n_P12object_block4htab;
*gt_pch_n_P7section4htab = *gccc::gt_pch_n_P7section4htab;
*gt_pch_n_P17tree_priority_map4htab = *gccc::gt_pch_n_P17tree_priority_map4htab;
*gt_pch_n_P13tree_decl_map4htab = *gccc::gt_pch_n_P13tree_decl_map4htab;
*gt_pch_n_P9type_hash4htab = *gccc::gt_pch_n_P9type_hash4htab;
*gt_pch_n_P23temp_slot_address_entry4htab = *gccc::gt_pch_n_P23temp_slot_address_entry4htab;
*gt_pch_n_P15throw_stmt_node4htab = *gccc::gt_pch_n_P15throw_stmt_node4htab;
*gt_pch_n_P9reg_attrs4htab = *gccc::gt_pch_n_P9reg_attrs4htab;
*gt_pch_n_P9mem_attrs4htab = *gccc::gt_pch_n_P9mem_attrs4htab;
*gt_pch_n_P7rtx_def4htab = *gccc::gt_pch_n_P7rtx_def4htab;
*gt_pch_n_SP9tree_node12splay_tree_s = *gccc::gt_pch_n_SP9tree_node12splay_tree_s;
*gt_pch_n_P10vcall_insn4htab = *gccc::gt_pch_n_P10vcall_insn4htab;
*gt_pch_n_P22cached_dw_loc_list_def4htab = *gccc::gt_pch_n_P22cached_dw_loc_list_def4htab;
*gt_pch_n_P16var_loc_list_def4htab = *gccc::gt_pch_n_P16var_loc_list_def4htab;
*gt_pch_n_P10die_struct4htab = *gccc::gt_pch_n_P10die_struct4htab;
*gt_pch_n_P15dwarf_file_data4htab = *gccc::gt_pch_n_P15dwarf_file_data4htab;
*gt_pch_n_P20indirect_string_node4htab = *gccc::gt_pch_n_P20indirect_string_node4htab;
*gt_pch_n_P11cgraph_node4htab = *gccc::gt_pch_n_P11cgraph_node4htab;
*gt_pch_n_II12splay_tree_s = *gccc::gt_pch_n_II12splay_tree_s;
*gt_pch_n_P28varpool_node_set_element_def4htab = *gccc::gt_pch_n_P28varpool_node_set_element_def4htab;
*gt_pch_n_P27cgraph_node_set_element_def4htab = *gccc::gt_pch_n_P27cgraph_node_set_element_def4htab;
*gt_pch_n_P11cgraph_edge4htab = *gccc::gt_pch_n_P11cgraph_edge4htab;
*gt_pch_n_P9loop_exit4htab = *gccc::gt_pch_n_P9loop_exit4htab;
*gt_pch_n_P24types_used_by_vars_entry4htab = *gccc::gt_pch_n_P24types_used_by_vars_entry4htab;
*gt_pch_n_P9tree_node4htab = *gccc::gt_pch_n_P9tree_node4htab;
*gt_pch_n_P13libfunc_entry4htab = *gccc::gt_pch_n_P13libfunc_entry4htab;
*gt_pch_p_15c_inline_static = *gccc::gt_pch_p_15c_inline_static;
*gt_pch_p_24VEC_c_goto_bindings_p_gc = *gccc::gt_pch_p_24VEC_c_goto_bindings_p_gc;
*gt_pch_p_15c_goto_bindings = *gccc::gt_pch_p_15c_goto_bindings;
*gt_pch_p_7c_scope = *gccc::gt_pch_p_7c_scope;
*gt_pch_p_9c_binding = *gccc::gt_pch_p_9c_binding;
*gt_pch_p_12c_label_vars = *gccc::gt_pch_p_12c_label_vars;
*gt_pch_p_8c_parser = *gccc::gt_pch_p_8c_parser;
*gt_pch_p_20VEC_ivarref_entry_gc = *gccc::gt_pch_p_20VEC_ivarref_entry_gc;
*gt_pch_p_22VEC_prot_list_entry_gc = *gccc::gt_pch_p_22VEC_prot_list_entry_gc;
*gt_pch_p_19VEC_msgref_entry_gc = *gccc::gt_pch_p_19VEC_msgref_entry_gc;
*gt_pch_p_23VEC_ident_data_tuple_gc = *gccc::gt_pch_p_23VEC_ident_data_tuple_gc;
*gt_pch_p_15interface_tuple = *gccc::gt_pch_p_15interface_tuple;
*gt_pch_p_17string_descriptor = *gccc::gt_pch_p_17string_descriptor;
*gt_pch_p_9imp_entry = *gccc::gt_pch_p_9imp_entry;
*gt_pch_p_16hashed_attribute = *gccc::gt_pch_p_16hashed_attribute;
*gt_pch_p_12hashed_entry = *gccc::gt_pch_p_12hashed_entry;
*gt_pch_p_23VEC_ltrans_partition_gc = *gccc::gt_pch_p_23VEC_ltrans_partition_gc;
*gt_pch_p_20ltrans_partition_def = *gccc::gt_pch_p_20ltrans_partition_def;
*gt_pch_p_19VEC_method_entry_gc = *gccc::gt_pch_p_19VEC_method_entry_gc;
*gt_pch_p_14type_assertion = *gccc::gt_pch_p_14type_assertion;
*gt_pch_p_18treetreehash_entry = *gccc::gt_pch_p_18treetreehash_entry;
*gt_pch_p_5CPool = *gccc::gt_pch_p_5CPool;
*gt_pch_p_3JCF = *gccc::gt_pch_p_3JCF;
*gt_pch_p_17module_htab_entry = *gccc::gt_pch_p_17module_htab_entry;
*gt_pch_p_13binding_level = *gccc::gt_pch_p_13binding_level;
*gt_pch_p_9opt_stack = *gccc::gt_pch_p_9opt_stack;
*gt_pch_p_27VEC_pending_redefinition_gc = *gccc::gt_pch_p_27VEC_pending_redefinition_gc;
*gt_pch_p_19VEC_pending_weak_gc = *gccc::gt_pch_p_19VEC_pending_weak_gc;
*gt_pch_p_11align_stack = *gccc::gt_pch_p_11align_stack;
*gt_pch_p_18VEC_tree_gc_vec_gc = *gccc::gt_pch_p_18VEC_tree_gc_vec_gc;
*gt_pch_p_19VEC_const_char_p_gc = *gccc::gt_pch_p_19VEC_const_char_p_gc;
*gt_pch_p_21pending_abstract_type = *gccc::gt_pch_p_21pending_abstract_type;
*gt_pch_p_15VEC_tree_int_gc = *gccc::gt_pch_p_15VEC_tree_int_gc;
*gt_pch_p_9cp_parser = *gccc::gt_pch_p_9cp_parser;
*gt_pch_p_34VEC_cp_unparsed_functions_entry_gc = *gccc::gt_pch_p_34VEC_cp_unparsed_functions_entry_gc;
*gt_pch_p_27VEC_cp_default_arg_entry_gc = *gccc::gt_pch_p_27VEC_cp_default_arg_entry_gc;
*gt_pch_p_17cp_parser_context = *gccc::gt_pch_p_17cp_parser_context;
*gt_pch_p_8cp_lexer = *gccc::gt_pch_p_8cp_lexer;
*gt_pch_p_10tree_check = *gccc::gt_pch_p_10tree_check;
*gt_pch_p_14constexpr_call = *gccc::gt_pch_p_14constexpr_call;
*gt_pch_p_16constexpr_fundef = *gccc::gt_pch_p_16constexpr_fundef;
*gt_pch_p_22VEC_deferred_access_gc = *gccc::gt_pch_p_22VEC_deferred_access_gc;
*gt_pch_p_10spec_entry = *gccc::gt_pch_p_10spec_entry;
*gt_pch_p_16pending_template = *gccc::gt_pch_p_16pending_template;
*gt_pch_p_21VEC_incomplete_var_gc = *gccc::gt_pch_p_21VEC_incomplete_var_gc;
*gt_pch_p_21named_label_use_entry = *gccc::gt_pch_p_21named_label_use_entry;
*gt_pch_p_28VEC_deferred_access_check_gc = *gccc::gt_pch_p_28VEC_deferred_access_check_gc;
*gt_pch_p_18sorted_fields_type = *gccc::gt_pch_p_18sorted_fields_type;
*gt_pch_p_18VEC_tree_pair_s_gc = *gccc::gt_pch_p_18VEC_tree_pair_s_gc;
*gt_pch_p_17named_label_entry = *gccc::gt_pch_p_17named_label_entry;
*gt_pch_p_32VEC_qualified_typedef_usage_t_gc = *gccc::gt_pch_p_32VEC_qualified_typedef_usage_t_gc;
*gt_pch_p_14cp_token_cache = *gccc::gt_pch_p_14cp_token_cache;
*gt_pch_p_11saved_scope = *gccc::gt_pch_p_11saved_scope;
*gt_pch_p_16cxx_int_tree_map = *gccc::gt_pch_p_16cxx_int_tree_map;
*gt_pch_p_23VEC_cp_label_binding_gc = *gccc::gt_pch_p_23VEC_cp_label_binding_gc;
*gt_pch_p_23VEC_cp_class_binding_gc = *gccc::gt_pch_p_23VEC_cp_class_binding_gc;
*gt_pch_p_24VEC_cxx_saved_binding_gc = *gccc::gt_pch_p_24VEC_cxx_saved_binding_gc;
*gt_pch_p_16cp_binding_level = *gccc::gt_pch_p_16cp_binding_level;
*gt_pch_p_11cxx_binding = *gccc::gt_pch_p_11cxx_binding;
*gt_pch_p_15binding_entry_s = *gccc::gt_pch_p_15binding_entry_s;
*gt_pch_p_15binding_table_s = *gccc::gt_pch_p_15binding_table_s;
*gt_pch_p_11tinst_level = *gccc::gt_pch_p_11tinst_level;
*gt_pch_p_14VEC_tinfo_s_gc = *gccc::gt_pch_p_14VEC_tinfo_s_gc;
*gt_pch_p_18gnat_binding_level = *gccc::gt_pch_p_18gnat_binding_level;
*gt_pch_p_9elab_info = *gccc::gt_pch_p_9elab_info;
*gt_pch_p_10stmt_group = *gccc::gt_pch_p_10stmt_group;
*gt_pch_p_16VEC_parm_attr_gc = *gccc::gt_pch_p_16VEC_parm_attr_gc;
*gt_pch_p_11parm_attr_d = *gccc::gt_pch_p_11parm_attr_d;
*gt_pch_p_17lto_in_decl_state = *gccc::gt_pch_p_17lto_in_decl_state;
*gt_pch_p_22VEC_ipa_edge_args_t_gc = *gccc::gt_pch_p_22VEC_ipa_edge_args_t_gc;
*gt_pch_p_20lto_symtab_entry_def = *gccc::gt_pch_p_20lto_symtab_entry_def;
*gt_pch_p_11heapvar_map = *gccc::gt_pch_p_11heapvar_map;
*gt_pch_p_20ssa_operand_memory_d = *gccc::gt_pch_p_20ssa_operand_memory_d;
*gt_pch_p_13scev_info_str = *gccc::gt_pch_p_13scev_info_str;
*gt_pch_p_24VEC_mem_addr_template_gc = *gccc::gt_pch_p_24VEC_mem_addr_template_gc;
*gt_pch_p_26gimple_type_leader_entry_s = *gccc::gt_pch_p_26gimple_type_leader_entry_s;
*gt_pch_p_17gimple_seq_node_d = *gccc::gt_pch_p_17gimple_seq_node_d;
*gt_pch_p_9type_hash = *gccc::gt_pch_p_9type_hash;
*gt_pch_p_16string_pool_data = *gccc::gt_pch_p_16string_pool_data;
*gt_pch_p_23temp_slot_address_entry = *gccc::gt_pch_p_23temp_slot_address_entry;
*gt_pch_p_15throw_stmt_node = *gccc::gt_pch_p_15throw_stmt_node;
*gt_pch_p_21VEC_eh_landing_pad_gc = *gccc::gt_pch_p_21VEC_eh_landing_pad_gc;
*gt_pch_p_16VEC_eh_region_gc = *gccc::gt_pch_p_16VEC_eh_region_gc;
*gt_pch_p_10eh_catch_d = *gccc::gt_pch_p_10eh_catch_d;
*gt_pch_p_16eh_landing_pad_d = *gccc::gt_pch_p_16eh_landing_pad_d;
*gt_pch_p_11eh_region_d = *gccc::gt_pch_p_11eh_region_d;
*gt_pch_p_10vcall_insn = *gccc::gt_pch_p_10vcall_insn;
*gt_pch_p_18VEC_vcall_entry_gc = *gccc::gt_pch_p_18VEC_vcall_entry_gc;
*gt_pch_p_18VEC_dcall_entry_gc = *gccc::gt_pch_p_18VEC_dcall_entry_gc;
*gt_pch_p_22cached_dw_loc_list_def = *gccc::gt_pch_p_22cached_dw_loc_list_def;
*gt_pch_p_16var_loc_list_def = *gccc::gt_pch_p_16var_loc_list_def;
*gt_pch_p_12var_loc_node = *gccc::gt_pch_p_12var_loc_node;
*gt_pch_p_20VEC_die_arg_entry_gc = *gccc::gt_pch_p_20VEC_die_arg_entry_gc;
*gt_pch_p_16limbo_die_struct = *gccc::gt_pch_p_16limbo_die_struct;
*gt_pch_p_20VEC_macinfo_entry_gc = *gccc::gt_pch_p_20VEC_macinfo_entry_gc;
*gt_pch_p_20VEC_pubname_entry_gc = *gccc::gt_pch_p_20VEC_pubname_entry_gc;
*gt_pch_p_19VEC_dw_attr_node_gc = *gccc::gt_pch_p_19VEC_dw_attr_node_gc;
*gt_pch_p_18comdat_type_struct = *gccc::gt_pch_p_18comdat_type_struct;
*gt_pch_p_25dw_ranges_by_label_struct = *gccc::gt_pch_p_25dw_ranges_by_label_struct;
*gt_pch_p_16dw_ranges_struct = *gccc::gt_pch_p_16dw_ranges_struct;
*gt_pch_p_28dw_separate_line_info_struct = *gccc::gt_pch_p_28dw_separate_line_info_struct;
*gt_pch_p_19dw_line_info_struct = *gccc::gt_pch_p_19dw_line_info_struct;
*gt_pch_p_25VEC_deferred_locations_gc = *gccc::gt_pch_p_25VEC_deferred_locations_gc;
*gt_pch_p_18dw_loc_list_struct = *gccc::gt_pch_p_18dw_loc_list_struct;
*gt_pch_p_15dwarf_file_data = *gccc::gt_pch_p_15dwarf_file_data;
*gt_pch_p_15queued_reg_save = *gccc::gt_pch_p_15queued_reg_save;
*gt_pch_p_20indirect_string_node = *gccc::gt_pch_p_20indirect_string_node;
*gt_pch_p_19dw_loc_descr_struct = *gccc::gt_pch_p_19dw_loc_descr_struct;
*gt_pch_p_13dw_fde_struct = *gccc::gt_pch_p_13dw_fde_struct;
*gt_pch_p_13dw_cfi_struct = *gccc::gt_pch_p_13dw_cfi_struct;
*gt_pch_p_8typeinfo = *gccc::gt_pch_p_8typeinfo;
*gt_pch_p_22VEC_alias_set_entry_gc = *gccc::gt_pch_p_22VEC_alias_set_entry_gc;
*gt_pch_p_17alias_set_entry_d = *gccc::gt_pch_p_17alias_set_entry_d;
*gt_pch_p_24constant_descriptor_tree = *gccc::gt_pch_p_24constant_descriptor_tree;
*gt_pch_p_15cgraph_asm_node = *gccc::gt_pch_p_15cgraph_asm_node;
*gt_pch_p_25cgraph_indirect_call_info = *gccc::gt_pch_p_25cgraph_indirect_call_info;
*gt_pch_p_20varpool_node_set_def = *gccc::gt_pch_p_20varpool_node_set_def;
*gt_pch_p_28varpool_node_set_element_def = *gccc::gt_pch_p_28varpool_node_set_element_def;
*gt_pch_p_23VEC_varpool_node_ptr_gc = *gccc::gt_pch_p_23VEC_varpool_node_ptr_gc;
*gt_pch_p_19cgraph_node_set_def = *gccc::gt_pch_p_19cgraph_node_set_def;
*gt_pch_p_27cgraph_node_set_element_def = *gccc::gt_pch_p_27cgraph_node_set_element_def;
*gt_pch_p_22VEC_cgraph_node_ptr_gc = *gccc::gt_pch_p_22VEC_cgraph_node_ptr_gc;
*gt_pch_p_11cgraph_edge = *gccc::gt_pch_p_11cgraph_edge;
*gt_pch_p_24VEC_ipa_replace_map_p_gc = *gccc::gt_pch_p_24VEC_ipa_replace_map_p_gc;
*gt_pch_p_15ipa_replace_map = *gccc::gt_pch_p_15ipa_replace_map;
*gt_pch_p_18lto_file_decl_data = *gccc::gt_pch_p_18lto_file_decl_data;
*gt_pch_p_16VEC_ipa_ref_t_gc = *gccc::gt_pch_p_16VEC_ipa_ref_t_gc;
*gt_pch_p_12varpool_node = *gccc::gt_pch_p_12varpool_node;
*gt_pch_p_11cgraph_node = *gccc::gt_pch_p_11cgraph_node;
*gt_pch_p_18VEC_basic_block_gc = *gccc::gt_pch_p_18VEC_basic_block_gc;
*gt_pch_p_14gimple_bb_info = *gccc::gt_pch_p_14gimple_bb_info;
*gt_pch_p_11rtl_bb_info = *gccc::gt_pch_p_11rtl_bb_info;
*gt_pch_p_11VEC_edge_gc = *gccc::gt_pch_p_11VEC_edge_gc;
*gt_pch_p_13VEC_loop_p_gc = *gccc::gt_pch_p_13VEC_loop_p_gc;
*gt_pch_p_4loop = *gccc::gt_pch_p_4loop;
*gt_pch_p_9loop_exit = *gccc::gt_pch_p_9loop_exit;
*gt_pch_p_13nb_iter_bound = *gccc::gt_pch_p_13nb_iter_bound;
*gt_pch_p_24types_used_by_vars_entry = *gccc::gt_pch_p_24types_used_by_vars_entry;
*gt_pch_p_17language_function = *gccc::gt_pch_p_17language_function;
*gt_pch_p_5loops = *gccc::gt_pch_p_5loops;
*gt_pch_p_18control_flow_graph = *gccc::gt_pch_p_18control_flow_graph;
*gt_pch_p_9eh_status = *gccc::gt_pch_p_9eh_status;
*gt_pch_p_11stack_usage = *gccc::gt_pch_p_11stack_usage;
*gt_pch_p_20initial_value_struct = *gccc::gt_pch_p_20initial_value_struct;
*gt_pch_p_11frame_space = *gccc::gt_pch_p_11frame_space;
*gt_pch_p_17rtx_constant_pool = *gccc::gt_pch_p_17rtx_constant_pool;
*gt_pch_p_18VEC_temp_slot_p_gc = *gccc::gt_pch_p_18VEC_temp_slot_p_gc;
*gt_pch_p_9temp_slot = *gccc::gt_pch_p_9temp_slot;
*gt_pch_p_9gimple_df = *gccc::gt_pch_p_9gimple_df;
*gt_pch_p_23VEC_call_site_record_gc = *gccc::gt_pch_p_23VEC_call_site_record_gc;
*gt_pch_p_18call_site_record_d = *gccc::gt_pch_p_18call_site_record_d;
*gt_pch_p_14sequence_stack = *gccc::gt_pch_p_14sequence_stack;
*gt_pch_p_13libfunc_entry = *gccc::gt_pch_p_13libfunc_entry;
*gt_pch_p_17tree_priority_map = *gccc::gt_pch_p_17tree_priority_map;
*gt_pch_p_12tree_int_map = *gccc::gt_pch_p_12tree_int_map;
*gt_pch_p_13tree_decl_map = *gccc::gt_pch_p_13tree_decl_map;
*gt_pch_p_8tree_map = *gccc::gt_pch_p_8tree_map;
*gt_pch_p_14lang_tree_node = *gccc::gt_pch_p_14lang_tree_node;
*gt_pch_p_24tree_statement_list_node = *gccc::gt_pch_p_24tree_statement_list_node;
*gt_pch_p_9var_ann_d = *gccc::gt_pch_p_9var_ann_d;
*gt_pch_p_9lang_decl = *gccc::gt_pch_p_9lang_decl;
*gt_pch_p_9lang_type = *gccc::gt_pch_p_9lang_type;
*gt_pch_p_10die_struct = *gccc::gt_pch_p_10die_struct;
*gt_pch_p_12ptr_info_def = *gccc::gt_pch_p_12ptr_info_def;
*gt_pch_p_22VEC_constructor_elt_gc = *gccc::gt_pch_p_22VEC_constructor_elt_gc;
*gt_pch_p_17VEC_alias_pair_gc = *gccc::gt_pch_p_17VEC_alias_pair_gc;
*gt_pch_p_8function = *gccc::gt_pch_p_8function;
*gt_pch_p_23constant_descriptor_rtx = *gccc::gt_pch_p_23constant_descriptor_rtx;
*gt_pch_p_11fixed_value = *gccc::gt_pch_p_11fixed_value;
*gt_pch_p_10real_value = *gccc::gt_pch_p_10real_value;
*gt_pch_p_12object_block = *gccc::gt_pch_p_12object_block;
*gt_pch_p_9reg_attrs = *gccc::gt_pch_p_9reg_attrs;
*gt_pch_p_9mem_attrs = *gccc::gt_pch_p_9mem_attrs;
*gt_pch_p_14bitmap_obstack = *gccc::gt_pch_p_14bitmap_obstack;
*gt_pch_p_18bitmap_element_def = *gccc::gt_pch_p_18bitmap_element_def;
*gt_pch_p_16machine_function = *gccc::gt_pch_p_16machine_function;
*gt_pch_p_17stack_local_entry = *gccc::gt_pch_p_17stack_local_entry;
*gt_pch_p_10VEC_rtx_gc = *gccc::gt_pch_p_10VEC_rtx_gc;
*gt_pch_p_13VEC_gimple_gc = *gccc::gt_pch_p_13VEC_gimple_gc;
*gt_pch_p_11VEC_tree_gc = *gccc::gt_pch_p_11VEC_tree_gc;
*gt_pch_p_12VEC_uchar_gc = *gccc::gt_pch_p_12VEC_uchar_gc;
*gt_pch_p_15basic_block_def = *gccc::gt_pch_p_15basic_block_def;
*gt_pch_p_8edge_def = *gccc::gt_pch_p_8edge_def;
*gt_pch_p_12gimple_seq_d = *gccc::gt_pch_p_12gimple_seq_d;
*gt_pch_p_7section = *gccc::gt_pch_p_7section;
*gt_pch_p_18gimple_statement_d = *gccc::gt_pch_p_18gimple_statement_d;
*gt_pch_p_9rtvec_def = *gccc::gt_pch_p_9rtvec_def;
*gt_pch_p_7rtx_def = *gccc::gt_pch_p_7rtx_def;
*gt_pch_p_15bitmap_head_def = *gccc::gt_pch_p_15bitmap_head_def;
*gt_pch_p_6answer = *gccc::gt_pch_p_6answer;
*gt_pch_p_9cpp_macro = *gccc::gt_pch_p_9cpp_macro;
*gt_pch_p_9cpp_token = *gccc::gt_pch_p_9cpp_token;
*gt_pch_p_9line_maps = *gccc::gt_pch_p_9line_maps;
*gt_pch_p_II17splay_tree_node_s = *gccc::gt_pch_p_II17splay_tree_node_s;
*gt_pch_p_SP9tree_node17splay_tree_node_s = *gccc::gt_pch_p_SP9tree_node17splay_tree_node_s;
*gt_pch_p_P9tree_nodeP9tree_node17splay_tree_node_s = *gccc::gt_pch_p_P9tree_nodeP9tree_node17splay_tree_node_s;
*gt_pch_p_P15interface_tuple4htab = *gccc::gt_pch_p_P15interface_tuple4htab;
*gt_pch_p_P17string_descriptor4htab = *gccc::gt_pch_p_P17string_descriptor4htab;
*gt_pch_p_P14type_assertion4htab = *gccc::gt_pch_p_P14type_assertion4htab;
*gt_pch_p_P18treetreehash_entry4htab = *gccc::gt_pch_p_P18treetreehash_entry4htab;
*gt_pch_p_P17module_htab_entry4htab = *gccc::gt_pch_p_P17module_htab_entry4htab;
*gt_pch_p_P21pending_abstract_type4htab = *gccc::gt_pch_p_P21pending_abstract_type4htab;
*gt_pch_p_P14constexpr_call4htab = *gccc::gt_pch_p_P14constexpr_call4htab;
*gt_pch_p_P16constexpr_fundef4htab = *gccc::gt_pch_p_P16constexpr_fundef4htab;
*gt_pch_p_P10spec_entry4htab = *gccc::gt_pch_p_P10spec_entry4htab;
*gt_pch_p_P16cxx_int_tree_map4htab = *gccc::gt_pch_p_P16cxx_int_tree_map4htab;
*gt_pch_p_P17named_label_entry4htab = *gccc::gt_pch_p_P17named_label_entry4htab;
*gt_pch_p_P17lto_in_decl_state4htab = *gccc::gt_pch_p_P17lto_in_decl_state4htab;
*gt_pch_p_P20lto_symtab_entry_def4htab = *gccc::gt_pch_p_P20lto_symtab_entry_def4htab;
*gt_pch_p_P11heapvar_map4htab = *gccc::gt_pch_p_P11heapvar_map4htab;
*gt_pch_p_P8tree_map4htab = *gccc::gt_pch_p_P8tree_map4htab;
*gt_pch_p_P9tree_nodeP9tree_node12splay_tree_s = *gccc::gt_pch_p_P9tree_nodeP9tree_node12splay_tree_s;
*gt_pch_p_P12varpool_node4htab = *gccc::gt_pch_p_P12varpool_node4htab;
*gt_pch_p_P13scev_info_str4htab = *gccc::gt_pch_p_P13scev_info_str4htab;
*gt_pch_p_P12tree_int_map4htab = *gccc::gt_pch_p_P12tree_int_map4htab;
*gt_pch_p_P23constant_descriptor_rtx4htab = *gccc::gt_pch_p_P23constant_descriptor_rtx4htab;
*gt_pch_p_P24constant_descriptor_tree4htab = *gccc::gt_pch_p_P24constant_descriptor_tree4htab;
*gt_pch_p_P12object_block4htab = *gccc::gt_pch_p_P12object_block4htab;
*gt_pch_p_P7section4htab = *gccc::gt_pch_p_P7section4htab;
*gt_pch_p_P17tree_priority_map4htab = *gccc::gt_pch_p_P17tree_priority_map4htab;
*gt_pch_p_P13tree_decl_map4htab = *gccc::gt_pch_p_P13tree_decl_map4htab;
*gt_pch_p_P9type_hash4htab = *gccc::gt_pch_p_P9type_hash4htab;
*gt_pch_p_P23temp_slot_address_entry4htab = *gccc::gt_pch_p_P23temp_slot_address_entry4htab;
*gt_pch_p_P15throw_stmt_node4htab = *gccc::gt_pch_p_P15throw_stmt_node4htab;
*gt_pch_p_P9reg_attrs4htab = *gccc::gt_pch_p_P9reg_attrs4htab;
*gt_pch_p_P9mem_attrs4htab = *gccc::gt_pch_p_P9mem_attrs4htab;
*gt_pch_p_P7rtx_def4htab = *gccc::gt_pch_p_P7rtx_def4htab;
*gt_pch_p_SP9tree_node12splay_tree_s = *gccc::gt_pch_p_SP9tree_node12splay_tree_s;
*gt_pch_p_P10vcall_insn4htab = *gccc::gt_pch_p_P10vcall_insn4htab;
*gt_pch_p_P22cached_dw_loc_list_def4htab = *gccc::gt_pch_p_P22cached_dw_loc_list_def4htab;
*gt_pch_p_P16var_loc_list_def4htab = *gccc::gt_pch_p_P16var_loc_list_def4htab;
*gt_pch_p_P10die_struct4htab = *gccc::gt_pch_p_P10die_struct4htab;
*gt_pch_p_P15dwarf_file_data4htab = *gccc::gt_pch_p_P15dwarf_file_data4htab;
*gt_pch_p_P20indirect_string_node4htab = *gccc::gt_pch_p_P20indirect_string_node4htab;
*gt_pch_p_P11cgraph_node4htab = *gccc::gt_pch_p_P11cgraph_node4htab;
*gt_pch_p_II12splay_tree_s = *gccc::gt_pch_p_II12splay_tree_s;
*gt_pch_p_P28varpool_node_set_element_def4htab = *gccc::gt_pch_p_P28varpool_node_set_element_def4htab;
*gt_pch_p_P27cgraph_node_set_element_def4htab = *gccc::gt_pch_p_P27cgraph_node_set_element_def4htab;
*gt_pch_p_P11cgraph_edge4htab = *gccc::gt_pch_p_P11cgraph_edge4htab;
*gt_pch_p_P9loop_exit4htab = *gccc::gt_pch_p_P9loop_exit4htab;
*gt_pch_p_P24types_used_by_vars_entry4htab = *gccc::gt_pch_p_P24types_used_by_vars_entry4htab;
*gt_pch_p_P9tree_node4htab = *gccc::gt_pch_p_P9tree_node4htab;
*gt_pch_p_P13libfunc_entry4htab = *gccc::gt_pch_p_P13libfunc_entry4htab;
*ggc_alloc_splay_tree_scalar_scalar_splay_tree_node_s = *gccc::ggc_alloc_splay_tree_scalar_scalar_splay_tree_node_s;
*ggc_alloc_splay_tree_str_tree_node_splay_tree_node_s = *gccc::ggc_alloc_splay_tree_str_tree_node_splay_tree_node_s;
*ggc_alloc_splay_tree_tree_node_tree_node_splay_tree_node_s = *gccc::ggc_alloc_splay_tree_tree_node_tree_node_splay_tree_node_s;
*ggc_alloc_splay_tree_interface_tuple_htab = *gccc::ggc_alloc_splay_tree_interface_tuple_htab;
*ggc_alloc_splay_tree_string_descriptor_htab = *gccc::ggc_alloc_splay_tree_string_descriptor_htab;
*ggc_alloc_splay_tree_type_assertion_htab = *gccc::ggc_alloc_splay_tree_type_assertion_htab;
*ggc_alloc_splay_tree_treetreehash_entry_htab = *gccc::ggc_alloc_splay_tree_treetreehash_entry_htab;
*ggc_alloc_splay_tree_module_htab_entry_htab = *gccc::ggc_alloc_splay_tree_module_htab_entry_htab;
*ggc_alloc_splay_tree_pending_abstract_type_htab = *gccc::ggc_alloc_splay_tree_pending_abstract_type_htab;
*ggc_alloc_splay_tree_constexpr_call_htab = *gccc::ggc_alloc_splay_tree_constexpr_call_htab;
*ggc_alloc_splay_tree_constexpr_fundef_htab = *gccc::ggc_alloc_splay_tree_constexpr_fundef_htab;
*ggc_alloc_splay_tree_spec_entry_htab = *gccc::ggc_alloc_splay_tree_spec_entry_htab;
*ggc_alloc_splay_tree_cxx_int_tree_map_htab = *gccc::ggc_alloc_splay_tree_cxx_int_tree_map_htab;
*ggc_alloc_splay_tree_named_label_entry_htab = *gccc::ggc_alloc_splay_tree_named_label_entry_htab;
*ggc_alloc_splay_tree_lto_in_decl_state_htab = *gccc::ggc_alloc_splay_tree_lto_in_decl_state_htab;
*ggc_alloc_splay_tree_lto_symtab_entry_def_htab = *gccc::ggc_alloc_splay_tree_lto_symtab_entry_def_htab;
*ggc_alloc_splay_tree_heapvar_map_htab = *gccc::ggc_alloc_splay_tree_heapvar_map_htab;
*ggc_alloc_splay_tree_tree_map_htab = *gccc::ggc_alloc_splay_tree_tree_map_htab;
*ggc_alloc_splay_tree_tree_node_tree_node_splay_tree_s = *gccc::ggc_alloc_splay_tree_tree_node_tree_node_splay_tree_s;
*ggc_alloc_splay_tree_varpool_node_htab = *gccc::ggc_alloc_splay_tree_varpool_node_htab;
*ggc_alloc_splay_tree_scev_info_str_htab = *gccc::ggc_alloc_splay_tree_scev_info_str_htab;
*ggc_alloc_splay_tree_tree_int_map_htab = *gccc::ggc_alloc_splay_tree_tree_int_map_htab;
*ggc_alloc_splay_tree_constant_descriptor_rtx_htab = *gccc::ggc_alloc_splay_tree_constant_descriptor_rtx_htab;
*ggc_alloc_splay_tree_constant_descriptor_tree_htab = *gccc::ggc_alloc_splay_tree_constant_descriptor_tree_htab;
*ggc_alloc_splay_tree_object_block_htab = *gccc::ggc_alloc_splay_tree_object_block_htab;
*ggc_alloc_splay_tree_section_htab = *gccc::ggc_alloc_splay_tree_section_htab;
*ggc_alloc_splay_tree_tree_priority_map_htab = *gccc::ggc_alloc_splay_tree_tree_priority_map_htab;
*ggc_alloc_splay_tree_tree_decl_map_htab = *gccc::ggc_alloc_splay_tree_tree_decl_map_htab;
*ggc_alloc_splay_tree_type_hash_htab = *gccc::ggc_alloc_splay_tree_type_hash_htab;
*ggc_alloc_splay_tree_temp_slot_address_entry_htab = *gccc::ggc_alloc_splay_tree_temp_slot_address_entry_htab;
*ggc_alloc_splay_tree_throw_stmt_node_htab = *gccc::ggc_alloc_splay_tree_throw_stmt_node_htab;
*ggc_alloc_splay_tree_reg_attrs_htab = *gccc::ggc_alloc_splay_tree_reg_attrs_htab;
*ggc_alloc_splay_tree_mem_attrs_htab = *gccc::ggc_alloc_splay_tree_mem_attrs_htab;
*ggc_alloc_splay_tree_rtx_def_htab = *gccc::ggc_alloc_splay_tree_rtx_def_htab;
*ggc_alloc_splay_tree_str_tree_node_splay_tree_s = *gccc::ggc_alloc_splay_tree_str_tree_node_splay_tree_s;
*ggc_alloc_splay_tree_vcall_insn_htab = *gccc::ggc_alloc_splay_tree_vcall_insn_htab;
*ggc_alloc_splay_tree_cached_dw_loc_list_def_htab = *gccc::ggc_alloc_splay_tree_cached_dw_loc_list_def_htab;
*ggc_alloc_splay_tree_var_loc_list_def_htab = *gccc::ggc_alloc_splay_tree_var_loc_list_def_htab;
*ggc_alloc_splay_tree_die_struct_htab = *gccc::ggc_alloc_splay_tree_die_struct_htab;
*ggc_alloc_splay_tree_dwarf_file_data_htab = *gccc::ggc_alloc_splay_tree_dwarf_file_data_htab;
*ggc_alloc_splay_tree_indirect_string_node_htab = *gccc::ggc_alloc_splay_tree_indirect_string_node_htab;
*ggc_alloc_splay_tree_cgraph_node_htab = *gccc::ggc_alloc_splay_tree_cgraph_node_htab;
*ggc_alloc_splay_tree_scalar_scalar_splay_tree_s = *gccc::ggc_alloc_splay_tree_scalar_scalar_splay_tree_s;
*ggc_alloc_splay_tree_varpool_node_set_element_def_htab = *gccc::ggc_alloc_splay_tree_varpool_node_set_element_def_htab;
*ggc_alloc_splay_tree_cgraph_node_set_element_def_htab = *gccc::ggc_alloc_splay_tree_cgraph_node_set_element_def_htab;
*ggc_alloc_splay_tree_cgraph_edge_htab = *gccc::ggc_alloc_splay_tree_cgraph_edge_htab;
*ggc_alloc_splay_tree_loop_exit_htab = *gccc::ggc_alloc_splay_tree_loop_exit_htab;
*ggc_alloc_splay_tree_types_used_by_vars_entry_htab = *gccc::ggc_alloc_splay_tree_types_used_by_vars_entry_htab;
*ggc_alloc_splay_tree_tree_node_htab = *gccc::ggc_alloc_splay_tree_tree_node_htab;
*ggc_alloc_splay_tree_libfunc_entry_htab = *gccc::ggc_alloc_splay_tree_libfunc_entry_htab;
*gt_pch_note_object = *gccc::gt_pch_note_object;
*gt_pch_note_reorder = *gccc::gt_pch_note_reorder;
*ggc_set_mark = *gccc::ggc_set_mark;
*ggc_marked_p = *gccc::ggc_marked_p;
*gt_pch_n_S = *gccc::gt_pch_n_S;
*gt_ggc_m_S = *gccc::gt_ggc_m_S;
*init_stringpool = *gccc::init_stringpool;
*init_ggc = *gccc::init_ggc;
*gt_pch_save = *gccc::gt_pch_save;
*ggc_internal_alloc_stat = *gccc::ggc_internal_alloc_stat;
*ggc_alloc_typed_stat = *gccc::ggc_alloc_typed_stat;
*ggc_internal_cleared_alloc_stat = *gccc::ggc_internal_cleared_alloc_stat;
*ggc_realloc_stat = *gccc::ggc_realloc_stat;
*ggc_record_overhead = *gccc::ggc_record_overhead;
*ggc_free_overhead = *gccc::ggc_free_overhead;
*ggc_prune_overhead_list = *gccc::ggc_prune_overhead_list;
*dump_ggc_loc_statistics = *gccc::dump_ggc_loc_statistics;
*ggc_internal_vec_alloc_stat = *gccc::ggc_internal_vec_alloc_stat;
*ggc_internal_cleared_vec_alloc_stat = *gccc::ggc_internal_cleared_vec_alloc_stat;
*ggc_alloc_atomic_stat = *gccc::ggc_alloc_atomic_stat;
*ggc_cleared_alloc_htab_ignore_args = *gccc::ggc_cleared_alloc_htab_ignore_args;
*ggc_cleared_alloc_ptr_array_two_args = *gccc::ggc_cleared_alloc_ptr_array_two_args;
*ggc_splay_alloc = *gccc::ggc_splay_alloc;
*ggc_splay_dont_free = *gccc::ggc_splay_dont_free;
*ggc_alloc_string_stat = *gccc::ggc_alloc_string_stat;
*ggc_collect = *gccc::ggc_collect;
*ggc_register_root_tab = *gccc::ggc_register_root_tab;
*ggc_register_cache_tab = *gccc::ggc_register_cache_tab;
*gt_pch_restore = *gccc::gt_pch_restore;
*ggc_print_statistics = *gccc::ggc_print_statistics;
*stringpool_statistics = *gccc::stringpool_statistics;
*init_ggc_heuristics = *gccc::init_ggc_heuristics;
*ggc_internal_zone_alloc_stat = *gccc::ggc_internal_zone_alloc_stat;
*ggc_internal_zone_cleared_alloc_stat = *gccc::ggc_internal_zone_cleared_alloc_stat;
*ggc_internal_zone_vec_alloc_stat = *gccc::ggc_internal_zone_vec_alloc_stat;
*ggc_alloc_zone_rtx_def_stat = *gccc::ggc_alloc_zone_rtx_def_stat;
*ggc_alloc_zone_tree_node_stat = *gccc::ggc_alloc_zone_tree_node_stat;
*ggc_alloc_zone_cleared_tree_node_stat = *gccc::ggc_alloc_zone_cleared_tree_node_stat;
*ggc_alloc_cleared_gimple_statement_d_stat = *gccc::ggc_alloc_cleared_gimple_statement_d_stat;
*VEC_char_must_be_integral_type = *gccc::VEC_char_must_be_integral_type;
*VEC_char_base_length = *gccc::VEC_char_base_length;
*VEC_char_base_last = *gccc::VEC_char_base_last;
*VEC_char_base_index = *gccc::VEC_char_base_index;
*VEC_char_base_iterate = *gccc::VEC_char_base_iterate;
*VEC_char_base_embedded_size = *gccc::VEC_char_base_embedded_size;
*VEC_char_base_embedded_init = *gccc::VEC_char_base_embedded_init;
*VEC_char_base_space = *gccc::VEC_char_base_space;
*VEC_char_base_splice = *gccc::VEC_char_base_splice;
*VEC_char_base_quick_push = *gccc::VEC_char_base_quick_push;
*VEC_char_base_pop = *gccc::VEC_char_base_pop;
*VEC_char_base_truncate = *gccc::VEC_char_base_truncate;
*VEC_char_base_replace = *gccc::VEC_char_base_replace;
*VEC_char_base_quick_insert = *gccc::VEC_char_base_quick_insert;
*VEC_char_base_ordered_remove = *gccc::VEC_char_base_ordered_remove;
*VEC_char_base_unordered_remove = *gccc::VEC_char_base_unordered_remove;
*VEC_char_base_block_remove = *gccc::VEC_char_base_block_remove;
*VEC_char_base_address = *gccc::VEC_char_base_address;
*VEC_char_base_lower_bound = *gccc::VEC_char_base_lower_bound;
*VEC_char_heap_alloc = *gccc::VEC_char_heap_alloc;
*VEC_char_heap_copy = *gccc::VEC_char_heap_copy;
*VEC_char_heap_free = *gccc::VEC_char_heap_free;
*VEC_char_heap_reserve = *gccc::VEC_char_heap_reserve;
*VEC_char_heap_reserve_exact = *gccc::VEC_char_heap_reserve_exact;
*VEC_char_heap_safe_grow = *gccc::VEC_char_heap_safe_grow;
*VEC_char_heap_safe_grow_cleared = *gccc::VEC_char_heap_safe_grow_cleared;
*VEC_char_heap_safe_splice = *gccc::VEC_char_heap_safe_splice;
*VEC_char_heap_safe_push = *gccc::VEC_char_heap_safe_push;
*VEC_char_heap_safe_insert = *gccc::VEC_char_heap_safe_insert;
*VEC_uchar_must_be_integral_type = *gccc::VEC_uchar_must_be_integral_type;
*VEC_uchar_base_length = *gccc::VEC_uchar_base_length;
*VEC_uchar_base_last = *gccc::VEC_uchar_base_last;
*VEC_uchar_base_index = *gccc::VEC_uchar_base_index;
*VEC_uchar_base_iterate = *gccc::VEC_uchar_base_iterate;
*VEC_uchar_base_embedded_size = *gccc::VEC_uchar_base_embedded_size;
*VEC_uchar_base_embedded_init = *gccc::VEC_uchar_base_embedded_init;
*VEC_uchar_base_space = *gccc::VEC_uchar_base_space;
*VEC_uchar_base_splice = *gccc::VEC_uchar_base_splice;
*VEC_uchar_base_quick_push = *gccc::VEC_uchar_base_quick_push;
*VEC_uchar_base_pop = *gccc::VEC_uchar_base_pop;
*VEC_uchar_base_truncate = *gccc::VEC_uchar_base_truncate;
*VEC_uchar_base_replace = *gccc::VEC_uchar_base_replace;
*VEC_uchar_base_quick_insert = *gccc::VEC_uchar_base_quick_insert;
*VEC_uchar_base_ordered_remove = *gccc::VEC_uchar_base_ordered_remove;
*VEC_uchar_base_unordered_remove = *gccc::VEC_uchar_base_unordered_remove;
*VEC_uchar_base_block_remove = *gccc::VEC_uchar_base_block_remove;
*VEC_uchar_base_address = *gccc::VEC_uchar_base_address;
*VEC_uchar_base_lower_bound = *gccc::VEC_uchar_base_lower_bound;
*VEC_uchar_heap_alloc = *gccc::VEC_uchar_heap_alloc;
*VEC_uchar_heap_copy = *gccc::VEC_uchar_heap_copy;
*VEC_uchar_heap_free = *gccc::VEC_uchar_heap_free;
*VEC_uchar_heap_reserve = *gccc::VEC_uchar_heap_reserve;
*VEC_uchar_heap_reserve_exact = *gccc::VEC_uchar_heap_reserve_exact;
*VEC_uchar_heap_safe_grow = *gccc::VEC_uchar_heap_safe_grow;
*VEC_uchar_heap_safe_grow_cleared = *gccc::VEC_uchar_heap_safe_grow_cleared;
*VEC_uchar_heap_safe_splice = *gccc::VEC_uchar_heap_safe_splice;
*VEC_uchar_heap_safe_push = *gccc::VEC_uchar_heap_safe_push;
*VEC_uchar_heap_safe_insert = *gccc::VEC_uchar_heap_safe_insert;
*VEC_uchar_gc_alloc = *gccc::VEC_uchar_gc_alloc;
*VEC_uchar_gc_copy = *gccc::VEC_uchar_gc_copy;
*VEC_uchar_gc_free = *gccc::VEC_uchar_gc_free;
*VEC_uchar_gc_reserve = *gccc::VEC_uchar_gc_reserve;
*VEC_uchar_gc_reserve_exact = *gccc::VEC_uchar_gc_reserve_exact;
*VEC_uchar_gc_safe_grow = *gccc::VEC_uchar_gc_safe_grow;
*VEC_uchar_gc_safe_grow_cleared = *gccc::VEC_uchar_gc_safe_grow_cleared;
*VEC_uchar_gc_safe_splice = *gccc::VEC_uchar_gc_safe_splice;
*VEC_uchar_gc_safe_push = *gccc::VEC_uchar_gc_safe_push;
*VEC_uchar_gc_safe_insert = *gccc::VEC_uchar_gc_safe_insert;
*VEC_int_must_be_integral_type = *gccc::VEC_int_must_be_integral_type;
*VEC_int_base_length = *gccc::VEC_int_base_length;
*VEC_int_base_last = *gccc::VEC_int_base_last;
*VEC_int_base_index = *gccc::VEC_int_base_index;
*VEC_int_base_iterate = *gccc::VEC_int_base_iterate;
*VEC_int_base_embedded_size = *gccc::VEC_int_base_embedded_size;
*VEC_int_base_embedded_init = *gccc::VEC_int_base_embedded_init;
*VEC_int_base_space = *gccc::VEC_int_base_space;
*VEC_int_base_splice = *gccc::VEC_int_base_splice;
*VEC_int_base_quick_push = *gccc::VEC_int_base_quick_push;
*VEC_int_base_pop = *gccc::VEC_int_base_pop;
*VEC_int_base_truncate = *gccc::VEC_int_base_truncate;
*VEC_int_base_replace = *gccc::VEC_int_base_replace;
*VEC_int_base_quick_insert = *gccc::VEC_int_base_quick_insert;
*VEC_int_base_ordered_remove = *gccc::VEC_int_base_ordered_remove;
*VEC_int_base_unordered_remove = *gccc::VEC_int_base_unordered_remove;
*VEC_int_base_block_remove = *gccc::VEC_int_base_block_remove;
*VEC_int_base_address = *gccc::VEC_int_base_address;
*VEC_int_base_lower_bound = *gccc::VEC_int_base_lower_bound;
*VEC_int_heap_alloc = *gccc::VEC_int_heap_alloc;
*VEC_int_heap_copy = *gccc::VEC_int_heap_copy;
*VEC_int_heap_free = *gccc::VEC_int_heap_free;
*VEC_int_heap_reserve = *gccc::VEC_int_heap_reserve;
*VEC_int_heap_reserve_exact = *gccc::VEC_int_heap_reserve_exact;
*VEC_int_heap_safe_grow = *gccc::VEC_int_heap_safe_grow;
*VEC_int_heap_safe_grow_cleared = *gccc::VEC_int_heap_safe_grow_cleared;
*VEC_int_heap_safe_splice = *gccc::VEC_int_heap_safe_splice;
*VEC_int_heap_safe_push = *gccc::VEC_int_heap_safe_push;
*VEC_int_heap_safe_insert = *gccc::VEC_int_heap_safe_insert;
*VEC_unsigned_must_be_integral_type = *gccc::VEC_unsigned_must_be_integral_type;
*VEC_unsigned_base_length = *gccc::VEC_unsigned_base_length;
*VEC_unsigned_base_last = *gccc::VEC_unsigned_base_last;
*VEC_unsigned_base_index = *gccc::VEC_unsigned_base_index;
*VEC_unsigned_base_iterate = *gccc::VEC_unsigned_base_iterate;
*VEC_unsigned_base_embedded_size = *gccc::VEC_unsigned_base_embedded_size;
*VEC_unsigned_base_embedded_init = *gccc::VEC_unsigned_base_embedded_init;
*VEC_unsigned_base_space = *gccc::VEC_unsigned_base_space;
*VEC_unsigned_base_splice = *gccc::VEC_unsigned_base_splice;
*VEC_unsigned_base_quick_push = *gccc::VEC_unsigned_base_quick_push;
*VEC_unsigned_base_pop = *gccc::VEC_unsigned_base_pop;
*VEC_unsigned_base_truncate = *gccc::VEC_unsigned_base_truncate;
*VEC_unsigned_base_replace = *gccc::VEC_unsigned_base_replace;
*VEC_unsigned_base_quick_insert = *gccc::VEC_unsigned_base_quick_insert;
*VEC_unsigned_base_ordered_remove = *gccc::VEC_unsigned_base_ordered_remove;
*VEC_unsigned_base_unordered_remove = *gccc::VEC_unsigned_base_unordered_remove;
*VEC_unsigned_base_block_remove = *gccc::VEC_unsigned_base_block_remove;
*VEC_unsigned_base_address = *gccc::VEC_unsigned_base_address;
*VEC_unsigned_base_lower_bound = *gccc::VEC_unsigned_base_lower_bound;
*VEC_unsigned_heap_alloc = *gccc::VEC_unsigned_heap_alloc;
*VEC_unsigned_heap_copy = *gccc::VEC_unsigned_heap_copy;
*VEC_unsigned_heap_free = *gccc::VEC_unsigned_heap_free;
*VEC_unsigned_heap_reserve = *gccc::VEC_unsigned_heap_reserve;
*VEC_unsigned_heap_reserve_exact = *gccc::VEC_unsigned_heap_reserve_exact;
*VEC_unsigned_heap_safe_grow = *gccc::VEC_unsigned_heap_safe_grow;
*VEC_unsigned_heap_safe_grow_cleared = *gccc::VEC_unsigned_heap_safe_grow_cleared;
*VEC_unsigned_heap_safe_splice = *gccc::VEC_unsigned_heap_safe_splice;
*VEC_unsigned_heap_safe_push = *gccc::VEC_unsigned_heap_safe_push;
*VEC_unsigned_heap_safe_insert = *gccc::VEC_unsigned_heap_safe_insert;
*host_detect_local_cpu = *gccc::host_detect_local_cpu;
*debug_ready_dispatch = *gccc::debug_ready_dispatch;
*debug_dispatch_window = *gccc::debug_dispatch_window;
*gen_x86_fnstsw_1 = *gccc::gen_x86_fnstsw_1;
*gen_x86_sahf_1 = *gccc::gen_x86_sahf_1;
*gen_swapxf = *gccc::gen_swapxf;
*gen_zero_extendsidi2_1 = *gccc::gen_zero_extendsidi2_1;
*gen_zero_extendqidi2 = *gccc::gen_zero_extendqidi2;
*gen_zero_extendhidi2 = *gccc::gen_zero_extendhidi2;
*gen_zero_extendhisi2_and = *gccc::gen_zero_extendhisi2_and;
*gen_extendsidi2_1 = *gccc::gen_extendsidi2_1;
*gen_extendqidi2 = *gccc::gen_extendqidi2;
*gen_extendhidi2 = *gccc::gen_extendhidi2;
*gen_extendhisi2 = *gccc::gen_extendhisi2;
*gen_extendqisi2 = *gccc::gen_extendqisi2;
*gen_extendqihi2 = *gccc::gen_extendqihi2;
*gen_truncxfsf2_i387_noop = *gccc::gen_truncxfsf2_i387_noop;
*gen_truncxfdf2_i387_noop = *gccc::gen_truncxfdf2_i387_noop;
*gen_fix_truncsfdi_sse = *gccc::gen_fix_truncsfdi_sse;
*gen_fix_truncdfdi_sse = *gccc::gen_fix_truncdfdi_sse;
*gen_fix_truncsfsi_sse = *gccc::gen_fix_truncsfsi_sse;
*gen_fix_truncdfsi_sse = *gccc::gen_fix_truncdfsi_sse;
*gen_fix_trunchi_fisttp_i387_1 = *gccc::gen_fix_trunchi_fisttp_i387_1;
*gen_fix_truncsi_fisttp_i387_1 = *gccc::gen_fix_truncsi_fisttp_i387_1;
*gen_fix_truncdi_fisttp_i387_1 = *gccc::gen_fix_truncdi_fisttp_i387_1;
*gen_fix_trunchi_i387_fisttp = *gccc::gen_fix_trunchi_i387_fisttp;
*gen_fix_truncsi_i387_fisttp = *gccc::gen_fix_truncsi_i387_fisttp;
*gen_fix_truncdi_i387_fisttp = *gccc::gen_fix_truncdi_i387_fisttp;
*gen_fix_trunchi_i387_fisttp_with_temp = *gccc::gen_fix_trunchi_i387_fisttp_with_temp;
*gen_fix_truncsi_i387_fisttp_with_temp = *gccc::gen_fix_truncsi_i387_fisttp_with_temp;
*gen_fix_truncdi_i387_fisttp_with_temp = *gccc::gen_fix_truncdi_i387_fisttp_with_temp;
*gen_fix_truncdi_i387 = *gccc::gen_fix_truncdi_i387;
*gen_fix_truncdi_i387_with_temp = *gccc::gen_fix_truncdi_i387_with_temp;
*gen_fix_trunchi_i387 = *gccc::gen_fix_trunchi_i387;
*gen_fix_truncsi_i387 = *gccc::gen_fix_truncsi_i387;
*gen_fix_trunchi_i387_with_temp = *gccc::gen_fix_trunchi_i387_with_temp;
*gen_fix_truncsi_i387_with_temp = *gccc::gen_fix_truncsi_i387_with_temp;
*gen_x86_fnstcw_1 = *gccc::gen_x86_fnstcw_1;
*gen_x86_fldcw_1 = *gccc::gen_x86_fldcw_1;
*gen_floatdisf2_i387_with_xmm = *gccc::gen_floatdisf2_i387_with_xmm;
*gen_floatdidf2_i387_with_xmm = *gccc::gen_floatdidf2_i387_with_xmm;
*gen_floatdixf2_i387_with_xmm = *gccc::gen_floatdixf2_i387_with_xmm;
*gen_addqi3_cc = *gccc::gen_addqi3_cc;
*gen_addqi_ext_1 = *gccc::gen_addqi_ext_1;
*gen_divmodsi4_1 = *gccc::gen_divmodsi4_1;
*gen_divmoddi4_1 = *gccc::gen_divmoddi4_1;
*gen_divmodhiqi3 = *gccc::gen_divmodhiqi3;
*gen_udivmodsi4_1 = *gccc::gen_udivmodsi4_1;
*gen_udivmoddi4_1 = *gccc::gen_udivmoddi4_1;
*gen_udivmodhiqi3 = *gccc::gen_udivmodhiqi3;
*gen_andqi_ext_0 = *gccc::gen_andqi_ext_0;
*gen_copysignsf3_const = *gccc::gen_copysignsf3_const;
*gen_copysigndf3_const = *gccc::gen_copysigndf3_const;
*gen_copysigntf3_const = *gccc::gen_copysigntf3_const;
*gen_copysignsf3_var = *gccc::gen_copysignsf3_var;
*gen_copysigndf3_var = *gccc::gen_copysigndf3_var;
*gen_copysigntf3_var = *gccc::gen_copysigntf3_var;
*gen_x86_64_shld = *gccc::gen_x86_64_shld;
*gen_x86_shld = *gccc::gen_x86_shld;
*gen_x86_64_shrd = *gccc::gen_x86_64_shrd;
*gen_x86_shrd = *gccc::gen_x86_shrd;
*gen_ashrdi3_cvt = *gccc::gen_ashrdi3_cvt;
*gen_ashrsi3_cvt = *gccc::gen_ashrsi3_cvt;
*gen_ix86_rotldi3_doubleword = *gccc::gen_ix86_rotldi3_doubleword;
*gen_ix86_rotlti3_doubleword = *gccc::gen_ix86_rotlti3_doubleword;
*gen_ix86_rotrdi3_doubleword = *gccc::gen_ix86_rotrdi3_doubleword;
*gen_ix86_rotrti3_doubleword = *gccc::gen_ix86_rotrti3_doubleword;
*gen_jump = *gccc::gen_jump;
*gen_blockage = *gccc::gen_blockage;
*gen_prologue_use = *gccc::gen_prologue_use;
*gen_return_internal = *gccc::gen_return_internal;
*gen_return_internal_long = *gccc::gen_return_internal_long;
*gen_return_pop_internal = *gccc::gen_return_pop_internal;
*gen_return_indirect_internal = *gccc::gen_return_indirect_internal;
*gen_nop = *gccc::gen_nop;
*gen_nops = *gccc::gen_nops;
*gen_pad = *gccc::gen_pad;
*gen_set_got = *gccc::gen_set_got;
*gen_set_got_labelled = *gccc::gen_set_got_labelled;
*gen_set_got_rex64 = *gccc::gen_set_got_rex64;
*gen_set_rip_rex64 = *gccc::gen_set_rip_rex64;
*gen_set_got_offset_rex64 = *gccc::gen_set_got_offset_rex64;
*gen_eh_return_internal = *gccc::gen_eh_return_internal;
*gen_leave = *gccc::gen_leave;
*gen_leave_rex64 = *gccc::gen_leave_rex64;
*gen_split_stack_return = *gccc::gen_split_stack_return;
*gen_ffssi2_no_cmove = *gccc::gen_ffssi2_no_cmove;
*gen_ctzhi2 = *gccc::gen_ctzhi2;
*gen_ctzsi2 = *gccc::gen_ctzsi2;
*gen_ctzdi2 = *gccc::gen_ctzdi2;
*gen_clzhi2_abm = *gccc::gen_clzhi2_abm;
*gen_clzsi2_abm = *gccc::gen_clzsi2_abm;
*gen_clzdi2_abm = *gccc::gen_clzdi2_abm;
*gen_bmi_bextr_si = *gccc::gen_bmi_bextr_si;
*gen_bmi_bextr_di = *gccc::gen_bmi_bextr_di;
*gen_tbm_bextri_si = *gccc::gen_tbm_bextri_si;
*gen_tbm_bextri_di = *gccc::gen_tbm_bextri_di;
*gen_bsr_rex64 = *gccc::gen_bsr_rex64;
*gen_bsr = *gccc::gen_bsr;
*gen_popcounthi2 = *gccc::gen_popcounthi2;
*gen_popcountsi2 = *gccc::gen_popcountsi2;
*gen_popcountdi2 = *gccc::gen_popcountdi2;
*gen_bswaphi_lowpart = *gccc::gen_bswaphi_lowpart;
*gen_paritydi2_cmp = *gccc::gen_paritydi2_cmp;
*gen_paritysi2_cmp = *gccc::gen_paritysi2_cmp;
*gen_tls_initial_exec_64_sun = *gccc::gen_tls_initial_exec_64_sun;
*gen_truncxfsf2_i387_noop_unspec = *gccc::gen_truncxfsf2_i387_noop_unspec;
*gen_truncxfdf2_i387_noop_unspec = *gccc::gen_truncxfdf2_i387_noop_unspec;
*gen_sqrtxf2 = *gccc::gen_sqrtxf2;
*gen_sqrt_extendsfxf2_i387 = *gccc::gen_sqrt_extendsfxf2_i387;
*gen_sqrt_extenddfxf2_i387 = *gccc::gen_sqrt_extenddfxf2_i387;
*gen_fpremxf4_i387 = *gccc::gen_fpremxf4_i387;
*gen_fprem1xf4_i387 = *gccc::gen_fprem1xf4_i387;
*gen_sincosxf3 = *gccc::gen_sincosxf3;
*gen_sincos_extendsfxf3_i387 = *gccc::gen_sincos_extendsfxf3_i387;
*gen_sincos_extenddfxf3_i387 = *gccc::gen_sincos_extenddfxf3_i387;
*gen_fptanxf4_i387 = *gccc::gen_fptanxf4_i387;
*gen_fptan_extendsfxf4_i387 = *gccc::gen_fptan_extendsfxf4_i387;
*gen_fptan_extenddfxf4_i387 = *gccc::gen_fptan_extenddfxf4_i387;
*gen_fpatan_extendsfxf3_i387 = *gccc::gen_fpatan_extendsfxf3_i387;
*gen_fpatan_extenddfxf3_i387 = *gccc::gen_fpatan_extenddfxf3_i387;
*gen_fyl2xxf3_i387 = *gccc::gen_fyl2xxf3_i387;
*gen_fyl2x_extendsfxf3_i387 = *gccc::gen_fyl2x_extendsfxf3_i387;
*gen_fyl2x_extenddfxf3_i387 = *gccc::gen_fyl2x_extenddfxf3_i387;
*gen_fyl2xp1xf3_i387 = *gccc::gen_fyl2xp1xf3_i387;
*gen_fyl2xp1_extendsfxf3_i387 = *gccc::gen_fyl2xp1_extendsfxf3_i387;
*gen_fyl2xp1_extenddfxf3_i387 = *gccc::gen_fyl2xp1_extenddfxf3_i387;
*gen_fxtractxf3_i387 = *gccc::gen_fxtractxf3_i387;
*gen_fxtract_extendsfxf3_i387 = *gccc::gen_fxtract_extendsfxf3_i387;
*gen_fxtract_extenddfxf3_i387 = *gccc::gen_fxtract_extenddfxf3_i387;
*gen_sse4_1_roundsf2 = *gccc::gen_sse4_1_roundsf2;
*gen_sse4_1_rounddf2 = *gccc::gen_sse4_1_rounddf2;
*gen_rintxf2 = *gccc::gen_rintxf2;
*gen_fistdi2 = *gccc::gen_fistdi2;
*gen_fistdi2_with_temp = *gccc::gen_fistdi2_with_temp;
*gen_fisthi2 = *gccc::gen_fisthi2;
*gen_fistsi2 = *gccc::gen_fistsi2;
*gen_fisthi2_with_temp = *gccc::gen_fisthi2_with_temp;
*gen_fistsi2_with_temp = *gccc::gen_fistsi2_with_temp;
*gen_frndintxf2_floor = *gccc::gen_frndintxf2_floor;
*gen_frndintxf2_floor_i387 = *gccc::gen_frndintxf2_floor_i387;
*gen_fistdi2_floor = *gccc::gen_fistdi2_floor;
*gen_fistdi2_floor_with_temp = *gccc::gen_fistdi2_floor_with_temp;
*gen_fisthi2_floor = *gccc::gen_fisthi2_floor;
*gen_fistsi2_floor = *gccc::gen_fistsi2_floor;
*gen_fisthi2_floor_with_temp = *gccc::gen_fisthi2_floor_with_temp;
*gen_fistsi2_floor_with_temp = *gccc::gen_fistsi2_floor_with_temp;
*gen_frndintxf2_ceil = *gccc::gen_frndintxf2_ceil;
*gen_frndintxf2_ceil_i387 = *gccc::gen_frndintxf2_ceil_i387;
*gen_fistdi2_ceil = *gccc::gen_fistdi2_ceil;
*gen_fistdi2_ceil_with_temp = *gccc::gen_fistdi2_ceil_with_temp;
*gen_fisthi2_ceil = *gccc::gen_fisthi2_ceil;
*gen_fistsi2_ceil = *gccc::gen_fistsi2_ceil;
*gen_fisthi2_ceil_with_temp = *gccc::gen_fisthi2_ceil_with_temp;
*gen_fistsi2_ceil_with_temp = *gccc::gen_fistsi2_ceil_with_temp;
*gen_frndintxf2_trunc = *gccc::gen_frndintxf2_trunc;
*gen_frndintxf2_trunc_i387 = *gccc::gen_frndintxf2_trunc_i387;
*gen_frndintxf2_mask_pm = *gccc::gen_frndintxf2_mask_pm;
*gen_frndintxf2_mask_pm_i387 = *gccc::gen_frndintxf2_mask_pm_i387;
*gen_fxamsf2_i387 = *gccc::gen_fxamsf2_i387;
*gen_fxamdf2_i387 = *gccc::gen_fxamdf2_i387;
*gen_fxamxf2_i387 = *gccc::gen_fxamxf2_i387;
*gen_fxamsf2_i387_with_temp = *gccc::gen_fxamsf2_i387_with_temp;
*gen_fxamdf2_i387_with_temp = *gccc::gen_fxamdf2_i387_with_temp;
*gen_movmsk_df = *gccc::gen_movmsk_df;
*gen_cld = *gccc::gen_cld;
*gen_smaxsf3 = *gccc::gen_smaxsf3;
*gen_sminsf3 = *gccc::gen_sminsf3;
*gen_smaxdf3 = *gccc::gen_smaxdf3;
*gen_smindf3 = *gccc::gen_smindf3;
*gen_pro_epilogue_adjust_stack_si_add = *gccc::gen_pro_epilogue_adjust_stack_si_add;
*gen_pro_epilogue_adjust_stack_di_add = *gccc::gen_pro_epilogue_adjust_stack_di_add;
*gen_pro_epilogue_adjust_stack_si_sub = *gccc::gen_pro_epilogue_adjust_stack_si_sub;
*gen_pro_epilogue_adjust_stack_di_sub = *gccc::gen_pro_epilogue_adjust_stack_di_sub;
*gen_allocate_stack_worker_probe_si = *gccc::gen_allocate_stack_worker_probe_si;
*gen_allocate_stack_worker_probe_di = *gccc::gen_allocate_stack_worker_probe_di;
*gen_adjust_stack_and_probesi = *gccc::gen_adjust_stack_and_probesi;
*gen_adjust_stack_and_probedi = *gccc::gen_adjust_stack_and_probedi;
*gen_probe_stack_rangesi = *gccc::gen_probe_stack_rangesi;
*gen_probe_stack_rangedi = *gccc::gen_probe_stack_rangedi;
*gen_trap = *gccc::gen_trap;
*gen_stack_protect_set_si = *gccc::gen_stack_protect_set_si;
*gen_stack_protect_set_di = *gccc::gen_stack_protect_set_di;
*gen_stack_tls_protect_set_si = *gccc::gen_stack_tls_protect_set_si;
*gen_stack_tls_protect_set_di = *gccc::gen_stack_tls_protect_set_di;
*gen_stack_protect_test_si = *gccc::gen_stack_protect_test_si;
*gen_stack_protect_test_di = *gccc::gen_stack_protect_test_di;
*gen_stack_tls_protect_test_si = *gccc::gen_stack_tls_protect_test_si;
*gen_stack_tls_protect_test_di = *gccc::gen_stack_tls_protect_test_di;
*gen_sse4_2_crc32qi = *gccc::gen_sse4_2_crc32qi;
*gen_sse4_2_crc32hi = *gccc::gen_sse4_2_crc32hi;
*gen_sse4_2_crc32si = *gccc::gen_sse4_2_crc32si;
*gen_sse4_2_crc32di = *gccc::gen_sse4_2_crc32di;
*gen_lwp_slwpcbsi = *gccc::gen_lwp_slwpcbsi;
*gen_lwp_slwpcbdi = *gccc::gen_lwp_slwpcbdi;
*gen_rdfsbasesi = *gccc::gen_rdfsbasesi;
*gen_rdfsbasedi = *gccc::gen_rdfsbasedi;
*gen_rdgsbasesi = *gccc::gen_rdgsbasesi;
*gen_rdgsbasedi = *gccc::gen_rdgsbasedi;
*gen_wrfsbasesi = *gccc::gen_wrfsbasesi;
*gen_wrfsbasedi = *gccc::gen_wrfsbasedi;
*gen_wrgsbasesi = *gccc::gen_wrgsbasesi;
*gen_wrgsbasedi = *gccc::gen_wrgsbasedi;
*gen_rdrandhi_1 = *gccc::gen_rdrandhi_1;
*gen_rdrandsi_1 = *gccc::gen_rdrandsi_1;
*gen_rdranddi_1 = *gccc::gen_rdranddi_1;
*gen_sse_movntdi = *gccc::gen_sse_movntdi;
*gen_mmx_rcpv2sf2 = *gccc::gen_mmx_rcpv2sf2;
*gen_mmx_rcpit1v2sf3 = *gccc::gen_mmx_rcpit1v2sf3;
*gen_mmx_rcpit2v2sf3 = *gccc::gen_mmx_rcpit2v2sf3;
*gen_mmx_rsqrtv2sf2 = *gccc::gen_mmx_rsqrtv2sf2;
*gen_mmx_rsqit1v2sf3 = *gccc::gen_mmx_rsqit1v2sf3;
*gen_mmx_haddv2sf3 = *gccc::gen_mmx_haddv2sf3;
*gen_mmx_hsubv2sf3 = *gccc::gen_mmx_hsubv2sf3;
*gen_mmx_addsubv2sf3 = *gccc::gen_mmx_addsubv2sf3;
*gen_mmx_gtv2sf3 = *gccc::gen_mmx_gtv2sf3;
*gen_mmx_gev2sf3 = *gccc::gen_mmx_gev2sf3;
*gen_mmx_pf2id = *gccc::gen_mmx_pf2id;
*gen_mmx_pf2iw = *gccc::gen_mmx_pf2iw;
*gen_mmx_pi2fw = *gccc::gen_mmx_pi2fw;
*gen_mmx_floatv2si2 = *gccc::gen_mmx_floatv2si2;
*gen_mmx_pswapdv2sf2 = *gccc::gen_mmx_pswapdv2sf2;
*gen_mmx_ashrv4hi3 = *gccc::gen_mmx_ashrv4hi3;
*gen_mmx_ashrv2si3 = *gccc::gen_mmx_ashrv2si3;
*gen_mmx_lshrv4hi3 = *gccc::gen_mmx_lshrv4hi3;
*gen_mmx_lshrv2si3 = *gccc::gen_mmx_lshrv2si3;
*gen_mmx_lshrv1di3 = *gccc::gen_mmx_lshrv1di3;
*gen_mmx_ashlv4hi3 = *gccc::gen_mmx_ashlv4hi3;
*gen_mmx_ashlv2si3 = *gccc::gen_mmx_ashlv2si3;
*gen_mmx_ashlv1di3 = *gccc::gen_mmx_ashlv1di3;
*gen_mmx_gtv8qi3 = *gccc::gen_mmx_gtv8qi3;
*gen_mmx_gtv4hi3 = *gccc::gen_mmx_gtv4hi3;
*gen_mmx_gtv2si3 = *gccc::gen_mmx_gtv2si3;
*gen_mmx_andnotv8qi3 = *gccc::gen_mmx_andnotv8qi3;
*gen_mmx_andnotv4hi3 = *gccc::gen_mmx_andnotv4hi3;
*gen_mmx_andnotv2si3 = *gccc::gen_mmx_andnotv2si3;
*gen_mmx_packsswb = *gccc::gen_mmx_packsswb;
*gen_mmx_packssdw = *gccc::gen_mmx_packssdw;
*gen_mmx_packuswb = *gccc::gen_mmx_packuswb;
*gen_mmx_punpckhbw = *gccc::gen_mmx_punpckhbw;
*gen_mmx_punpcklbw = *gccc::gen_mmx_punpcklbw;
*gen_mmx_punpckhwd = *gccc::gen_mmx_punpckhwd;
*gen_mmx_punpcklwd = *gccc::gen_mmx_punpcklwd;
*gen_mmx_punpckhdq = *gccc::gen_mmx_punpckhdq;
*gen_mmx_punpckldq = *gccc::gen_mmx_punpckldq;
*gen_mmx_pextrw = *gccc::gen_mmx_pextrw;
*gen_mmx_pshufw_1 = *gccc::gen_mmx_pshufw_1;
*gen_mmx_pswapdv2si2 = *gccc::gen_mmx_pswapdv2si2;
*gen_mmx_psadbw = *gccc::gen_mmx_psadbw;
*gen_mmx_pmovmskb = *gccc::gen_mmx_pmovmskb;
*gen_movdi_to_sse = *gccc::gen_movdi_to_sse;
*gen_sse2_movq128 = *gccc::gen_sse2_movq128;
*gen_avx_movntv4sf = *gccc::gen_avx_movntv4sf;
*gen_avx_movntv2df = *gccc::gen_avx_movntv2df;
*gen_avx_movntv8sf = *gccc::gen_avx_movntv8sf;
*gen_avx_movntv4df = *gccc::gen_avx_movntv4df;
*gen_sse_movntv4sf = *gccc::gen_sse_movntv4sf;
*gen_sse2_movntv2df = *gccc::gen_sse2_movntv2df;
*gen_avx_movntv4di = *gccc::gen_avx_movntv4di;
*gen_avx_movntv2di = *gccc::gen_avx_movntv2di;
*gen_sse2_movntv2di = *gccc::gen_sse2_movntv2di;
*gen_sse2_movntsi = *gccc::gen_sse2_movntsi;
*gen_avx_lddqu256 = *gccc::gen_avx_lddqu256;
*gen_avx_lddqu = *gccc::gen_avx_lddqu;
*gen_sse3_lddqu = *gccc::gen_sse3_lddqu;
*gen_sse_vmaddv4sf3 = *gccc::gen_sse_vmaddv4sf3;
*gen_sse_vmsubv4sf3 = *gccc::gen_sse_vmsubv4sf3;
*gen_sse2_vmaddv2df3 = *gccc::gen_sse2_vmaddv2df3;
*gen_sse2_vmsubv2df3 = *gccc::gen_sse2_vmsubv2df3;
*gen_sse_vmmulv4sf3 = *gccc::gen_sse_vmmulv4sf3;
*gen_sse2_vmmulv2df3 = *gccc::gen_sse2_vmmulv2df3;
*gen_avx_divv4sf3 = *gccc::gen_avx_divv4sf3;
*gen_avx_divv2df3 = *gccc::gen_avx_divv2df3;
*gen_avx_divv8sf3 = *gccc::gen_avx_divv8sf3;
*gen_avx_divv4df3 = *gccc::gen_avx_divv4df3;
*gen_sse_divv4sf3 = *gccc::gen_sse_divv4sf3;
*gen_sse2_divv2df3 = *gccc::gen_sse2_divv2df3;
*gen_sse_vmdivv4sf3 = *gccc::gen_sse_vmdivv4sf3;
*gen_sse2_vmdivv2df3 = *gccc::gen_sse2_vmdivv2df3;
*gen_avx_rcpv8sf2 = *gccc::gen_avx_rcpv8sf2;
*gen_sse_rcpv4sf2 = *gccc::gen_sse_rcpv4sf2;
*gen_sse_vmrcpv4sf2 = *gccc::gen_sse_vmrcpv4sf2;
*gen_avx_sqrtv8sf2 = *gccc::gen_avx_sqrtv8sf2;
*gen_sse_sqrtv4sf2 = *gccc::gen_sse_sqrtv4sf2;
*gen_sqrtv4df2 = *gccc::gen_sqrtv4df2;
*gen_sqrtv2df2 = *gccc::gen_sqrtv2df2;
*gen_sse_vmsqrtv4sf2 = *gccc::gen_sse_vmsqrtv4sf2;
*gen_sse2_vmsqrtv2df2 = *gccc::gen_sse2_vmsqrtv2df2;
*gen_avx_rsqrtv8sf2 = *gccc::gen_avx_rsqrtv8sf2;
*gen_sse_rsqrtv4sf2 = *gccc::gen_sse_rsqrtv4sf2;
*gen_sse_vmrsqrtv4sf2 = *gccc::gen_sse_vmrsqrtv4sf2;
*gen_sse_vmsmaxv4sf3 = *gccc::gen_sse_vmsmaxv4sf3;
*gen_sse_vmsminv4sf3 = *gccc::gen_sse_vmsminv4sf3;
*gen_sse2_vmsmaxv2df3 = *gccc::gen_sse2_vmsmaxv2df3;
*gen_sse2_vmsminv2df3 = *gccc::gen_sse2_vmsminv2df3;
*gen_avx_addsubv8sf3 = *gccc::gen_avx_addsubv8sf3;
*gen_avx_addsubv4df3 = *gccc::gen_avx_addsubv4df3;
*gen_sse3_addsubv4sf3 = *gccc::gen_sse3_addsubv4sf3;
*gen_sse3_addsubv2df3 = *gccc::gen_sse3_addsubv2df3;
*gen_avx_haddv4df3 = *gccc::gen_avx_haddv4df3;
*gen_avx_hsubv4df3 = *gccc::gen_avx_hsubv4df3;
*gen_avx_haddv8sf3 = *gccc::gen_avx_haddv8sf3;
*gen_avx_hsubv8sf3 = *gccc::gen_avx_hsubv8sf3;
*gen_sse3_haddv4sf3 = *gccc::gen_sse3_haddv4sf3;
*gen_sse3_hsubv4sf3 = *gccc::gen_sse3_hsubv4sf3;
*gen_sse3_haddv2df3 = *gccc::gen_sse3_haddv2df3;
*gen_sse3_hsubv2df3 = *gccc::gen_sse3_hsubv2df3;
*gen_avx_cmppsv4sf3 = *gccc::gen_avx_cmppsv4sf3;
*gen_avx_cmppdv2df3 = *gccc::gen_avx_cmppdv2df3;
*gen_avx_cmppsv8sf3 = *gccc::gen_avx_cmppsv8sf3;
*gen_avx_cmppdv4df3 = *gccc::gen_avx_cmppdv4df3;
*gen_avx_cmpssv4sf3 = *gccc::gen_avx_cmpssv4sf3;
*gen_avx_cmpsdv2df3 = *gccc::gen_avx_cmpsdv2df3;
*gen_sse_maskcmpsf3 = *gccc::gen_sse_maskcmpsf3;
*gen_sse2_maskcmpdf3 = *gccc::gen_sse2_maskcmpdf3;
*gen_sse_maskcmpv4sf3 = *gccc::gen_sse_maskcmpv4sf3;
*gen_sse2_maskcmpv2df3 = *gccc::gen_sse2_maskcmpv2df3;
*gen_sse_vmmaskcmpv4sf3 = *gccc::gen_sse_vmmaskcmpv4sf3;
*gen_sse2_vmmaskcmpv2df3 = *gccc::gen_sse2_vmmaskcmpv2df3;
*gen_sse_comi = *gccc::gen_sse_comi;
*gen_sse2_comi = *gccc::gen_sse2_comi;
*gen_sse_ucomi = *gccc::gen_sse_ucomi;
*gen_sse2_ucomi = *gccc::gen_sse2_ucomi;
*gen_avx_andnotv4sf3 = *gccc::gen_avx_andnotv4sf3;
*gen_avx_andnotv2df3 = *gccc::gen_avx_andnotv2df3;
*gen_avx_andnotv8sf3 = *gccc::gen_avx_andnotv8sf3;
*gen_avx_andnotv4df3 = *gccc::gen_avx_andnotv4df3;
*gen_sse_andnotv4sf3 = *gccc::gen_sse_andnotv4sf3;
*gen_sse2_andnotv2df3 = *gccc::gen_sse2_andnotv2df3;
*gen_sse_cvtpi2ps = *gccc::gen_sse_cvtpi2ps;
*gen_sse_cvtps2pi = *gccc::gen_sse_cvtps2pi;
*gen_sse_cvttps2pi = *gccc::gen_sse_cvttps2pi;
*gen_sse_cvtsi2ss = *gccc::gen_sse_cvtsi2ss;
*gen_sse_cvtsi2ssq = *gccc::gen_sse_cvtsi2ssq;
*gen_sse_cvtss2si = *gccc::gen_sse_cvtss2si;
*gen_sse_cvtss2si_2 = *gccc::gen_sse_cvtss2si_2;
*gen_sse_cvtss2siq = *gccc::gen_sse_cvtss2siq;
*gen_sse_cvtss2siq_2 = *gccc::gen_sse_cvtss2siq_2;
*gen_sse_cvttss2si = *gccc::gen_sse_cvttss2si;
*gen_sse_cvttss2siq = *gccc::gen_sse_cvttss2siq;
*gen_avx_cvtdq2ps = *gccc::gen_avx_cvtdq2ps;
*gen_avx_cvtdq2ps256 = *gccc::gen_avx_cvtdq2ps256;
*gen_sse2_cvtdq2ps = *gccc::gen_sse2_cvtdq2ps;
*gen_avx_cvtps2dq = *gccc::gen_avx_cvtps2dq;
*gen_avx_cvtps2dq256 = *gccc::gen_avx_cvtps2dq256;
*gen_sse2_cvtps2dq = *gccc::gen_sse2_cvtps2dq;
*gen_avx_cvttps2dq = *gccc::gen_avx_cvttps2dq;
*gen_avx_cvttps2dq256 = *gccc::gen_avx_cvttps2dq256;
*gen_sse2_cvttps2dq = *gccc::gen_sse2_cvttps2dq;
*gen_sse2_cvtpi2pd = *gccc::gen_sse2_cvtpi2pd;
*gen_sse2_cvtpd2pi = *gccc::gen_sse2_cvtpd2pi;
*gen_sse2_cvttpd2pi = *gccc::gen_sse2_cvttpd2pi;
*gen_sse2_cvtsi2sd = *gccc::gen_sse2_cvtsi2sd;
*gen_sse2_cvtsi2sdq = *gccc::gen_sse2_cvtsi2sdq;
*gen_sse2_cvtsd2si = *gccc::gen_sse2_cvtsd2si;
*gen_sse2_cvtsd2si_2 = *gccc::gen_sse2_cvtsd2si_2;
*gen_sse2_cvtsd2siq = *gccc::gen_sse2_cvtsd2siq;
*gen_sse2_cvtsd2siq_2 = *gccc::gen_sse2_cvtsd2siq_2;
*gen_sse2_cvttsd2si = *gccc::gen_sse2_cvttsd2si;
*gen_sse2_cvttsd2siq = *gccc::gen_sse2_cvttsd2siq;
*gen_avx_cvtdq2pd256 = *gccc::gen_avx_cvtdq2pd256;
*gen_sse2_cvtdq2pd = *gccc::gen_sse2_cvtdq2pd;
*gen_avx_cvtpd2dq256 = *gccc::gen_avx_cvtpd2dq256;
*gen_avx_cvttpd2dq256 = *gccc::gen_avx_cvttpd2dq256;
*gen_sse2_cvtsd2ss = *gccc::gen_sse2_cvtsd2ss;
*gen_sse2_cvtss2sd = *gccc::gen_sse2_cvtss2sd;
*gen_avx_cvtpd2ps256 = *gccc::gen_avx_cvtpd2ps256;
*gen_avx_cvtps2pd256 = *gccc::gen_avx_cvtps2pd256;
*gen_sse2_cvtps2pd = *gccc::gen_sse2_cvtps2pd;
*gen_sse_movhlps = *gccc::gen_sse_movhlps;
*gen_sse_movlhps = *gccc::gen_sse_movlhps;
*gen_avx_unpckhps256 = *gccc::gen_avx_unpckhps256;
*gen_vec_interleave_highv4sf = *gccc::gen_vec_interleave_highv4sf;
*gen_avx_unpcklps256 = *gccc::gen_avx_unpcklps256;
*gen_vec_interleave_lowv4sf = *gccc::gen_vec_interleave_lowv4sf;
*gen_avx_movshdup256 = *gccc::gen_avx_movshdup256;
*gen_sse3_movshdup = *gccc::gen_sse3_movshdup;
*gen_avx_movsldup256 = *gccc::gen_avx_movsldup256;
*gen_sse3_movsldup = *gccc::gen_sse3_movsldup;
*gen_avx_shufps256_1 = *gccc::gen_avx_shufps256_1;
*gen_sse_shufps_v4sf = *gccc::gen_sse_shufps_v4sf;
*gen_sse_shufps_v4si = *gccc::gen_sse_shufps_v4si;
*gen_sse_storehps = *gccc::gen_sse_storehps;
*gen_sse_loadhps = *gccc::gen_sse_loadhps;
*gen_sse_storelps = *gccc::gen_sse_storelps;
*gen_sse_loadlps = *gccc::gen_sse_loadlps;
*gen_sse_movss = *gccc::gen_sse_movss;
*gen_vec_setv4sf_0 = *gccc::gen_vec_setv4sf_0;
*gen_vec_setv4si_0 = *gccc::gen_vec_setv4si_0;
*gen_sse4_1_insertps = *gccc::gen_sse4_1_insertps;
*gen_vec_extract_lo_v4di = *gccc::gen_vec_extract_lo_v4di;
*gen_vec_extract_lo_v4df = *gccc::gen_vec_extract_lo_v4df;
*gen_vec_extract_hi_v4di = *gccc::gen_vec_extract_hi_v4di;
*gen_vec_extract_hi_v4df = *gccc::gen_vec_extract_hi_v4df;
*gen_vec_extract_lo_v8si = *gccc::gen_vec_extract_lo_v8si;
*gen_vec_extract_lo_v8sf = *gccc::gen_vec_extract_lo_v8sf;
*gen_vec_extract_hi_v8si = *gccc::gen_vec_extract_hi_v8si;
*gen_vec_extract_hi_v8sf = *gccc::gen_vec_extract_hi_v8sf;
*gen_vec_extract_lo_v16hi = *gccc::gen_vec_extract_lo_v16hi;
*gen_vec_extract_hi_v16hi = *gccc::gen_vec_extract_hi_v16hi;
*gen_vec_extract_lo_v32qi = *gccc::gen_vec_extract_lo_v32qi;
*gen_vec_extract_hi_v32qi = *gccc::gen_vec_extract_hi_v32qi;
*gen_avx_unpckhpd256 = *gccc::gen_avx_unpckhpd256;
*gen_avx_shufpd256_1 = *gccc::gen_avx_shufpd256_1;
*gen_vec_interleave_highv2di = *gccc::gen_vec_interleave_highv2di;
*gen_vec_interleave_lowv2di = *gccc::gen_vec_interleave_lowv2di;
*gen_sse2_shufpd_v2df = *gccc::gen_sse2_shufpd_v2df;
*gen_sse2_shufpd_v2di = *gccc::gen_sse2_shufpd_v2di;
*gen_sse2_storehpd = *gccc::gen_sse2_storehpd;
*gen_sse2_storelpd = *gccc::gen_sse2_storelpd;
*gen_sse2_loadhpd = *gccc::gen_sse2_loadhpd;
*gen_sse2_loadlpd = *gccc::gen_sse2_loadlpd;
*gen_sse2_movsd = *gccc::gen_sse2_movsd;
*gen_mulv16qi3 = *gccc::gen_mulv16qi3;
*gen_mulv2di3 = *gccc::gen_mulv2di3;
*gen_ashrv8hi3 = *gccc::gen_ashrv8hi3;
*gen_ashrv4si3 = *gccc::gen_ashrv4si3;
*gen_sse2_lshrv1ti3 = *gccc::gen_sse2_lshrv1ti3;
*gen_lshrv8hi3 = *gccc::gen_lshrv8hi3;
*gen_lshrv4si3 = *gccc::gen_lshrv4si3;
*gen_lshrv2di3 = *gccc::gen_lshrv2di3;
*gen_sse2_ashlv1ti3 = *gccc::gen_sse2_ashlv1ti3;
*gen_ashlv8hi3 = *gccc::gen_ashlv8hi3;
*gen_ashlv4si3 = *gccc::gen_ashlv4si3;
*gen_ashlv2di3 = *gccc::gen_ashlv2di3;
*gen_sse2_gtv16qi3 = *gccc::gen_sse2_gtv16qi3;
*gen_sse2_gtv8hi3 = *gccc::gen_sse2_gtv8hi3;
*gen_sse2_gtv4si3 = *gccc::gen_sse2_gtv4si3;
*gen_sse4_2_gtv2di3 = *gccc::gen_sse4_2_gtv2di3;
*gen_sse2_andnotv16qi3 = *gccc::gen_sse2_andnotv16qi3;
*gen_sse2_andnotv8hi3 = *gccc::gen_sse2_andnotv8hi3;
*gen_sse2_andnotv4si3 = *gccc::gen_sse2_andnotv4si3;
*gen_sse2_andnotv2di3 = *gccc::gen_sse2_andnotv2di3;
*gen_sse2_packsswb = *gccc::gen_sse2_packsswb;
*gen_sse2_packssdw = *gccc::gen_sse2_packssdw;
*gen_sse2_packuswb = *gccc::gen_sse2_packuswb;
*gen_vec_interleave_highv16qi = *gccc::gen_vec_interleave_highv16qi;
*gen_vec_interleave_lowv16qi = *gccc::gen_vec_interleave_lowv16qi;
*gen_vec_interleave_highv8hi = *gccc::gen_vec_interleave_highv8hi;
*gen_vec_interleave_lowv8hi = *gccc::gen_vec_interleave_lowv8hi;
*gen_vec_interleave_highv4si = *gccc::gen_vec_interleave_highv4si;
*gen_vec_interleave_lowv4si = *gccc::gen_vec_interleave_lowv4si;
*gen_sse2_pshufd_1 = *gccc::gen_sse2_pshufd_1;
*gen_sse2_pshuflw_1 = *gccc::gen_sse2_pshuflw_1;
*gen_sse2_pshufhw_1 = *gccc::gen_sse2_pshufhw_1;
*gen_sse2_loadld = *gccc::gen_sse2_loadld;
*gen_sse2_stored = *gccc::gen_sse2_stored;
*gen_vec_concatv2di = *gccc::gen_vec_concatv2di;
*gen_sse2_psadbw = *gccc::gen_sse2_psadbw;
*gen_avx_movmskps256 = *gccc::gen_avx_movmskps256;
*gen_avx_movmskpd256 = *gccc::gen_avx_movmskpd256;
*gen_sse_movmskps = *gccc::gen_sse_movmskps;
*gen_sse2_movmskpd = *gccc::gen_sse2_movmskpd;
*gen_sse2_pmovmskb = *gccc::gen_sse2_pmovmskb;
*gen_sse_ldmxcsr = *gccc::gen_sse_ldmxcsr;
*gen_sse_stmxcsr = *gccc::gen_sse_stmxcsr;
*gen_sse2_clflush = *gccc::gen_sse2_clflush;
*gen_sse3_mwait = *gccc::gen_sse3_mwait;
*gen_sse3_monitor = *gccc::gen_sse3_monitor;
*gen_sse3_monitor64 = *gccc::gen_sse3_monitor64;
*gen_ssse3_phaddwv8hi3 = *gccc::gen_ssse3_phaddwv8hi3;
*gen_ssse3_phaddwv4hi3 = *gccc::gen_ssse3_phaddwv4hi3;
*gen_ssse3_phadddv4si3 = *gccc::gen_ssse3_phadddv4si3;
*gen_ssse3_phadddv2si3 = *gccc::gen_ssse3_phadddv2si3;
*gen_ssse3_phaddswv8hi3 = *gccc::gen_ssse3_phaddswv8hi3;
*gen_ssse3_phaddswv4hi3 = *gccc::gen_ssse3_phaddswv4hi3;
*gen_ssse3_phsubwv8hi3 = *gccc::gen_ssse3_phsubwv8hi3;
*gen_ssse3_phsubwv4hi3 = *gccc::gen_ssse3_phsubwv4hi3;
*gen_ssse3_phsubdv4si3 = *gccc::gen_ssse3_phsubdv4si3;
*gen_ssse3_phsubdv2si3 = *gccc::gen_ssse3_phsubdv2si3;
*gen_ssse3_phsubswv8hi3 = *gccc::gen_ssse3_phsubswv8hi3;
*gen_ssse3_phsubswv4hi3 = *gccc::gen_ssse3_phsubswv4hi3;
*gen_ssse3_pmaddubsw128 = *gccc::gen_ssse3_pmaddubsw128;
*gen_ssse3_pmaddubsw = *gccc::gen_ssse3_pmaddubsw;
*gen_ssse3_pshufbv16qi3 = *gccc::gen_ssse3_pshufbv16qi3;
*gen_ssse3_pshufbv8qi3 = *gccc::gen_ssse3_pshufbv8qi3;
*gen_ssse3_psignv16qi3 = *gccc::gen_ssse3_psignv16qi3;
*gen_ssse3_psignv8hi3 = *gccc::gen_ssse3_psignv8hi3;
*gen_ssse3_psignv4si3 = *gccc::gen_ssse3_psignv4si3;
*gen_ssse3_psignv8qi3 = *gccc::gen_ssse3_psignv8qi3;
*gen_ssse3_psignv4hi3 = *gccc::gen_ssse3_psignv4hi3;
*gen_ssse3_psignv2si3 = *gccc::gen_ssse3_psignv2si3;
*gen_ssse3_palignrti = *gccc::gen_ssse3_palignrti;
*gen_ssse3_palignrdi = *gccc::gen_ssse3_palignrdi;
*gen_absv16qi2 = *gccc::gen_absv16qi2;
*gen_absv8hi2 = *gccc::gen_absv8hi2;
*gen_absv4si2 = *gccc::gen_absv4si2;
*gen_absv8qi2 = *gccc::gen_absv8qi2;
*gen_absv4hi2 = *gccc::gen_absv4hi2;
*gen_absv2si2 = *gccc::gen_absv2si2;
*gen_sse4a_movntsf = *gccc::gen_sse4a_movntsf;
*gen_sse4a_movntdf = *gccc::gen_sse4a_movntdf;
*gen_sse4a_vmmovntv4sf = *gccc::gen_sse4a_vmmovntv4sf;
*gen_sse4a_vmmovntv2df = *gccc::gen_sse4a_vmmovntv2df;
*gen_sse4a_extrqi = *gccc::gen_sse4a_extrqi;
*gen_sse4a_extrq = *gccc::gen_sse4a_extrq;
*gen_sse4a_insertqi = *gccc::gen_sse4a_insertqi;
*gen_sse4a_insertq = *gccc::gen_sse4a_insertq;
*gen_avx_blendps = *gccc::gen_avx_blendps;
*gen_avx_blendpd = *gccc::gen_avx_blendpd;
*gen_avx_blendps256 = *gccc::gen_avx_blendps256;
*gen_avx_blendpd256 = *gccc::gen_avx_blendpd256;
*gen_avx_blendvps = *gccc::gen_avx_blendvps;
*gen_avx_blendvpd = *gccc::gen_avx_blendvpd;
*gen_avx_blendvps256 = *gccc::gen_avx_blendvps256;
*gen_avx_blendvpd256 = *gccc::gen_avx_blendvpd256;
*gen_sse4_1_blendps = *gccc::gen_sse4_1_blendps;
*gen_sse4_1_blendpd = *gccc::gen_sse4_1_blendpd;
*gen_sse4_1_blendvps = *gccc::gen_sse4_1_blendvps;
*gen_sse4_1_blendvpd = *gccc::gen_sse4_1_blendvpd;
*gen_avx_dpps = *gccc::gen_avx_dpps;
*gen_avx_dppd = *gccc::gen_avx_dppd;
*gen_avx_dpps256 = *gccc::gen_avx_dpps256;
*gen_avx_dppd256 = *gccc::gen_avx_dppd256;
*gen_sse4_1_dpps = *gccc::gen_sse4_1_dpps;
*gen_sse4_1_dppd = *gccc::gen_sse4_1_dppd;
*gen_sse4_1_movntdqa = *gccc::gen_sse4_1_movntdqa;
*gen_sse4_1_mpsadbw = *gccc::gen_sse4_1_mpsadbw;
*gen_sse4_1_packusdw = *gccc::gen_sse4_1_packusdw;
*gen_sse4_1_pblendvb = *gccc::gen_sse4_1_pblendvb;
*gen_sse4_1_pblendw = *gccc::gen_sse4_1_pblendw;
*gen_sse4_1_phminposuw = *gccc::gen_sse4_1_phminposuw;
*gen_sse4_1_sign_extendv8qiv8hi2 = *gccc::gen_sse4_1_sign_extendv8qiv8hi2;
*gen_sse4_1_zero_extendv8qiv8hi2 = *gccc::gen_sse4_1_zero_extendv8qiv8hi2;
*gen_sse4_1_sign_extendv4qiv4si2 = *gccc::gen_sse4_1_sign_extendv4qiv4si2;
*gen_sse4_1_zero_extendv4qiv4si2 = *gccc::gen_sse4_1_zero_extendv4qiv4si2;
*gen_sse4_1_sign_extendv4hiv4si2 = *gccc::gen_sse4_1_sign_extendv4hiv4si2;
*gen_sse4_1_zero_extendv4hiv4si2 = *gccc::gen_sse4_1_zero_extendv4hiv4si2;
*gen_sse4_1_sign_extendv2qiv2di2 = *gccc::gen_sse4_1_sign_extendv2qiv2di2;
*gen_sse4_1_zero_extendv2qiv2di2 = *gccc::gen_sse4_1_zero_extendv2qiv2di2;
*gen_sse4_1_sign_extendv2hiv2di2 = *gccc::gen_sse4_1_sign_extendv2hiv2di2;
*gen_sse4_1_zero_extendv2hiv2di2 = *gccc::gen_sse4_1_zero_extendv2hiv2di2;
*gen_sse4_1_sign_extendv2siv2di2 = *gccc::gen_sse4_1_sign_extendv2siv2di2;
*gen_sse4_1_zero_extendv2siv2di2 = *gccc::gen_sse4_1_zero_extendv2siv2di2;
*gen_avx_vtestps = *gccc::gen_avx_vtestps;
*gen_avx_vtestpd = *gccc::gen_avx_vtestpd;
*gen_avx_vtestps256 = *gccc::gen_avx_vtestps256;
*gen_avx_vtestpd256 = *gccc::gen_avx_vtestpd256;
*gen_avx_ptest256 = *gccc::gen_avx_ptest256;
*gen_sse4_1_ptest = *gccc::gen_sse4_1_ptest;
*gen_avx_roundps256 = *gccc::gen_avx_roundps256;
*gen_avx_roundpd256 = *gccc::gen_avx_roundpd256;
*gen_sse4_1_roundps = *gccc::gen_sse4_1_roundps;
*gen_sse4_1_roundpd = *gccc::gen_sse4_1_roundpd;
*gen_sse4_1_roundss = *gccc::gen_sse4_1_roundss;
*gen_sse4_1_roundsd = *gccc::gen_sse4_1_roundsd;
*gen_sse4_2_pcmpestr = *gccc::gen_sse4_2_pcmpestr;
*gen_sse4_2_pcmpestri = *gccc::gen_sse4_2_pcmpestri;
*gen_sse4_2_pcmpestrm = *gccc::gen_sse4_2_pcmpestrm;
*gen_sse4_2_pcmpestr_cconly = *gccc::gen_sse4_2_pcmpestr_cconly;
*gen_sse4_2_pcmpistr = *gccc::gen_sse4_2_pcmpistr;
*gen_sse4_2_pcmpistri = *gccc::gen_sse4_2_pcmpistri;
*gen_sse4_2_pcmpistrm = *gccc::gen_sse4_2_pcmpistrm;
*gen_sse4_2_pcmpistr_cconly = *gccc::gen_sse4_2_pcmpistr_cconly;
*gen_xop_pmacsww = *gccc::gen_xop_pmacsww;
*gen_xop_pmacssww = *gccc::gen_xop_pmacssww;
*gen_xop_pmacsdd = *gccc::gen_xop_pmacsdd;
*gen_xop_pmacssdd = *gccc::gen_xop_pmacssdd;
*gen_xop_pmacssdql = *gccc::gen_xop_pmacssdql;
*gen_xop_pmacssdqh = *gccc::gen_xop_pmacssdqh;
*gen_xop_pmacsdql = *gccc::gen_xop_pmacsdql;
*gen_xop_mulv2div2di3_low = *gccc::gen_xop_mulv2div2di3_low;
*gen_xop_pmacsdqh = *gccc::gen_xop_pmacsdqh;
*gen_xop_mulv2div2di3_high = *gccc::gen_xop_mulv2div2di3_high;
*gen_xop_pmacsswd = *gccc::gen_xop_pmacsswd;
*gen_xop_pmacswd = *gccc::gen_xop_pmacswd;
*gen_xop_pmadcsswd = *gccc::gen_xop_pmadcsswd;
*gen_xop_pmadcswd = *gccc::gen_xop_pmadcswd;
*gen_xop_pcmov_v16qi = *gccc::gen_xop_pcmov_v16qi;
*gen_xop_pcmov_v8hi = *gccc::gen_xop_pcmov_v8hi;
*gen_xop_pcmov_v4si = *gccc::gen_xop_pcmov_v4si;
*gen_xop_pcmov_v2di = *gccc::gen_xop_pcmov_v2di;
*gen_xop_pcmov_v4sf = *gccc::gen_xop_pcmov_v4sf;
*gen_xop_pcmov_v2df = *gccc::gen_xop_pcmov_v2df;
*gen_xop_pcmov_v32qi256 = *gccc::gen_xop_pcmov_v32qi256;
*gen_xop_pcmov_v16hi256 = *gccc::gen_xop_pcmov_v16hi256;
*gen_xop_pcmov_v8si256 = *gccc::gen_xop_pcmov_v8si256;
*gen_xop_pcmov_v4di256 = *gccc::gen_xop_pcmov_v4di256;
*gen_xop_pcmov_v8sf256 = *gccc::gen_xop_pcmov_v8sf256;
*gen_xop_pcmov_v4df256 = *gccc::gen_xop_pcmov_v4df256;
*gen_xop_phaddbw = *gccc::gen_xop_phaddbw;
*gen_xop_phaddbd = *gccc::gen_xop_phaddbd;
*gen_xop_phaddbq = *gccc::gen_xop_phaddbq;
*gen_xop_phaddwd = *gccc::gen_xop_phaddwd;
*gen_xop_phaddwq = *gccc::gen_xop_phaddwq;
*gen_xop_phadddq = *gccc::gen_xop_phadddq;
*gen_xop_phaddubw = *gccc::gen_xop_phaddubw;
*gen_xop_phaddubd = *gccc::gen_xop_phaddubd;
*gen_xop_phaddubq = *gccc::gen_xop_phaddubq;
*gen_xop_phadduwd = *gccc::gen_xop_phadduwd;
*gen_xop_phadduwq = *gccc::gen_xop_phadduwq;
*gen_xop_phaddudq = *gccc::gen_xop_phaddudq;
*gen_xop_phsubbw = *gccc::gen_xop_phsubbw;
*gen_xop_phsubwd = *gccc::gen_xop_phsubwd;
*gen_xop_phsubdq = *gccc::gen_xop_phsubdq;
*gen_xop_pperm = *gccc::gen_xop_pperm;
*gen_xop_pperm_pack_v2di_v4si = *gccc::gen_xop_pperm_pack_v2di_v4si;
*gen_xop_pperm_pack_v4si_v8hi = *gccc::gen_xop_pperm_pack_v4si_v8hi;
*gen_xop_pperm_pack_v8hi_v16qi = *gccc::gen_xop_pperm_pack_v8hi_v16qi;
*gen_xop_rotlv16qi3 = *gccc::gen_xop_rotlv16qi3;
*gen_xop_rotlv8hi3 = *gccc::gen_xop_rotlv8hi3;
*gen_xop_rotlv4si3 = *gccc::gen_xop_rotlv4si3;
*gen_xop_rotlv2di3 = *gccc::gen_xop_rotlv2di3;
*gen_xop_rotrv16qi3 = *gccc::gen_xop_rotrv16qi3;
*gen_xop_rotrv8hi3 = *gccc::gen_xop_rotrv8hi3;
*gen_xop_rotrv4si3 = *gccc::gen_xop_rotrv4si3;
*gen_xop_rotrv2di3 = *gccc::gen_xop_rotrv2di3;
*gen_xop_vrotlv16qi3 = *gccc::gen_xop_vrotlv16qi3;
*gen_xop_vrotlv8hi3 = *gccc::gen_xop_vrotlv8hi3;
*gen_xop_vrotlv4si3 = *gccc::gen_xop_vrotlv4si3;
*gen_xop_vrotlv2di3 = *gccc::gen_xop_vrotlv2di3;
*gen_xop_ashlv16qi3 = *gccc::gen_xop_ashlv16qi3;
*gen_xop_ashlv8hi3 = *gccc::gen_xop_ashlv8hi3;
*gen_xop_ashlv4si3 = *gccc::gen_xop_ashlv4si3;
*gen_xop_ashlv2di3 = *gccc::gen_xop_ashlv2di3;
*gen_xop_lshlv16qi3 = *gccc::gen_xop_lshlv16qi3;
*gen_xop_lshlv8hi3 = *gccc::gen_xop_lshlv8hi3;
*gen_xop_lshlv4si3 = *gccc::gen_xop_lshlv4si3;
*gen_xop_lshlv2di3 = *gccc::gen_xop_lshlv2di3;
*gen_xop_frczsf2 = *gccc::gen_xop_frczsf2;
*gen_xop_frczdf2 = *gccc::gen_xop_frczdf2;
*gen_xop_frczv4sf2 = *gccc::gen_xop_frczv4sf2;
*gen_xop_frczv2df2 = *gccc::gen_xop_frczv2df2;
*gen_xop_frczv8sf2 = *gccc::gen_xop_frczv8sf2;
*gen_xop_frczv4df2 = *gccc::gen_xop_frczv4df2;
*gen_xop_maskcmpv16qi3 = *gccc::gen_xop_maskcmpv16qi3;
*gen_xop_maskcmpv8hi3 = *gccc::gen_xop_maskcmpv8hi3;
*gen_xop_maskcmpv4si3 = *gccc::gen_xop_maskcmpv4si3;
*gen_xop_maskcmpv2di3 = *gccc::gen_xop_maskcmpv2di3;
*gen_xop_maskcmp_unsv16qi3 = *gccc::gen_xop_maskcmp_unsv16qi3;
*gen_xop_maskcmp_unsv8hi3 = *gccc::gen_xop_maskcmp_unsv8hi3;
*gen_xop_maskcmp_unsv4si3 = *gccc::gen_xop_maskcmp_unsv4si3;
*gen_xop_maskcmp_unsv2di3 = *gccc::gen_xop_maskcmp_unsv2di3;
*gen_xop_maskcmp_uns2v16qi3 = *gccc::gen_xop_maskcmp_uns2v16qi3;
*gen_xop_maskcmp_uns2v8hi3 = *gccc::gen_xop_maskcmp_uns2v8hi3;
*gen_xop_maskcmp_uns2v4si3 = *gccc::gen_xop_maskcmp_uns2v4si3;
*gen_xop_maskcmp_uns2v2di3 = *gccc::gen_xop_maskcmp_uns2v2di3;
*gen_xop_pcom_tfv16qi3 = *gccc::gen_xop_pcom_tfv16qi3;
*gen_xop_pcom_tfv8hi3 = *gccc::gen_xop_pcom_tfv8hi3;
*gen_xop_pcom_tfv4si3 = *gccc::gen_xop_pcom_tfv4si3;
*gen_xop_pcom_tfv2di3 = *gccc::gen_xop_pcom_tfv2di3;
*gen_xop_vpermil2v4sf3 = *gccc::gen_xop_vpermil2v4sf3;
*gen_xop_vpermil2v2df3 = *gccc::gen_xop_vpermil2v2df3;
*gen_xop_vpermil2v8sf3 = *gccc::gen_xop_vpermil2v8sf3;
*gen_xop_vpermil2v4df3 = *gccc::gen_xop_vpermil2v4df3;
*gen_aesenc = *gccc::gen_aesenc;
*gen_aesenclast = *gccc::gen_aesenclast;
*gen_aesdec = *gccc::gen_aesdec;
*gen_aesdeclast = *gccc::gen_aesdeclast;
*gen_aesimc = *gccc::gen_aesimc;
*gen_aeskeygenassist = *gccc::gen_aeskeygenassist;
*gen_pclmulqdq = *gccc::gen_pclmulqdq;
*gen_avx_vzeroupper = *gccc::gen_avx_vzeroupper;
*gen_vec_dupv8si = *gccc::gen_vec_dupv8si;
*gen_vec_dupv8sf = *gccc::gen_vec_dupv8sf;
*gen_vec_dupv4di = *gccc::gen_vec_dupv4di;
*gen_vec_dupv4df = *gccc::gen_vec_dupv4df;
*gen_avx_vbroadcastf128_v32qi = *gccc::gen_avx_vbroadcastf128_v32qi;
*gen_avx_vbroadcastf128_v16hi = *gccc::gen_avx_vbroadcastf128_v16hi;
*gen_avx_vbroadcastf128_v8si = *gccc::gen_avx_vbroadcastf128_v8si;
*gen_avx_vbroadcastf128_v4di = *gccc::gen_avx_vbroadcastf128_v4di;
*gen_avx_vbroadcastf128_v8sf = *gccc::gen_avx_vbroadcastf128_v8sf;
*gen_avx_vbroadcastf128_v4df = *gccc::gen_avx_vbroadcastf128_v4df;
*gen_avx_vpermilvarv4sf3 = *gccc::gen_avx_vpermilvarv4sf3;
*gen_avx_vpermilvarv2df3 = *gccc::gen_avx_vpermilvarv2df3;
*gen_avx_vpermilvarv8sf3 = *gccc::gen_avx_vpermilvarv8sf3;
*gen_avx_vpermilvarv4df3 = *gccc::gen_avx_vpermilvarv4df3;
*gen_vec_set_lo_v4di = *gccc::gen_vec_set_lo_v4di;
*gen_vec_set_lo_v4df = *gccc::gen_vec_set_lo_v4df;
*gen_vec_set_hi_v4di = *gccc::gen_vec_set_hi_v4di;
*gen_vec_set_hi_v4df = *gccc::gen_vec_set_hi_v4df;
*gen_vec_set_lo_v8si = *gccc::gen_vec_set_lo_v8si;
*gen_vec_set_lo_v8sf = *gccc::gen_vec_set_lo_v8sf;
*gen_vec_set_hi_v8si = *gccc::gen_vec_set_hi_v8si;
*gen_vec_set_hi_v8sf = *gccc::gen_vec_set_hi_v8sf;
*gen_vec_set_lo_v16hi = *gccc::gen_vec_set_lo_v16hi;
*gen_vec_set_hi_v16hi = *gccc::gen_vec_set_hi_v16hi;
*gen_vec_set_lo_v32qi = *gccc::gen_vec_set_lo_v32qi;
*gen_vec_set_hi_v32qi = *gccc::gen_vec_set_hi_v32qi;
*gen_avx_maskloadps = *gccc::gen_avx_maskloadps;
*gen_avx_maskloadpd = *gccc::gen_avx_maskloadpd;
*gen_avx_maskloadps256 = *gccc::gen_avx_maskloadps256;
*gen_avx_maskloadpd256 = *gccc::gen_avx_maskloadpd256;
*gen_avx_maskstoreps = *gccc::gen_avx_maskstoreps;
*gen_avx_maskstorepd = *gccc::gen_avx_maskstorepd;
*gen_avx_maskstoreps256 = *gccc::gen_avx_maskstoreps256;
*gen_avx_maskstorepd256 = *gccc::gen_avx_maskstorepd256;
*gen_avx_si256_si = *gccc::gen_avx_si256_si;
*gen_avx_ps256_ps = *gccc::gen_avx_ps256_ps;
*gen_avx_pd256_pd = *gccc::gen_avx_pd256_pd;
*gen_vcvtph2ps = *gccc::gen_vcvtph2ps;
*gen_vcvtph2ps256 = *gccc::gen_vcvtph2ps256;
*gen_vcvtps2ph256 = *gccc::gen_vcvtps2ph256;
*gen_memory_barrier_nosse = *gccc::gen_memory_barrier_nosse;
*gen_sync_double_compare_and_swapdi = *gccc::gen_sync_double_compare_and_swapdi;
*gen_sync_double_compare_and_swapti = *gccc::gen_sync_double_compare_and_swapti;
*gen_sync_old_addqi = *gccc::gen_sync_old_addqi;
*gen_sync_old_addhi = *gccc::gen_sync_old_addhi;
*gen_sync_old_addsi = *gccc::gen_sync_old_addsi;
*gen_sync_old_adddi = *gccc::gen_sync_old_adddi;
*gen_sync_lock_test_and_setqi = *gccc::gen_sync_lock_test_and_setqi;
*gen_sync_lock_test_and_sethi = *gccc::gen_sync_lock_test_and_sethi;
*gen_sync_lock_test_and_setsi = *gccc::gen_sync_lock_test_and_setsi;
*gen_sync_lock_test_and_setdi = *gccc::gen_sync_lock_test_and_setdi;
*gen_sync_addqi = *gccc::gen_sync_addqi;
*gen_sync_addhi = *gccc::gen_sync_addhi;
*gen_sync_addsi = *gccc::gen_sync_addsi;
*gen_sync_adddi = *gccc::gen_sync_adddi;
*gen_sync_subqi = *gccc::gen_sync_subqi;
*gen_sync_subhi = *gccc::gen_sync_subhi;
*gen_sync_subsi = *gccc::gen_sync_subsi;
*gen_sync_subdi = *gccc::gen_sync_subdi;
*gen_sync_andqi = *gccc::gen_sync_andqi;
*gen_sync_iorqi = *gccc::gen_sync_iorqi;
*gen_sync_xorqi = *gccc::gen_sync_xorqi;
*gen_sync_andhi = *gccc::gen_sync_andhi;
*gen_sync_iorhi = *gccc::gen_sync_iorhi;
*gen_sync_xorhi = *gccc::gen_sync_xorhi;
*gen_sync_andsi = *gccc::gen_sync_andsi;
*gen_sync_iorsi = *gccc::gen_sync_iorsi;
*gen_sync_xorsi = *gccc::gen_sync_xorsi;
*gen_sync_anddi = *gccc::gen_sync_anddi;
*gen_sync_iordi = *gccc::gen_sync_iordi;
*gen_sync_xordi = *gccc::gen_sync_xordi;
*gen_cbranchqi4 = *gccc::gen_cbranchqi4;
*gen_cbranchhi4 = *gccc::gen_cbranchhi4;
*gen_cbranchsi4 = *gccc::gen_cbranchsi4;
*gen_cbranchdi4 = *gccc::gen_cbranchdi4;
*gen_cbranchti4 = *gccc::gen_cbranchti4;
*gen_cstoreqi4 = *gccc::gen_cstoreqi4;
*gen_cstorehi4 = *gccc::gen_cstorehi4;
*gen_cstoresi4 = *gccc::gen_cstoresi4;
*gen_cstoredi4 = *gccc::gen_cstoredi4;
*gen_cmpsi_1 = *gccc::gen_cmpsi_1;
*gen_cmpdi_1 = *gccc::gen_cmpdi_1;
*gen_cmpqi_ext_3 = *gccc::gen_cmpqi_ext_3;
*gen_cbranchxf4 = *gccc::gen_cbranchxf4;
*gen_cstorexf4 = *gccc::gen_cstorexf4;
*gen_cbranchsf4 = *gccc::gen_cbranchsf4;
*gen_cbranchdf4 = *gccc::gen_cbranchdf4;
*gen_cstoresf4 = *gccc::gen_cstoresf4;
*gen_cstoredf4 = *gccc::gen_cstoredf4;
*gen_cbranchcc4 = *gccc::gen_cbranchcc4;
*gen_cstorecc4 = *gccc::gen_cstorecc4;
*gen_movoi = *gccc::gen_movoi;
*gen_movti = *gccc::gen_movti;
*gen_movcdi = *gccc::gen_movcdi;
*gen_movqi = *gccc::gen_movqi;
*gen_movhi = *gccc::gen_movhi;
*gen_movsi = *gccc::gen_movsi;
*gen_movdi = *gccc::gen_movdi;
*gen_movstrictqi = *gccc::gen_movstrictqi;
*gen_movstricthi = *gccc::gen_movstricthi;
*gen_movsi_insv_1 = *gccc::gen_movsi_insv_1;
*gen_movdi_insv_1 = *gccc::gen_movdi_insv_1;
*gen_movtf = *gccc::gen_movtf;
*gen_movsf = *gccc::gen_movsf;
*gen_movdf = *gccc::gen_movdf;
*gen_movxf = *gccc::gen_movxf;
*gen_zero_extendsidi2 = *gccc::gen_zero_extendsidi2;
*gen_zero_extendhisi2 = *gccc::gen_zero_extendhisi2;
*gen_zero_extendqihi2 = *gccc::gen_zero_extendqihi2;
*gen_zero_extendqisi2 = *gccc::gen_zero_extendqisi2;
*gen_extendsidi2 = *gccc::gen_extendsidi2;
*gen_extendsfdf2 = *gccc::gen_extendsfdf2;
*gen_extendsfxf2 = *gccc::gen_extendsfxf2;
*gen_extenddfxf2 = *gccc::gen_extenddfxf2;
*gen_truncdfsf2 = *gccc::gen_truncdfsf2;
*gen_truncdfsf2_with_temp = *gccc::gen_truncdfsf2_with_temp;
*gen_truncxfsf2 = *gccc::gen_truncxfsf2;
*gen_truncxfdf2 = *gccc::gen_truncxfdf2;
*gen_fix_truncxfdi2 = *gccc::gen_fix_truncxfdi2;
*gen_fix_truncsfdi2 = *gccc::gen_fix_truncsfdi2;
*gen_fix_truncdfdi2 = *gccc::gen_fix_truncdfdi2;
*gen_fix_truncxfsi2 = *gccc::gen_fix_truncxfsi2;
*gen_fix_truncsfsi2 = *gccc::gen_fix_truncsfsi2;
*gen_fix_truncdfsi2 = *gccc::gen_fix_truncdfsi2;
*gen_fix_truncsfhi2 = *gccc::gen_fix_truncsfhi2;
*gen_fix_truncdfhi2 = *gccc::gen_fix_truncdfhi2;
*gen_fix_truncxfhi2 = *gccc::gen_fix_truncxfhi2;
*gen_fixuns_truncsfsi2 = *gccc::gen_fixuns_truncsfsi2;
*gen_fixuns_truncdfsi2 = *gccc::gen_fixuns_truncdfsi2;
*gen_fixuns_truncsfhi2 = *gccc::gen_fixuns_truncsfhi2;
*gen_fixuns_truncdfhi2 = *gccc::gen_fixuns_truncdfhi2;
*gen_floathisf2 = *gccc::gen_floathisf2;
*gen_floathidf2 = *gccc::gen_floathidf2;
*gen_floathixf2 = *gccc::gen_floathixf2;
*gen_floatsisf2 = *gccc::gen_floatsisf2;
*gen_floatsidf2 = *gccc::gen_floatsidf2;
*gen_floatsixf2 = *gccc::gen_floatsixf2;
*gen_floatdisf2 = *gccc::gen_floatdisf2;
*gen_floatdidf2 = *gccc::gen_floatdidf2;
*gen_floatdixf2 = *gccc::gen_floatdixf2;
*gen_floatunssisf2 = *gccc::gen_floatunssisf2;
*gen_floatunssidf2 = *gccc::gen_floatunssidf2;
*gen_floatunssixf2 = *gccc::gen_floatunssixf2;
*gen_floatunsdisf2 = *gccc::gen_floatunsdisf2;
*gen_floatunsdidf2 = *gccc::gen_floatunsdidf2;
*gen_addqi3 = *gccc::gen_addqi3;
*gen_addhi3 = *gccc::gen_addhi3;
*gen_addsi3 = *gccc::gen_addsi3;
*gen_adddi3 = *gccc::gen_adddi3;
*gen_addti3 = *gccc::gen_addti3;
*gen_subqi3 = *gccc::gen_subqi3;
*gen_subhi3 = *gccc::gen_subhi3;
*gen_subsi3 = *gccc::gen_subsi3;
*gen_subdi3 = *gccc::gen_subdi3;
*gen_subti3 = *gccc::gen_subti3;
*gen_addqi3_carry = *gccc::gen_addqi3_carry;
*gen_subqi3_carry = *gccc::gen_subqi3_carry;
*gen_addhi3_carry = *gccc::gen_addhi3_carry;
*gen_subhi3_carry = *gccc::gen_subhi3_carry;
*gen_addsi3_carry = *gccc::gen_addsi3_carry;
*gen_subsi3_carry = *gccc::gen_subsi3_carry;
*gen_adddi3_carry = *gccc::gen_adddi3_carry;
*gen_subdi3_carry = *gccc::gen_subdi3_carry;
*gen_addxf3 = *gccc::gen_addxf3;
*gen_subxf3 = *gccc::gen_subxf3;
*gen_addsf3 = *gccc::gen_addsf3;
*gen_subsf3 = *gccc::gen_subsf3;
*gen_adddf3 = *gccc::gen_adddf3;
*gen_subdf3 = *gccc::gen_subdf3;
*gen_mulhi3 = *gccc::gen_mulhi3;
*gen_mulsi3 = *gccc::gen_mulsi3;
*gen_muldi3 = *gccc::gen_muldi3;
*gen_mulqi3 = *gccc::gen_mulqi3;
*gen_mulsidi3 = *gccc::gen_mulsidi3;
*gen_umulsidi3 = *gccc::gen_umulsidi3;
*gen_mulditi3 = *gccc::gen_mulditi3;
*gen_umulditi3 = *gccc::gen_umulditi3;
*gen_mulqihi3 = *gccc::gen_mulqihi3;
*gen_umulqihi3 = *gccc::gen_umulqihi3;
*gen_smulsi3_highpart = *gccc::gen_smulsi3_highpart;
*gen_umulsi3_highpart = *gccc::gen_umulsi3_highpart;
*gen_smuldi3_highpart = *gccc::gen_smuldi3_highpart;
*gen_umuldi3_highpart = *gccc::gen_umuldi3_highpart;
*gen_mulxf3 = *gccc::gen_mulxf3;
*gen_mulsf3 = *gccc::gen_mulsf3;
*gen_muldf3 = *gccc::gen_muldf3;
*gen_divxf3 = *gccc::gen_divxf3;
*gen_divdf3 = *gccc::gen_divdf3;
*gen_divsf3 = *gccc::gen_divsf3;
*gen_divmodhi4 = *gccc::gen_divmodhi4;
*gen_divmodsi4 = *gccc::gen_divmodsi4;
*gen_divmoddi4 = *gccc::gen_divmoddi4;
*gen_divmodqi4 = *gccc::gen_divmodqi4;
*gen_udivmodhi4 = *gccc::gen_udivmodhi4;
*gen_udivmodsi4 = *gccc::gen_udivmodsi4;
*gen_udivmoddi4 = *gccc::gen_udivmoddi4;
*gen_udivmodqi4 = *gccc::gen_udivmodqi4;
*gen_testsi_ccno_1 = *gccc::gen_testsi_ccno_1;
*gen_testqi_ccz_1 = *gccc::gen_testqi_ccz_1;
*gen_testdi_ccno_1 = *gccc::gen_testdi_ccno_1;
*gen_testqi_ext_ccno_0 = *gccc::gen_testqi_ext_ccno_0;
*gen_andqi3 = *gccc::gen_andqi3;
*gen_andhi3 = *gccc::gen_andhi3;
*gen_andsi3 = *gccc::gen_andsi3;
*gen_anddi3 = *gccc::gen_anddi3;
*gen_iorqi3 = *gccc::gen_iorqi3;
*gen_xorqi3 = *gccc::gen_xorqi3;
*gen_iorhi3 = *gccc::gen_iorhi3;
*gen_xorhi3 = *gccc::gen_xorhi3;
*gen_iorsi3 = *gccc::gen_iorsi3;
*gen_xorsi3 = *gccc::gen_xorsi3;
*gen_iordi3 = *gccc::gen_iordi3;
*gen_xordi3 = *gccc::gen_xordi3;
*gen_xorqi_cc_ext_1 = *gccc::gen_xorqi_cc_ext_1;
*gen_negqi2 = *gccc::gen_negqi2;
*gen_neghi2 = *gccc::gen_neghi2;
*gen_negsi2 = *gccc::gen_negsi2;
*gen_negdi2 = *gccc::gen_negdi2;
*gen_negti2 = *gccc::gen_negti2;
*gen_abssf2 = *gccc::gen_abssf2;
*gen_negsf2 = *gccc::gen_negsf2;
*gen_absdf2 = *gccc::gen_absdf2;
*gen_negdf2 = *gccc::gen_negdf2;
*gen_absxf2 = *gccc::gen_absxf2;
*gen_negxf2 = *gccc::gen_negxf2;
*gen_abstf2 = *gccc::gen_abstf2;
*gen_negtf2 = *gccc::gen_negtf2;
*gen_copysignsf3 = *gccc::gen_copysignsf3;
*gen_copysigndf3 = *gccc::gen_copysigndf3;
*gen_copysigntf3 = *gccc::gen_copysigntf3;
*gen_one_cmplqi2 = *gccc::gen_one_cmplqi2;
*gen_one_cmplhi2 = *gccc::gen_one_cmplhi2;
*gen_one_cmplsi2 = *gccc::gen_one_cmplsi2;
*gen_one_cmpldi2 = *gccc::gen_one_cmpldi2;
*gen_ashlqi3 = *gccc::gen_ashlqi3;
*gen_ashlhi3 = *gccc::gen_ashlhi3;
*gen_ashlsi3 = *gccc::gen_ashlsi3;
*gen_ashldi3 = *gccc::gen_ashldi3;
*gen_ashlti3 = *gccc::gen_ashlti3;
*gen_x86_shiftsi_adj_1 = *gccc::gen_x86_shiftsi_adj_1;
*gen_x86_shiftdi_adj_1 = *gccc::gen_x86_shiftdi_adj_1;
*gen_x86_shiftsi_adj_2 = *gccc::gen_x86_shiftsi_adj_2;
*gen_x86_shiftdi_adj_2 = *gccc::gen_x86_shiftdi_adj_2;
*gen_lshrqi3 = *gccc::gen_lshrqi3;
*gen_ashrqi3 = *gccc::gen_ashrqi3;
*gen_lshrhi3 = *gccc::gen_lshrhi3;
*gen_ashrhi3 = *gccc::gen_ashrhi3;
*gen_lshrsi3 = *gccc::gen_lshrsi3;
*gen_ashrsi3 = *gccc::gen_ashrsi3;
*gen_lshrdi3 = *gccc::gen_lshrdi3;
*gen_ashrdi3 = *gccc::gen_ashrdi3;
*gen_lshrti3 = *gccc::gen_lshrti3;
*gen_ashrti3 = *gccc::gen_ashrti3;
*gen_x86_shiftsi_adj_3 = *gccc::gen_x86_shiftsi_adj_3;
*gen_x86_shiftdi_adj_3 = *gccc::gen_x86_shiftdi_adj_3;
*gen_rotlti3 = *gccc::gen_rotlti3;
*gen_rotrti3 = *gccc::gen_rotrti3;
*gen_rotldi3 = *gccc::gen_rotldi3;
*gen_rotrdi3 = *gccc::gen_rotrdi3;
*gen_rotlqi3 = *gccc::gen_rotlqi3;
*gen_rotrqi3 = *gccc::gen_rotrqi3;
*gen_rotlhi3 = *gccc::gen_rotlhi3;
*gen_rotrhi3 = *gccc::gen_rotrhi3;
*gen_rotlsi3 = *gccc::gen_rotlsi3;
*gen_rotrsi3 = *gccc::gen_rotrsi3;
*gen_extv = *gccc::gen_extv;
*gen_extzv = *gccc::gen_extzv;
*gen_insv = *gccc::gen_insv;
*gen_indirect_jump = *gccc::gen_indirect_jump;
*gen_tablejump = *gccc::gen_tablejump;
*gen_call_pop = *gccc::gen_call_pop;
*gen_call = *gccc::gen_call;
*gen_sibcall = *gccc::gen_sibcall;
*gen_call_value_pop = *gccc::gen_call_value_pop;
*gen_call_value = *gccc::gen_call_value;
*gen_sibcall_value = *gccc::gen_sibcall_value;
*gen_untyped_call = *gccc::gen_untyped_call;
*gen_memory_blockage = *gccc::gen_memory_blockage;
*gen_return = *gccc::gen_return;
*gen_prologue = *gccc::gen_prologue;
*gen_epilogue = *gccc::gen_epilogue;
*gen_sibcall_epilogue = *gccc::gen_sibcall_epilogue;
*gen_eh_return = *gccc::gen_eh_return;
*gen_split_stack_prologue = *gccc::gen_split_stack_prologue;
*gen_split_stack_space_check = *gccc::gen_split_stack_space_check;
*gen_ffssi2 = *gccc::gen_ffssi2;
*gen_ffsdi2 = *gccc::gen_ffsdi2;
*gen_clzhi2 = *gccc::gen_clzhi2;
*gen_clzsi2 = *gccc::gen_clzsi2;
*gen_clzdi2 = *gccc::gen_clzdi2;
*gen_bswapsi2 = *gccc::gen_bswapsi2;
*gen_bswapdi2 = *gccc::gen_bswapdi2;
*gen_paritydi2 = *gccc::gen_paritydi2;
*gen_paritysi2 = *gccc::gen_paritysi2;
*gen_tls_global_dynamic_32 = *gccc::gen_tls_global_dynamic_32;
*gen_tls_global_dynamic_64 = *gccc::gen_tls_global_dynamic_64;
*gen_tls_local_dynamic_base_32 = *gccc::gen_tls_local_dynamic_base_32;
*gen_tls_local_dynamic_base_64 = *gccc::gen_tls_local_dynamic_base_64;
*gen_tls_dynamic_gnu2_32 = *gccc::gen_tls_dynamic_gnu2_32;
*gen_tls_dynamic_gnu2_64 = *gccc::gen_tls_dynamic_gnu2_64;
*gen_rsqrtsf2 = *gccc::gen_rsqrtsf2;
*gen_sqrtsf2 = *gccc::gen_sqrtsf2;
*gen_sqrtdf2 = *gccc::gen_sqrtdf2;
*gen_fmodxf3 = *gccc::gen_fmodxf3;
*gen_fmodsf3 = *gccc::gen_fmodsf3;
*gen_fmoddf3 = *gccc::gen_fmoddf3;
*gen_remainderxf3 = *gccc::gen_remainderxf3;
*gen_remaindersf3 = *gccc::gen_remaindersf3;
*gen_remainderdf3 = *gccc::gen_remainderdf3;
*gen_sincossf3 = *gccc::gen_sincossf3;
*gen_sincosdf3 = *gccc::gen_sincosdf3;
*gen_tanxf2 = *gccc::gen_tanxf2;
*gen_tansf2 = *gccc::gen_tansf2;
*gen_tandf2 = *gccc::gen_tandf2;
*gen_atan2xf3 = *gccc::gen_atan2xf3;
*gen_atan2sf3 = *gccc::gen_atan2sf3;
*gen_atan2df3 = *gccc::gen_atan2df3;
*gen_atanxf2 = *gccc::gen_atanxf2;
*gen_atansf2 = *gccc::gen_atansf2;
*gen_atandf2 = *gccc::gen_atandf2;
*gen_asinxf2 = *gccc::gen_asinxf2;
*gen_asinsf2 = *gccc::gen_asinsf2;
*gen_asindf2 = *gccc::gen_asindf2;
*gen_acosxf2 = *gccc::gen_acosxf2;
*gen_acossf2 = *gccc::gen_acossf2;
*gen_acosdf2 = *gccc::gen_acosdf2;
*gen_logxf2 = *gccc::gen_logxf2;
*gen_logsf2 = *gccc::gen_logsf2;
*gen_logdf2 = *gccc::gen_logdf2;
*gen_log10xf2 = *gccc::gen_log10xf2;
*gen_log10sf2 = *gccc::gen_log10sf2;
*gen_log10df2 = *gccc::gen_log10df2;
*gen_log2xf2 = *gccc::gen_log2xf2;
*gen_log2sf2 = *gccc::gen_log2sf2;
*gen_log2df2 = *gccc::gen_log2df2;
*gen_log1pxf2 = *gccc::gen_log1pxf2;
*gen_log1psf2 = *gccc::gen_log1psf2;
*gen_log1pdf2 = *gccc::gen_log1pdf2;
*gen_logbxf2 = *gccc::gen_logbxf2;
*gen_logbsf2 = *gccc::gen_logbsf2;
*gen_logbdf2 = *gccc::gen_logbdf2;
*gen_ilogbxf2 = *gccc::gen_ilogbxf2;
*gen_ilogbsf2 = *gccc::gen_ilogbsf2;
*gen_ilogbdf2 = *gccc::gen_ilogbdf2;
*gen_expNcorexf3 = *gccc::gen_expNcorexf3;
*gen_expxf2 = *gccc::gen_expxf2;
*gen_expsf2 = *gccc::gen_expsf2;
*gen_expdf2 = *gccc::gen_expdf2;
*gen_exp10xf2 = *gccc::gen_exp10xf2;
*gen_exp10sf2 = *gccc::gen_exp10sf2;
*gen_exp10df2 = *gccc::gen_exp10df2;
*gen_exp2xf2 = *gccc::gen_exp2xf2;
*gen_exp2sf2 = *gccc::gen_exp2sf2;
*gen_exp2df2 = *gccc::gen_exp2df2;
*gen_expm1xf2 = *gccc::gen_expm1xf2;
*gen_expm1sf2 = *gccc::gen_expm1sf2;
*gen_expm1df2 = *gccc::gen_expm1df2;
*gen_ldexpxf3 = *gccc::gen_ldexpxf3;
*gen_ldexpsf3 = *gccc::gen_ldexpsf3;
*gen_ldexpdf3 = *gccc::gen_ldexpdf3;
*gen_scalbxf3 = *gccc::gen_scalbxf3;
*gen_scalbsf3 = *gccc::gen_scalbsf3;
*gen_scalbdf3 = *gccc::gen_scalbdf3;
*gen_significandxf2 = *gccc::gen_significandxf2;
*gen_significandsf2 = *gccc::gen_significandsf2;
*gen_significanddf2 = *gccc::gen_significanddf2;
*gen_rintsf2 = *gccc::gen_rintsf2;
*gen_rintdf2 = *gccc::gen_rintdf2;
*gen_roundsf2 = *gccc::gen_roundsf2;
*gen_rounddf2 = *gccc::gen_rounddf2;
*gen_lrintxfhi2 = *gccc::gen_lrintxfhi2;
*gen_lrintxfsi2 = *gccc::gen_lrintxfsi2;
*gen_lrintxfdi2 = *gccc::gen_lrintxfdi2;
*gen_lrintsfsi2 = *gccc::gen_lrintsfsi2;
*gen_lrintdfsi2 = *gccc::gen_lrintdfsi2;
*gen_lrintsfdi2 = *gccc::gen_lrintsfdi2;
*gen_lrintdfdi2 = *gccc::gen_lrintdfdi2;
*gen_lroundsfsi2 = *gccc::gen_lroundsfsi2;
*gen_lrounddfsi2 = *gccc::gen_lrounddfsi2;
*gen_lroundsfdi2 = *gccc::gen_lroundsfdi2;
*gen_lrounddfdi2 = *gccc::gen_lrounddfdi2;
*gen_floorxf2 = *gccc::gen_floorxf2;
*gen_floorsf2 = *gccc::gen_floorsf2;
*gen_floordf2 = *gccc::gen_floordf2;
*gen_lfloorxfhi2 = *gccc::gen_lfloorxfhi2;
*gen_lfloorxfsi2 = *gccc::gen_lfloorxfsi2;
*gen_lfloorxfdi2 = *gccc::gen_lfloorxfdi2;
*gen_lfloorsfsi2 = *gccc::gen_lfloorsfsi2;
*gen_lfloordfsi2 = *gccc::gen_lfloordfsi2;
*gen_lfloorsfdi2 = *gccc::gen_lfloorsfdi2;
*gen_lfloordfdi2 = *gccc::gen_lfloordfdi2;
*gen_ceilxf2 = *gccc::gen_ceilxf2;
*gen_ceilsf2 = *gccc::gen_ceilsf2;
*gen_ceildf2 = *gccc::gen_ceildf2;
*gen_lceilxfhi2 = *gccc::gen_lceilxfhi2;
*gen_lceilxfsi2 = *gccc::gen_lceilxfsi2;
*gen_lceilxfdi2 = *gccc::gen_lceilxfdi2;
*gen_lceilsfsi2 = *gccc::gen_lceilsfsi2;
*gen_lceildfsi2 = *gccc::gen_lceildfsi2;
*gen_lceilsfdi2 = *gccc::gen_lceilsfdi2;
*gen_lceildfdi2 = *gccc::gen_lceildfdi2;
*gen_btruncxf2 = *gccc::gen_btruncxf2;
*gen_btruncsf2 = *gccc::gen_btruncsf2;
*gen_btruncdf2 = *gccc::gen_btruncdf2;
*gen_nearbyintxf2 = *gccc::gen_nearbyintxf2;
*gen_nearbyintsf2 = *gccc::gen_nearbyintsf2;
*gen_nearbyintdf2 = *gccc::gen_nearbyintdf2;
*gen_isinfxf2 = *gccc::gen_isinfxf2;
*gen_isinfsf2 = *gccc::gen_isinfsf2;
*gen_isinfdf2 = *gccc::gen_isinfdf2;
*gen_signbitxf2 = *gccc::gen_signbitxf2;
*gen_signbitdf2 = *gccc::gen_signbitdf2;
*gen_signbitsf2 = *gccc::gen_signbitsf2;
*gen_movmemsi = *gccc::gen_movmemsi;
*gen_movmemdi = *gccc::gen_movmemdi;
*gen_strmov = *gccc::gen_strmov;
*gen_strmov_singleop = *gccc::gen_strmov_singleop;
*gen_rep_mov = *gccc::gen_rep_mov;
*gen_setmemsi = *gccc::gen_setmemsi;
*gen_setmemdi = *gccc::gen_setmemdi;
*gen_strset = *gccc::gen_strset;
*gen_strset_singleop = *gccc::gen_strset_singleop;
*gen_rep_stos = *gccc::gen_rep_stos;
*gen_cmpstrnsi = *gccc::gen_cmpstrnsi;
*gen_cmpintqi = *gccc::gen_cmpintqi;
*gen_cmpstrnqi_nz_1 = *gccc::gen_cmpstrnqi_nz_1;
*gen_cmpstrnqi_1 = *gccc::gen_cmpstrnqi_1;
*gen_strlensi = *gccc::gen_strlensi;
*gen_strlendi = *gccc::gen_strlendi;
*gen_strlenqi_1 = *gccc::gen_strlenqi_1;
*gen_movqicc = *gccc::gen_movqicc;
*gen_movhicc = *gccc::gen_movhicc;
*gen_movsicc = *gccc::gen_movsicc;
*gen_movdicc = *gccc::gen_movdicc;
*gen_x86_movsicc_0_m1 = *gccc::gen_x86_movsicc_0_m1;
*gen_x86_movdicc_0_m1 = *gccc::gen_x86_movdicc_0_m1;
*gen_movsfcc = *gccc::gen_movsfcc;
*gen_movdfcc = *gccc::gen_movdfcc;
*gen_movxfcc = *gccc::gen_movxfcc;
*gen_addqicc = *gccc::gen_addqicc;
*gen_addhicc = *gccc::gen_addhicc;
*gen_addsicc = *gccc::gen_addsicc;
*gen_adddicc = *gccc::gen_adddicc;
*gen_allocate_stack = *gccc::gen_allocate_stack;
*gen_probe_stack = *gccc::gen_probe_stack;
*gen_builtin_setjmp_receiver = *gccc::gen_builtin_setjmp_receiver;
*gen_prefetch = *gccc::gen_prefetch;
*gen_stack_protect_set = *gccc::gen_stack_protect_set;
*gen_stack_protect_test = *gccc::gen_stack_protect_test;
*gen_rdpmc = *gccc::gen_rdpmc;
*gen_rdtsc = *gccc::gen_rdtsc;
*gen_rdtscp = *gccc::gen_rdtscp;
*gen_lwp_llwpcb = *gccc::gen_lwp_llwpcb;
*gen_lwp_slwpcb = *gccc::gen_lwp_slwpcb;
*gen_lwp_lwpvalsi3 = *gccc::gen_lwp_lwpvalsi3;
*gen_lwp_lwpvaldi3 = *gccc::gen_lwp_lwpvaldi3;
*gen_lwp_lwpinssi3 = *gccc::gen_lwp_lwpinssi3;
*gen_lwp_lwpinsdi3 = *gccc::gen_lwp_lwpinsdi3;
*gen_movv8qi = *gccc::gen_movv8qi;
*gen_movv4hi = *gccc::gen_movv4hi;
*gen_movv2si = *gccc::gen_movv2si;
*gen_movv1di = *gccc::gen_movv1di;
*gen_movv2sf = *gccc::gen_movv2sf;
*gen_pushv8qi1 = *gccc::gen_pushv8qi1;
*gen_pushv4hi1 = *gccc::gen_pushv4hi1;
*gen_pushv2si1 = *gccc::gen_pushv2si1;
*gen_pushv1di1 = *gccc::gen_pushv1di1;
*gen_pushv2sf1 = *gccc::gen_pushv2sf1;
*gen_movmisalignv8qi = *gccc::gen_movmisalignv8qi;
*gen_movmisalignv4hi = *gccc::gen_movmisalignv4hi;
*gen_movmisalignv2si = *gccc::gen_movmisalignv2si;
*gen_movmisalignv1di = *gccc::gen_movmisalignv1di;
*gen_movmisalignv2sf = *gccc::gen_movmisalignv2sf;
*gen_mmx_addv2sf3 = *gccc::gen_mmx_addv2sf3;
*gen_mmx_subv2sf3 = *gccc::gen_mmx_subv2sf3;
*gen_mmx_subrv2sf3 = *gccc::gen_mmx_subrv2sf3;
*gen_mmx_mulv2sf3 = *gccc::gen_mmx_mulv2sf3;
*gen_mmx_smaxv2sf3 = *gccc::gen_mmx_smaxv2sf3;
*gen_mmx_sminv2sf3 = *gccc::gen_mmx_sminv2sf3;
*gen_mmx_eqv2sf3 = *gccc::gen_mmx_eqv2sf3;
*gen_vec_setv2sf = *gccc::gen_vec_setv2sf;
*gen_vec_extractv2sf = *gccc::gen_vec_extractv2sf;
*gen_vec_initv2sf = *gccc::gen_vec_initv2sf;
*gen_mmx_addv8qi3 = *gccc::gen_mmx_addv8qi3;
*gen_mmx_subv8qi3 = *gccc::gen_mmx_subv8qi3;
*gen_mmx_addv4hi3 = *gccc::gen_mmx_addv4hi3;
*gen_mmx_subv4hi3 = *gccc::gen_mmx_subv4hi3;
*gen_mmx_addv2si3 = *gccc::gen_mmx_addv2si3;
*gen_mmx_subv2si3 = *gccc::gen_mmx_subv2si3;
*gen_mmx_addv1di3 = *gccc::gen_mmx_addv1di3;
*gen_mmx_subv1di3 = *gccc::gen_mmx_subv1di3;
*gen_mmx_ssaddv8qi3 = *gccc::gen_mmx_ssaddv8qi3;
*gen_mmx_usaddv8qi3 = *gccc::gen_mmx_usaddv8qi3;
*gen_mmx_sssubv8qi3 = *gccc::gen_mmx_sssubv8qi3;
*gen_mmx_ussubv8qi3 = *gccc::gen_mmx_ussubv8qi3;
*gen_mmx_ssaddv4hi3 = *gccc::gen_mmx_ssaddv4hi3;
*gen_mmx_usaddv4hi3 = *gccc::gen_mmx_usaddv4hi3;
*gen_mmx_sssubv4hi3 = *gccc::gen_mmx_sssubv4hi3;
*gen_mmx_ussubv4hi3 = *gccc::gen_mmx_ussubv4hi3;
*gen_mmx_mulv4hi3 = *gccc::gen_mmx_mulv4hi3;
*gen_mmx_smulv4hi3_highpart = *gccc::gen_mmx_smulv4hi3_highpart;
*gen_mmx_umulv4hi3_highpart = *gccc::gen_mmx_umulv4hi3_highpart;
*gen_mmx_pmaddwd = *gccc::gen_mmx_pmaddwd;
*gen_mmx_pmulhrwv4hi3 = *gccc::gen_mmx_pmulhrwv4hi3;
*gen_sse2_umulv1siv1di3 = *gccc::gen_sse2_umulv1siv1di3;
*gen_mmx_smaxv4hi3 = *gccc::gen_mmx_smaxv4hi3;
*gen_mmx_sminv4hi3 = *gccc::gen_mmx_sminv4hi3;
*gen_mmx_umaxv8qi3 = *gccc::gen_mmx_umaxv8qi3;
*gen_mmx_uminv8qi3 = *gccc::gen_mmx_uminv8qi3;
*gen_mmx_eqv8qi3 = *gccc::gen_mmx_eqv8qi3;
*gen_mmx_eqv4hi3 = *gccc::gen_mmx_eqv4hi3;
*gen_mmx_eqv2si3 = *gccc::gen_mmx_eqv2si3;
*gen_mmx_andv8qi3 = *gccc::gen_mmx_andv8qi3;
*gen_mmx_iorv8qi3 = *gccc::gen_mmx_iorv8qi3;
*gen_mmx_xorv8qi3 = *gccc::gen_mmx_xorv8qi3;
*gen_mmx_andv4hi3 = *gccc::gen_mmx_andv4hi3;
*gen_mmx_iorv4hi3 = *gccc::gen_mmx_iorv4hi3;
*gen_mmx_xorv4hi3 = *gccc::gen_mmx_xorv4hi3;
*gen_mmx_andv2si3 = *gccc::gen_mmx_andv2si3;
*gen_mmx_iorv2si3 = *gccc::gen_mmx_iorv2si3;
*gen_mmx_xorv2si3 = *gccc::gen_mmx_xorv2si3;
*gen_mmx_pinsrw = *gccc::gen_mmx_pinsrw;
*gen_mmx_pshufw = *gccc::gen_mmx_pshufw;
*gen_vec_setv2si = *gccc::gen_vec_setv2si;
*gen_vec_extractv2si = *gccc::gen_vec_extractv2si;
*gen_vec_initv2si = *gccc::gen_vec_initv2si;
*gen_vec_setv4hi = *gccc::gen_vec_setv4hi;
*gen_vec_extractv4hi = *gccc::gen_vec_extractv4hi;
*gen_vec_initv4hi = *gccc::gen_vec_initv4hi;
*gen_vec_setv8qi = *gccc::gen_vec_setv8qi;
*gen_vec_extractv8qi = *gccc::gen_vec_extractv8qi;
*gen_vec_initv8qi = *gccc::gen_vec_initv8qi;
*gen_mmx_uavgv8qi3 = *gccc::gen_mmx_uavgv8qi3;
*gen_mmx_uavgv4hi3 = *gccc::gen_mmx_uavgv4hi3;
*gen_mmx_maskmovq = *gccc::gen_mmx_maskmovq;
*gen_mmx_emms = *gccc::gen_mmx_emms;
*gen_mmx_femms = *gccc::gen_mmx_femms;
*gen_movv32qi = *gccc::gen_movv32qi;
*gen_movv16hi = *gccc::gen_movv16hi;
*gen_movv8si = *gccc::gen_movv8si;
*gen_movv4di = *gccc::gen_movv4di;
*gen_movv8sf = *gccc::gen_movv8sf;
*gen_movv4df = *gccc::gen_movv4df;
*gen_movv16qi = *gccc::gen_movv16qi;
*gen_movv8hi = *gccc::gen_movv8hi;
*gen_movv4si = *gccc::gen_movv4si;
*gen_movv2di = *gccc::gen_movv2di;
*gen_movv1ti = *gccc::gen_movv1ti;
*gen_movv4sf = *gccc::gen_movv4sf;
*gen_movv2df = *gccc::gen_movv2df;
*gen_pushv32qi1 = *gccc::gen_pushv32qi1;
*gen_pushv16hi1 = *gccc::gen_pushv16hi1;
*gen_pushv8si1 = *gccc::gen_pushv8si1;
*gen_pushv4di1 = *gccc::gen_pushv4di1;
*gen_pushv8sf1 = *gccc::gen_pushv8sf1;
*gen_pushv4df1 = *gccc::gen_pushv4df1;
*gen_pushv16qi1 = *gccc::gen_pushv16qi1;
*gen_pushv8hi1 = *gccc::gen_pushv8hi1;
*gen_pushv4si1 = *gccc::gen_pushv4si1;
*gen_pushv2di1 = *gccc::gen_pushv2di1;
*gen_pushv1ti1 = *gccc::gen_pushv1ti1;
*gen_pushv4sf1 = *gccc::gen_pushv4sf1;
*gen_pushv2df1 = *gccc::gen_pushv2df1;
*gen_movmisalignv32qi = *gccc::gen_movmisalignv32qi;
*gen_movmisalignv16hi = *gccc::gen_movmisalignv16hi;
*gen_movmisalignv8si = *gccc::gen_movmisalignv8si;
*gen_movmisalignv4di = *gccc::gen_movmisalignv4di;
*gen_movmisalignv8sf = *gccc::gen_movmisalignv8sf;
*gen_movmisalignv4df = *gccc::gen_movmisalignv4df;
*gen_movmisalignv16qi = *gccc::gen_movmisalignv16qi;
*gen_movmisalignv8hi = *gccc::gen_movmisalignv8hi;
*gen_movmisalignv4si = *gccc::gen_movmisalignv4si;
*gen_movmisalignv2di = *gccc::gen_movmisalignv2di;
*gen_movmisalignv1ti = *gccc::gen_movmisalignv1ti;
*gen_movmisalignv4sf = *gccc::gen_movmisalignv4sf;
*gen_movmisalignv2df = *gccc::gen_movmisalignv2df;
*gen_avx_movups = *gccc::gen_avx_movups;
*gen_avx_movupd = *gccc::gen_avx_movupd;
*gen_avx_movups256 = *gccc::gen_avx_movups256;
*gen_avx_movupd256 = *gccc::gen_avx_movupd256;
*gen_sse_movups = *gccc::gen_sse_movups;
*gen_sse2_movupd = *gccc::gen_sse2_movupd;
*gen_avx_movdqu256 = *gccc::gen_avx_movdqu256;
*gen_avx_movdqu = *gccc::gen_avx_movdqu;
*gen_sse2_movdqu = *gccc::gen_sse2_movdqu;
*gen_storentsf = *gccc::gen_storentsf;
*gen_storentdf = *gccc::gen_storentdf;
*gen_storentsi = *gccc::gen_storentsi;
*gen_storentv2di = *gccc::gen_storentv2di;
*gen_storentv2df = *gccc::gen_storentv2df;
*gen_storentv4sf = *gccc::gen_storentv4sf;
*gen_storentv4df = *gccc::gen_storentv4df;
*gen_storentv8sf = *gccc::gen_storentv8sf;
*gen_absv2df2 = *gccc::gen_absv2df2;
*gen_negv2df2 = *gccc::gen_negv2df2;
*gen_absv4sf2 = *gccc::gen_absv4sf2;
*gen_negv4sf2 = *gccc::gen_negv4sf2;
*gen_absv4df2 = *gccc::gen_absv4df2;
*gen_negv4df2 = *gccc::gen_negv4df2;
*gen_absv8sf2 = *gccc::gen_absv8sf2;
*gen_negv8sf2 = *gccc::gen_negv8sf2;
*gen_addv8sf3 = *gccc::gen_addv8sf3;
*gen_subv8sf3 = *gccc::gen_subv8sf3;
*gen_addv4df3 = *gccc::gen_addv4df3;
*gen_subv4df3 = *gccc::gen_subv4df3;
*gen_addv4sf3 = *gccc::gen_addv4sf3;
*gen_subv4sf3 = *gccc::gen_subv4sf3;
*gen_addv2df3 = *gccc::gen_addv2df3;
*gen_subv2df3 = *gccc::gen_subv2df3;
*gen_mulv8sf3 = *gccc::gen_mulv8sf3;
*gen_mulv4df3 = *gccc::gen_mulv4df3;
*gen_mulv4sf3 = *gccc::gen_mulv4sf3;
*gen_mulv2df3 = *gccc::gen_mulv2df3;
*gen_divv8sf3 = *gccc::gen_divv8sf3;
*gen_divv4df3 = *gccc::gen_divv4df3;
*gen_divv4sf3 = *gccc::gen_divv4sf3;
*gen_divv2df3 = *gccc::gen_divv2df3;
*gen_sqrtv8sf2 = *gccc::gen_sqrtv8sf2;
*gen_sqrtv4sf2 = *gccc::gen_sqrtv4sf2;
*gen_rsqrtv8sf2 = *gccc::gen_rsqrtv8sf2;
*gen_rsqrtv4sf2 = *gccc::gen_rsqrtv4sf2;
*gen_smaxv8sf3 = *gccc::gen_smaxv8sf3;
*gen_sminv8sf3 = *gccc::gen_sminv8sf3;
*gen_smaxv4df3 = *gccc::gen_smaxv4df3;
*gen_sminv4df3 = *gccc::gen_sminv4df3;
*gen_smaxv4sf3 = *gccc::gen_smaxv4sf3;
*gen_sminv4sf3 = *gccc::gen_sminv4sf3;
*gen_smaxv2df3 = *gccc::gen_smaxv2df3;
*gen_sminv2df3 = *gccc::gen_sminv2df3;
*gen_reduc_splus_v8sf = *gccc::gen_reduc_splus_v8sf;
*gen_reduc_splus_v4sf = *gccc::gen_reduc_splus_v4sf;
*gen_reduc_splus_v4df = *gccc::gen_reduc_splus_v4df;
*gen_reduc_splus_v2df = *gccc::gen_reduc_splus_v2df;
*gen_reduc_smax_v4sf = *gccc::gen_reduc_smax_v4sf;
*gen_reduc_smin_v4sf = *gccc::gen_reduc_smin_v4sf;
*gen_vcondv4sf = *gccc::gen_vcondv4sf;
*gen_vcondv2df = *gccc::gen_vcondv2df;
*gen_vcondv8sf = *gccc::gen_vcondv8sf;
*gen_vcondv4df = *gccc::gen_vcondv4df;
*gen_andv8sf3 = *gccc::gen_andv8sf3;
*gen_iorv8sf3 = *gccc::gen_iorv8sf3;
*gen_xorv8sf3 = *gccc::gen_xorv8sf3;
*gen_andv4df3 = *gccc::gen_andv4df3;
*gen_iorv4df3 = *gccc::gen_iorv4df3;
*gen_xorv4df3 = *gccc::gen_xorv4df3;
*gen_andv4sf3 = *gccc::gen_andv4sf3;
*gen_iorv4sf3 = *gccc::gen_iorv4sf3;
*gen_xorv4sf3 = *gccc::gen_xorv4sf3;
*gen_andv2df3 = *gccc::gen_andv2df3;
*gen_iorv2df3 = *gccc::gen_iorv2df3;
*gen_xorv2df3 = *gccc::gen_xorv2df3;
*gen_copysignv2df3 = *gccc::gen_copysignv2df3;
*gen_copysignv4sf3 = *gccc::gen_copysignv4sf3;
*gen_copysignv4df3 = *gccc::gen_copysignv4df3;
*gen_copysignv8sf3 = *gccc::gen_copysignv8sf3;
*gen_fmasf4 = *gccc::gen_fmasf4;
*gen_fmadf4 = *gccc::gen_fmadf4;
*gen_fmav4sf4 = *gccc::gen_fmav4sf4;
*gen_fmav2df4 = *gccc::gen_fmav2df4;
*gen_fmav8sf4 = *gccc::gen_fmav8sf4;
*gen_fmav4df4 = *gccc::gen_fmav4df4;
*gen_fmssf4 = *gccc::gen_fmssf4;
*gen_fmsdf4 = *gccc::gen_fmsdf4;
*gen_fmsv4sf4 = *gccc::gen_fmsv4sf4;
*gen_fmsv2df4 = *gccc::gen_fmsv2df4;
*gen_fmsv8sf4 = *gccc::gen_fmsv8sf4;
*gen_fmsv4df4 = *gccc::gen_fmsv4df4;
*gen_fnmasf4 = *gccc::gen_fnmasf4;
*gen_fnmadf4 = *gccc::gen_fnmadf4;
*gen_fnmav4sf4 = *gccc::gen_fnmav4sf4;
*gen_fnmav2df4 = *gccc::gen_fnmav2df4;
*gen_fnmav8sf4 = *gccc::gen_fnmav8sf4;
*gen_fnmav4df4 = *gccc::gen_fnmav4df4;
*gen_fnmssf4 = *gccc::gen_fnmssf4;
*gen_fnmsdf4 = *gccc::gen_fnmsdf4;
*gen_fnmsv4sf4 = *gccc::gen_fnmsv4sf4;
*gen_fnmsv2df4 = *gccc::gen_fnmsv2df4;
*gen_fnmsv8sf4 = *gccc::gen_fnmsv8sf4;
*gen_fnmsv4df4 = *gccc::gen_fnmsv4df4;
*gen_fma4i_fmadd_sf = *gccc::gen_fma4i_fmadd_sf;
*gen_fma4i_fmadd_df = *gccc::gen_fma4i_fmadd_df;
*gen_fma4i_fmadd_v4sf = *gccc::gen_fma4i_fmadd_v4sf;
*gen_fma4i_fmadd_v2df = *gccc::gen_fma4i_fmadd_v2df;
*gen_fma4i_fmadd_v8sf = *gccc::gen_fma4i_fmadd_v8sf;
*gen_fma4i_fmadd_v4df = *gccc::gen_fma4i_fmadd_v4df;
*gen_fma4i_vmfmadd_v4sf = *gccc::gen_fma4i_vmfmadd_v4sf;
*gen_fma4i_vmfmadd_v2df = *gccc::gen_fma4i_vmfmadd_v2df;
*gen_fmaddsub_v4sf = *gccc::gen_fmaddsub_v4sf;
*gen_fmaddsub_v2df = *gccc::gen_fmaddsub_v2df;
*gen_fmaddsub_v8sf = *gccc::gen_fmaddsub_v8sf;
*gen_fmaddsub_v4df = *gccc::gen_fmaddsub_v4df;
*gen_sse2_cvtudq2ps = *gccc::gen_sse2_cvtudq2ps;
*gen_sse2_cvtpd2dq = *gccc::gen_sse2_cvtpd2dq;
*gen_sse2_cvttpd2dq = *gccc::gen_sse2_cvttpd2dq;
*gen_sse2_cvtpd2ps = *gccc::gen_sse2_cvtpd2ps;
*gen_vec_unpacks_hi_v4sf = *gccc::gen_vec_unpacks_hi_v4sf;
*gen_vec_unpacks_hi_v8sf = *gccc::gen_vec_unpacks_hi_v8sf;
*gen_vec_unpacks_lo_v4sf = *gccc::gen_vec_unpacks_lo_v4sf;
*gen_vec_unpacks_lo_v8sf = *gccc::gen_vec_unpacks_lo_v8sf;
*gen_vec_unpacks_float_hi_v8hi = *gccc::gen_vec_unpacks_float_hi_v8hi;
*gen_vec_unpacks_float_lo_v8hi = *gccc::gen_vec_unpacks_float_lo_v8hi;
*gen_vec_unpacku_float_hi_v8hi = *gccc::gen_vec_unpacku_float_hi_v8hi;
*gen_vec_unpacku_float_lo_v8hi = *gccc::gen_vec_unpacku_float_lo_v8hi;
*gen_vec_unpacks_float_hi_v4si = *gccc::gen_vec_unpacks_float_hi_v4si;
*gen_vec_unpacks_float_lo_v4si = *gccc::gen_vec_unpacks_float_lo_v4si;
*gen_vec_unpacks_float_hi_v8si = *gccc::gen_vec_unpacks_float_hi_v8si;
*gen_vec_unpacks_float_lo_v8si = *gccc::gen_vec_unpacks_float_lo_v8si;
*gen_vec_unpacku_float_hi_v4si = *gccc::gen_vec_unpacku_float_hi_v4si;
*gen_vec_unpacku_float_lo_v4si = *gccc::gen_vec_unpacku_float_lo_v4si;
*gen_vec_pack_trunc_v4df = *gccc::gen_vec_pack_trunc_v4df;
*gen_vec_pack_trunc_v2df = *gccc::gen_vec_pack_trunc_v2df;
*gen_vec_pack_sfix_trunc_v2df = *gccc::gen_vec_pack_sfix_trunc_v2df;
*gen_vec_pack_sfix_v2df = *gccc::gen_vec_pack_sfix_v2df;
*gen_sse_movhlps_exp = *gccc::gen_sse_movhlps_exp;
*gen_sse_movlhps_exp = *gccc::gen_sse_movlhps_exp;
*gen_vec_interleave_highv8sf = *gccc::gen_vec_interleave_highv8sf;
*gen_vec_interleave_lowv8sf = *gccc::gen_vec_interleave_lowv8sf;
*gen_avx_shufps256 = *gccc::gen_avx_shufps256;
*gen_sse_shufps = *gccc::gen_sse_shufps;
*gen_sse_loadhps_exp = *gccc::gen_sse_loadhps_exp;
*gen_sse_loadlps_exp = *gccc::gen_sse_loadlps_exp;
*gen_vec_dupv4sf = *gccc::gen_vec_dupv4sf;
*gen_vec_initv16qi = *gccc::gen_vec_initv16qi;
*gen_vec_initv8hi = *gccc::gen_vec_initv8hi;
*gen_vec_initv4si = *gccc::gen_vec_initv4si;
*gen_vec_initv2di = *gccc::gen_vec_initv2di;
*gen_vec_initv4sf = *gccc::gen_vec_initv4sf;
*gen_vec_initv2df = *gccc::gen_vec_initv2df;
*gen_vec_setv16qi = *gccc::gen_vec_setv16qi;
*gen_vec_setv8hi = *gccc::gen_vec_setv8hi;
*gen_vec_setv4si = *gccc::gen_vec_setv4si;
*gen_vec_setv2di = *gccc::gen_vec_setv2di;
*gen_vec_setv4sf = *gccc::gen_vec_setv4sf;
*gen_vec_setv2df = *gccc::gen_vec_setv2df;
*gen_avx_vextractf128v32qi = *gccc::gen_avx_vextractf128v32qi;
*gen_avx_vextractf128v16hi = *gccc::gen_avx_vextractf128v16hi;
*gen_avx_vextractf128v8si = *gccc::gen_avx_vextractf128v8si;
*gen_avx_vextractf128v4di = *gccc::gen_avx_vextractf128v4di;
*gen_avx_vextractf128v8sf = *gccc::gen_avx_vextractf128v8sf;
*gen_avx_vextractf128v4df = *gccc::gen_avx_vextractf128v4df;
*gen_vec_extractv2di = *gccc::gen_vec_extractv2di;
*gen_vec_extractv4si = *gccc::gen_vec_extractv4si;
*gen_vec_extractv8hi = *gccc::gen_vec_extractv8hi;
*gen_vec_extractv16qi = *gccc::gen_vec_extractv16qi;
*gen_vec_extractv2df = *gccc::gen_vec_extractv2df;
*gen_vec_extractv4sf = *gccc::gen_vec_extractv4sf;
*gen_vec_extractv4df = *gccc::gen_vec_extractv4df;
*gen_vec_extractv8sf = *gccc::gen_vec_extractv8sf;
*gen_vec_interleave_highv4df = *gccc::gen_vec_interleave_highv4df;
*gen_vec_interleave_highv2df = *gccc::gen_vec_interleave_highv2df;
*gen_avx_movddup256 = *gccc::gen_avx_movddup256;
*gen_avx_unpcklpd256 = *gccc::gen_avx_unpcklpd256;
*gen_vec_interleave_lowv4df = *gccc::gen_vec_interleave_lowv4df;
*gen_vec_interleave_lowv2df = *gccc::gen_vec_interleave_lowv2df;
*gen_avx_shufpd256 = *gccc::gen_avx_shufpd256;
*gen_sse2_shufpd = *gccc::gen_sse2_shufpd;
*gen_vec_extract_evenv4sf = *gccc::gen_vec_extract_evenv4sf;
*gen_vec_extract_evenv2df = *gccc::gen_vec_extract_evenv2df;
*gen_vec_extract_evenv2di = *gccc::gen_vec_extract_evenv2di;
*gen_vec_extract_evenv4si = *gccc::gen_vec_extract_evenv4si;
*gen_vec_extract_evenv8hi = *gccc::gen_vec_extract_evenv8hi;
*gen_vec_extract_evenv16qi = *gccc::gen_vec_extract_evenv16qi;
*gen_vec_extract_evenv4df = *gccc::gen_vec_extract_evenv4df;
*gen_vec_extract_evenv8sf = *gccc::gen_vec_extract_evenv8sf;
*gen_vec_extract_oddv4sf = *gccc::gen_vec_extract_oddv4sf;
*gen_vec_extract_oddv2df = *gccc::gen_vec_extract_oddv2df;
*gen_vec_extract_oddv2di = *gccc::gen_vec_extract_oddv2di;
*gen_vec_extract_oddv4si = *gccc::gen_vec_extract_oddv4si;
*gen_vec_extract_oddv8hi = *gccc::gen_vec_extract_oddv8hi;
*gen_vec_extract_oddv16qi = *gccc::gen_vec_extract_oddv16qi;
*gen_vec_extract_oddv4df = *gccc::gen_vec_extract_oddv4df;
*gen_vec_extract_oddv8sf = *gccc::gen_vec_extract_oddv8sf;
*gen_sse2_loadhpd_exp = *gccc::gen_sse2_loadhpd_exp;
*gen_sse2_loadlpd_exp = *gccc::gen_sse2_loadlpd_exp;
*gen_vec_dupv2df = *gccc::gen_vec_dupv2df;
*gen_negv16qi2 = *gccc::gen_negv16qi2;
*gen_negv8hi2 = *gccc::gen_negv8hi2;
*gen_negv4si2 = *gccc::gen_negv4si2;
*gen_negv2di2 = *gccc::gen_negv2di2;
*gen_addv16qi3 = *gccc::gen_addv16qi3;
*gen_subv16qi3 = *gccc::gen_subv16qi3;
*gen_addv8hi3 = *gccc::gen_addv8hi3;
*gen_subv8hi3 = *gccc::gen_subv8hi3;
*gen_addv4si3 = *gccc::gen_addv4si3;
*gen_subv4si3 = *gccc::gen_subv4si3;
*gen_addv2di3 = *gccc::gen_addv2di3;
*gen_subv2di3 = *gccc::gen_subv2di3;
*gen_sse2_ssaddv16qi3 = *gccc::gen_sse2_ssaddv16qi3;
*gen_sse2_usaddv16qi3 = *gccc::gen_sse2_usaddv16qi3;
*gen_sse2_sssubv16qi3 = *gccc::gen_sse2_sssubv16qi3;
*gen_sse2_ussubv16qi3 = *gccc::gen_sse2_ussubv16qi3;
*gen_sse2_ssaddv8hi3 = *gccc::gen_sse2_ssaddv8hi3;
*gen_sse2_usaddv8hi3 = *gccc::gen_sse2_usaddv8hi3;
*gen_sse2_sssubv8hi3 = *gccc::gen_sse2_sssubv8hi3;
*gen_sse2_ussubv8hi3 = *gccc::gen_sse2_ussubv8hi3;
*gen_mulv8hi3 = *gccc::gen_mulv8hi3;
*gen_smulv8hi3_highpart = *gccc::gen_smulv8hi3_highpart;
*gen_umulv8hi3_highpart = *gccc::gen_umulv8hi3_highpart;
*gen_sse2_umulv2siv2di3 = *gccc::gen_sse2_umulv2siv2di3;
*gen_sse4_1_mulv2siv2di3 = *gccc::gen_sse4_1_mulv2siv2di3;
*gen_sse2_pmaddwd = *gccc::gen_sse2_pmaddwd;
*gen_mulv4si3 = *gccc::gen_mulv4si3;
*gen_vec_widen_smult_hi_v8hi = *gccc::gen_vec_widen_smult_hi_v8hi;
*gen_vec_widen_smult_lo_v8hi = *gccc::gen_vec_widen_smult_lo_v8hi;
*gen_vec_widen_umult_hi_v8hi = *gccc::gen_vec_widen_umult_hi_v8hi;
*gen_vec_widen_umult_lo_v8hi = *gccc::gen_vec_widen_umult_lo_v8hi;
*gen_vec_widen_smult_hi_v4si = *gccc::gen_vec_widen_smult_hi_v4si;
*gen_vec_widen_smult_lo_v4si = *gccc::gen_vec_widen_smult_lo_v4si;
*gen_vec_widen_umult_hi_v4si = *gccc::gen_vec_widen_umult_hi_v4si;
*gen_vec_widen_umult_lo_v4si = *gccc::gen_vec_widen_umult_lo_v4si;
*gen_sdot_prodv8hi = *gccc::gen_sdot_prodv8hi;
*gen_udot_prodv4si = *gccc::gen_udot_prodv4si;
*gen_vec_shl_v16qi = *gccc::gen_vec_shl_v16qi;
*gen_vec_shl_v8hi = *gccc::gen_vec_shl_v8hi;
*gen_vec_shl_v4si = *gccc::gen_vec_shl_v4si;
*gen_vec_shl_v2di = *gccc::gen_vec_shl_v2di;
*gen_vec_shr_v16qi = *gccc::gen_vec_shr_v16qi;
*gen_vec_shr_v8hi = *gccc::gen_vec_shr_v8hi;
*gen_vec_shr_v4si = *gccc::gen_vec_shr_v4si;
*gen_vec_shr_v2di = *gccc::gen_vec_shr_v2di;
*gen_umaxv16qi3 = *gccc::gen_umaxv16qi3;
*gen_uminv16qi3 = *gccc::gen_uminv16qi3;
*gen_smaxv8hi3 = *gccc::gen_smaxv8hi3;
*gen_sminv8hi3 = *gccc::gen_sminv8hi3;
*gen_umaxv8hi3 = *gccc::gen_umaxv8hi3;
*gen_smaxv16qi3 = *gccc::gen_smaxv16qi3;
*gen_smaxv4si3 = *gccc::gen_smaxv4si3;
*gen_smaxv2di3 = *gccc::gen_smaxv2di3;
*gen_umaxv4si3 = *gccc::gen_umaxv4si3;
*gen_umaxv2di3 = *gccc::gen_umaxv2di3;
*gen_sminv16qi3 = *gccc::gen_sminv16qi3;
*gen_sminv4si3 = *gccc::gen_sminv4si3;
*gen_sminv2di3 = *gccc::gen_sminv2di3;
*gen_uminv8hi3 = *gccc::gen_uminv8hi3;
*gen_uminv4si3 = *gccc::gen_uminv4si3;
*gen_uminv2di3 = *gccc::gen_uminv2di3;
*gen_sse2_eqv16qi3 = *gccc::gen_sse2_eqv16qi3;
*gen_sse2_eqv8hi3 = *gccc::gen_sse2_eqv8hi3;
*gen_sse2_eqv4si3 = *gccc::gen_sse2_eqv4si3;
*gen_sse4_1_eqv2di3 = *gccc::gen_sse4_1_eqv2di3;
*gen_vcondv16qi = *gccc::gen_vcondv16qi;
*gen_vcondv8hi = *gccc::gen_vcondv8hi;
*gen_vcondv4si = *gccc::gen_vcondv4si;
*gen_vcondv2di = *gccc::gen_vcondv2di;
*gen_vconduv16qi = *gccc::gen_vconduv16qi;
*gen_vconduv8hi = *gccc::gen_vconduv8hi;
*gen_vconduv4si = *gccc::gen_vconduv4si;
*gen_vconduv2di = *gccc::gen_vconduv2di;
*gen_one_cmplv16qi2 = *gccc::gen_one_cmplv16qi2;
*gen_one_cmplv8hi2 = *gccc::gen_one_cmplv8hi2;
*gen_one_cmplv4si2 = *gccc::gen_one_cmplv4si2;
*gen_one_cmplv2di2 = *gccc::gen_one_cmplv2di2;
*gen_andv16qi3 = *gccc::gen_andv16qi3;
*gen_iorv16qi3 = *gccc::gen_iorv16qi3;
*gen_xorv16qi3 = *gccc::gen_xorv16qi3;
*gen_andv8hi3 = *gccc::gen_andv8hi3;
*gen_iorv8hi3 = *gccc::gen_iorv8hi3;
*gen_xorv8hi3 = *gccc::gen_xorv8hi3;
*gen_andv4si3 = *gccc::gen_andv4si3;
*gen_iorv4si3 = *gccc::gen_iorv4si3;
*gen_xorv4si3 = *gccc::gen_xorv4si3;
*gen_andv2di3 = *gccc::gen_andv2di3;
*gen_iorv2di3 = *gccc::gen_iorv2di3;
*gen_xorv2di3 = *gccc::gen_xorv2di3;
*gen_andtf3 = *gccc::gen_andtf3;
*gen_iortf3 = *gccc::gen_iortf3;
*gen_xortf3 = *gccc::gen_xortf3;
*gen_vec_pack_trunc_v8hi = *gccc::gen_vec_pack_trunc_v8hi;
*gen_vec_pack_trunc_v4si = *gccc::gen_vec_pack_trunc_v4si;
*gen_vec_pack_trunc_v2di = *gccc::gen_vec_pack_trunc_v2di;
*gen_sse2_pshufd = *gccc::gen_sse2_pshufd;
*gen_sse2_pshuflw = *gccc::gen_sse2_pshuflw;
*gen_sse2_pshufhw = *gccc::gen_sse2_pshufhw;
*gen_sse2_loadd = *gccc::gen_sse2_loadd;
*gen_sse_storeq = *gccc::gen_sse_storeq;
*gen_vec_unpacku_hi_v16qi = *gccc::gen_vec_unpacku_hi_v16qi;
*gen_vec_unpacks_hi_v16qi = *gccc::gen_vec_unpacks_hi_v16qi;
*gen_vec_unpacku_lo_v16qi = *gccc::gen_vec_unpacku_lo_v16qi;
*gen_vec_unpacks_lo_v16qi = *gccc::gen_vec_unpacks_lo_v16qi;
*gen_vec_unpacku_hi_v8hi = *gccc::gen_vec_unpacku_hi_v8hi;
*gen_vec_unpacks_hi_v8hi = *gccc::gen_vec_unpacks_hi_v8hi;
*gen_vec_unpacku_lo_v8hi = *gccc::gen_vec_unpacku_lo_v8hi;
*gen_vec_unpacks_lo_v8hi = *gccc::gen_vec_unpacks_lo_v8hi;
*gen_vec_unpacku_hi_v4si = *gccc::gen_vec_unpacku_hi_v4si;
*gen_vec_unpacks_hi_v4si = *gccc::gen_vec_unpacks_hi_v4si;
*gen_vec_unpacku_lo_v4si = *gccc::gen_vec_unpacku_lo_v4si;
*gen_vec_unpacks_lo_v4si = *gccc::gen_vec_unpacks_lo_v4si;
*gen_sse2_uavgv16qi3 = *gccc::gen_sse2_uavgv16qi3;
*gen_sse2_uavgv8hi3 = *gccc::gen_sse2_uavgv8hi3;
*gen_sse2_maskmovdqu = *gccc::gen_sse2_maskmovdqu;
*gen_sse_sfence = *gccc::gen_sse_sfence;
*gen_sse2_mfence = *gccc::gen_sse2_mfence;
*gen_sse2_lfence = *gccc::gen_sse2_lfence;
*gen_ssse3_pmulhrswv8hi3 = *gccc::gen_ssse3_pmulhrswv8hi3;
*gen_ssse3_pmulhrswv4hi3 = *gccc::gen_ssse3_pmulhrswv4hi3;
*gen_rotlv16qi3 = *gccc::gen_rotlv16qi3;
*gen_rotlv8hi3 = *gccc::gen_rotlv8hi3;
*gen_rotlv4si3 = *gccc::gen_rotlv4si3;
*gen_rotlv2di3 = *gccc::gen_rotlv2di3;
*gen_rotrv16qi3 = *gccc::gen_rotrv16qi3;
*gen_rotrv8hi3 = *gccc::gen_rotrv8hi3;
*gen_rotrv4si3 = *gccc::gen_rotrv4si3;
*gen_rotrv2di3 = *gccc::gen_rotrv2di3;
*gen_vrotrv16qi3 = *gccc::gen_vrotrv16qi3;
*gen_vrotrv8hi3 = *gccc::gen_vrotrv8hi3;
*gen_vrotrv4si3 = *gccc::gen_vrotrv4si3;
*gen_vrotrv2di3 = *gccc::gen_vrotrv2di3;
*gen_vrotlv16qi3 = *gccc::gen_vrotlv16qi3;
*gen_vrotlv8hi3 = *gccc::gen_vrotlv8hi3;
*gen_vrotlv4si3 = *gccc::gen_vrotlv4si3;
*gen_vrotlv2di3 = *gccc::gen_vrotlv2di3;
*gen_vlshrv16qi3 = *gccc::gen_vlshrv16qi3;
*gen_vlshrv8hi3 = *gccc::gen_vlshrv8hi3;
*gen_vlshrv4si3 = *gccc::gen_vlshrv4si3;
*gen_vashrv16qi3 = *gccc::gen_vashrv16qi3;
*gen_vashrv8hi3 = *gccc::gen_vashrv8hi3;
*gen_vashrv4si3 = *gccc::gen_vashrv4si3;
*gen_vashlv16qi3 = *gccc::gen_vashlv16qi3;
*gen_vashlv8hi3 = *gccc::gen_vashlv8hi3;
*gen_vashlv4si3 = *gccc::gen_vashlv4si3;
*gen_ashlv16qi3 = *gccc::gen_ashlv16qi3;
*gen_lshlv16qi3 = *gccc::gen_lshlv16qi3;
*gen_ashrv16qi3 = *gccc::gen_ashrv16qi3;
*gen_ashrv2di3 = *gccc::gen_ashrv2di3;
*gen_xop_vmfrczv4sf2 = *gccc::gen_xop_vmfrczv4sf2;
*gen_xop_vmfrczv2df2 = *gccc::gen_xop_vmfrczv2df2;
*gen_avx_vzeroall = *gccc::gen_avx_vzeroall;
*gen_avx_vpermilv2df = *gccc::gen_avx_vpermilv2df;
*gen_avx_vpermilv4df = *gccc::gen_avx_vpermilv4df;
*gen_avx_vpermilv4sf = *gccc::gen_avx_vpermilv4sf;
*gen_avx_vpermilv8sf = *gccc::gen_avx_vpermilv8sf;
*gen_avx_vperm2f128v8si3 = *gccc::gen_avx_vperm2f128v8si3;
*gen_avx_vperm2f128v8sf3 = *gccc::gen_avx_vperm2f128v8sf3;
*gen_avx_vperm2f128v4df3 = *gccc::gen_avx_vperm2f128v4df3;
*gen_avx_vinsertf128v32qi = *gccc::gen_avx_vinsertf128v32qi;
*gen_avx_vinsertf128v16hi = *gccc::gen_avx_vinsertf128v16hi;
*gen_avx_vinsertf128v8si = *gccc::gen_avx_vinsertf128v8si;
*gen_avx_vinsertf128v4di = *gccc::gen_avx_vinsertf128v4di;
*gen_avx_vinsertf128v8sf = *gccc::gen_avx_vinsertf128v8sf;
*gen_avx_vinsertf128v4df = *gccc::gen_avx_vinsertf128v4df;
*gen_vec_initv32qi = *gccc::gen_vec_initv32qi;
*gen_vec_initv16hi = *gccc::gen_vec_initv16hi;
*gen_vec_initv8si = *gccc::gen_vec_initv8si;
*gen_vec_initv4di = *gccc::gen_vec_initv4di;
*gen_vec_initv8sf = *gccc::gen_vec_initv8sf;
*gen_vec_initv4df = *gccc::gen_vec_initv4df;
*gen_vcvtps2ph = *gccc::gen_vcvtps2ph;
*gen_memory_barrier = *gccc::gen_memory_barrier;
*gen_sync_compare_and_swapqi = *gccc::gen_sync_compare_and_swapqi;
*gen_sync_compare_and_swaphi = *gccc::gen_sync_compare_and_swaphi;
*gen_sync_compare_and_swapsi = *gccc::gen_sync_compare_and_swapsi;
*gen_sync_compare_and_swapdi = *gccc::gen_sync_compare_and_swapdi;
*gen_sync_compare_and_swapti = *gccc::gen_sync_compare_and_swapti;
*hard_reg_set_subset_p = *gccc::hard_reg_set_subset_p;
*hard_reg_set_equal_p = *gccc::hard_reg_set_equal_p;
*hard_reg_set_intersect_p = *gccc::hard_reg_set_intersect_p;
*hard_reg_set_empty_p = *gccc::hard_reg_set_empty_p;
*hard_reg_set_iter_init = *gccc::hard_reg_set_iter_init;
*hard_reg_set_iter_set = *gccc::hard_reg_set_iter_set;
*hard_reg_set_iter_next = *gccc::hard_reg_set_iter_next;
*VEC_call_site_record_must_be_pointer_type = *gccc::VEC_call_site_record_must_be_pointer_type;
*VEC_call_site_record_base_length = *gccc::VEC_call_site_record_base_length;
*VEC_call_site_record_base_last = *gccc::VEC_call_site_record_base_last;
*VEC_call_site_record_base_index = *gccc::VEC_call_site_record_base_index;
*VEC_call_site_record_base_iterate = *gccc::VEC_call_site_record_base_iterate;
*VEC_call_site_record_base_embedded_size = *gccc::VEC_call_site_record_base_embedded_size;
*VEC_call_site_record_base_embedded_init = *gccc::VEC_call_site_record_base_embedded_init;
*VEC_call_site_record_base_space = *gccc::VEC_call_site_record_base_space;
*VEC_call_site_record_base_splice = *gccc::VEC_call_site_record_base_splice;
*VEC_call_site_record_base_quick_push = *gccc::VEC_call_site_record_base_quick_push;
*VEC_call_site_record_base_pop = *gccc::VEC_call_site_record_base_pop;
*VEC_call_site_record_base_truncate = *gccc::VEC_call_site_record_base_truncate;
*VEC_call_site_record_base_replace = *gccc::VEC_call_site_record_base_replace;
*VEC_call_site_record_base_quick_insert = *gccc::VEC_call_site_record_base_quick_insert;
*VEC_call_site_record_base_ordered_remove = *gccc::VEC_call_site_record_base_ordered_remove;
*VEC_call_site_record_base_unordered_remove = *gccc::VEC_call_site_record_base_unordered_remove;
*VEC_call_site_record_base_block_remove = *gccc::VEC_call_site_record_base_block_remove;
*VEC_call_site_record_base_address = *gccc::VEC_call_site_record_base_address;
*VEC_call_site_record_base_lower_bound = *gccc::VEC_call_site_record_base_lower_bound;
*VEC_call_site_record_gc_alloc = *gccc::VEC_call_site_record_gc_alloc;
*VEC_call_site_record_gc_free = *gccc::VEC_call_site_record_gc_free;
*VEC_call_site_record_gc_copy = *gccc::VEC_call_site_record_gc_copy;
*VEC_call_site_record_gc_reserve = *gccc::VEC_call_site_record_gc_reserve;
*VEC_call_site_record_gc_reserve_exact = *gccc::VEC_call_site_record_gc_reserve_exact;
*VEC_call_site_record_gc_safe_grow = *gccc::VEC_call_site_record_gc_safe_grow;
*VEC_call_site_record_gc_safe_grow_cleared = *gccc::VEC_call_site_record_gc_safe_grow_cleared;
*VEC_call_site_record_gc_safe_splice = *gccc::VEC_call_site_record_gc_safe_splice;
*VEC_call_site_record_gc_safe_push = *gccc::VEC_call_site_record_gc_safe_push;
*VEC_call_site_record_gc_safe_insert = *gccc::VEC_call_site_record_gc_safe_insert;
*VEC_temp_slot_p_must_be_pointer_type = *gccc::VEC_temp_slot_p_must_be_pointer_type;
*VEC_temp_slot_p_base_length = *gccc::VEC_temp_slot_p_base_length;
*VEC_temp_slot_p_base_last = *gccc::VEC_temp_slot_p_base_last;
*VEC_temp_slot_p_base_index = *gccc::VEC_temp_slot_p_base_index;
*VEC_temp_slot_p_base_iterate = *gccc::VEC_temp_slot_p_base_iterate;
*VEC_temp_slot_p_base_embedded_size = *gccc::VEC_temp_slot_p_base_embedded_size;
*VEC_temp_slot_p_base_embedded_init = *gccc::VEC_temp_slot_p_base_embedded_init;
*VEC_temp_slot_p_base_space = *gccc::VEC_temp_slot_p_base_space;
*VEC_temp_slot_p_base_splice = *gccc::VEC_temp_slot_p_base_splice;
*VEC_temp_slot_p_base_quick_push = *gccc::VEC_temp_slot_p_base_quick_push;
*VEC_temp_slot_p_base_pop = *gccc::VEC_temp_slot_p_base_pop;
*VEC_temp_slot_p_base_truncate = *gccc::VEC_temp_slot_p_base_truncate;
*VEC_temp_slot_p_base_replace = *gccc::VEC_temp_slot_p_base_replace;
*VEC_temp_slot_p_base_quick_insert = *gccc::VEC_temp_slot_p_base_quick_insert;
*VEC_temp_slot_p_base_ordered_remove = *gccc::VEC_temp_slot_p_base_ordered_remove;
*VEC_temp_slot_p_base_unordered_remove = *gccc::VEC_temp_slot_p_base_unordered_remove;
*VEC_temp_slot_p_base_block_remove = *gccc::VEC_temp_slot_p_base_block_remove;
*VEC_temp_slot_p_base_address = *gccc::VEC_temp_slot_p_base_address;
*VEC_temp_slot_p_base_lower_bound = *gccc::VEC_temp_slot_p_base_lower_bound;
*VEC_temp_slot_p_gc_alloc = *gccc::VEC_temp_slot_p_gc_alloc;
*VEC_temp_slot_p_gc_free = *gccc::VEC_temp_slot_p_gc_free;
*VEC_temp_slot_p_gc_copy = *gccc::VEC_temp_slot_p_gc_copy;
*VEC_temp_slot_p_gc_reserve = *gccc::VEC_temp_slot_p_gc_reserve;
*VEC_temp_slot_p_gc_reserve_exact = *gccc::VEC_temp_slot_p_gc_reserve_exact;
*VEC_temp_slot_p_gc_safe_grow = *gccc::VEC_temp_slot_p_gc_safe_grow;
*VEC_temp_slot_p_gc_safe_grow_cleared = *gccc::VEC_temp_slot_p_gc_safe_grow_cleared;
*VEC_temp_slot_p_gc_safe_splice = *gccc::VEC_temp_slot_p_gc_safe_splice;
*VEC_temp_slot_p_gc_safe_push = *gccc::VEC_temp_slot_p_gc_safe_push;
*VEC_temp_slot_p_gc_safe_insert = *gccc::VEC_temp_slot_p_gc_safe_insert;
*VEC_ipa_opt_pass_must_be_pointer_type = *gccc::VEC_ipa_opt_pass_must_be_pointer_type;
*VEC_ipa_opt_pass_base_length = *gccc::VEC_ipa_opt_pass_base_length;
*VEC_ipa_opt_pass_base_last = *gccc::VEC_ipa_opt_pass_base_last;
*VEC_ipa_opt_pass_base_index = *gccc::VEC_ipa_opt_pass_base_index;
*VEC_ipa_opt_pass_base_iterate = *gccc::VEC_ipa_opt_pass_base_iterate;
*VEC_ipa_opt_pass_base_embedded_size = *gccc::VEC_ipa_opt_pass_base_embedded_size;
*VEC_ipa_opt_pass_base_embedded_init = *gccc::VEC_ipa_opt_pass_base_embedded_init;
*VEC_ipa_opt_pass_base_space = *gccc::VEC_ipa_opt_pass_base_space;
*VEC_ipa_opt_pass_base_splice = *gccc::VEC_ipa_opt_pass_base_splice;
*VEC_ipa_opt_pass_base_quick_push = *gccc::VEC_ipa_opt_pass_base_quick_push;
*VEC_ipa_opt_pass_base_pop = *gccc::VEC_ipa_opt_pass_base_pop;
*VEC_ipa_opt_pass_base_truncate = *gccc::VEC_ipa_opt_pass_base_truncate;
*VEC_ipa_opt_pass_base_replace = *gccc::VEC_ipa_opt_pass_base_replace;
*VEC_ipa_opt_pass_base_quick_insert = *gccc::VEC_ipa_opt_pass_base_quick_insert;
*VEC_ipa_opt_pass_base_ordered_remove = *gccc::VEC_ipa_opt_pass_base_ordered_remove;
*VEC_ipa_opt_pass_base_unordered_remove = *gccc::VEC_ipa_opt_pass_base_unordered_remove;
*VEC_ipa_opt_pass_base_block_remove = *gccc::VEC_ipa_opt_pass_base_block_remove;
*VEC_ipa_opt_pass_base_address = *gccc::VEC_ipa_opt_pass_base_address;
*VEC_ipa_opt_pass_base_lower_bound = *gccc::VEC_ipa_opt_pass_base_lower_bound;
*VEC_ipa_opt_pass_heap_alloc = *gccc::VEC_ipa_opt_pass_heap_alloc;
*VEC_ipa_opt_pass_heap_free = *gccc::VEC_ipa_opt_pass_heap_free;
*VEC_ipa_opt_pass_heap_copy = *gccc::VEC_ipa_opt_pass_heap_copy;
*VEC_ipa_opt_pass_heap_reserve = *gccc::VEC_ipa_opt_pass_heap_reserve;
*VEC_ipa_opt_pass_heap_reserve_exact = *gccc::VEC_ipa_opt_pass_heap_reserve_exact;
*VEC_ipa_opt_pass_heap_safe_grow = *gccc::VEC_ipa_opt_pass_heap_safe_grow;
*VEC_ipa_opt_pass_heap_safe_grow_cleared = *gccc::VEC_ipa_opt_pass_heap_safe_grow_cleared;
*VEC_ipa_opt_pass_heap_safe_splice = *gccc::VEC_ipa_opt_pass_heap_safe_splice;
*VEC_ipa_opt_pass_heap_safe_push = *gccc::VEC_ipa_opt_pass_heap_safe_push;
*VEC_ipa_opt_pass_heap_safe_insert = *gccc::VEC_ipa_opt_pass_heap_safe_insert;
*add_local_decl = *gccc::add_local_decl;
*types_used_by_vars_do_hash = *gccc::types_used_by_vars_do_hash;
*types_used_by_vars_eq = *gccc::types_used_by_vars_eq;
*types_used_by_var_decl_insert = *gccc::types_used_by_var_decl_insert;
*set_cfun = *gccc::set_cfun;
*push_cfun = *gccc::push_cfun;
*pop_cfun = *gccc::pop_cfun;
*instantiate_decl_rtl = *gccc::instantiate_decl_rtl;
*reorder_blocks = *gccc::reorder_blocks;
*number_blocks = *gccc::number_blocks;
*clear_block_marks = *gccc::clear_block_marks;
*blocks_nreverse = *gccc::blocks_nreverse;
*get_frame_size = *gccc::get_frame_size;
*frame_offset_overflow = *gccc::frame_offset_overflow;
*free_after_parsing = *gccc::free_after_parsing;
*free_after_compilation = *gccc::free_after_compilation;
*init_varasm_status = *gccc::init_varasm_status;
*get_arg_pointer_save_area = *gccc::get_arg_pointer_save_area;
*current_function_name = *gccc::current_function_name;
*do_warn_unused_parameter = *gccc::do_warn_unused_parameter;
*pass_by_reference = *gccc::pass_by_reference;
*reference_callee_copied = *gccc::reference_callee_copied;
*used_types_insert = *gccc::used_types_insert;
*get_next_funcdef_no = *gccc::get_next_funcdef_no;
*optimize_function_for_size_p = *gccc::optimize_function_for_size_p;
*optimize_function_for_speed_p = *gccc::optimize_function_for_speed_p;
*splay_tree_new = *gccc::splay_tree_new;
*splay_tree_new_with_allocator = *gccc::splay_tree_new_with_allocator;
*splay_tree_new_typed_alloc = *gccc::splay_tree_new_typed_alloc;
*splay_tree_delete = *gccc::splay_tree_delete;
*splay_tree_insert = *gccc::splay_tree_insert;
*splay_tree_remove = *gccc::splay_tree_remove;
*splay_tree_lookup = *gccc::splay_tree_lookup;
*splay_tree_predecessor = *gccc::splay_tree_predecessor;
*splay_tree_successor = *gccc::splay_tree_successor;
*splay_tree_max = *gccc::splay_tree_max;
*splay_tree_min = *gccc::splay_tree_min;
*splay_tree_foreach = *gccc::splay_tree_foreach;
*splay_tree_compare_ints = *gccc::splay_tree_compare_ints;
*splay_tree_compare_pointers = *gccc::splay_tree_compare_pointers;
*cpp_token_val_index = *gccc::cpp_token_val_index;
*cpp_create_reader = *gccc::cpp_create_reader;
*cpp_set_line_map = *gccc::cpp_set_line_map;
*cpp_set_lang = *gccc::cpp_set_lang;
*cpp_set_include_chains = *gccc::cpp_set_include_chains;
*cpp_get_options = *gccc::cpp_get_options;
*cpp_get_callbacks = *gccc::cpp_get_callbacks;
*cpp_set_callbacks = *gccc::cpp_set_callbacks;
*cpp_get_deps = *gccc::cpp_get_deps;
*cpp_read_main_file = *gccc::cpp_read_main_file;
*cpp_init_special_builtins = *gccc::cpp_init_special_builtins;
*cpp_init_builtins = *gccc::cpp_init_builtins;
*cpp_post_options = *gccc::cpp_post_options;
*cpp_init_iconv = *gccc::cpp_init_iconv;
*cpp_finish = *gccc::cpp_finish;
*cpp_destroy = *gccc::cpp_destroy;
*cpp_token_len = *gccc::cpp_token_len;
*cpp_token_as_text = *gccc::cpp_token_as_text;
*cpp_spell_token = *gccc::cpp_spell_token;
*cpp_register_pragma = *gccc::cpp_register_pragma;
*cpp_register_deferred_pragma = *gccc::cpp_register_deferred_pragma;
*cpp_avoid_paste = *gccc::cpp_avoid_paste;
*cpp_get_token = *gccc::cpp_get_token;
*cpp_get_token_with_location = *gccc::cpp_get_token_with_location;
*cpp_macro_definition = *gccc::cpp_macro_definition;
*_cpp_backup_tokens = *gccc::_cpp_backup_tokens;
*cpp_peek_token = *gccc::cpp_peek_token;
*cpp_interpret_charconst = *gccc::cpp_interpret_charconst;
*cpp_interpret_string = *gccc::cpp_interpret_string;
*cpp_interpret_string_notranslate = *gccc::cpp_interpret_string_notranslate;
*cpp_host_to_exec_charset = *gccc::cpp_host_to_exec_charset;
*cpp_define = *gccc::cpp_define;
*cpp_define_formatted = *gccc::cpp_define_formatted;
*cpp_assert = *gccc::cpp_assert;
*cpp_undef = *gccc::cpp_undef;
*cpp_unassert = *gccc::cpp_unassert;
*cpp_undef_all = *gccc::cpp_undef_all;
*cpp_push_buffer = *gccc::cpp_push_buffer;
*cpp_defined = *gccc::cpp_defined;
*cpp_classify_number = *gccc::cpp_classify_number;
*cpp_interpret_integer = *gccc::cpp_interpret_integer;
*cpp_num_sign_extend = *gccc::cpp_num_sign_extend;
*cpp_error = *gccc::cpp_error;
*cpp_warning = *gccc::cpp_warning;
*cpp_pedwarning = *gccc::cpp_pedwarning;
*cpp_warning_syshdr = *gccc::cpp_warning_syshdr;
*cpp_errno = *gccc::cpp_errno;
*cpp_error_with_line = *gccc::cpp_error_with_line;
*cpp_warning_with_line = *gccc::cpp_warning_with_line;
*cpp_pedwarning_with_line = *gccc::cpp_pedwarning_with_line;
*cpp_warning_with_line_syshdr = *gccc::cpp_warning_with_line_syshdr;
*cpp_ideq = *gccc::cpp_ideq;
*cpp_output_line = *gccc::cpp_output_line;
*cpp_output_line_to_string = *gccc::cpp_output_line_to_string;
*cpp_output_token = *gccc::cpp_output_token;
*cpp_type2name = *gccc::cpp_type2name;
*cpp_parse_escape = *gccc::cpp_parse_escape;
*cpp_get_comments = *gccc::cpp_get_comments;
*cpp_lookup = *gccc::cpp_lookup;
*cpp_forall_identifiers = *gccc::cpp_forall_identifiers;
*cpp_scan_nooutput = *gccc::cpp_scan_nooutput;
*cpp_sys_macro_p = *gccc::cpp_sys_macro_p;
*cpp_quote_string = *gccc::cpp_quote_string;
*cpp_included = *gccc::cpp_included;
*cpp_included_before = *gccc::cpp_included_before;
*cpp_make_system_header = *gccc::cpp_make_system_header;
*cpp_push_include = *gccc::cpp_push_include;
*cpp_change_file = *gccc::cpp_change_file;
*cpp_get_path = *gccc::cpp_get_path;
*cpp_get_dir = *gccc::cpp_get_dir;
*cpp_get_buffer = *gccc::cpp_get_buffer;
*cpp_get_file = *gccc::cpp_get_file;
*cpp_get_prev = *gccc::cpp_get_prev;
*cpp_clear_file_cache = *gccc::cpp_clear_file_cache;
*cpp_save_state = *gccc::cpp_save_state;
*cpp_write_pch_deps = *gccc::cpp_write_pch_deps;
*cpp_write_pch_state = *gccc::cpp_write_pch_state;
*cpp_valid_state = *gccc::cpp_valid_state;
*cpp_prepare_state = *gccc::cpp_prepare_state;
*cpp_read_state = *gccc::cpp_read_state;
*trim_filename = *gccc::trim_filename;
*internal_error = *gccc::internal_error;
*warning = *gccc::warning;
*warning_at = *gccc::warning_at;
*error = *gccc::error;
*error_n = *gccc::error_n;
*error_at = *gccc::error_at;
*fatal_error = *gccc::fatal_error;
*pedwarn = *gccc::pedwarn;
*permerror = *gccc::permerror;
*sorry = *gccc::sorry;
*inform = *gccc::inform;
*inform_n = *gccc::inform_n;
*verbatim = *gccc::verbatim;
*emit_diagnostic = *gccc::emit_diagnostic;
*seen_error = *gccc::seen_error;
*fnotice = *gccc::fnotice;
*push_file_scope = *gccc::push_file_scope;
*pop_file_scope = *gccc::pop_file_scope;
*current_stmt_tree = *gccc::current_stmt_tree;
*push_stmt_list = *gccc::push_stmt_list;
*pop_stmt_list = *gccc::pop_stmt_list;
*add_stmt = *gccc::add_stmt;
*push_cleanup = *gccc::push_cleanup;
*pushdecl_top_level = *gccc::pushdecl_top_level;
*pushdecl = *gccc::pushdecl;
*build_modify_expr = *gccc::build_modify_expr;
*build_indirect_ref = *gccc::build_indirect_ref;
*c_expand_decl = *gccc::c_expand_decl;
*field_decl_cmp = *gccc::field_decl_cmp;
*resort_sorted_fields = *gccc::resort_sorted_fields;
*has_c_linkage = *gccc::has_c_linkage;
*c_register_addr_space = *gccc::c_register_addr_space;
*c_addr_space_name = *gccc::c_addr_space_name;
*identifier_global_value = *gccc::identifier_global_value;
*record_builtin_type = *gccc::record_builtin_type;
*build_void_list_node = *gccc::build_void_list_node;
*start_fname_decls = *gccc::start_fname_decls;
*finish_fname_decls = *gccc::finish_fname_decls;
*fname_as_string = *gccc::fname_as_string;
*fname_decl = *gccc::fname_decl;
*check_function_arguments = *gccc::check_function_arguments;
*check_function_arguments_recurse = *gccc::check_function_arguments_recurse;
*check_builtin_function_arguments = *gccc::check_builtin_function_arguments;
*check_function_format = *gccc::check_function_format;
*set_Wformat = *gccc::set_Wformat;
*handle_format_attribute = *gccc::handle_format_attribute;
*handle_format_arg_attribute = *gccc::handle_format_arg_attribute;
*attribute_takes_identifier_p = *gccc::attribute_takes_identifier_p;
*c_common_handle_option = *gccc::c_common_handle_option;
*c_common_type_for_mode = *gccc::c_common_type_for_mode;
*c_common_type_for_size = *gccc::c_common_type_for_size;
*c_common_fixed_point_type_for_size = *gccc::c_common_fixed_point_type_for_size;
*c_common_unsigned_type = *gccc::c_common_unsigned_type;
*c_common_signed_type = *gccc::c_common_signed_type;
*c_common_signed_or_unsigned_type = *gccc::c_common_signed_or_unsigned_type;
*c_build_bitfield_integer_type = *gccc::c_build_bitfield_integer_type;
*decl_with_nonnull_addr_p = *gccc::decl_with_nonnull_addr_p;
*c_fully_fold = *gccc::c_fully_fold;
*decl_constant_value_for_optimization = *gccc::decl_constant_value_for_optimization;
*c_wrap_maybe_const = *gccc::c_wrap_maybe_const;
*c_save_expr = *gccc::c_save_expr;
*c_common_truthvalue_conversion = *gccc::c_common_truthvalue_conversion;
*c_apply_type_quals_to_decl = *gccc::c_apply_type_quals_to_decl;
*c_sizeof_or_alignof_type = *gccc::c_sizeof_or_alignof_type;
*c_alignof_expr = *gccc::c_alignof_expr;
*binary_op_error = *gccc::binary_op_error;
*fix_string_type = *gccc::fix_string_type;
*constant_expression_warning = *gccc::constant_expression_warning;
*constant_expression_error = *gccc::constant_expression_error;
*strict_aliasing_warning = *gccc::strict_aliasing_warning;
*warnings_for_convert_and_check = *gccc::warnings_for_convert_and_check;
*convert_and_check = *gccc::convert_and_check;
*overflow_warning = *gccc::overflow_warning;
*warn_logical_operator = *gccc::warn_logical_operator;
*check_main_parameter_types = *gccc::check_main_parameter_types;
*c_determine_visibility = *gccc::c_determine_visibility;
*same_scalar_type_ignoring_signedness = *gccc::same_scalar_type_ignoring_signedness;
*mark_valid_location_for_stdc_pragma = *gccc::mark_valid_location_for_stdc_pragma;
*valid_location_for_stdc_pragma_p = *gccc::valid_location_for_stdc_pragma_p;
*set_float_const_decimal64 = *gccc::set_float_const_decimal64;
*clear_float_const_decimal64 = *gccc::clear_float_const_decimal64;
*float_const_decimal64_p = *gccc::float_const_decimal64_p;
*keyword_begins_type_specifier = *gccc::keyword_begins_type_specifier;
*keyword_is_storage_class_specifier = *gccc::keyword_is_storage_class_specifier;
*keyword_is_type_qualifier = *gccc::keyword_is_type_qualifier;
*keyword_is_decl_specifier = *gccc::keyword_is_decl_specifier;
*shorten_binary_op = *gccc::shorten_binary_op;
*shorten_compare = *gccc::shorten_compare;
*pointer_int_sum = *gccc::pointer_int_sum;
*c_build_qualified_type = *gccc::c_build_qualified_type;
*c_common_nodes_and_builtins = *gccc::c_common_nodes_and_builtins;
*disable_builtin_function = *gccc::disable_builtin_function;
*set_compound_literal_name = *gccc::set_compound_literal_name;
*build_va_arg = *gccc::build_va_arg;
*c_common_option_lang_mask = *gccc::c_common_option_lang_mask;
*c_common_initialize_diagnostics = *gccc::c_common_initialize_diagnostics;
*c_common_complain_wrong_lang_p = *gccc::c_common_complain_wrong_lang_p;
*c_common_init_options_struct = *gccc::c_common_init_options_struct;
*c_common_init_options = *gccc::c_common_init_options;
*c_common_post_options = *gccc::c_common_post_options;
*c_common_init = *gccc::c_common_init;
*c_common_finish = *gccc::c_common_finish;
*c_common_parse_file = *gccc::c_common_parse_file;
*c_common_get_alias_set = *gccc::c_common_get_alias_set;
*c_register_builtin_type = *gccc::c_register_builtin_type;
*c_promoting_integer_type_p = *gccc::c_promoting_integer_type_p;
*self_promoting_args_p = *gccc::self_promoting_args_p;
*strip_pointer_operator = *gccc::strip_pointer_operator;
*strip_pointer_or_array_types = *gccc::strip_pointer_or_array_types;
*c_common_to_target_charset = *gccc::c_common_to_target_charset;
*c_parse_file = *gccc::c_parse_file;
*warn_for_omitted_condop = *gccc::warn_for_omitted_condop;
*do_case = *gccc::do_case;
*build_stmt = *gccc::build_stmt;
*build_case_label = *gccc::build_case_label;
*build_real_imag_expr = *gccc::build_real_imag_expr;
*build_unary_op = *gccc::build_unary_op;
*build_binary_op = *gccc::build_binary_op;
*perform_integral_promotions = *gccc::perform_integral_promotions;
*default_conversion = *gccc::default_conversion;
*common_type = *gccc::common_type;
*decl_constant_value = *gccc::decl_constant_value;
*boolean_increment = *gccc::boolean_increment;
*case_compare = *gccc::case_compare;
*c_add_case_label = *gccc::c_add_case_label;
*c_do_switch_warnings = *gccc::c_do_switch_warnings;
*build_function_call = *gccc::build_function_call;
*build_function_call_vec = *gccc::build_function_call_vec;
*resolve_overloaded_builtin = *gccc::resolve_overloaded_builtin;
*finish_label_address_expr = *gccc::finish_label_address_expr;
*lookup_label = *gccc::lookup_label;
*lookup_name = *gccc::lookup_name;
*lvalue_p = *gccc::lvalue_p;
*vector_targets_convertible_p = *gccc::vector_targets_convertible_p;
*vector_types_convertible_p = *gccc::vector_types_convertible_p;
*c_expand_expr = *gccc::c_expand_expr;
*init_c_lex = *gccc::init_c_lex;
*c_cpp_builtins = *gccc::c_cpp_builtins;
*c_cpp_builtins_optimize_pragma = *gccc::c_cpp_builtins_optimize_pragma;
*c_cpp_error = *gccc::c_cpp_error;
*parse_optimize_options = *gccc::parse_optimize_options;
*get_fileinfo = *gccc::get_fileinfo;
*dump_time_statistics = *gccc::dump_time_statistics;
*c_dump_tree = *gccc::c_dump_tree;
*verify_sequence_points = *gccc::verify_sequence_points;
*fold_offsetof = *gccc::fold_offsetof;
*readonly_error = *gccc::readonly_error;
*lvalue_error = *gccc::lvalue_error;
*invalid_indirection_error = *gccc::invalid_indirection_error;
*complete_array_type = *gccc::complete_array_type;
*builtin_type_for_size = *gccc::builtin_type_for_size;
*c_common_mark_addressable_vec = *gccc::c_common_mark_addressable_vec;
*warn_array_subscript_with_type_char = *gccc::warn_array_subscript_with_type_char;
*warn_about_parentheses = *gccc::warn_about_parentheses;
*warn_for_unused_label = *gccc::warn_for_unused_label;
*warn_for_div_by_zero = *gccc::warn_for_div_by_zero;
*warn_for_sign_compare = *gccc::warn_for_sign_compare;
*do_warn_double_promotion = *gccc::do_warn_double_promotion;
*set_underlying_type = *gccc::set_underlying_type;
*make_tree_vector = *gccc::make_tree_vector;
*release_tree_vector = *gccc::release_tree_vector;
*make_tree_vector_single = *gccc::make_tree_vector_single;
*make_tree_vector_copy = *gccc::make_tree_vector_copy;
*c_genericize = *gccc::c_genericize;
*c_gimplify_expr = *gccc::c_gimplify_expr;
*c_build_bind_expr = *gccc::c_build_bind_expr;
*pch_init = *gccc::pch_init;
*c_common_valid_pch = *gccc::c_common_valid_pch;
*c_common_read_pch = *gccc::c_common_read_pch;
*c_common_write_pch = *gccc::c_common_write_pch;
*c_common_no_more_pch = *gccc::c_common_no_more_pch;
*c_common_pch_pragma = *gccc::c_common_pch_pragma;
*c_common_print_pch_checksum = *gccc::c_common_print_pch_checksum;
*builtin_define_std = *gccc::builtin_define_std;
*builtin_define_with_value = *gccc::builtin_define_with_value;
*c_stddef_cpp_builtins = *gccc::c_stddef_cpp_builtins;
*fe_file_change = *gccc::fe_file_change;
*c_parse_error = *gccc::c_parse_error;
*init_pp_output = *gccc::init_pp_output;
*preprocess_file = *gccc::preprocess_file;
*pp_file_change = *gccc::pp_file_change;
*pp_dir_change = *gccc::pp_dir_change;
*check_missing_format_attribute = *gccc::check_missing_format_attribute;
*c_finish_omp_master = *gccc::c_finish_omp_master;
*c_finish_omp_critical = *gccc::c_finish_omp_critical;
*c_finish_omp_ordered = *gccc::c_finish_omp_ordered;
*c_finish_omp_barrier = *gccc::c_finish_omp_barrier;
*c_finish_omp_atomic = *gccc::c_finish_omp_atomic;
*c_finish_omp_flush = *gccc::c_finish_omp_flush;
*c_finish_omp_taskwait = *gccc::c_finish_omp_taskwait;
*c_finish_omp_for = *gccc::c_finish_omp_for;
*c_split_parallel_clauses = *gccc::c_split_parallel_clauses;
*c_omp_predetermined_sharing = *gccc::c_omp_predetermined_sharing;
*c_omp_sharing_predetermined = *gccc::c_omp_sharing_predetermined;
*c_omp_remap_decl = *gccc::c_omp_remap_decl;
*record_types_used_by_current_var_decl = *gccc::record_types_used_by_current_var_decl;
*pp_construct = *gccc::pp_construct;
*pp_base_set_line_maximum_length = *gccc::pp_base_set_line_maximum_length;
*pp_base_set_prefix = *gccc::pp_base_set_prefix;
*pp_base_destroy_prefix = *gccc::pp_base_destroy_prefix;
*pp_base_remaining_character_count_for_line = *gccc::pp_base_remaining_character_count_for_line;
*pp_base_clear_output_area = *gccc::pp_base_clear_output_area;
*pp_base_formatted_text = *gccc::pp_base_formatted_text;
*pp_base_last_position_in_text = *gccc::pp_base_last_position_in_text;
*pp_base_emit_prefix = *gccc::pp_base_emit_prefix;
*pp_base_append_text = *gccc::pp_base_append_text;
*pp_printf = *gccc::pp_printf;
*pp_verbatim = *gccc::pp_verbatim;
*pp_base_flush = *gccc::pp_base_flush;
*pp_base_format = *gccc::pp_base_format;
*pp_base_output_formatted_text = *gccc::pp_base_output_formatted_text;
*pp_base_format_verbatim = *gccc::pp_base_format_verbatim;
*pp_base_indent = *gccc::pp_base_indent;
*pp_base_newline = *gccc::pp_base_newline;
*pp_base_character = *gccc::pp_base_character;
*pp_base_string = *gccc::pp_base_string;
*pp_write_text_to_stream = *gccc::pp_write_text_to_stream;
*pp_base_maybe_space = *gccc::pp_base_maybe_space;
*pp_set_verbatim_wrapping_ = *gccc::pp_set_verbatim_wrapping_;
*identifier_to_locale = *gccc::identifier_to_locale;
*diagnostic_inhibit_notes = *gccc::diagnostic_inhibit_notes;
*diagnostic_initialize = *gccc::diagnostic_initialize;
*diagnostic_finish = *gccc::diagnostic_finish;
*diagnostic_report_current_module = *gccc::diagnostic_report_current_module;
*diagnostic_classify_diagnostic = *gccc::diagnostic_classify_diagnostic;
*diagnostic_push_diagnostics = *gccc::diagnostic_push_diagnostics;
*diagnostic_pop_diagnostics = *gccc::diagnostic_pop_diagnostics;
*diagnostic_report_diagnostic = *gccc::diagnostic_report_diagnostic;
*diagnostic_set_info = *gccc::diagnostic_set_info;
*diagnostic_set_info_translated = *gccc::diagnostic_set_info_translated;
*diagnostic_build_prefix = *gccc::diagnostic_build_prefix;
*default_diagnostic_starter = *gccc::default_diagnostic_starter;
*default_diagnostic_finalizer = *gccc::default_diagnostic_finalizer;
*file_name_as_prefix = *gccc::file_name_as_prefix;
*binding_table_foreach = *gccc::binding_table_foreach;
*binding_table_find = *gccc::binding_table_find;
*VEC_cxx_saved_binding_base_length = *gccc::VEC_cxx_saved_binding_base_length;
*VEC_cxx_saved_binding_base_last = *gccc::VEC_cxx_saved_binding_base_last;
*VEC_cxx_saved_binding_base_index = *gccc::VEC_cxx_saved_binding_base_index;
*VEC_cxx_saved_binding_base_iterate = *gccc::VEC_cxx_saved_binding_base_iterate;
*VEC_cxx_saved_binding_base_embedded_size = *gccc::VEC_cxx_saved_binding_base_embedded_size;
*VEC_cxx_saved_binding_base_embedded_init = *gccc::VEC_cxx_saved_binding_base_embedded_init;
*VEC_cxx_saved_binding_base_space = *gccc::VEC_cxx_saved_binding_base_space;
*VEC_cxx_saved_binding_base_splice = *gccc::VEC_cxx_saved_binding_base_splice;
*VEC_cxx_saved_binding_base_quick_push = *gccc::VEC_cxx_saved_binding_base_quick_push;
*VEC_cxx_saved_binding_base_pop = *gccc::VEC_cxx_saved_binding_base_pop;
*VEC_cxx_saved_binding_base_truncate = *gccc::VEC_cxx_saved_binding_base_truncate;
*VEC_cxx_saved_binding_base_replace = *gccc::VEC_cxx_saved_binding_base_replace;
*VEC_cxx_saved_binding_base_quick_insert = *gccc::VEC_cxx_saved_binding_base_quick_insert;
*VEC_cxx_saved_binding_base_ordered_remove = *gccc::VEC_cxx_saved_binding_base_ordered_remove;
*VEC_cxx_saved_binding_base_unordered_remove = *gccc::VEC_cxx_saved_binding_base_unordered_remove;
*VEC_cxx_saved_binding_base_block_remove = *gccc::VEC_cxx_saved_binding_base_block_remove;
*VEC_cxx_saved_binding_base_address = *gccc::VEC_cxx_saved_binding_base_address;
*VEC_cxx_saved_binding_base_lower_bound = *gccc::VEC_cxx_saved_binding_base_lower_bound;
*VEC_cxx_saved_binding_gc_alloc = *gccc::VEC_cxx_saved_binding_gc_alloc;
*VEC_cxx_saved_binding_gc_copy = *gccc::VEC_cxx_saved_binding_gc_copy;
*VEC_cxx_saved_binding_gc_free = *gccc::VEC_cxx_saved_binding_gc_free;
*VEC_cxx_saved_binding_gc_reserve = *gccc::VEC_cxx_saved_binding_gc_reserve;
*VEC_cxx_saved_binding_gc_reserve_exact = *gccc::VEC_cxx_saved_binding_gc_reserve_exact;
*VEC_cxx_saved_binding_gc_safe_grow = *gccc::VEC_cxx_saved_binding_gc_safe_grow;
*VEC_cxx_saved_binding_gc_safe_grow_cleared = *gccc::VEC_cxx_saved_binding_gc_safe_grow_cleared;
*VEC_cxx_saved_binding_gc_safe_splice = *gccc::VEC_cxx_saved_binding_gc_safe_splice;
*VEC_cxx_saved_binding_gc_safe_push = *gccc::VEC_cxx_saved_binding_gc_safe_push;
*VEC_cxx_saved_binding_gc_safe_insert = *gccc::VEC_cxx_saved_binding_gc_safe_insert;
*identifier_type_value = *gccc::identifier_type_value;
*set_identifier_type_value = *gccc::set_identifier_type_value;
*pop_binding = *gccc::pop_binding;
*constructor_name = *gccc::constructor_name;
*constructor_name_p = *gccc::constructor_name_p;
*VEC_cp_class_binding_base_length = *gccc::VEC_cp_class_binding_base_length;
*VEC_cp_class_binding_base_last = *gccc::VEC_cp_class_binding_base_last;
*VEC_cp_class_binding_base_index = *gccc::VEC_cp_class_binding_base_index;
*VEC_cp_class_binding_base_iterate = *gccc::VEC_cp_class_binding_base_iterate;
*VEC_cp_class_binding_base_embedded_size = *gccc::VEC_cp_class_binding_base_embedded_size;
*VEC_cp_class_binding_base_embedded_init = *gccc::VEC_cp_class_binding_base_embedded_init;
*VEC_cp_class_binding_base_space = *gccc::VEC_cp_class_binding_base_space;
*VEC_cp_class_binding_base_splice = *gccc::VEC_cp_class_binding_base_splice;
*VEC_cp_class_binding_base_quick_push = *gccc::VEC_cp_class_binding_base_quick_push;
*VEC_cp_class_binding_base_pop = *gccc::VEC_cp_class_binding_base_pop;
*VEC_cp_class_binding_base_truncate = *gccc::VEC_cp_class_binding_base_truncate;
*VEC_cp_class_binding_base_replace = *gccc::VEC_cp_class_binding_base_replace;
*VEC_cp_class_binding_base_quick_insert = *gccc::VEC_cp_class_binding_base_quick_insert;
*VEC_cp_class_binding_base_ordered_remove = *gccc::VEC_cp_class_binding_base_ordered_remove;
*VEC_cp_class_binding_base_unordered_remove = *gccc::VEC_cp_class_binding_base_unordered_remove;
*VEC_cp_class_binding_base_block_remove = *gccc::VEC_cp_class_binding_base_block_remove;
*VEC_cp_class_binding_base_address = *gccc::VEC_cp_class_binding_base_address;
*VEC_cp_class_binding_base_lower_bound = *gccc::VEC_cp_class_binding_base_lower_bound;
*VEC_cp_class_binding_gc_alloc = *gccc::VEC_cp_class_binding_gc_alloc;
*VEC_cp_class_binding_gc_copy = *gccc::VEC_cp_class_binding_gc_copy;
*VEC_cp_class_binding_gc_free = *gccc::VEC_cp_class_binding_gc_free;
*VEC_cp_class_binding_gc_reserve = *gccc::VEC_cp_class_binding_gc_reserve;
*VEC_cp_class_binding_gc_reserve_exact = *gccc::VEC_cp_class_binding_gc_reserve_exact;
*VEC_cp_class_binding_gc_safe_grow = *gccc::VEC_cp_class_binding_gc_safe_grow;
*VEC_cp_class_binding_gc_safe_grow_cleared = *gccc::VEC_cp_class_binding_gc_safe_grow_cleared;
*VEC_cp_class_binding_gc_safe_splice = *gccc::VEC_cp_class_binding_gc_safe_splice;
*VEC_cp_class_binding_gc_safe_push = *gccc::VEC_cp_class_binding_gc_safe_push;
*VEC_cp_class_binding_gc_safe_insert = *gccc::VEC_cp_class_binding_gc_safe_insert;
*VEC_cp_label_binding_base_length = *gccc::VEC_cp_label_binding_base_length;
*VEC_cp_label_binding_base_last = *gccc::VEC_cp_label_binding_base_last;
*VEC_cp_label_binding_base_index = *gccc::VEC_cp_label_binding_base_index;
*VEC_cp_label_binding_base_iterate = *gccc::VEC_cp_label_binding_base_iterate;
*VEC_cp_label_binding_base_embedded_size = *gccc::VEC_cp_label_binding_base_embedded_size;
*VEC_cp_label_binding_base_embedded_init = *gccc::VEC_cp_label_binding_base_embedded_init;
*VEC_cp_label_binding_base_space = *gccc::VEC_cp_label_binding_base_space;
*VEC_cp_label_binding_base_splice = *gccc::VEC_cp_label_binding_base_splice;
*VEC_cp_label_binding_base_quick_push = *gccc::VEC_cp_label_binding_base_quick_push;
*VEC_cp_label_binding_base_pop = *gccc::VEC_cp_label_binding_base_pop;
*VEC_cp_label_binding_base_truncate = *gccc::VEC_cp_label_binding_base_truncate;
*VEC_cp_label_binding_base_replace = *gccc::VEC_cp_label_binding_base_replace;
*VEC_cp_label_binding_base_quick_insert = *gccc::VEC_cp_label_binding_base_quick_insert;
*VEC_cp_label_binding_base_ordered_remove = *gccc::VEC_cp_label_binding_base_ordered_remove;
*VEC_cp_label_binding_base_unordered_remove = *gccc::VEC_cp_label_binding_base_unordered_remove;
*VEC_cp_label_binding_base_block_remove = *gccc::VEC_cp_label_binding_base_block_remove;
*VEC_cp_label_binding_base_address = *gccc::VEC_cp_label_binding_base_address;
*VEC_cp_label_binding_base_lower_bound = *gccc::VEC_cp_label_binding_base_lower_bound;
*VEC_cp_label_binding_gc_alloc = *gccc::VEC_cp_label_binding_gc_alloc;
*VEC_cp_label_binding_gc_copy = *gccc::VEC_cp_label_binding_gc_copy;
*VEC_cp_label_binding_gc_free = *gccc::VEC_cp_label_binding_gc_free;
*VEC_cp_label_binding_gc_reserve = *gccc::VEC_cp_label_binding_gc_reserve;
*VEC_cp_label_binding_gc_reserve_exact = *gccc::VEC_cp_label_binding_gc_reserve_exact;
*VEC_cp_label_binding_gc_safe_grow = *gccc::VEC_cp_label_binding_gc_safe_grow;
*VEC_cp_label_binding_gc_safe_grow_cleared = *gccc::VEC_cp_label_binding_gc_safe_grow_cleared;
*VEC_cp_label_binding_gc_safe_splice = *gccc::VEC_cp_label_binding_gc_safe_splice;
*VEC_cp_label_binding_gc_safe_push = *gccc::VEC_cp_label_binding_gc_safe_push;
*VEC_cp_label_binding_gc_safe_insert = *gccc::VEC_cp_label_binding_gc_safe_insert;
*leave_scope = *gccc::leave_scope;
*kept_level_p = *gccc::kept_level_p;
*global_bindings_p = *gccc::global_bindings_p;
*toplevel_bindings_p = *gccc::toplevel_bindings_p;
*namespace_bindings_p = *gccc::namespace_bindings_p;
*template_parm_scope_p = *gccc::template_parm_scope_p;
*innermost_scope_kind = *gccc::innermost_scope_kind;
*begin_scope = *gccc::begin_scope;
*print_binding_stack = *gccc::print_binding_stack;
*push_to_top_level = *gccc::push_to_top_level;
*pop_from_top_level = *gccc::pop_from_top_level;
*pop_everything = *gccc::pop_everything;
*keep_next_level = *gccc::keep_next_level;
*is_ancestor = *gccc::is_ancestor;
*push_scope = *gccc::push_scope;
*pop_scope = *gccc::pop_scope;
*push_inner_scope = *gccc::push_inner_scope;
*pop_inner_scope = *gccc::pop_inner_scope;
*push_binding_level = *gccc::push_binding_level;
*push_namespace = *gccc::push_namespace;
*pop_namespace = *gccc::pop_namespace;
*push_nested_namespace = *gccc::push_nested_namespace;
*pop_nested_namespace = *gccc::pop_nested_namespace;
*handle_namespace_attrs = *gccc::handle_namespace_attrs;
*pushlevel_class = *gccc::pushlevel_class;
*poplevel_class = *gccc::poplevel_class;
*pushdecl_with_scope = *gccc::pushdecl_with_scope;
*lookup_name_prefer_type = *gccc::lookup_name_prefer_type;
*lookup_name_real = *gccc::lookup_name_real;
*lookup_type_scope = *gccc::lookup_type_scope;
*namespace_binding = *gccc::namespace_binding;
*set_namespace_binding = *gccc::set_namespace_binding;
*hidden_name_p = *gccc::hidden_name_p;
*remove_hidden_names = *gccc::remove_hidden_names;
*lookup_qualified_name = *gccc::lookup_qualified_name;
*lookup_name_nonclass = *gccc::lookup_name_nonclass;
*lookup_name_innermost_nonclass_level = *gccc::lookup_name_innermost_nonclass_level;
*is_local_extern = *gccc::is_local_extern;
*lookup_function_nonclass = *gccc::lookup_function_nonclass;
*push_local_binding = *gccc::push_local_binding;
*pushdecl_class_level = *gccc::pushdecl_class_level;
*pushdecl_namespace_level = *gccc::pushdecl_namespace_level;
*push_class_level_binding = *gccc::push_class_level_binding;
*getdecls = *gccc::getdecls;
*function_parm_depth = *gccc::function_parm_depth;
*cp_namespace_decls = *gccc::cp_namespace_decls;
*set_decl_namespace = *gccc::set_decl_namespace;
*push_decl_namespace = *gccc::push_decl_namespace;
*pop_decl_namespace = *gccc::pop_decl_namespace;
*do_namespace_alias = *gccc::do_namespace_alias;
*do_toplevel_using_decl = *gccc::do_toplevel_using_decl;
*do_local_using_decl = *gccc::do_local_using_decl;
*do_class_using_decl = *gccc::do_class_using_decl;
*do_using_directive = *gccc::do_using_directive;
*lookup_arg_dependent = *gccc::lookup_arg_dependent;
*is_associated_namespace = *gccc::is_associated_namespace;
*parse_using_directive = *gccc::parse_using_directive;
*innermost_non_namespace_value = *gccc::innermost_non_namespace_value;
*outer_binding = *gccc::outer_binding;
*cp_emit_debug_info_for_using = *gccc::cp_emit_debug_info_for_using;
*get_global_value_if_present = *gccc::get_global_value_if_present;
*is_typename_at_global_scope = *gccc::is_typename_at_global_scope;
*VEC_qualified_typedef_usage_t_base_length = *gccc::VEC_qualified_typedef_usage_t_base_length;
*VEC_qualified_typedef_usage_t_base_last = *gccc::VEC_qualified_typedef_usage_t_base_last;
*VEC_qualified_typedef_usage_t_base_index = *gccc::VEC_qualified_typedef_usage_t_base_index;
*VEC_qualified_typedef_usage_t_base_iterate = *gccc::VEC_qualified_typedef_usage_t_base_iterate;
*VEC_qualified_typedef_usage_t_base_embedded_size = *gccc::VEC_qualified_typedef_usage_t_base_embedded_size;
*VEC_qualified_typedef_usage_t_base_embedded_init = *gccc::VEC_qualified_typedef_usage_t_base_embedded_init;
*VEC_qualified_typedef_usage_t_base_space = *gccc::VEC_qualified_typedef_usage_t_base_space;
*VEC_qualified_typedef_usage_t_base_splice = *gccc::VEC_qualified_typedef_usage_t_base_splice;
*VEC_qualified_typedef_usage_t_base_quick_push = *gccc::VEC_qualified_typedef_usage_t_base_quick_push;
*VEC_qualified_typedef_usage_t_base_pop = *gccc::VEC_qualified_typedef_usage_t_base_pop;
*VEC_qualified_typedef_usage_t_base_truncate = *gccc::VEC_qualified_typedef_usage_t_base_truncate;
*VEC_qualified_typedef_usage_t_base_replace = *gccc::VEC_qualified_typedef_usage_t_base_replace;
*VEC_qualified_typedef_usage_t_base_quick_insert = *gccc::VEC_qualified_typedef_usage_t_base_quick_insert;
*VEC_qualified_typedef_usage_t_base_ordered_remove = *gccc::VEC_qualified_typedef_usage_t_base_ordered_remove;
*VEC_qualified_typedef_usage_t_base_unordered_remove = *gccc::VEC_qualified_typedef_usage_t_base_unordered_remove;
*VEC_qualified_typedef_usage_t_base_block_remove = *gccc::VEC_qualified_typedef_usage_t_base_block_remove;
*VEC_qualified_typedef_usage_t_base_address = *gccc::VEC_qualified_typedef_usage_t_base_address;
*VEC_qualified_typedef_usage_t_base_lower_bound = *gccc::VEC_qualified_typedef_usage_t_base_lower_bound;
*VEC_qualified_typedef_usage_t_gc_alloc = *gccc::VEC_qualified_typedef_usage_t_gc_alloc;
*VEC_qualified_typedef_usage_t_gc_copy = *gccc::VEC_qualified_typedef_usage_t_gc_copy;
*VEC_qualified_typedef_usage_t_gc_free = *gccc::VEC_qualified_typedef_usage_t_gc_free;
*VEC_qualified_typedef_usage_t_gc_reserve = *gccc::VEC_qualified_typedef_usage_t_gc_reserve;
*VEC_qualified_typedef_usage_t_gc_reserve_exact = *gccc::VEC_qualified_typedef_usage_t_gc_reserve_exact;
*VEC_qualified_typedef_usage_t_gc_safe_grow = *gccc::VEC_qualified_typedef_usage_t_gc_safe_grow;
*VEC_qualified_typedef_usage_t_gc_safe_grow_cleared = *gccc::VEC_qualified_typedef_usage_t_gc_safe_grow_cleared;
*VEC_qualified_typedef_usage_t_gc_safe_splice = *gccc::VEC_qualified_typedef_usage_t_gc_safe_splice;
*VEC_qualified_typedef_usage_t_gc_safe_push = *gccc::VEC_qualified_typedef_usage_t_gc_safe_push;
*VEC_qualified_typedef_usage_t_gc_safe_insert = *gccc::VEC_qualified_typedef_usage_t_gc_safe_insert;
*cxx_int_tree_map_hash = *gccc::cxx_int_tree_map_hash;
*cxx_int_tree_map_eq = *gccc::cxx_int_tree_map_eq;
*VEC_tree_pair_s_base_length = *gccc::VEC_tree_pair_s_base_length;
*VEC_tree_pair_s_base_last = *gccc::VEC_tree_pair_s_base_last;
*VEC_tree_pair_s_base_index = *gccc::VEC_tree_pair_s_base_index;
*VEC_tree_pair_s_base_iterate = *gccc::VEC_tree_pair_s_base_iterate;
*VEC_tree_pair_s_base_embedded_size = *gccc::VEC_tree_pair_s_base_embedded_size;
*VEC_tree_pair_s_base_embedded_init = *gccc::VEC_tree_pair_s_base_embedded_init;
*VEC_tree_pair_s_base_space = *gccc::VEC_tree_pair_s_base_space;
*VEC_tree_pair_s_base_splice = *gccc::VEC_tree_pair_s_base_splice;
*VEC_tree_pair_s_base_quick_push = *gccc::VEC_tree_pair_s_base_quick_push;
*VEC_tree_pair_s_base_pop = *gccc::VEC_tree_pair_s_base_pop;
*VEC_tree_pair_s_base_truncate = *gccc::VEC_tree_pair_s_base_truncate;
*VEC_tree_pair_s_base_replace = *gccc::VEC_tree_pair_s_base_replace;
*VEC_tree_pair_s_base_quick_insert = *gccc::VEC_tree_pair_s_base_quick_insert;
*VEC_tree_pair_s_base_ordered_remove = *gccc::VEC_tree_pair_s_base_ordered_remove;
*VEC_tree_pair_s_base_unordered_remove = *gccc::VEC_tree_pair_s_base_unordered_remove;
*VEC_tree_pair_s_base_block_remove = *gccc::VEC_tree_pair_s_base_block_remove;
*VEC_tree_pair_s_base_address = *gccc::VEC_tree_pair_s_base_address;
*VEC_tree_pair_s_base_lower_bound = *gccc::VEC_tree_pair_s_base_lower_bound;
*VEC_tree_pair_s_gc_alloc = *gccc::VEC_tree_pair_s_gc_alloc;
*VEC_tree_pair_s_gc_copy = *gccc::VEC_tree_pair_s_gc_copy;
*VEC_tree_pair_s_gc_free = *gccc::VEC_tree_pair_s_gc_free;
*VEC_tree_pair_s_gc_reserve = *gccc::VEC_tree_pair_s_gc_reserve;
*VEC_tree_pair_s_gc_reserve_exact = *gccc::VEC_tree_pair_s_gc_reserve_exact;
*VEC_tree_pair_s_gc_safe_grow = *gccc::VEC_tree_pair_s_gc_safe_grow;
*VEC_tree_pair_s_gc_safe_grow_cleared = *gccc::VEC_tree_pair_s_gc_safe_grow_cleared;
*VEC_tree_pair_s_gc_safe_splice = *gccc::VEC_tree_pair_s_gc_safe_splice;
*VEC_tree_pair_s_gc_safe_push = *gccc::VEC_tree_pair_s_gc_safe_push;
*VEC_tree_pair_s_gc_safe_insert = *gccc::VEC_tree_pair_s_gc_safe_insert;
*decl_shadowed_for_var_lookup = *gccc::decl_shadowed_for_var_lookup;
*decl_shadowed_for_var_insert = *gccc::decl_shadowed_for_var_insert;
*init_aggr_init_expr_arg_iterator = *gccc::init_aggr_init_expr_arg_iterator;
*next_aggr_init_expr_arg = *gccc::next_aggr_init_expr_arg;
*first_aggr_init_expr_arg = *gccc::first_aggr_init_expr_arg;
*more_aggr_init_expr_args_p = *gccc::more_aggr_init_expr_args_p;
*cp_convert_range_for = *gccc::cp_convert_range_for;
*init_reswords = *gccc::init_reswords;
*check_dtor_name = *gccc::check_dtor_name;
*build_conditional_expr = *gccc::build_conditional_expr;
*build_addr_func = *gccc::build_addr_func;
*build_call_a = *gccc::build_call_a;
*build_call_n = *gccc::build_call_n;
*null_ptr_cst_p = *gccc::null_ptr_cst_p;
*sufficient_parms_p = *gccc::sufficient_parms_p;
*type_decays_to = *gccc::type_decays_to;
*build_user_type_conversion = *gccc::build_user_type_conversion;
*build_new_function_call = *gccc::build_new_function_call;
*build_operator_new_call = *gccc::build_operator_new_call;
*build_new_method_call = *gccc::build_new_method_call;
*build_special_member_call = *gccc::build_special_member_call;
*build_new_op = *gccc::build_new_op;
*build_op_call = *gccc::build_op_call;
*build_op_delete_call = *gccc::build_op_delete_call;
*can_convert = *gccc::can_convert;
*can_convert_arg = *gccc::can_convert_arg;
*can_convert_arg_bad = *gccc::can_convert_arg_bad;
*enforce_access = *gccc::enforce_access;
*convert_default_arg = *gccc::convert_default_arg;
*convert_arg_to_ellipsis = *gccc::convert_arg_to_ellipsis;
*build_x_va_arg = *gccc::build_x_va_arg;
*cxx_type_promotes_to = *gccc::cxx_type_promotes_to;
*type_passed_as = *gccc::type_passed_as;
*convert_for_arg_passing = *gccc::convert_for_arg_passing;
*is_properly_derived_from = *gccc::is_properly_derived_from;
*set_up_extended_ref_temp = *gccc::set_up_extended_ref_temp;
*initialize_reference = *gccc::initialize_reference;
*make_temporary_var_for_ref_to_temp = *gccc::make_temporary_var_for_ref_to_temp;
*strip_top_quals = *gccc::strip_top_quals;
*reference_related_p = *gccc::reference_related_p;
*perform_implicit_conversion = *gccc::perform_implicit_conversion;
*perform_implicit_conversion_flags = *gccc::perform_implicit_conversion_flags;
*build_integral_nontype_arg_conv = *gccc::build_integral_nontype_arg_conv;
*perform_direct_initialization_if_possible = *gccc::perform_direct_initialization_if_possible;
*in_charge_arg_for_name = *gccc::in_charge_arg_for_name;
*build_cxx_call = *gccc::build_cxx_call;
*is_std_init_list = *gccc::is_std_init_list;
*is_list_ctor = *gccc::is_list_ctor;
*build_vfield_ref = *gccc::build_vfield_ref;
*build_base_path = *gccc::build_base_path;
*convert_to_base = *gccc::convert_to_base;
*convert_to_base_statically = *gccc::convert_to_base_statically;
*build_vtbl_ref = *gccc::build_vtbl_ref;
*build_vfn_ref = *gccc::build_vfn_ref;
*get_vtable_decl = *gccc::get_vtable_decl;
*resort_type_method_vec = *gccc::resort_type_method_vec;
*add_method = *gccc::add_method;
*currently_open_class = *gccc::currently_open_class;
*currently_open_derived_class = *gccc::currently_open_derived_class;
*current_nonlambda_class_type = *gccc::current_nonlambda_class_type;
*finish_struct = *gccc::finish_struct;
*finish_struct_1 = *gccc::finish_struct_1;
*resolves_to_fixed_type_p = *gccc::resolves_to_fixed_type_p;
*init_class_processing = *gccc::init_class_processing;
*is_empty_class = *gccc::is_empty_class;
*is_really_empty_class = *gccc::is_really_empty_class;
*pushclass = *gccc::pushclass;
*popclass = *gccc::popclass;
*push_nested_class = *gccc::push_nested_class;
*pop_nested_class = *gccc::pop_nested_class;
*current_lang_depth = *gccc::current_lang_depth;
*push_lang_context = *gccc::push_lang_context;
*pop_lang_context = *gccc::pop_lang_context;
*instantiate_type = *gccc::instantiate_type;
*print_class_statistics = *gccc::print_class_statistics;
*build_self_reference = *gccc::build_self_reference;
*same_signature_p = *gccc::same_signature_p;
*maybe_add_class_template_decl_list = *gccc::maybe_add_class_template_decl_list;
*unreverse_member_declarations = *gccc::unreverse_member_declarations;
*invalidate_class_lookup_cache = *gccc::invalidate_class_lookup_cache;
*maybe_note_name_used_in_class = *gccc::maybe_note_name_used_in_class;
*note_name_declared_in_class = *gccc::note_name_declared_in_class;
*get_vtbl_decl_for_binfo = *gccc::get_vtbl_decl_for_binfo;
*debug_class = *gccc::debug_class;
*debug_thunks = *gccc::debug_thunks;
*cp_fold_obj_type_ref = *gccc::cp_fold_obj_type_ref;
*set_linkage_according_to_type = *gccc::set_linkage_according_to_type;
*determine_key_method = *gccc::determine_key_method;
*check_for_override = *gccc::check_for_override;
*push_class_stack = *gccc::push_class_stack;
*pop_class_stack = *gccc::pop_class_stack;
*type_has_user_nondefault_constructor = *gccc::type_has_user_nondefault_constructor;
*in_class_defaulted_default_constructor = *gccc::in_class_defaulted_default_constructor;
*user_provided_p = *gccc::user_provided_p;
*type_has_user_provided_constructor = *gccc::type_has_user_provided_constructor;
*type_has_user_provided_default_constructor = *gccc::type_has_user_provided_default_constructor;
*synthesized_default_constructor_is_constexpr = *gccc::synthesized_default_constructor_is_constexpr;
*type_has_constexpr_default_constructor = *gccc::type_has_constexpr_default_constructor;
*type_has_virtual_destructor = *gccc::type_has_virtual_destructor;
*type_has_move_constructor = *gccc::type_has_move_constructor;
*type_has_move_assign = *gccc::type_has_move_assign;
*defaulted_late_check = *gccc::defaulted_late_check;
*defaultable_fn_check = *gccc::defaultable_fn_check;
*fixup_type_variants = *gccc::fixup_type_variants;
*fixup_attribute_variants = *gccc::fixup_attribute_variants;
*decl_cloned_function_p = *gccc::decl_cloned_function_p;
*clone_function_decl = *gccc::clone_function_decl;
*adjust_clone_args = *gccc::adjust_clone_args;
*convert_to_reference = *gccc::convert_to_reference;
*convert_from_reference = *gccc::convert_from_reference;
*force_rvalue = *gccc::force_rvalue;
*ocp_convert = *gccc::ocp_convert;
*cp_convert = *gccc::cp_convert;
*cp_convert_and_check = *gccc::cp_convert_and_check;
*cp_fold_convert = *gccc::cp_fold_convert;
*convert_to_void = *gccc::convert_to_void;
*convert_force = *gccc::convert_force;
*build_expr_type_conversion = *gccc::build_expr_type_conversion;
*type_promotes_to = *gccc::type_promotes_to;
*perform_qualification_conversions = *gccc::perform_qualification_conversions;
*pushdecl_maybe_friend = *gccc::pushdecl_maybe_friend;
*maybe_push_cleanup_level = *gccc::maybe_push_cleanup_level;
*pushtag = *gccc::pushtag;
*make_anon_name = *gccc::make_anon_name;
*pushdecl_top_level_maybe_friend = *gccc::pushdecl_top_level_maybe_friend;
*pushdecl_top_level_and_finish = *gccc::pushdecl_top_level_and_finish;
*check_for_out_of_scope_variable = *gccc::check_for_out_of_scope_variable;
*print_other_binding_stack = *gccc::print_other_binding_stack;
*maybe_push_decl = *gccc::maybe_push_decl;
*current_decl_namespace = *gccc::current_decl_namespace;
*poplevel = *gccc::poplevel;
*cxx_init_decl_processing = *gccc::cxx_init_decl_processing;
*cp_tree_node_structure = *gccc::cp_tree_node_structure;
*finish_scope = *gccc::finish_scope;
*push_switch = *gccc::push_switch;
*pop_switch = *gccc::pop_switch;
*make_lambda_name = *gccc::make_lambda_name;
*decls_match = *gccc::decls_match;
*duplicate_decls = *gccc::duplicate_decls;
*declare_local_label = *gccc::declare_local_label;
*define_label = *gccc::define_label;
*check_goto = *gccc::check_goto;
*check_omp_return = *gccc::check_omp_return;
*make_typename_type = *gccc::make_typename_type;
*make_unbound_class_template = *gccc::make_unbound_class_template;
*build_library_fn_ptr = *gccc::build_library_fn_ptr;
*build_cp_library_fn_ptr = *gccc::build_cp_library_fn_ptr;
*push_library_fn = *gccc::push_library_fn;
*push_void_library_fn = *gccc::push_void_library_fn;
*push_throw_library_fn = *gccc::push_throw_library_fn;
*check_tag_decl = *gccc::check_tag_decl;
*shadow_tag = *gccc::shadow_tag;
*groktypename = *gccc::groktypename;
*start_decl = *gccc::start_decl;
*start_decl_1 = *gccc::start_decl_1;
*check_array_initializer = *gccc::check_array_initializer;
*cp_finish_decl = *gccc::cp_finish_decl;
*cp_complete_array_type = *gccc::cp_complete_array_type;
*build_ptrmemfunc_type = *gccc::build_ptrmemfunc_type;
*build_ptrmem_type = *gccc::build_ptrmem_type;
*build_this_parm = *gccc::build_this_parm;
*copy_fn_p = *gccc::copy_fn_p;
*move_fn_p = *gccc::move_fn_p;
*get_scope_of_declarator = *gccc::get_scope_of_declarator;
*grok_special_member_properties = *gccc::grok_special_member_properties;
*grok_ctor_properties = *gccc::grok_ctor_properties;
*grok_op_properties = *gccc::grok_op_properties;
*xref_tag = *gccc::xref_tag;
*xref_tag_from_type = *gccc::xref_tag_from_type;
*xref_basetypes = *gccc::xref_basetypes;
*start_enum = *gccc::start_enum;
*finish_enum_value_list = *gccc::finish_enum_value_list;
*finish_enum = *gccc::finish_enum;
*build_enumerator = *gccc::build_enumerator;
*lookup_enumerator = *gccc::lookup_enumerator;
*start_preparsed_function = *gccc::start_preparsed_function;
*start_function = *gccc::start_function;
*begin_function_body = *gccc::begin_function_body;
*finish_function_body = *gccc::finish_function_body;
*outer_curly_brace_block = *gccc::outer_curly_brace_block;
*finish_function = *gccc::finish_function;
*grokmethod = *gccc::grokmethod;
*maybe_register_incomplete_var = *gccc::maybe_register_incomplete_var;
*maybe_commonize_var = *gccc::maybe_commonize_var;
*complete_vars = *gccc::complete_vars;
*finish_stmt = *gccc::finish_stmt;
*static_fn_type = *gccc::static_fn_type;
*revert_static_member_fn = *gccc::revert_static_member_fn;
*fixup_anonymous_aggr = *gccc::fixup_anonymous_aggr;
*check_static_variable_definition = *gccc::check_static_variable_definition;
*compute_array_index_type = *gccc::compute_array_index_type;
*check_default_argument = *gccc::check_default_argument;
*walk_namespaces = *gccc::walk_namespaces;
*wrapup_globals_for_namespace = *gccc::wrapup_globals_for_namespace;
*create_implicit_typedef = *gccc::create_implicit_typedef;
*local_variable_p = *gccc::local_variable_p;
*register_dtor_fn = *gccc::register_dtor_fn;
*current_tmpl_spec_kind = *gccc::current_tmpl_spec_kind;
*cp_fname_init = *gccc::cp_fname_init;
*cxx_builtin_function = *gccc::cxx_builtin_function;
*cxx_builtin_function_ext_scope = *gccc::cxx_builtin_function_ext_scope;
*check_elaborated_type_specifier = *gccc::check_elaborated_type_specifier;
*warn_extern_redeclared_static = *gccc::warn_extern_redeclared_static;
*cxx_comdat_group = *gccc::cxx_comdat_group;
*cp_missing_noreturn_ok_p = *gccc::cp_missing_noreturn_ok_p;
*initialize_artificial_var = *gccc::initialize_artificial_var;
*check_var_type = *gccc::check_var_type;
*reshape_init = *gccc::reshape_init;
*next_initializable_field = *gccc::next_initializable_field;
*finish_case_label = *gccc::finish_case_label;
*cxx_maybe_build_cleanup = *gccc::cxx_maybe_build_cleanup;
*check_java_method = *gccc::check_java_method;
*build_memfn_type = *gccc::build_memfn_type;
*change_return_type = *gccc::change_return_type;
*maybe_retrofit_in_chrg = *gccc::maybe_retrofit_in_chrg;
*maybe_make_one_only = *gccc::maybe_make_one_only;
*vague_linkage_p = *gccc::vague_linkage_p;
*grokclassfn = *gccc::grokclassfn;
*grok_array_decl = *gccc::grok_array_decl;
*delete_sanity = *gccc::delete_sanity;
*check_classfn = *gccc::check_classfn;
*check_member_template = *gccc::check_member_template;
*grokfield = *gccc::grokfield;
*grokbitfield = *gccc::grokbitfield;
*cp_reconstruct_complex_type = *gccc::cp_reconstruct_complex_type;
*cplus_decl_attributes = *gccc::cplus_decl_attributes;
*finish_anon_union = *gccc::finish_anon_union;
*cp_write_global_declarations = *gccc::cp_write_global_declarations;
*coerce_new_type = *gccc::coerce_new_type;
*coerce_delete_type = *gccc::coerce_delete_type;
*comdat_linkage = *gccc::comdat_linkage;
*determine_visibility = *gccc::determine_visibility;
*constrain_class_visibility = *gccc::constrain_class_visibility;
*import_export_decl = *gccc::import_export_decl;
*build_cleanup = *gccc::build_cleanup;
*build_offset_ref_call_from_tree = *gccc::build_offset_ref_call_from_tree;
*decl_constant_var_p = *gccc::decl_constant_var_p;
*decl_maybe_constant_var_p = *gccc::decl_maybe_constant_var_p;
*check_default_args = *gccc::check_default_args;
*mark_used = *gccc::mark_used;
*finish_static_data_member_decl = *gccc::finish_static_data_member_decl;
*cp_build_parm_decl = *gccc::cp_build_parm_decl;
*get_guard = *gccc::get_guard;
*get_guard_cond = *gccc::get_guard_cond;
*set_guard = *gccc::set_guard;
*cxx_callgraph_analyze_expr = *gccc::cxx_callgraph_analyze_expr;
*mark_needed = *gccc::mark_needed;
*decl_needed_p = *gccc::decl_needed_p;
*note_vague_linkage_fn = *gccc::note_vague_linkage_fn;
*build_artificial_parm = *gccc::build_artificial_parm;
*possibly_inlined_p = *gccc::possibly_inlined_p;
*parm_index = *gccc::parm_index;
*init_error = *gccc::init_error;
*type_as_string = *gccc::type_as_string;
*type_as_string_translate = *gccc::type_as_string_translate;
*decl_as_string = *gccc::decl_as_string;
*decl_as_string_translate = *gccc::decl_as_string_translate;
*expr_as_string = *gccc::expr_as_string;
*lang_decl_name = *gccc::lang_decl_name;
*language_to_string = *gccc::language_to_string;
*class_key_or_enum_as_string = *gccc::class_key_or_enum_as_string;
*print_instantiation_context = *gccc::print_instantiation_context;
*maybe_warn_variadic_templates = *gccc::maybe_warn_variadic_templates;
*maybe_warn_cpp0x = *gccc::maybe_warn_cpp0x;
*pedwarn_cxx98 = *gccc::pedwarn_cxx98;
*location_of = *gccc::location_of;
*qualified_name_lookup_error = *gccc::qualified_name_lookup_error;
*init_exception_processing = *gccc::init_exception_processing;
*expand_start_catch_block = *gccc::expand_start_catch_block;
*expand_end_catch_block = *gccc::expand_end_catch_block;
*build_exc_ptr = *gccc::build_exc_ptr;
*build_throw = *gccc::build_throw;
*nothrow_libfn_p = *gccc::nothrow_libfn_p;
*check_handlers = *gccc::check_handlers;
*finish_noexcept_expr = *gccc::finish_noexcept_expr;
*perform_deferred_noexcept_checks = *gccc::perform_deferred_noexcept_checks;
*nothrow_spec_p = *gccc::nothrow_spec_p;
*type_noexcept_p = *gccc::type_noexcept_p;
*type_throw_all_p = *gccc::type_throw_all_p;
*build_noexcept_spec = *gccc::build_noexcept_spec;
*choose_personality_routine = *gccc::choose_personality_routine;
*eh_type_info = *gccc::eh_type_info;
*begin_eh_spec_block = *gccc::begin_eh_spec_block;
*finish_eh_spec_block = *gccc::finish_eh_spec_block;
*build_eh_type_type = *gccc::build_eh_type_type;
*cp_protect_cleanup_actions = *gccc::cp_protect_cleanup_actions;
*cplus_expand_constant = *gccc::cplus_expand_constant;
*mark_rvalue_use = *gccc::mark_rvalue_use;
*mark_lvalue_use = *gccc::mark_lvalue_use;
*mark_type_use = *gccc::mark_type_use;
*mark_exp_read = *gccc::mark_exp_read;
*is_friend = *gccc::is_friend;
*make_friend_class = *gccc::make_friend_class;
*add_friend = *gccc::add_friend;
*do_friend = *gccc::do_friend;
*expand_member_init = *gccc::expand_member_init;
*emit_mem_initializers = *gccc::emit_mem_initializers;
*build_aggr_init = *gccc::build_aggr_init;
*is_class_type = *gccc::is_class_type;
*get_type_value = *gccc::get_type_value;
*build_zero_init = *gccc::build_zero_init;
*build_value_init = *gccc::build_value_init;
*build_value_init_noctor = *gccc::build_value_init_noctor;
*build_offset_ref = *gccc::build_offset_ref;
*build_new = *gccc::build_new;
*get_temp_regvar = *gccc::get_temp_regvar;
*build_vec_init = *gccc::build_vec_init;
*build_delete = *gccc::build_delete;
*push_base_cleanups = *gccc::push_base_cleanups;
*build_vec_delete = *gccc::build_vec_delete;
*create_temporary_var = *gccc::create_temporary_var;
*initialize_vtbl_ptrs = *gccc::initialize_vtbl_ptrs;
*build_java_class_ref = *gccc::build_java_class_ref;
*integral_constant_value = *gccc::integral_constant_value;
*diagnose_uninitialized_cst_or_ref_member = *gccc::diagnose_uninitialized_cst_or_ref_member;
*cxx_dup_lang_specific_decl = *gccc::cxx_dup_lang_specific_decl;
*yyungetc = *gccc::yyungetc;
*unqualified_name_lookup_error = *gccc::unqualified_name_lookup_error;
*unqualified_fn_lookup_error = *gccc::unqualified_fn_lookup_error;
*build_lang_decl = *gccc::build_lang_decl;
*build_lang_decl_loc = *gccc::build_lang_decl_loc;
*retrofit_lang_decl = *gccc::retrofit_lang_decl;
*copy_decl = *gccc::copy_decl;
*copy_type = *gccc::copy_type;
*cxx_make_type = *gccc::cxx_make_type;
*make_class_type = *gccc::make_class_type;
*cxx_init = *gccc::cxx_init;
*cxx_finish = *gccc::cxx_finish;
*in_main_input_context = *gccc::in_main_input_context;
*init_method = *gccc::init_method;
*make_thunk = *gccc::make_thunk;
*finish_thunk = *gccc::finish_thunk;
*use_thunk = *gccc::use_thunk;
*trivial_fn_p = *gccc::trivial_fn_p;
*maybe_explain_implicit_delete = *gccc::maybe_explain_implicit_delete;
*synthesize_method = *gccc::synthesize_method;
*lazily_declare_fn = *gccc::lazily_declare_fn;
*skip_artificial_parms_for = *gccc::skip_artificial_parms_for;
*num_artificial_parms_for = *gccc::num_artificial_parms_for;
*make_alias_for = *gccc::make_alias_for;
*get_copy_ctor = *gccc::get_copy_ctor;
*get_copy_assign = *gccc::get_copy_assign;
*get_default_ctor = *gccc::get_default_ctor;
*get_dtor = *gccc::get_dtor;
*locate_ctor = *gccc::locate_ctor;
*maybe_clone_body = *gccc::maybe_clone_body;
*check_template_shadow = *gccc::check_template_shadow;
*get_innermost_template_args = *gccc::get_innermost_template_args;
*maybe_begin_member_template_processing = *gccc::maybe_begin_member_template_processing;
*maybe_end_member_template_processing = *gccc::maybe_end_member_template_processing;
*finish_member_template_decl = *gccc::finish_member_template_decl;
*begin_template_parm_list = *gccc::begin_template_parm_list;
*begin_specialization = *gccc::begin_specialization;
*reset_specialization = *gccc::reset_specialization;
*end_specialization = *gccc::end_specialization;
*begin_explicit_instantiation = *gccc::begin_explicit_instantiation;
*end_explicit_instantiation = *gccc::end_explicit_instantiation;
*check_explicit_specialization = *gccc::check_explicit_specialization;
*make_auto = *gccc::make_auto;
*do_auto_deduction = *gccc::do_auto_deduction;
*type_uses_auto = *gccc::type_uses_auto;
*append_type_to_template_for_access_check = *gccc::append_type_to_template_for_access_check;
*splice_late_return_type = *gccc::splice_late_return_type;
*is_auto = *gccc::is_auto;
*process_template_parm = *gccc::process_template_parm;
*end_template_parm_list = *gccc::end_template_parm_list;
*fixup_template_parms = *gccc::fixup_template_parms;
*end_template_decl = *gccc::end_template_decl;
*maybe_update_decl_type = *gccc::maybe_update_decl_type;
*check_default_tmpl_args = *gccc::check_default_tmpl_args;
*push_template_decl = *gccc::push_template_decl;
*push_template_decl_real = *gccc::push_template_decl_real;
*redeclare_class_template = *gccc::redeclare_class_template;
*lookup_template_class = *gccc::lookup_template_class;
*lookup_template_function = *gccc::lookup_template_function;
*uses_template_parms = *gccc::uses_template_parms;
*uses_template_parms_level = *gccc::uses_template_parms_level;
*instantiate_class_template = *gccc::instantiate_class_template;
*instantiate_template = *gccc::instantiate_template;
*fn_type_unification = *gccc::fn_type_unification;
*mark_decl_instantiated = *gccc::mark_decl_instantiated;
*more_specialized_fn = *gccc::more_specialized_fn;
*do_decl_instantiation = *gccc::do_decl_instantiation;
*do_type_instantiation = *gccc::do_type_instantiation;
*always_instantiate_p = *gccc::always_instantiate_p;
*instantiate_decl = *gccc::instantiate_decl;
*comp_template_parms = *gccc::comp_template_parms;
*uses_parameter_packs = *gccc::uses_parameter_packs;
*template_parameter_pack_p = *gccc::template_parameter_pack_p;
*function_parameter_pack_p = *gccc::function_parameter_pack_p;
*function_parameter_expanded_from_pack_p = *gccc::function_parameter_expanded_from_pack_p;
*make_pack_expansion = *gccc::make_pack_expansion;
*check_for_bare_parameter_packs = *gccc::check_for_bare_parameter_packs;
*build_template_info = *gccc::build_template_info;
*get_template_info = *gccc::get_template_info;
*get_types_needing_access_check = *gccc::get_types_needing_access_check;
*template_class_depth = *gccc::template_class_depth;
*is_specialization_of = *gccc::is_specialization_of;
*is_specialization_of_friend = *gccc::is_specialization_of_friend;
*get_pattern_parm = *gccc::get_pattern_parm;
*comp_template_args = *gccc::comp_template_args;
*maybe_process_partial_specialization = *gccc::maybe_process_partial_specialization;
*most_specialized_instantiation = *gccc::most_specialized_instantiation;
*print_candidates = *gccc::print_candidates;
*instantiate_pending_templates = *gccc::instantiate_pending_templates;
*tsubst_default_argument = *gccc::tsubst_default_argument;
*tsubst = *gccc::tsubst;
*tsubst_copy_and_build = *gccc::tsubst_copy_and_build;
*most_general_template = *gccc::most_general_template;
*get_mostly_instantiated_function_type = *gccc::get_mostly_instantiated_function_type;
*problematic_instantiation_changed = *gccc::problematic_instantiation_changed;
*record_last_problematic_instantiation = *gccc::record_last_problematic_instantiation;
*current_instantiation = *gccc::current_instantiation;
*maybe_get_template_decl_from_type_decl = *gccc::maybe_get_template_decl_from_type_decl;
*dependent_type_p = *gccc::dependent_type_p;
*dependent_scope_p = *gccc::dependent_scope_p;
*any_dependent_template_arguments_p = *gccc::any_dependent_template_arguments_p;
*dependent_template_p = *gccc::dependent_template_p;
*dependent_template_id_p = *gccc::dependent_template_id_p;
*type_dependent_expression_p = *gccc::type_dependent_expression_p;
*any_type_dependent_arguments_p = *gccc::any_type_dependent_arguments_p;
*type_dependent_expression_p_push = *gccc::type_dependent_expression_p_push;
*value_dependent_expression_p = *gccc::value_dependent_expression_p;
*any_value_dependent_elements_p = *gccc::any_value_dependent_elements_p;
*dependent_omp_for_p = *gccc::dependent_omp_for_p;
*resolve_typename_type = *gccc::resolve_typename_type;
*template_for_substitution = *gccc::template_for_substitution;
*build_non_dependent_expr = *gccc::build_non_dependent_expr;
*make_args_non_dependent = *gccc::make_args_non_dependent;
*reregister_specialization = *gccc::reregister_specialization;
*fold_non_dependent_expr = *gccc::fold_non_dependent_expr;
*explicit_class_specialization_p = *gccc::explicit_class_specialization_p;
*push_tinst_level = *gccc::push_tinst_level;
*pop_tinst_level = *gccc::pop_tinst_level;
*outermost_tinst_level = *gccc::outermost_tinst_level;
*parameter_of_template_p = *gccc::parameter_of_template_p;
*init_template_processing = *gccc::init_template_processing;
*print_template_statistics = *gccc::print_template_statistics;
*template_template_parameter_p = *gccc::template_template_parameter_p;
*primary_template_instantiation_p = *gccc::primary_template_instantiation_p;
*get_primary_template_innermost_parameters = *gccc::get_primary_template_innermost_parameters;
*get_template_parms_at_level = *gccc::get_template_parms_at_level;
*get_template_innermost_arguments = *gccc::get_template_innermost_arguments;
*get_template_argument_pack_elems = *gccc::get_template_argument_pack_elems;
*get_function_template_decl = *gccc::get_function_template_decl;
*resolve_nondeduced_context = *gccc::resolve_nondeduced_context;
*iterative_hash_template_arg = *gccc::iterative_hash_template_arg;
*init_repo = *gccc::init_repo;
*repo_emit_p = *gccc::repo_emit_p;
*repo_export_class_p = *gccc::repo_export_class_p;
*finish_repo = *gccc::finish_repo;
*init_rtti_processing = *gccc::init_rtti_processing;
*build_typeid = *gccc::build_typeid;
*get_tinfo_decl = *gccc::get_tinfo_decl;
*get_typeid = *gccc::get_typeid;
*build_headof = *gccc::build_headof;
*build_dynamic_cast = *gccc::build_dynamic_cast;
*emit_support_tinfos = *gccc::emit_support_tinfos;
*emit_tinfo_decl = *gccc::emit_tinfo_decl;
*accessible_base_p = *gccc::accessible_base_p;
*lookup_base = *gccc::lookup_base;
*dcast_base_hint = *gccc::dcast_base_hint;
*accessible_p = *gccc::accessible_p;
*lookup_field_1 = *gccc::lookup_field_1;
*lookup_field = *gccc::lookup_field;
*lookup_fnfields_1 = *gccc::lookup_fnfields_1;
*lookup_fnfields_slot = *gccc::lookup_fnfields_slot;
*class_method_index_for_fn = *gccc::class_method_index_for_fn;
*lookup_fnfields = *gccc::lookup_fnfields;
*lookup_member = *gccc::lookup_member;
*look_for_overrides = *gccc::look_for_overrides;
*get_pure_virtuals = *gccc::get_pure_virtuals;
*maybe_suppress_debug_info = *gccc::maybe_suppress_debug_info;
*note_debug_info_needed = *gccc::note_debug_info_needed;
*print_search_statistics = *gccc::print_search_statistics;
*reinit_search_statistics = *gccc::reinit_search_statistics;
*current_scope = *gccc::current_scope;
*at_function_scope_p = *gccc::at_function_scope_p;
*at_class_scope_p = *gccc::at_class_scope_p;
*at_namespace_scope_p = *gccc::at_namespace_scope_p;
*context_for_name_lookup = *gccc::context_for_name_lookup;
*lookup_conversions = *gccc::lookup_conversions;
*binfo_from_vbase = *gccc::binfo_from_vbase;
*binfo_for_vbase = *gccc::binfo_for_vbase;
*look_for_overrides_here = *gccc::look_for_overrides_here;
*dfs_walk_all = *gccc::dfs_walk_all;
*dfs_walk_once = *gccc::dfs_walk_once;
*binfo_via_virtual = *gccc::binfo_via_virtual;
*build_baselink = *gccc::build_baselink;
*adjust_result_of_qualified_name_lookup = *gccc::adjust_result_of_qualified_name_lookup;
*copied_binfo = *gccc::copied_binfo;
*original_binfo = *gccc::original_binfo;
*shared_member_p = *gccc::shared_member_p;
*VEC_deferred_access_check_base_length = *gccc::VEC_deferred_access_check_base_length;
*VEC_deferred_access_check_base_last = *gccc::VEC_deferred_access_check_base_last;
*VEC_deferred_access_check_base_index = *gccc::VEC_deferred_access_check_base_index;
*VEC_deferred_access_check_base_iterate = *gccc::VEC_deferred_access_check_base_iterate;
*VEC_deferred_access_check_base_embedded_size = *gccc::VEC_deferred_access_check_base_embedded_size;
*VEC_deferred_access_check_base_embedded_init = *gccc::VEC_deferred_access_check_base_embedded_init;
*VEC_deferred_access_check_base_space = *gccc::VEC_deferred_access_check_base_space;
*VEC_deferred_access_check_base_splice = *gccc::VEC_deferred_access_check_base_splice;
*VEC_deferred_access_check_base_quick_push = *gccc::VEC_deferred_access_check_base_quick_push;
*VEC_deferred_access_check_base_pop = *gccc::VEC_deferred_access_check_base_pop;
*VEC_deferred_access_check_base_truncate = *gccc::VEC_deferred_access_check_base_truncate;
*VEC_deferred_access_check_base_replace = *gccc::VEC_deferred_access_check_base_replace;
*VEC_deferred_access_check_base_quick_insert = *gccc::VEC_deferred_access_check_base_quick_insert;
*VEC_deferred_access_check_base_ordered_remove = *gccc::VEC_deferred_access_check_base_ordered_remove;
*VEC_deferred_access_check_base_unordered_remove = *gccc::VEC_deferred_access_check_base_unordered_remove;
*VEC_deferred_access_check_base_block_remove = *gccc::VEC_deferred_access_check_base_block_remove;
*VEC_deferred_access_check_base_address = *gccc::VEC_deferred_access_check_base_address;
*VEC_deferred_access_check_base_lower_bound = *gccc::VEC_deferred_access_check_base_lower_bound;
*VEC_deferred_access_check_gc_alloc = *gccc::VEC_deferred_access_check_gc_alloc;
*VEC_deferred_access_check_gc_copy = *gccc::VEC_deferred_access_check_gc_copy;
*VEC_deferred_access_check_gc_free = *gccc::VEC_deferred_access_check_gc_free;
*VEC_deferred_access_check_gc_reserve = *gccc::VEC_deferred_access_check_gc_reserve;
*VEC_deferred_access_check_gc_reserve_exact = *gccc::VEC_deferred_access_check_gc_reserve_exact;
*VEC_deferred_access_check_gc_safe_grow = *gccc::VEC_deferred_access_check_gc_safe_grow;
*VEC_deferred_access_check_gc_safe_grow_cleared = *gccc::VEC_deferred_access_check_gc_safe_grow_cleared;
*VEC_deferred_access_check_gc_safe_splice = *gccc::VEC_deferred_access_check_gc_safe_splice;
*VEC_deferred_access_check_gc_safe_push = *gccc::VEC_deferred_access_check_gc_safe_push;
*VEC_deferred_access_check_gc_safe_insert = *gccc::VEC_deferred_access_check_gc_safe_insert;
*push_deferring_access_checks = *gccc::push_deferring_access_checks;
*resume_deferring_access_checks = *gccc::resume_deferring_access_checks;
*stop_deferring_access_checks = *gccc::stop_deferring_access_checks;
*pop_deferring_access_checks = *gccc::pop_deferring_access_checks;
*get_deferred_access_checks = *gccc::get_deferred_access_checks;
*pop_to_parent_deferring_access_checks = *gccc::pop_to_parent_deferring_access_checks;
*perform_access_checks = *gccc::perform_access_checks;
*perform_deferred_access_checks = *gccc::perform_deferred_access_checks;
*perform_or_defer_access_check = *gccc::perform_or_defer_access_check;
*speculative_access_check = *gccc::speculative_access_check;
*stmts_are_full_exprs_p = *gccc::stmts_are_full_exprs_p;
*init_cp_semantics = *gccc::init_cp_semantics;
*do_poplevel = *gccc::do_poplevel;
*add_decl_expr = *gccc::add_decl_expr;
*finish_expr_stmt = *gccc::finish_expr_stmt;
*begin_if_stmt = *gccc::begin_if_stmt;
*finish_if_stmt_cond = *gccc::finish_if_stmt_cond;
*finish_then_clause = *gccc::finish_then_clause;
*begin_else_clause = *gccc::begin_else_clause;
*finish_else_clause = *gccc::finish_else_clause;
*finish_if_stmt = *gccc::finish_if_stmt;
*begin_while_stmt = *gccc::begin_while_stmt;
*finish_while_stmt_cond = *gccc::finish_while_stmt_cond;
*finish_while_stmt = *gccc::finish_while_stmt;
*begin_do_stmt = *gccc::begin_do_stmt;
*finish_do_body = *gccc::finish_do_body;
*finish_do_stmt = *gccc::finish_do_stmt;
*finish_return_stmt = *gccc::finish_return_stmt;
*begin_for_scope = *gccc::begin_for_scope;
*begin_for_stmt = *gccc::begin_for_stmt;
*finish_for_init_stmt = *gccc::finish_for_init_stmt;
*finish_for_cond = *gccc::finish_for_cond;
*finish_for_expr = *gccc::finish_for_expr;
*finish_for_stmt = *gccc::finish_for_stmt;
*begin_range_for_stmt = *gccc::begin_range_for_stmt;
*finish_range_for_decl = *gccc::finish_range_for_decl;
*finish_range_for_stmt = *gccc::finish_range_for_stmt;
*finish_break_stmt = *gccc::finish_break_stmt;
*finish_continue_stmt = *gccc::finish_continue_stmt;
*begin_switch_stmt = *gccc::begin_switch_stmt;
*finish_switch_cond = *gccc::finish_switch_cond;
*finish_switch_stmt = *gccc::finish_switch_stmt;
*finish_goto_stmt = *gccc::finish_goto_stmt;
*begin_try_block = *gccc::begin_try_block;
*finish_try_block = *gccc::finish_try_block;
*finish_handler_sequence = *gccc::finish_handler_sequence;
*begin_function_try_block = *gccc::begin_function_try_block;
*finish_function_try_block = *gccc::finish_function_try_block;
*finish_function_handler_sequence = *gccc::finish_function_handler_sequence;
*finish_cleanup_try_block = *gccc::finish_cleanup_try_block;
*begin_handler = *gccc::begin_handler;
*finish_handler_parms = *gccc::finish_handler_parms;
*finish_handler = *gccc::finish_handler;
*finish_cleanup = *gccc::finish_cleanup;
*literal_type_p = *gccc::literal_type_p;
*validate_constexpr_fundecl = *gccc::validate_constexpr_fundecl;
*register_constexpr_fundef = *gccc::register_constexpr_fundef;
*check_constexpr_ctor_body = *gccc::check_constexpr_ctor_body;
*ensure_literal_type_for_constexpr_object = *gccc::ensure_literal_type_for_constexpr_object;
*potential_constant_expression = *gccc::potential_constant_expression;
*potential_rvalue_constant_expression = *gccc::potential_rvalue_constant_expression;
*require_potential_constant_expression = *gccc::require_potential_constant_expression;
*require_potential_rvalue_constant_expression = *gccc::require_potential_rvalue_constant_expression;
*cxx_constant_value = *gccc::cxx_constant_value;
*maybe_constant_value = *gccc::maybe_constant_value;
*maybe_constant_init = *gccc::maybe_constant_init;
*is_sub_constant_expr = *gccc::is_sub_constant_expr;
*reduced_constant_expression_p = *gccc::reduced_constant_expression_p;
*cx_error_context = *gccc::cx_error_context;
*begin_compound_stmt = *gccc::begin_compound_stmt;
*finish_compound_stmt = *gccc::finish_compound_stmt;
*finish_asm_stmt = *gccc::finish_asm_stmt;
*finish_label_stmt = *gccc::finish_label_stmt;
*finish_label_decl = *gccc::finish_label_decl;
*finish_parenthesized_expr = *gccc::finish_parenthesized_expr;
*finish_non_static_data_member = *gccc::finish_non_static_data_member;
*begin_stmt_expr = *gccc::begin_stmt_expr;
*finish_stmt_expr_expr = *gccc::finish_stmt_expr_expr;
*finish_stmt_expr = *gccc::finish_stmt_expr;
*stmt_expr_value_expr = *gccc::stmt_expr_value_expr;
*empty_expr_stmt_p = *gccc::empty_expr_stmt_p;
*perform_koenig_lookup = *gccc::perform_koenig_lookup;
*finish_call_expr = *gccc::finish_call_expr;
*finish_increment_expr = *gccc::finish_increment_expr;
*finish_this_expr = *gccc::finish_this_expr;
*finish_pseudo_destructor_expr = *gccc::finish_pseudo_destructor_expr;
*finish_unary_op_expr = *gccc::finish_unary_op_expr;
*finish_compound_literal = *gccc::finish_compound_literal;
*finish_fname = *gccc::finish_fname;
*finish_translation_unit = *gccc::finish_translation_unit;
*finish_template_type_parm = *gccc::finish_template_type_parm;
*finish_template_template_parm = *gccc::finish_template_template_parm;
*begin_class_definition = *gccc::begin_class_definition;
*finish_template_decl = *gccc::finish_template_decl;
*finish_template_type = *gccc::finish_template_type;
*finish_base_specifier = *gccc::finish_base_specifier;
*finish_member_declaration = *gccc::finish_member_declaration;
*finish_id_expression = *gccc::finish_id_expression;
*finish_typeof = *gccc::finish_typeof;
*finish_offsetof = *gccc::finish_offsetof;
*finish_decl_cleanup = *gccc::finish_decl_cleanup;
*finish_eh_cleanup = *gccc::finish_eh_cleanup;
*emit_associated_thunks = *gccc::emit_associated_thunks;
*finish_mem_initializers = *gccc::finish_mem_initializers;
*check_template_template_default_arg = *gccc::check_template_template_default_arg;
*expand_or_defer_fn_1 = *gccc::expand_or_defer_fn_1;
*expand_or_defer_fn = *gccc::expand_or_defer_fn;
*add_typedef_to_current_template_for_access_check = *gccc::add_typedef_to_current_template_for_access_check;
*check_accessibility_of_qualified_id = *gccc::check_accessibility_of_qualified_id;
*finish_qualified_id_expr = *gccc::finish_qualified_id_expr;
*simplify_aggr_init_expr = *gccc::simplify_aggr_init_expr;
*finalize_nrv = *gccc::finalize_nrv;
*note_decl_for_pch = *gccc::note_decl_for_pch;
*finish_omp_clauses = *gccc::finish_omp_clauses;
*finish_omp_threadprivate = *gccc::finish_omp_threadprivate;
*begin_omp_structured_block = *gccc::begin_omp_structured_block;
*finish_omp_structured_block = *gccc::finish_omp_structured_block;
*begin_omp_parallel = *gccc::begin_omp_parallel;
*finish_omp_parallel = *gccc::finish_omp_parallel;
*begin_omp_task = *gccc::begin_omp_task;
*finish_omp_task = *gccc::finish_omp_task;
*finish_omp_for = *gccc::finish_omp_for;
*finish_omp_atomic = *gccc::finish_omp_atomic;
*finish_omp_barrier = *gccc::finish_omp_barrier;
*finish_omp_flush = *gccc::finish_omp_flush;
*finish_omp_taskwait = *gccc::finish_omp_taskwait;
*cxx_omp_create_clause_info = *gccc::cxx_omp_create_clause_info;
*baselink_for_fns = *gccc::baselink_for_fns;
*finish_static_assert = *gccc::finish_static_assert;
*describable_type = *gccc::describable_type;
*finish_decltype_type = *gccc::finish_decltype_type;
*finish_trait_expr = *gccc::finish_trait_expr;
*build_lambda_expr = *gccc::build_lambda_expr;
*build_lambda_object = *gccc::build_lambda_object;
*begin_lambda_type = *gccc::begin_lambda_type;
*lambda_capture_field_type = *gccc::lambda_capture_field_type;
*lambda_return_type = *gccc::lambda_return_type;
*lambda_function = *gccc::lambda_function;
*apply_lambda_return_type = *gccc::apply_lambda_return_type;
*add_capture = *gccc::add_capture;
*add_default_capture = *gccc::add_default_capture;
*register_capture_members = *gccc::register_capture_members;
*lambda_expr_this_capture = *gccc::lambda_expr_this_capture;
*nonlambda_method_basetype = *gccc::nonlambda_method_basetype;
*maybe_add_lambda_conv_op = *gccc::maybe_add_lambda_conv_op;
*cp_free_lang_data = *gccc::cp_free_lang_data;
*force_target_expr = *gccc::force_target_expr;
*build_target_expr_with_type = *gccc::build_target_expr_with_type;
*lang_check_failed = *gccc::lang_check_failed;
*stabilize_expr = *gccc::stabilize_expr;
*stabilize_call = *gccc::stabilize_call;
*stabilize_aggr_init = *gccc::stabilize_aggr_init;
*stabilize_init = *gccc::stabilize_init;
*add_stmt_to_compound = *gccc::add_stmt_to_compound;
*init_tree = *gccc::init_tree;
*pod_type_p = *gccc::pod_type_p;
*layout_pod_type_p = *gccc::layout_pod_type_p;
*std_layout_type_p = *gccc::std_layout_type_p;
*trivial_type_p = *gccc::trivial_type_p;
*trivially_copyable_p = *gccc::trivially_copyable_p;
*type_has_nontrivial_default_init = *gccc::type_has_nontrivial_default_init;
*type_has_nontrivial_copy_init = *gccc::type_has_nontrivial_copy_init;
*class_tmpl_impl_spec_p = *gccc::class_tmpl_impl_spec_p;
*zero_init_p = *gccc::zero_init_p;
*strip_typedefs = *gccc::strip_typedefs;
*copy_binfo = *gccc::copy_binfo;
*member_p = *gccc::member_p;
*real_lvalue_p = *gccc::real_lvalue_p;
*lvalue_kind = *gccc::lvalue_kind;
*lvalue_or_rvalue_with_address_p = *gccc::lvalue_or_rvalue_with_address_p;
*builtin_valid_in_constant_expr_p = *gccc::builtin_valid_in_constant_expr_p;
*build_min = *gccc::build_min;
*build_min_nt = *gccc::build_min_nt;
*build_min_non_dep = *gccc::build_min_non_dep;
*build_min_non_dep_call_vec = *gccc::build_min_non_dep_call_vec;
*build_cplus_new = *gccc::build_cplus_new;
*build_aggr_init_expr = *gccc::build_aggr_init_expr;
*get_target_expr = *gccc::get_target_expr;
*build_cplus_array_type = *gccc::build_cplus_array_type;
*build_array_of_n_type = *gccc::build_array_of_n_type;
*build_array_copy = *gccc::build_array_copy;
*build_vec_init_expr = *gccc::build_vec_init_expr;
*diagnose_non_constexpr_vec_init = *gccc::diagnose_non_constexpr_vec_init;
*hash_tree_cons = *gccc::hash_tree_cons;
*hash_tree_chain = *gccc::hash_tree_chain;
*build_qualified_name = *gccc::build_qualified_name;
*is_overloaded_fn = *gccc::is_overloaded_fn;
*get_fns = *gccc::get_fns;
*get_first_fn = *gccc::get_first_fn;
*ovl_cons = *gccc::ovl_cons;
*build_overload = *gccc::build_overload;
*non_static_member_function_p = *gccc::non_static_member_function_p;
*cxx_printable_name = *gccc::cxx_printable_name;
*cxx_printable_name_translate = *gccc::cxx_printable_name_translate;
*build_exception_variant = *gccc::build_exception_variant;
*bind_template_template_parm = *gccc::bind_template_template_parm;
*array_type_nelts_total = *gccc::array_type_nelts_total;
*array_type_nelts_top = *gccc::array_type_nelts_top;
*break_out_target_exprs = *gccc::break_out_target_exprs;
*get_type_decl = *gccc::get_type_decl;
*decl_namespace_context = *gccc::decl_namespace_context;
*decl_anon_ns_mem_p = *gccc::decl_anon_ns_mem_p;
*lvalue_type = *gccc::lvalue_type;
*error_type = *gccc::error_type;
*varargs_function_p = *gccc::varargs_function_p;
*really_overloaded_fn = *gccc::really_overloaded_fn;
*cp_tree_equal = *gccc::cp_tree_equal;
*no_linkage_check = *gccc::no_linkage_check;
*debug_binfo = *gccc::debug_binfo;
*build_dummy_object = *gccc::build_dummy_object;
*maybe_dummy_object = *gccc::maybe_dummy_object;
*is_dummy_object = *gccc::is_dummy_object;
*make_ptrmem_cst = *gccc::make_ptrmem_cst;
*cp_build_type_attribute_variant = *gccc::cp_build_type_attribute_variant;
*cp_build_reference_type = *gccc::cp_build_reference_type;
*move = *gccc::move;
*cp_build_qualified_type_real = *gccc::cp_build_qualified_type_real;
*cv_qualified_p = *gccc::cv_qualified_p;
*cv_unqualified = *gccc::cv_unqualified;
*special_function_p = *gccc::special_function_p;
*count_trees = *gccc::count_trees;
*char_type_p = *gccc::char_type_p;
*verify_stmt_tree = *gccc::verify_stmt_tree;
*decl_linkage = *gccc::decl_linkage;
*decl_storage_duration = *gccc::decl_storage_duration;
*cp_walk_subtrees = *gccc::cp_walk_subtrees;
*fold_if_not_in_template = *gccc::fold_if_not_in_template;
*rvalue = *gccc::rvalue;
*convert_bitfield_to_declared_type = *gccc::convert_bitfield_to_declared_type;
*cp_save_expr = *gccc::cp_save_expr;
*cast_valid_in_integral_constant_expression_p = *gccc::cast_valid_in_integral_constant_expression_p;
*cxx_type_hash_eq = *gccc::cxx_type_hash_eq;
*cxx_print_statistics = *gccc::cxx_print_statistics;
*cxx_print_xnode = *gccc::cxx_print_xnode;
*cxx_print_decl = *gccc::cxx_print_decl;
*cxx_print_type = *gccc::cxx_print_type;
*cxx_print_identifier = *gccc::cxx_print_identifier;
*cxx_print_error_function = *gccc::cxx_print_error_function;
*cxx_mark_addressable = *gccc::cxx_mark_addressable;
*string_conv_p = *gccc::string_conv_p;
*cp_truthvalue_conversion = *gccc::cp_truthvalue_conversion;
*condition_conversion = *gccc::condition_conversion;
*require_complete_type = *gccc::require_complete_type;
*require_complete_type_sfinae = *gccc::require_complete_type_sfinae;
*complete_type = *gccc::complete_type;
*complete_type_or_else = *gccc::complete_type_or_else;
*complete_type_or_maybe_complain = *gccc::complete_type_or_maybe_complain;
*type_unknown_p = *gccc::type_unknown_p;
*comp_except_specs = *gccc::comp_except_specs;
*comptypes = *gccc::comptypes;
*same_type_ignoring_top_level_qualifiers_p = *gccc::same_type_ignoring_top_level_qualifiers_p;
*compparms = *gccc::compparms;
*comp_cv_qualification = *gccc::comp_cv_qualification;
*comp_cv_qual_signature = *gccc::comp_cv_qual_signature;
*cxx_sizeof_or_alignof_expr = *gccc::cxx_sizeof_or_alignof_expr;
*cxx_sizeof_or_alignof_type = *gccc::cxx_sizeof_or_alignof_type;
*cxx_sizeof_nowarn = *gccc::cxx_sizeof_nowarn;
*is_bitfield_expr_with_lowered_type = *gccc::is_bitfield_expr_with_lowered_type;
*unlowered_expr_type = *gccc::unlowered_expr_type;
*decay_conversion = *gccc::decay_conversion;
*build_class_member_access_expr = *gccc::build_class_member_access_expr;
*finish_class_member_access_expr = *gccc::finish_class_member_access_expr;
*build_x_indirect_ref = *gccc::build_x_indirect_ref;
*cp_build_indirect_ref = *gccc::cp_build_indirect_ref;
*build_array_ref = *gccc::build_array_ref;
*cp_build_array_ref = *gccc::cp_build_array_ref;
*get_member_function_from_ptrfunc = *gccc::get_member_function_from_ptrfunc;
*cp_build_function_call = *gccc::cp_build_function_call;
*cp_build_function_call_nary = *gccc::cp_build_function_call_nary;
*cp_build_function_call_vec = *gccc::cp_build_function_call_vec;
*build_x_binary_op = *gccc::build_x_binary_op;
*build_x_array_ref = *gccc::build_x_array_ref;
*build_x_unary_op = *gccc::build_x_unary_op;
*cp_build_addr_expr = *gccc::cp_build_addr_expr;
*cp_build_addr_expr_strict = *gccc::cp_build_addr_expr_strict;
*cp_build_unary_op = *gccc::cp_build_unary_op;
*unary_complex_lvalue = *gccc::unary_complex_lvalue;
*build_x_conditional_expr = *gccc::build_x_conditional_expr;
*build_x_compound_expr_from_list = *gccc::build_x_compound_expr_from_list;
*build_x_compound_expr_from_vec = *gccc::build_x_compound_expr_from_vec;
*build_x_compound_expr = *gccc::build_x_compound_expr;
*build_compound_expr = *gccc::build_compound_expr;
*cp_build_compound_expr = *gccc::cp_build_compound_expr;
*build_static_cast = *gccc::build_static_cast;
*build_reinterpret_cast = *gccc::build_reinterpret_cast;
*build_const_cast = *gccc::build_const_cast;
*build_c_cast = *gccc::build_c_cast;
*cp_build_c_cast = *gccc::cp_build_c_cast;
*build_x_modify_expr = *gccc::build_x_modify_expr;
*cp_build_modify_expr = *gccc::cp_build_modify_expr;
*convert_for_initialization = *gccc::convert_for_initialization;
*comp_ptr_ttypes = *gccc::comp_ptr_ttypes;
*comp_ptr_ttypes_const = *gccc::comp_ptr_ttypes_const;
*error_type_p = *gccc::error_type_p;
*ptr_reasonably_similar = *gccc::ptr_reasonably_similar;
*build_ptrmemfunc = *gccc::build_ptrmemfunc;
*cp_type_quals = *gccc::cp_type_quals;
*type_memfn_quals = *gccc::type_memfn_quals;
*apply_memfn_quals = *gccc::apply_memfn_quals;
*cp_has_mutable_p = *gccc::cp_has_mutable_p;
*at_least_as_qualified_p = *gccc::at_least_as_qualified_p;
*cp_apply_type_quals_to_decl = *gccc::cp_apply_type_quals_to_decl;
*build_ptrmemfunc1 = *gccc::build_ptrmemfunc1;
*expand_ptrmemfunc_cst = *gccc::expand_ptrmemfunc_cst;
*type_after_usual_arithmetic_conversions = *gccc::type_after_usual_arithmetic_conversions;
*common_pointer_type = *gccc::common_pointer_type;
*composite_pointer_type = *gccc::composite_pointer_type;
*merge_types = *gccc::merge_types;
*strip_array_domain = *gccc::strip_array_domain;
*check_return_expr = *gccc::check_return_expr;
*cp_build_binary_op = *gccc::cp_build_binary_op;
*build_ptrmemfunc_access_expr = *gccc::build_ptrmemfunc_access_expr;
*build_address = *gccc::build_address;
*build_typed_address = *gccc::build_typed_address;
*build_nop = *gccc::build_nop;
*non_reference = *gccc::non_reference;
*lookup_anon_field = *gccc::lookup_anon_field;
*invalid_nonstatic_memfn_p = *gccc::invalid_nonstatic_memfn_p;
*convert_member_func_to_ptr = *gccc::convert_member_func_to_ptr;
*convert_ptrmem = *gccc::convert_ptrmem;
*lvalue_or_else = *gccc::lvalue_or_else;
*check_template_keyword = *gccc::check_template_keyword;
*require_complete_eh_spec_types = *gccc::require_complete_eh_spec_types;
*cxx_incomplete_type_diagnostic = *gccc::cxx_incomplete_type_diagnostic;
*cxx_incomplete_type_error = *gccc::cxx_incomplete_type_error;
*error_not_base_type = *gccc::error_not_base_type;
*binfo_or_else = *gccc::binfo_or_else;
*cxx_readonly_error = *gccc::cxx_readonly_error;
*complete_type_check_abstract = *gccc::complete_type_check_abstract;
*abstract_virtuals_error = *gccc::abstract_virtuals_error;
*store_init_value = *gccc::store_init_value;
*check_narrowing = *gccc::check_narrowing;
*digest_init = *gccc::digest_init;
*digest_init_flags = *gccc::digest_init_flags;
*build_scoped_ref = *gccc::build_scoped_ref;
*build_x_arrow = *gccc::build_x_arrow;
*build_m_component_ref = *gccc::build_m_component_ref;
*build_functional_cast = *gccc::build_functional_cast;
*add_exception_specifier = *gccc::add_exception_specifier;
*merge_exception_specifiers = *gccc::merge_exception_specifiers;
*init_mangle = *gccc::init_mangle;
*mangle_decl = *gccc::mangle_decl;
*mangle_type_string = *gccc::mangle_type_string;
*mangle_typeinfo_for_type = *gccc::mangle_typeinfo_for_type;
*mangle_typeinfo_string_for_type = *gccc::mangle_typeinfo_string_for_type;
*mangle_vtbl_for_type = *gccc::mangle_vtbl_for_type;
*mangle_vtt_for_type = *gccc::mangle_vtt_for_type;
*mangle_ctor_vtbl_for_type = *gccc::mangle_ctor_vtbl_for_type;
*mangle_thunk = *gccc::mangle_thunk;
*mangle_conv_op_name_for_type = *gccc::mangle_conv_op_name_for_type;
*mangle_guard_variable = *gccc::mangle_guard_variable;
*mangle_ref_init_variable = *gccc::mangle_ref_init_variable;
*cp_dump_tree = *gccc::cp_dump_tree;
*cxx_get_alias_set = *gccc::cxx_get_alias_set;
*cxx_warn_unused_global_decl = *gccc::cxx_warn_unused_global_decl;
*cp_tree_size = *gccc::cp_tree_size;
*cp_var_mod_type_p = *gccc::cp_var_mod_type_p;
*cxx_initialize_diagnostics = *gccc::cxx_initialize_diagnostics;
*cxx_types_compatible_p = *gccc::cxx_types_compatible_p;
*init_shadowed_var_for_decl = *gccc::init_shadowed_var_for_decl;
*cp_gimplify_expr = *gccc::cp_gimplify_expr;
*cp_genericize = *gccc::cp_genericize;
*cxx_omp_predetermined_sharing = *gccc::cxx_omp_predetermined_sharing;
*cxx_omp_clause_default_ctor = *gccc::cxx_omp_clause_default_ctor;
*cxx_omp_clause_copy_ctor = *gccc::cxx_omp_clause_copy_ctor;
*cxx_omp_clause_assign_op = *gccc::cxx_omp_clause_assign_op;
*cxx_omp_clause_dtor = *gccc::cxx_omp_clause_dtor;
*cxx_omp_finish_clause = *gccc::cxx_omp_finish_clause;
*cxx_omp_privatize_by_reference = *gccc::cxx_omp_privatize_by_reference;
*suggest_alternatives_for = *gccc::suggest_alternatives_for;
*generic_callback = *gccc::generic_callback;
*predict_insn_def = *gccc::predict_insn_def;
*counts_to_freqs = *gccc::counts_to_freqs;
*estimate_bb_frequencies = *gccc::estimate_bb_frequencies;
*predictor_name = *gccc::predictor_name;
*build_predict_expr = *gccc::build_predict_expr;
*tree_estimate_probability = *gccc::tree_estimate_probability;
*compute_function_frequency = *gccc::compute_function_frequency;
*rebuild_frequencies = *gccc::rebuild_frequencies;
*VEC_edge_must_be_pointer_type = *gccc::VEC_edge_must_be_pointer_type;
*VEC_edge_base_length = *gccc::VEC_edge_base_length;
*VEC_edge_base_last = *gccc::VEC_edge_base_last;
*VEC_edge_base_index = *gccc::VEC_edge_base_index;
*VEC_edge_base_iterate = *gccc::VEC_edge_base_iterate;
*VEC_edge_base_embedded_size = *gccc::VEC_edge_base_embedded_size;
*VEC_edge_base_embedded_init = *gccc::VEC_edge_base_embedded_init;
*VEC_edge_base_space = *gccc::VEC_edge_base_space;
*VEC_edge_base_splice = *gccc::VEC_edge_base_splice;
*VEC_edge_base_quick_push = *gccc::VEC_edge_base_quick_push;
*VEC_edge_base_pop = *gccc::VEC_edge_base_pop;
*VEC_edge_base_truncate = *gccc::VEC_edge_base_truncate;
*VEC_edge_base_replace = *gccc::VEC_edge_base_replace;
*VEC_edge_base_quick_insert = *gccc::VEC_edge_base_quick_insert;
*VEC_edge_base_ordered_remove = *gccc::VEC_edge_base_ordered_remove;
*VEC_edge_base_unordered_remove = *gccc::VEC_edge_base_unordered_remove;
*VEC_edge_base_block_remove = *gccc::VEC_edge_base_block_remove;
*VEC_edge_base_address = *gccc::VEC_edge_base_address;
*VEC_edge_base_lower_bound = *gccc::VEC_edge_base_lower_bound;
*VEC_edge_gc_alloc = *gccc::VEC_edge_gc_alloc;
*VEC_edge_gc_free = *gccc::VEC_edge_gc_free;
*VEC_edge_gc_copy = *gccc::VEC_edge_gc_copy;
*VEC_edge_gc_reserve = *gccc::VEC_edge_gc_reserve;
*VEC_edge_gc_reserve_exact = *gccc::VEC_edge_gc_reserve_exact;
*VEC_edge_gc_safe_grow = *gccc::VEC_edge_gc_safe_grow;
*VEC_edge_gc_safe_grow_cleared = *gccc::VEC_edge_gc_safe_grow_cleared;
*VEC_edge_gc_safe_splice = *gccc::VEC_edge_gc_safe_splice;
*VEC_edge_gc_safe_push = *gccc::VEC_edge_gc_safe_push;
*VEC_edge_gc_safe_insert = *gccc::VEC_edge_gc_safe_insert;
*VEC_edge_heap_alloc = *gccc::VEC_edge_heap_alloc;
*VEC_edge_heap_free = *gccc::VEC_edge_heap_free;
*VEC_edge_heap_copy = *gccc::VEC_edge_heap_copy;
*VEC_edge_heap_reserve = *gccc::VEC_edge_heap_reserve;
*VEC_edge_heap_reserve_exact = *gccc::VEC_edge_heap_reserve_exact;
*VEC_edge_heap_safe_grow = *gccc::VEC_edge_heap_safe_grow;
*VEC_edge_heap_safe_grow_cleared = *gccc::VEC_edge_heap_safe_grow_cleared;
*VEC_edge_heap_safe_splice = *gccc::VEC_edge_heap_safe_splice;
*VEC_edge_heap_safe_push = *gccc::VEC_edge_heap_safe_push;
*VEC_edge_heap_safe_insert = *gccc::VEC_edge_heap_safe_insert;
*VEC_basic_block_must_be_pointer_type = *gccc::VEC_basic_block_must_be_pointer_type;
*VEC_basic_block_base_length = *gccc::VEC_basic_block_base_length;
*VEC_basic_block_base_last = *gccc::VEC_basic_block_base_last;
*VEC_basic_block_base_index = *gccc::VEC_basic_block_base_index;
*VEC_basic_block_base_iterate = *gccc::VEC_basic_block_base_iterate;
*VEC_basic_block_base_embedded_size = *gccc::VEC_basic_block_base_embedded_size;
*VEC_basic_block_base_embedded_init = *gccc::VEC_basic_block_base_embedded_init;
*VEC_basic_block_base_space = *gccc::VEC_basic_block_base_space;
*VEC_basic_block_base_splice = *gccc::VEC_basic_block_base_splice;
*VEC_basic_block_base_quick_push = *gccc::VEC_basic_block_base_quick_push;
*VEC_basic_block_base_pop = *gccc::VEC_basic_block_base_pop;
*VEC_basic_block_base_truncate = *gccc::VEC_basic_block_base_truncate;
*VEC_basic_block_base_replace = *gccc::VEC_basic_block_base_replace;
*VEC_basic_block_base_quick_insert = *gccc::VEC_basic_block_base_quick_insert;
*VEC_basic_block_base_ordered_remove = *gccc::VEC_basic_block_base_ordered_remove;
*VEC_basic_block_base_unordered_remove = *gccc::VEC_basic_block_base_unordered_remove;
*VEC_basic_block_base_block_remove = *gccc::VEC_basic_block_base_block_remove;
*VEC_basic_block_base_address = *gccc::VEC_basic_block_base_address;
*VEC_basic_block_base_lower_bound = *gccc::VEC_basic_block_base_lower_bound;
*VEC_basic_block_gc_alloc = *gccc::VEC_basic_block_gc_alloc;
*VEC_basic_block_gc_free = *gccc::VEC_basic_block_gc_free;
*VEC_basic_block_gc_copy = *gccc::VEC_basic_block_gc_copy;
*VEC_basic_block_gc_reserve = *gccc::VEC_basic_block_gc_reserve;
*VEC_basic_block_gc_reserve_exact = *gccc::VEC_basic_block_gc_reserve_exact;
*VEC_basic_block_gc_safe_grow = *gccc::VEC_basic_block_gc_safe_grow;
*VEC_basic_block_gc_safe_grow_cleared = *gccc::VEC_basic_block_gc_safe_grow_cleared;
*VEC_basic_block_gc_safe_splice = *gccc::VEC_basic_block_gc_safe_splice;
*VEC_basic_block_gc_safe_push = *gccc::VEC_basic_block_gc_safe_push;
*VEC_basic_block_gc_safe_insert = *gccc::VEC_basic_block_gc_safe_insert;
*VEC_basic_block_heap_alloc = *gccc::VEC_basic_block_heap_alloc;
*VEC_basic_block_heap_free = *gccc::VEC_basic_block_heap_free;
*VEC_basic_block_heap_copy = *gccc::VEC_basic_block_heap_copy;
*VEC_basic_block_heap_reserve = *gccc::VEC_basic_block_heap_reserve;
*VEC_basic_block_heap_reserve_exact = *gccc::VEC_basic_block_heap_reserve_exact;
*VEC_basic_block_heap_safe_grow = *gccc::VEC_basic_block_heap_safe_grow;
*VEC_basic_block_heap_safe_grow_cleared = *gccc::VEC_basic_block_heap_safe_grow_cleared;
*VEC_basic_block_heap_safe_splice = *gccc::VEC_basic_block_heap_safe_splice;
*VEC_basic_block_heap_safe_push = *gccc::VEC_basic_block_heap_safe_push;
*VEC_basic_block_heap_safe_insert = *gccc::VEC_basic_block_heap_safe_insert;
*compute_bb_for_insn = *gccc::compute_bb_for_insn;
*free_bb_for_insn = *gccc::free_bb_for_insn;
*update_bb_for_insn = *gccc::update_bb_for_insn;
*insert_insn_on_edge = *gccc::insert_insn_on_edge;
*split_edge_and_insert = *gccc::split_edge_and_insert;
*commit_one_edge_insertion = *gccc::commit_one_edge_insertion;
*commit_edge_insertions = *gccc::commit_edge_insertions;
*remove_fake_edges = *gccc::remove_fake_edges;
*remove_fake_exit_edges = *gccc::remove_fake_exit_edges;
*add_noreturn_fake_exit_edges = *gccc::add_noreturn_fake_exit_edges;
*connect_infinite_loops_to_exit = *gccc::connect_infinite_loops_to_exit;
*unchecked_make_edge = *gccc::unchecked_make_edge;
*cached_make_edge = *gccc::cached_make_edge;
*make_edge = *gccc::make_edge;
*make_single_succ_edge = *gccc::make_single_succ_edge;
*remove_edge_raw = *gccc::remove_edge_raw;
*redirect_edge_succ = *gccc::redirect_edge_succ;
*redirect_edge_succ_nodup = *gccc::redirect_edge_succ_nodup;
*redirect_edge_pred = *gccc::redirect_edge_pred;
*create_basic_block_structure = *gccc::create_basic_block_structure;
*clear_bb_flags = *gccc::clear_bb_flags;
*post_order_compute = *gccc::post_order_compute;
*inverted_post_order_compute = *gccc::inverted_post_order_compute;
*pre_and_rev_post_order_compute = *gccc::pre_and_rev_post_order_compute;
*dfs_enumerate_from = *gccc::dfs_enumerate_from;
*compute_dominance_frontiers = *gccc::compute_dominance_frontiers;
*compute_idf = *gccc::compute_idf;
*dump_bb_info = *gccc::dump_bb_info;
*dump_edge_info = *gccc::dump_edge_info;
*brief_dump_cfg = *gccc::brief_dump_cfg;
*clear_edges = *gccc::clear_edges;
*scale_bbs_frequencies_int = *gccc::scale_bbs_frequencies_int;
*scale_bbs_frequencies_gcov_type = *gccc::scale_bbs_frequencies_gcov_type;
*single_succ_p = *gccc::single_succ_p;
*single_pred_p = *gccc::single_pred_p;
*single_succ_edge = *gccc::single_succ_edge;
*single_pred_edge = *gccc::single_pred_edge;
*single_succ = *gccc::single_succ;
*single_pred = *gccc::single_pred;
*ei_container = *gccc::ei_container;
*ei_start_1 = *gccc::ei_start_1;
*ei_last_1 = *gccc::ei_last_1;
*ei_end_p = *gccc::ei_end_p;
*ei_one_before_end_p = *gccc::ei_one_before_end_p;
*ei_next = *gccc::ei_next;
*ei_prev = *gccc::ei_prev;
*ei_edge = *gccc::ei_edge;
*ei_safe_edge = *gccc::ei_safe_edge;
*ei_cond = *gccc::ei_cond;
*create_edge_list = *gccc::create_edge_list;
*free_edge_list = *gccc::free_edge_list;
*print_edge_list = *gccc::print_edge_list;
*verify_edge_list = *gccc::verify_edge_list;
*find_edge_index = *gccc::find_edge_index;
*find_edge = *gccc::find_edge;
*pre_edge_lcm = *gccc::pre_edge_lcm;
*pre_edge_rev_lcm = *gccc::pre_edge_rev_lcm;
*compute_available = *gccc::compute_available;
*maybe_hot_bb_p = *gccc::maybe_hot_bb_p;
*maybe_hot_edge_p = *gccc::maybe_hot_edge_p;
*probably_never_executed_bb_p = *gccc::probably_never_executed_bb_p;
*optimize_bb_for_size_p = *gccc::optimize_bb_for_size_p;
*optimize_bb_for_speed_p = *gccc::optimize_bb_for_speed_p;
*optimize_edge_for_size_p = *gccc::optimize_edge_for_size_p;
*optimize_edge_for_speed_p = *gccc::optimize_edge_for_speed_p;
*optimize_loop_for_size_p = *gccc::optimize_loop_for_size_p;
*optimize_loop_for_speed_p = *gccc::optimize_loop_for_speed_p;
*optimize_loop_nest_for_size_p = *gccc::optimize_loop_nest_for_size_p;
*optimize_loop_nest_for_speed_p = *gccc::optimize_loop_nest_for_speed_p;
*gimple_predicted_by_p = *gccc::gimple_predicted_by_p;
*rtl_predicted_by_p = *gccc::rtl_predicted_by_p;
*gimple_predict_edge = *gccc::gimple_predict_edge;
*rtl_predict_edge = *gccc::rtl_predict_edge;
*predict_edge_def = *gccc::predict_edge_def;
*guess_outgoing_edge_probabilities = *gccc::guess_outgoing_edge_probabilities;
*remove_predictions_associated_with_edge = *gccc::remove_predictions_associated_with_edge;
*edge_probability_reliable_p = *gccc::edge_probability_reliable_p;
*br_prob_note_reliable_p = *gccc::br_prob_note_reliable_p;
*predictable_edge_p = *gccc::predictable_edge_p;
*init_flow = *gccc::init_flow;
*debug_bb = *gccc::debug_bb;
*debug_bb_n = *gccc::debug_bb_n;
*expunge_block = *gccc::expunge_block;
*link_block = *gccc::link_block;
*unlink_block = *gccc::unlink_block;
*compact_blocks = *gccc::compact_blocks;
*alloc_block = *gccc::alloc_block;
*alloc_aux_for_blocks = *gccc::alloc_aux_for_blocks;
*clear_aux_for_blocks = *gccc::clear_aux_for_blocks;
*free_aux_for_blocks = *gccc::free_aux_for_blocks;
*alloc_aux_for_edges = *gccc::alloc_aux_for_edges;
*clear_aux_for_edges = *gccc::clear_aux_for_edges;
*free_aux_for_edges = *gccc::free_aux_for_edges;
*find_unreachable_blocks = *gccc::find_unreachable_blocks;
*forwarder_block_p = *gccc::forwarder_block_p;
*can_fallthru = *gccc::can_fallthru;
*could_fall_through = *gccc::could_fall_through;
*flow_nodes_print = *gccc::flow_nodes_print;
*flow_edge_list_print = *gccc::flow_edge_list_print;
*force_nonfallthru = *gccc::force_nonfallthru;
*block_label = *gccc::block_label;
*purge_all_dead_edges = *gccc::purge_all_dead_edges;
*purge_dead_edges = *gccc::purge_dead_edges;
*find_many_sub_basic_blocks = *gccc::find_many_sub_basic_blocks;
*rtl_make_eh_edge = *gccc::rtl_make_eh_edge;
*cleanup_cfg = *gccc::cleanup_cfg;
*flow_find_cross_jump = *gccc::flow_find_cross_jump;
*flow_find_head_matching_sequence = *gccc::flow_find_head_matching_sequence;
*delete_unreachable_blocks = *gccc::delete_unreachable_blocks;
*mark_dfs_back_edges = *gccc::mark_dfs_back_edges;
*set_edge_can_fallthru_flag = *gccc::set_edge_can_fallthru_flag;
*update_br_prob_note = *gccc::update_br_prob_note;
*fixup_abnormal_edges = *gccc::fixup_abnormal_edges;
*inside_basic_block_p = *gccc::inside_basic_block_p;
*control_flow_insn_p = *gccc::control_flow_insn_p;
*get_last_bb_insn = *gccc::get_last_bb_insn;
*reorder_basic_blocks = *gccc::reorder_basic_blocks;
*dom_info_state = *gccc::dom_info_state;
*set_dom_info_availability = *gccc::set_dom_info_availability;
*dom_info_available_p = *gccc::dom_info_available_p;
*calculate_dominance_info = *gccc::calculate_dominance_info;
*free_dominance_info = *gccc::free_dominance_info;
*nearest_common_dominator = *gccc::nearest_common_dominator;
*nearest_common_dominator_for_set = *gccc::nearest_common_dominator_for_set;
*set_immediate_dominator = *gccc::set_immediate_dominator;
*get_immediate_dominator = *gccc::get_immediate_dominator;
*dominated_by_p = *gccc::dominated_by_p;
*get_dominated_by = *gccc::get_dominated_by;
*get_dominated_by_region = *gccc::get_dominated_by_region;
*get_dominated_to_depth = *gccc::get_dominated_to_depth;
*get_all_dominated_blocks = *gccc::get_all_dominated_blocks;
*add_to_dominance_info = *gccc::add_to_dominance_info;
*delete_from_dominance_info = *gccc::delete_from_dominance_info;
*recompute_dominator = *gccc::recompute_dominator;
*redirect_immediate_dominators = *gccc::redirect_immediate_dominators;
*iterate_fix_dominators = *gccc::iterate_fix_dominators;
*verify_dominators = *gccc::verify_dominators;
*first_dom_son = *gccc::first_dom_son;
*next_dom_son = *gccc::next_dom_son;
*bb_dom_dfs_in = *gccc::bb_dom_dfs_in;
*bb_dom_dfs_out = *gccc::bb_dom_dfs_out;
*try_redirect_by_replacing_jump = *gccc::try_redirect_by_replacing_jump;
*break_superblocks = *gccc::break_superblocks;
*relink_block_chain = *gccc::relink_block_chain;
*check_bb_profile = *gccc::check_bb_profile;
*update_bb_profile_for_threading = *gccc::update_bb_profile_for_threading;
*init_rtl_bb_info = *gccc::init_rtl_bb_info;
*initialize_original_copy_tables = *gccc::initialize_original_copy_tables;
*free_original_copy_tables = *gccc::free_original_copy_tables;
*set_bb_original = *gccc::set_bb_original;
*get_bb_original = *gccc::get_bb_original;
*set_bb_copy = *gccc::set_bb_copy;
*get_bb_copy = *gccc::get_bb_copy;
*set_loop_copy = *gccc::set_loop_copy;
*get_loop_copy = *gccc::get_loop_copy;
*verify_flow_info = *gccc::verify_flow_info;
*dump_bb = *gccc::dump_bb;
*redirect_edge_and_branch = *gccc::redirect_edge_and_branch;
*redirect_edge_and_branch_force = *gccc::redirect_edge_and_branch_force;
*can_remove_branch_p = *gccc::can_remove_branch_p;
*remove_branch = *gccc::remove_branch;
*remove_edge = *gccc::remove_edge;
*split_block = *gccc::split_block;
*split_block_after_labels = *gccc::split_block_after_labels;
*move_block_after = *gccc::move_block_after;
*delete_basic_block = *gccc::delete_basic_block;
*split_edge = *gccc::split_edge;
*create_basic_block = *gccc::create_basic_block;
*create_empty_bb = *gccc::create_empty_bb;
*can_merge_blocks_p = *gccc::can_merge_blocks_p;
*merge_blocks = *gccc::merge_blocks;
*make_forwarder_block = *gccc::make_forwarder_block;
*tidy_fallthru_edge = *gccc::tidy_fallthru_edge;
*tidy_fallthru_edges = *gccc::tidy_fallthru_edges;
*predict_edge = *gccc::predict_edge;
*predicted_by_p = *gccc::predicted_by_p;
*can_duplicate_block_p = *gccc::can_duplicate_block_p;
*duplicate_block = *gccc::duplicate_block;
*block_ends_with_call_p = *gccc::block_ends_with_call_p;
*block_ends_with_condjump_p = *gccc::block_ends_with_condjump_p;
*flow_call_edges_add = *gccc::flow_call_edges_add;
*execute_on_growing_pred = *gccc::execute_on_growing_pred;
*execute_on_shrinking_pred = *gccc::execute_on_shrinking_pred;
*cfg_hook_duplicate_loop_to_header_edge = *gccc::cfg_hook_duplicate_loop_to_header_edge;
*lv_flush_pending_stmts = *gccc::lv_flush_pending_stmts;
*extract_cond_bb_edges = *gccc::extract_cond_bb_edges;
*lv_adjust_loop_header_phi = *gccc::lv_adjust_loop_header_phi;
*lv_add_condition_to_bb = *gccc::lv_add_condition_to_bb;
*current_ir_type = *gccc::current_ir_type;
*rtl_register_cfg_hooks = *gccc::rtl_register_cfg_hooks;
*cfg_layout_rtl_register_cfg_hooks = *gccc::cfg_layout_rtl_register_cfg_hooks;
*gimple_register_cfg_hooks = *gccc::gimple_register_cfg_hooks;
*get_cfg_hooks = *gccc::get_cfg_hooks;
*set_cfg_hooks = *gccc::set_cfg_hooks;
*bb_has_eh_pred = *gccc::bb_has_eh_pred;
*bb_has_abnormal_pred = *gccc::bb_has_abnormal_pred;
*find_fallthru_edge = *gccc::find_fallthru_edge;
*mfb_keep_just = *gccc::mfb_keep_just;
*rtl_profile_for_bb = *gccc::rtl_profile_for_bb;
*rtl_profile_for_edge = *gccc::rtl_profile_for_edge;
*default_rtl_profile = *gccc::default_rtl_profile;
*bitmap_clear = *gccc::bitmap_clear;
*bitmap_copy = *gccc::bitmap_copy;
*bitmap_equal_p = *gccc::bitmap_equal_p;
*bitmap_intersect_p = *gccc::bitmap_intersect_p;
*bitmap_intersect_compl_p = *gccc::bitmap_intersect_compl_p;
*bitmap_single_bit_set_p = *gccc::bitmap_single_bit_set_p;
*bitmap_count_bits = *gccc::bitmap_count_bits;
*bitmap_and = *gccc::bitmap_and;
*bitmap_and_into = *gccc::bitmap_and_into;
*bitmap_and_compl = *gccc::bitmap_and_compl;
*bitmap_and_compl_into = *gccc::bitmap_and_compl_into;
*bitmap_compl_and_into = *gccc::bitmap_compl_and_into;
*bitmap_clear_range = *gccc::bitmap_clear_range;
*bitmap_set_range = *gccc::bitmap_set_range;
*bitmap_ior = *gccc::bitmap_ior;
*bitmap_ior_into = *gccc::bitmap_ior_into;
*bitmap_xor = *gccc::bitmap_xor;
*bitmap_xor_into = *gccc::bitmap_xor_into;
*bitmap_ior_and_into = *gccc::bitmap_ior_and_into;
*bitmap_ior_and_compl = *gccc::bitmap_ior_and_compl;
*bitmap_ior_and_compl_into = *gccc::bitmap_ior_and_compl_into;
*bitmap_clear_bit = *gccc::bitmap_clear_bit;
*bitmap_set_bit = *gccc::bitmap_set_bit;
*bitmap_bit_p = *gccc::bitmap_bit_p;
*debug_bitmap = *gccc::debug_bitmap;
*debug_bitmap_file = *gccc::debug_bitmap_file;
*bitmap_print = *gccc::bitmap_print;
*bitmap_obstack_initialize = *gccc::bitmap_obstack_initialize;
*bitmap_obstack_release = *gccc::bitmap_obstack_release;
*bitmap_register = *gccc::bitmap_register;
*dump_bitmap_statistics = *gccc::dump_bitmap_statistics;
*bitmap_initialize_stat = *gccc::bitmap_initialize_stat;
*bitmap_obstack_alloc_stat = *gccc::bitmap_obstack_alloc_stat;
*bitmap_gc_alloc_stat = *gccc::bitmap_gc_alloc_stat;
*bitmap_obstack_free = *gccc::bitmap_obstack_free;
*bitmap_first_set_bit = *gccc::bitmap_first_set_bit;
*bitmap_last_set_bit = *gccc::bitmap_last_set_bit;
*bitmap_hash = *gccc::bitmap_hash;
*bmp_iter_set_init = *gccc::bmp_iter_set_init;
*bmp_iter_and_init = *gccc::bmp_iter_and_init;
*bmp_iter_and_compl_init = *gccc::bmp_iter_and_compl_init;
*bmp_iter_next = *gccc::bmp_iter_next;
*bmp_iter_next_bit = *gccc::bmp_iter_next_bit;
*bmp_iter_set = *gccc::bmp_iter_set;
*bmp_iter_and = *gccc::bmp_iter_and;
*bmp_iter_and_compl = *gccc::bmp_iter_and_compl;
*SET_BIT = *gccc::SET_BIT;
*RESET_BIT = *gccc::RESET_BIT;
*sbitmap_iter_init = *gccc::sbitmap_iter_init;
*sbitmap_iter_cond = *gccc::sbitmap_iter_cond;
*sbitmap_iter_next = *gccc::sbitmap_iter_next;
*dump_sbitmap = *gccc::dump_sbitmap;
*dump_sbitmap_file = *gccc::dump_sbitmap_file;
*dump_sbitmap_vector = *gccc::dump_sbitmap_vector;
*sbitmap_alloc = *gccc::sbitmap_alloc;
*sbitmap_alloc_with_popcount = *gccc::sbitmap_alloc_with_popcount;
*sbitmap_vector_alloc = *gccc::sbitmap_vector_alloc;
*sbitmap_resize = *gccc::sbitmap_resize;
*sbitmap_copy = *gccc::sbitmap_copy;
*sbitmap_copy_n = *gccc::sbitmap_copy_n;
*sbitmap_equal = *gccc::sbitmap_equal;
*sbitmap_empty_p = *gccc::sbitmap_empty_p;
*sbitmap_range_empty_p = *gccc::sbitmap_range_empty_p;
*sbitmap_zero = *gccc::sbitmap_zero;
*sbitmap_ones = *gccc::sbitmap_ones;
*sbitmap_vector_zero = *gccc::sbitmap_vector_zero;
*sbitmap_vector_ones = *gccc::sbitmap_vector_ones;
*sbitmap_union_of_diff = *gccc::sbitmap_union_of_diff;
*sbitmap_union_of_diff_cg = *gccc::sbitmap_union_of_diff_cg;
*sbitmap_difference = *gccc::sbitmap_difference;
*sbitmap_not = *gccc::sbitmap_not;
*sbitmap_a_or_b_and_c = *gccc::sbitmap_a_or_b_and_c;
*sbitmap_a_or_b_and_c_cg = *gccc::sbitmap_a_or_b_and_c_cg;
*sbitmap_a_and_b_or_c = *gccc::sbitmap_a_and_b_or_c;
*sbitmap_a_and_b_or_c_cg = *gccc::sbitmap_a_and_b_or_c_cg;
*sbitmap_any_common_bits = *gccc::sbitmap_any_common_bits;
*sbitmap_a_and_b = *gccc::sbitmap_a_and_b;
*sbitmap_a_and_b_cg = *gccc::sbitmap_a_and_b_cg;
*sbitmap_a_or_b = *gccc::sbitmap_a_or_b;
*sbitmap_a_or_b_cg = *gccc::sbitmap_a_or_b_cg;
*sbitmap_a_xor_b = *gccc::sbitmap_a_xor_b;
*sbitmap_a_xor_b_cg = *gccc::sbitmap_a_xor_b_cg;
*sbitmap_a_subset_b_p = *gccc::sbitmap_a_subset_b_p;
*sbitmap_first_set_bit = *gccc::sbitmap_first_set_bit;
*sbitmap_last_set_bit = *gccc::sbitmap_last_set_bit;
*sbitmap_intersect_of_predsucc = *gccc::sbitmap_intersect_of_predsucc;
*sbitmap_union_of_predsucc = *gccc::sbitmap_union_of_predsucc;
*sbitmap_intersection_of_succs = *gccc::sbitmap_intersection_of_succs;
*sbitmap_intersection_of_preds = *gccc::sbitmap_intersection_of_preds;
*sbitmap_union_of_succs = *gccc::sbitmap_union_of_succs;
*sbitmap_union_of_preds = *gccc::sbitmap_union_of_preds;
*debug_sbitmap = *gccc::debug_sbitmap;
*sbitmap_realloc = *gccc::sbitmap_realloc;
*sbitmap_popcount = *gccc::sbitmap_popcount;
*sbitmap_verify_popcount = *gccc::sbitmap_verify_popcount;
*pointer_set_create = *gccc::pointer_set_create;
*pointer_set_destroy = *gccc::pointer_set_destroy;
*pointer_set_contains = *gccc::pointer_set_contains;
*pointer_set_insert = *gccc::pointer_set_insert;
*pointer_set_traverse = *gccc::pointer_set_traverse;
*pointer_map_create = *gccc::pointer_map_create;
*pointer_map_destroy = *gccc::pointer_map_destroy;
*pointer_map_contains = *gccc::pointer_map_contains;
*pointer_map_insert = *gccc::pointer_map_insert;
*pointer_map_traverse = *gccc::pointer_map_traverse;
*init_ssa_operands = *gccc::init_ssa_operands;
*fini_ssa_operands = *gccc::fini_ssa_operands;
*update_stmt_operands = *gccc::update_stmt_operands;
*free_stmt_operands = *gccc::free_stmt_operands;
*verify_imm_links = *gccc::verify_imm_links;
*dump_immediate_uses = *gccc::dump_immediate_uses;
*dump_immediate_uses_for = *gccc::dump_immediate_uses_for;
*debug_immediate_uses = *gccc::debug_immediate_uses;
*debug_immediate_uses_for = *gccc::debug_immediate_uses_for;
*dump_decl_set = *gccc::dump_decl_set;
*debug_decl_set = *gccc::debug_decl_set;
*ssa_operands_active = *gccc::ssa_operands_active;
*unlink_stmt_vdef = *gccc::unlink_stmt_vdef;
*ao_ref_init = *gccc::ao_ref_init;
*ao_ref_init_from_ptr_and_size = *gccc::ao_ref_init_from_ptr_and_size;
*ao_ref_base = *gccc::ao_ref_base;
*ao_ref_alias_set = *gccc::ao_ref_alias_set;
*ptr_deref_may_alias_global_p = *gccc::ptr_deref_may_alias_global_p;
*ptr_derefs_may_alias_p = *gccc::ptr_derefs_may_alias_p;
*refs_may_alias_p = *gccc::refs_may_alias_p;
*refs_may_alias_p_1 = *gccc::refs_may_alias_p_1;
*refs_anti_dependent_p = *gccc::refs_anti_dependent_p;
*refs_output_dependent_p = *gccc::refs_output_dependent_p;
*ref_maybe_used_by_stmt_p = *gccc::ref_maybe_used_by_stmt_p;
*stmt_may_clobber_ref_p = *gccc::stmt_may_clobber_ref_p;
*stmt_may_clobber_ref_p_1 = *gccc::stmt_may_clobber_ref_p_1;
*call_may_clobber_ref_p = *gccc::call_may_clobber_ref_p;
*stmt_kills_ref_p = *gccc::stmt_kills_ref_p;
*get_continuation_for_phi = *gccc::get_continuation_for_phi;
*walk_non_aliased_vuses = *gccc::walk_non_aliased_vuses;
*walk_aliased_vdefs = *gccc::walk_aliased_vdefs;
*get_ptr_info = *gccc::get_ptr_info;
*dump_alias_info = *gccc::dump_alias_info;
*debug_alias_info = *gccc::debug_alias_info;
*dump_points_to_solution = *gccc::dump_points_to_solution;
*dump_points_to_info_for = *gccc::dump_points_to_info_for;
*debug_points_to_info_for = *gccc::debug_points_to_info_for;
*dump_alias_stats = *gccc::dump_alias_stats;
*compute_may_aliases = *gccc::compute_may_aliases;
*delete_alias_heapvars = *gccc::delete_alias_heapvars;
*pt_solution_empty_p = *gccc::pt_solution_empty_p;
*pt_solution_includes_global = *gccc::pt_solution_includes_global;
*pt_solution_includes = *gccc::pt_solution_includes;
*pt_solutions_intersect = *gccc::pt_solutions_intersect;
*pt_solutions_same_restrict_base = *gccc::pt_solutions_same_restrict_base;
*pt_solution_reset = *gccc::pt_solution_reset;
*pt_solution_set = *gccc::pt_solution_set;
*pt_solution_set_var = *gccc::pt_solution_set_var;
*dump_pta_stats = *gccc::dump_pta_stats;
*internal_fn_name = *gccc::internal_fn_name;
*internal_fn_flags = *gccc::internal_fn_flags;
*expand_internal_call = *gccc::expand_internal_call;
*VEC_gimple_vec_must_be_pointer_type = *gccc::VEC_gimple_vec_must_be_pointer_type;
*VEC_gimple_vec_base_length = *gccc::VEC_gimple_vec_base_length;
*VEC_gimple_vec_base_last = *gccc::VEC_gimple_vec_base_last;
*VEC_gimple_vec_base_index = *gccc::VEC_gimple_vec_base_index;
*VEC_gimple_vec_base_iterate = *gccc::VEC_gimple_vec_base_iterate;
*VEC_gimple_vec_base_embedded_size = *gccc::VEC_gimple_vec_base_embedded_size;
*VEC_gimple_vec_base_embedded_init = *gccc::VEC_gimple_vec_base_embedded_init;
*VEC_gimple_vec_base_space = *gccc::VEC_gimple_vec_base_space;
*VEC_gimple_vec_base_splice = *gccc::VEC_gimple_vec_base_splice;
*VEC_gimple_vec_base_quick_push = *gccc::VEC_gimple_vec_base_quick_push;
*VEC_gimple_vec_base_pop = *gccc::VEC_gimple_vec_base_pop;
*VEC_gimple_vec_base_truncate = *gccc::VEC_gimple_vec_base_truncate;
*VEC_gimple_vec_base_replace = *gccc::VEC_gimple_vec_base_replace;
*VEC_gimple_vec_base_quick_insert = *gccc::VEC_gimple_vec_base_quick_insert;
*VEC_gimple_vec_base_ordered_remove = *gccc::VEC_gimple_vec_base_ordered_remove;
*VEC_gimple_vec_base_unordered_remove = *gccc::VEC_gimple_vec_base_unordered_remove;
*VEC_gimple_vec_base_block_remove = *gccc::VEC_gimple_vec_base_block_remove;
*VEC_gimple_vec_base_address = *gccc::VEC_gimple_vec_base_address;
*VEC_gimple_vec_base_lower_bound = *gccc::VEC_gimple_vec_base_lower_bound;
*VEC_gimple_vec_heap_alloc = *gccc::VEC_gimple_vec_heap_alloc;
*VEC_gimple_vec_heap_free = *gccc::VEC_gimple_vec_heap_free;
*VEC_gimple_vec_heap_copy = *gccc::VEC_gimple_vec_heap_copy;
*VEC_gimple_vec_heap_reserve = *gccc::VEC_gimple_vec_heap_reserve;
*VEC_gimple_vec_heap_reserve_exact = *gccc::VEC_gimple_vec_heap_reserve_exact;
*VEC_gimple_vec_heap_safe_grow = *gccc::VEC_gimple_vec_heap_safe_grow;
*VEC_gimple_vec_heap_safe_grow_cleared = *gccc::VEC_gimple_vec_heap_safe_grow_cleared;
*VEC_gimple_vec_heap_safe_splice = *gccc::VEC_gimple_vec_heap_safe_splice;
*VEC_gimple_vec_heap_safe_push = *gccc::VEC_gimple_vec_heap_safe_push;
*VEC_gimple_vec_heap_safe_insert = *gccc::VEC_gimple_vec_heap_safe_insert;
*gimple_seq_first = *gccc::gimple_seq_first;
*gimple_seq_first_stmt = *gccc::gimple_seq_first_stmt;
*gimple_seq_last = *gccc::gimple_seq_last;
*gimple_seq_last_stmt = *gccc::gimple_seq_last_stmt;
*gimple_seq_set_last = *gccc::gimple_seq_set_last;
*gimple_seq_set_first = *gccc::gimple_seq_set_first;
*gimple_seq_empty_p = *gccc::gimple_seq_empty_p;
*gimple_seq_add_stmt = *gccc::gimple_seq_add_stmt;
*gimplify_seq_add_stmt = *gccc::gimplify_seq_add_stmt;
*gimple_seq_alloc_with_stmt = *gccc::gimple_seq_alloc_with_stmt;
*bb_seq = *gccc::bb_seq;
*set_bb_seq = *gccc::set_bb_seq;
*gimple_build_return = *gccc::gimple_build_return;
*gimple_build_assign_stat = *gccc::gimple_build_assign_stat;
*extract_ops_from_tree_1 = *gccc::extract_ops_from_tree_1;
*gimple_build_assign_with_ops_stat = *gccc::gimple_build_assign_with_ops_stat;
*gimple_build_debug_bind_stat = *gccc::gimple_build_debug_bind_stat;
*gimple_build_call_vec = *gccc::gimple_build_call_vec;
*gimple_build_call = *gccc::gimple_build_call;
*gimple_build_call_internal = *gccc::gimple_build_call_internal;
*gimple_build_call_internal_vec = *gccc::gimple_build_call_internal_vec;
*gimple_build_call_from_tree = *gccc::gimple_build_call_from_tree;
*gimplify_assign = *gccc::gimplify_assign;
*gimple_build_cond = *gccc::gimple_build_cond;
*gimple_build_label = *gccc::gimple_build_label;
*gimple_build_goto = *gccc::gimple_build_goto;
*gimple_build_nop = *gccc::gimple_build_nop;
*gimple_build_bind = *gccc::gimple_build_bind;
*gimple_build_asm_vec = *gccc::gimple_build_asm_vec;
*gimple_build_catch = *gccc::gimple_build_catch;
*gimple_build_eh_filter = *gccc::gimple_build_eh_filter;
*gimple_build_eh_must_not_throw = *gccc::gimple_build_eh_must_not_throw;
*gimple_build_try = *gccc::gimple_build_try;
*gimple_build_wce = *gccc::gimple_build_wce;
*gimple_build_resx = *gccc::gimple_build_resx;
*gimple_build_eh_dispatch = *gccc::gimple_build_eh_dispatch;
*gimple_build_switch_nlabels = *gccc::gimple_build_switch_nlabels;
*gimple_build_switch = *gccc::gimple_build_switch;
*gimple_build_switch_vec = *gccc::gimple_build_switch_vec;
*gimple_build_omp_parallel = *gccc::gimple_build_omp_parallel;
*gimple_build_omp_task = *gccc::gimple_build_omp_task;
*gimple_build_omp_for = *gccc::gimple_build_omp_for;
*gimple_build_omp_critical = *gccc::gimple_build_omp_critical;
*gimple_build_omp_section = *gccc::gimple_build_omp_section;
*gimple_build_omp_continue = *gccc::gimple_build_omp_continue;
*gimple_build_omp_master = *gccc::gimple_build_omp_master;
*gimple_build_omp_return = *gccc::gimple_build_omp_return;
*gimple_build_omp_ordered = *gccc::gimple_build_omp_ordered;
*gimple_build_omp_sections = *gccc::gimple_build_omp_sections;
*gimple_build_omp_sections_switch = *gccc::gimple_build_omp_sections_switch;
*gimple_build_omp_single = *gccc::gimple_build_omp_single;
*gimple_build_cdt = *gccc::gimple_build_cdt;
*gimple_build_omp_atomic_load = *gccc::gimple_build_omp_atomic_load;
*gimple_build_omp_atomic_store = *gccc::gimple_build_omp_atomic_store;
*gimple_build_predict = *gccc::gimple_build_predict;
*gss_for_assign = *gccc::gss_for_assign;
*sort_case_labels = *gccc::sort_case_labels;
*gimple_set_body = *gccc::gimple_set_body;
*gimple_body = *gccc::gimple_body;
*gimple_has_body_p = *gccc::gimple_has_body_p;
*gimple_seq_alloc = *gccc::gimple_seq_alloc;
*gimple_seq_free = *gccc::gimple_seq_free;
*gimple_seq_add_seq = *gccc::gimple_seq_add_seq;
*gimple_seq_copy = *gccc::gimple_seq_copy;
*gimple_call_same_target_p = *gccc::gimple_call_same_target_p;
*gimple_call_flags = *gccc::gimple_call_flags;
*gimple_call_return_flags = *gccc::gimple_call_return_flags;
*gimple_call_arg_flags = *gccc::gimple_call_arg_flags;
*gimple_call_reset_alias_info = *gccc::gimple_call_reset_alias_info;
*gimple_assign_copy_p = *gccc::gimple_assign_copy_p;
*gimple_assign_ssa_name_copy_p = *gccc::gimple_assign_ssa_name_copy_p;
*gimple_assign_unary_nop_p = *gccc::gimple_assign_unary_nop_p;
*gimple_set_bb = *gccc::gimple_set_bb;
*gimple_assign_set_rhs_from_tree = *gccc::gimple_assign_set_rhs_from_tree;
*gimple_assign_set_rhs_with_ops_1 = *gccc::gimple_assign_set_rhs_with_ops_1;
*gimple_get_lhs = *gccc::gimple_get_lhs;
*gimple_set_lhs = *gccc::gimple_set_lhs;
*gimple_replace_lhs = *gccc::gimple_replace_lhs;
*gimple_copy = *gccc::gimple_copy;
*gimple_set_modified = *gccc::gimple_set_modified;
*gimple_cond_get_ops_from_tree = *gccc::gimple_cond_get_ops_from_tree;
*gimple_build_cond_from_tree = *gccc::gimple_build_cond_from_tree;
*gimple_cond_set_condition_from_tree = *gccc::gimple_cond_set_condition_from_tree;
*gimple_has_side_effects = *gccc::gimple_has_side_effects;
*gimple_rhs_has_side_effects = *gccc::gimple_rhs_has_side_effects;
*gimple_could_trap_p = *gccc::gimple_could_trap_p;
*gimple_could_trap_p_1 = *gccc::gimple_could_trap_p_1;
*gimple_assign_rhs_could_trap_p = *gccc::gimple_assign_rhs_could_trap_p;
*gimple_regimplify_operands = *gccc::gimple_regimplify_operands;
*empty_body_p = *gccc::empty_body_p;
*get_gimple_rhs_num_ops = *gccc::get_gimple_rhs_num_ops;
*gimple_alloc_stat = *gccc::gimple_alloc_stat;
*gimple_decl_printable_name = *gccc::gimple_decl_printable_name;
*gimple_fold_call = *gccc::gimple_fold_call;
*gimple_get_virt_method_for_binfo = *gccc::gimple_get_virt_method_for_binfo;
*gimple_adjust_this_by_delta = *gccc::gimple_adjust_this_by_delta;
*is_gimple_stmt = *gccc::is_gimple_stmt;
*is_gimple_reg_type = *gccc::is_gimple_reg_type;
*is_gimple_reg = *gccc::is_gimple_reg;
*is_gimple_variable = *gccc::is_gimple_variable;
*is_gimple_id = *gccc::is_gimple_id;
*is_gimple_min_lval = *gccc::is_gimple_min_lval;
*is_gimple_addressable = *gccc::is_gimple_addressable;
*is_gimple_lvalue = *gccc::is_gimple_lvalue;
*is_gimple_address = *gccc::is_gimple_address;
*is_gimple_invariant_address = *gccc::is_gimple_invariant_address;
*is_gimple_ip_invariant_address = *gccc::is_gimple_ip_invariant_address;
*is_gimple_constant = *gccc::is_gimple_constant;
*is_gimple_min_invariant = *gccc::is_gimple_min_invariant;
*is_gimple_ip_invariant = *gccc::is_gimple_ip_invariant;
*is_gimple_val = *gccc::is_gimple_val;
*is_gimple_asm_val = *gccc::is_gimple_asm_val;
*is_gimple_mem_ref_addr = *gccc::is_gimple_mem_ref_addr;
*is_gimple_reg_rhs = *gccc::is_gimple_reg_rhs;
*is_gimple_mem_rhs = *gccc::is_gimple_mem_rhs;
*is_gimple_condexpr = *gccc::is_gimple_condexpr;
*is_gimple_non_addressable = *gccc::is_gimple_non_addressable;
*is_gimple_call_addr = *gccc::is_gimple_call_addr;
*get_call_expr_in = *gccc::get_call_expr_in;
*recalculate_side_effects = *gccc::recalculate_side_effects;
*gimple_compare_field_offset = *gccc::gimple_compare_field_offset;
*gimple_register_type = *gccc::gimple_register_type;
*gimple_register_canonical_type = *gccc::gimple_register_canonical_type;
*gimple_types_compatible_p = *gccc::gimple_types_compatible_p;
*print_gimple_types_stats = *gccc::print_gimple_types_stats;
*free_gimple_type_tables = *gccc::free_gimple_type_tables;
*gimple_unsigned_type = *gccc::gimple_unsigned_type;
*gimple_signed_type = *gccc::gimple_signed_type;
*gimple_get_alias_set = *gccc::gimple_get_alias_set;
*count_uses_and_derefs = *gccc::count_uses_and_derefs;
*walk_stmt_load_store_addr_ops = *gccc::walk_stmt_load_store_addr_ops;
*walk_stmt_load_store_ops = *gccc::walk_stmt_load_store_ops;
*gimple_ior_addresses_taken = *gccc::gimple_ior_addresses_taken;
*gimple_call_builtin_p = *gccc::gimple_call_builtin_p;
*create_tmp_var_raw = *gccc::create_tmp_var_raw;
*create_tmp_var_name = *gccc::create_tmp_var_name;
*create_tmp_var = *gccc::create_tmp_var;
*create_tmp_reg = *gccc::create_tmp_reg;
*get_initialized_tmp_var = *gccc::get_initialized_tmp_var;
*get_formal_tmp_var = *gccc::get_formal_tmp_var;
*declare_vars = *gccc::declare_vars;
*annotate_all_with_location = *gccc::annotate_all_with_location;
*gimplify_expr = *gccc::gimplify_expr;
*gimplify_type_sizes = *gccc::gimplify_type_sizes;
*gimplify_one_sizepos = *gccc::gimplify_one_sizepos;
*gimplify_stmt = *gccc::gimplify_stmt;
*gimplify_body = *gccc::gimplify_body;
*push_gimplify_context = *gccc::push_gimplify_context;
*pop_gimplify_context = *gccc::pop_gimplify_context;
*gimplify_and_add = *gccc::gimplify_and_add;
*gimple_add_tmp_var = *gccc::gimple_add_tmp_var;
*gimple_current_bind_expr = *gccc::gimple_current_bind_expr;
*gimple_bind_expr_stack = *gccc::gimple_bind_expr_stack;
*voidify_wrapper_expr = *gccc::voidify_wrapper_expr;
*build_and_jump = *gccc::build_and_jump;
*force_labels_r = *gccc::force_labels_r;
*gimplify_va_arg_expr = *gccc::gimplify_va_arg_expr;
*omp_firstprivatize_variable = *gccc::omp_firstprivatize_variable;
*gimple_boolify = *gccc::gimple_boolify;
*rhs_predicate_for = *gccc::rhs_predicate_for;
*canonicalize_cond_expr_cond = *gccc::canonicalize_cond_expr_cond;
*omp_reduction_init = *gccc::omp_reduction_init;
*lower_nested_functions = *gccc::lower_nested_functions;
*insert_field_into_struct = *gccc::insert_field_into_struct;
*gimplify_function_tree = *gccc::gimplify_function_tree;
*gimple_assign_rhs_to_tree = *gccc::gimple_assign_rhs_to_tree;
*validate_gimple_arglist = *gccc::validate_gimple_arglist;
*tree_ssa_useless_type_conversion = *gccc::tree_ssa_useless_type_conversion;
*tree_ssa_strip_useless_type_conversions = *gccc::tree_ssa_strip_useless_type_conversions;
*useless_type_conversion_p = *gccc::useless_type_conversion_p;
*types_compatible_p = *gccc::types_compatible_p;
*f_gimple_code = *gccc::f_gimple_code;
*gss_for_code = *gccc::gss_for_code;
*gimple_statement_structure = *gccc::gimple_statement_structure;
*gimple_has_substatements = *gccc::gimple_has_substatements;
*gimple_bb = *gccc::gimple_bb;
*gimple_block = *gccc::gimple_block;
*gimple_set_block = *gccc::gimple_set_block;
*gimple_location = *gccc::gimple_location;
*gimple_location_ptr = *gccc::gimple_location_ptr;
*gimple_set_location = *gccc::gimple_set_location;
*gimple_has_location = *gccc::gimple_has_location;
*gimple_filename = *gccc::gimple_filename;
*gimple_lineno = *gccc::gimple_lineno;
*gimple_seq_singleton_p = *gccc::gimple_seq_singleton_p;
*gimple_no_warning_p = *gccc::gimple_no_warning_p;
*gimple_set_no_warning = *gccc::gimple_set_no_warning;
*gimple_set_visited = *gccc::gimple_set_visited;
*gimple_visited_p = *gccc::gimple_visited_p;
*gimple_set_plf = *gccc::gimple_set_plf;
*gimple_plf = *gccc::gimple_plf;
*gimple_set_uid = *gccc::gimple_set_uid;
*gimple_uid = *gccc::gimple_uid;
*gimple_has_ops = *gccc::gimple_has_ops;
*gimple_has_mem_ops = *gccc::gimple_has_mem_ops;
*gimple_def_ops = *gccc::gimple_def_ops;
*gimple_set_def_ops = *gccc::gimple_set_def_ops;
*gimple_use_ops = *gccc::gimple_use_ops;
*gimple_set_use_ops = *gccc::gimple_set_use_ops;
*gimple_vuse_op = *gccc::gimple_vuse_op;
*gimple_vdef_op = *gccc::gimple_vdef_op;
*gimple_vuse = *gccc::gimple_vuse;
*gimple_vdef = *gccc::gimple_vdef;
*gimple_vuse_ptr = *gccc::gimple_vuse_ptr;
*gimple_vdef_ptr = *gccc::gimple_vdef_ptr;
*gimple_set_vuse = *gccc::gimple_set_vuse;
*gimple_set_vdef = *gccc::gimple_set_vdef;
*gimple_modified_p = *gccc::gimple_modified_p;
*gimple_expr_code = *gccc::gimple_expr_code;
*update_stmt = *gccc::update_stmt;
*update_stmt_if_modified = *gccc::update_stmt_if_modified;
*gimple_has_volatile_ops = *gccc::gimple_has_volatile_ops;
*gimple_set_has_volatile_ops = *gccc::gimple_set_has_volatile_ops;
*gimple_references_memory_p = *gccc::gimple_references_memory_p;
*gimple_omp_subcode = *gccc::gimple_omp_subcode;
*gimple_omp_set_subcode = *gccc::gimple_omp_set_subcode;
*gimple_omp_return_set_nowait = *gccc::gimple_omp_return_set_nowait;
*gimple_omp_return_nowait_p = *gccc::gimple_omp_return_nowait_p;
*gimple_omp_section_last_p = *gccc::gimple_omp_section_last_p;
*gimple_omp_section_set_last = *gccc::gimple_omp_section_set_last;
*gimple_omp_parallel_combined_p = *gccc::gimple_omp_parallel_combined_p;
*gimple_omp_parallel_set_combined_p = *gccc::gimple_omp_parallel_set_combined_p;
*gimple_num_ops = *gccc::gimple_num_ops;
*gimple_set_num_ops = *gccc::gimple_set_num_ops;
*gimple_ops = *gccc::gimple_ops;
*gimple_op = *gccc::gimple_op;
*gimple_op_ptr = *gccc::gimple_op_ptr;
*gimple_set_op = *gccc::gimple_set_op;
*is_gimple_assign = *gccc::is_gimple_assign;
*get_gimple_rhs_class = *gccc::get_gimple_rhs_class;
*gimple_assign_lhs = *gccc::gimple_assign_lhs;
*gimple_assign_lhs_ptr = *gccc::gimple_assign_lhs_ptr;
*gimple_assign_set_lhs = *gccc::gimple_assign_set_lhs;
*gimple_assign_rhs1 = *gccc::gimple_assign_rhs1;
*gimple_assign_rhs1_ptr = *gccc::gimple_assign_rhs1_ptr;
*gimple_assign_set_rhs1 = *gccc::gimple_assign_set_rhs1;
*gimple_assign_rhs2 = *gccc::gimple_assign_rhs2;
*gimple_assign_rhs2_ptr = *gccc::gimple_assign_rhs2_ptr;
*gimple_assign_set_rhs2 = *gccc::gimple_assign_set_rhs2;
*gimple_assign_rhs3 = *gccc::gimple_assign_rhs3;
*gimple_assign_rhs3_ptr = *gccc::gimple_assign_rhs3_ptr;
*gimple_assign_set_rhs3 = *gccc::gimple_assign_set_rhs3;
*gimple_assign_set_rhs_with_ops = *gccc::gimple_assign_set_rhs_with_ops;
*extract_ops_from_tree = *gccc::extract_ops_from_tree;
*gimple_assign_nontemporal_move_p = *gccc::gimple_assign_nontemporal_move_p;
*gimple_assign_set_nontemporal_move = *gccc::gimple_assign_set_nontemporal_move;
*gimple_assign_rhs_code = *gccc::gimple_assign_rhs_code;
*gimple_assign_set_rhs_code = *gccc::gimple_assign_set_rhs_code;
*gimple_assign_rhs_class = *gccc::gimple_assign_rhs_class;
*gimple_assign_single_p = *gccc::gimple_assign_single_p;
*gimple_assign_cast_p = *gccc::gimple_assign_cast_p;
*is_gimple_call = *gccc::is_gimple_call;
*gimple_call_lhs = *gccc::gimple_call_lhs;
*gimple_call_lhs_ptr = *gccc::gimple_call_lhs_ptr;
*gimple_call_set_lhs = *gccc::gimple_call_set_lhs;
*gimple_call_fn = *gccc::gimple_call_fn;
*gimple_call_internal_p = *gccc::gimple_call_internal_p;
*gimple_call_internal_fn = *gccc::gimple_call_internal_fn;
*gimple_call_fn_ptr = *gccc::gimple_call_fn_ptr;
*gimple_call_set_fn = *gccc::gimple_call_set_fn;
*gimple_call_set_fndecl = *gccc::gimple_call_set_fndecl;
*gimple_call_set_internal_fn = *gccc::gimple_call_set_internal_fn;
*gimple_call_fndecl = *gccc::gimple_call_fndecl;
*gimple_call_return_type = *gccc::gimple_call_return_type;
*gimple_call_chain = *gccc::gimple_call_chain;
*gimple_call_chain_ptr = *gccc::gimple_call_chain_ptr;
*gimple_call_set_chain = *gccc::gimple_call_set_chain;
*gimple_call_num_args = *gccc::gimple_call_num_args;
*gimple_call_arg = *gccc::gimple_call_arg;
*gimple_call_arg_ptr = *gccc::gimple_call_arg_ptr;
*gimple_call_set_arg = *gccc::gimple_call_set_arg;
*gimple_call_set_tail = *gccc::gimple_call_set_tail;
*gimple_call_tail_p = *gccc::gimple_call_tail_p;
*gimple_call_set_cannot_inline = *gccc::gimple_call_set_cannot_inline;
*gimple_call_cannot_inline_p = *gccc::gimple_call_cannot_inline_p;
*gimple_call_set_return_slot_opt = *gccc::gimple_call_set_return_slot_opt;
*gimple_call_return_slot_opt_p = *gccc::gimple_call_return_slot_opt_p;
*gimple_call_set_from_thunk = *gccc::gimple_call_set_from_thunk;
*gimple_call_from_thunk_p = *gccc::gimple_call_from_thunk_p;
*gimple_call_set_va_arg_pack = *gccc::gimple_call_set_va_arg_pack;
*gimple_call_va_arg_pack_p = *gccc::gimple_call_va_arg_pack_p;
*gimple_call_noreturn_p = *gccc::gimple_call_noreturn_p;
*gimple_call_set_nothrow = *gccc::gimple_call_set_nothrow;
*gimple_call_nothrow_p = *gccc::gimple_call_nothrow_p;
*gimple_call_copy_flags = *gccc::gimple_call_copy_flags;
*gimple_call_use_set = *gccc::gimple_call_use_set;
*gimple_call_clobber_set = *gccc::gimple_call_clobber_set;
*gimple_has_lhs = *gccc::gimple_has_lhs;
*gimple_cond_code = *gccc::gimple_cond_code;
*gimple_cond_set_code = *gccc::gimple_cond_set_code;
*gimple_cond_lhs = *gccc::gimple_cond_lhs;
*gimple_cond_lhs_ptr = *gccc::gimple_cond_lhs_ptr;
*gimple_cond_set_lhs = *gccc::gimple_cond_set_lhs;
*gimple_cond_rhs = *gccc::gimple_cond_rhs;
*gimple_cond_rhs_ptr = *gccc::gimple_cond_rhs_ptr;
*gimple_cond_set_rhs = *gccc::gimple_cond_set_rhs;
*gimple_cond_true_label = *gccc::gimple_cond_true_label;
*gimple_cond_set_true_label = *gccc::gimple_cond_set_true_label;
*gimple_cond_set_false_label = *gccc::gimple_cond_set_false_label;
*gimple_cond_false_label = *gccc::gimple_cond_false_label;
*gimple_cond_make_false = *gccc::gimple_cond_make_false;
*gimple_cond_make_true = *gccc::gimple_cond_make_true;
*gimple_cond_true_p = *gccc::gimple_cond_true_p;
*gimple_cond_false_p = *gccc::gimple_cond_false_p;
*gimple_cond_single_var_p = *gccc::gimple_cond_single_var_p;
*gimple_cond_set_condition = *gccc::gimple_cond_set_condition;
*gimple_label_label = *gccc::gimple_label_label;
*gimple_label_set_label = *gccc::gimple_label_set_label;
*gimple_goto_dest = *gccc::gimple_goto_dest;
*gimple_goto_set_dest = *gccc::gimple_goto_set_dest;
*gimple_bind_vars = *gccc::gimple_bind_vars;
*gimple_bind_set_vars = *gccc::gimple_bind_set_vars;
*gimple_bind_append_vars = *gccc::gimple_bind_append_vars;
*gimple_bind_body = *gccc::gimple_bind_body;
*gimple_bind_set_body = *gccc::gimple_bind_set_body;
*gimple_bind_add_stmt = *gccc::gimple_bind_add_stmt;
*gimple_bind_add_seq = *gccc::gimple_bind_add_seq;
*gimple_bind_block = *gccc::gimple_bind_block;
*gimple_bind_set_block = *gccc::gimple_bind_set_block;
*gimple_asm_ninputs = *gccc::gimple_asm_ninputs;
*gimple_asm_noutputs = *gccc::gimple_asm_noutputs;
*gimple_asm_nclobbers = *gccc::gimple_asm_nclobbers;
*gimple_asm_nlabels = *gccc::gimple_asm_nlabels;
*gimple_asm_input_op = *gccc::gimple_asm_input_op;
*gimple_asm_input_op_ptr = *gccc::gimple_asm_input_op_ptr;
*gimple_asm_set_input_op = *gccc::gimple_asm_set_input_op;
*gimple_asm_output_op = *gccc::gimple_asm_output_op;
*gimple_asm_output_op_ptr = *gccc::gimple_asm_output_op_ptr;
*gimple_asm_set_output_op = *gccc::gimple_asm_set_output_op;
*gimple_asm_clobber_op = *gccc::gimple_asm_clobber_op;
*gimple_asm_set_clobber_op = *gccc::gimple_asm_set_clobber_op;
*gimple_asm_label_op = *gccc::gimple_asm_label_op;
*gimple_asm_set_label_op = *gccc::gimple_asm_set_label_op;
*gimple_asm_string = *gccc::gimple_asm_string;
*gimple_asm_volatile_p = *gccc::gimple_asm_volatile_p;
*gimple_asm_set_volatile = *gccc::gimple_asm_set_volatile;
*gimple_asm_set_input = *gccc::gimple_asm_set_input;
*gimple_asm_input_p = *gccc::gimple_asm_input_p;
*gimple_catch_types = *gccc::gimple_catch_types;
*gimple_catch_types_ptr = *gccc::gimple_catch_types_ptr;
*gimple_catch_handler = *gccc::gimple_catch_handler;
*gimple_catch_handler_ptr = *gccc::gimple_catch_handler_ptr;
*gimple_catch_set_types = *gccc::gimple_catch_set_types;
*gimple_catch_set_handler = *gccc::gimple_catch_set_handler;
*gimple_eh_filter_types = *gccc::gimple_eh_filter_types;
*gimple_eh_filter_types_ptr = *gccc::gimple_eh_filter_types_ptr;
*gimple_eh_filter_failure = *gccc::gimple_eh_filter_failure;
*gimple_eh_filter_set_types = *gccc::gimple_eh_filter_set_types;
*gimple_eh_filter_set_failure = *gccc::gimple_eh_filter_set_failure;
*gimple_eh_must_not_throw_fndecl = *gccc::gimple_eh_must_not_throw_fndecl;
*gimple_eh_must_not_throw_set_fndecl = *gccc::gimple_eh_must_not_throw_set_fndecl;
*gimple_try_kind = *gccc::gimple_try_kind;
*gimple_try_set_kind = *gccc::gimple_try_set_kind;
*gimple_try_catch_is_cleanup = *gccc::gimple_try_catch_is_cleanup;
*gimple_try_eval = *gccc::gimple_try_eval;
*gimple_try_cleanup = *gccc::gimple_try_cleanup;
*gimple_try_set_catch_is_cleanup = *gccc::gimple_try_set_catch_is_cleanup;
*gimple_try_set_eval = *gccc::gimple_try_set_eval;
*gimple_try_set_cleanup = *gccc::gimple_try_set_cleanup;
*gimple_wce_cleanup = *gccc::gimple_wce_cleanup;
*gimple_wce_set_cleanup = *gccc::gimple_wce_set_cleanup;
*gimple_wce_cleanup_eh_only = *gccc::gimple_wce_cleanup_eh_only;
*gimple_wce_set_cleanup_eh_only = *gccc::gimple_wce_set_cleanup_eh_only;
*gimple_phi_capacity = *gccc::gimple_phi_capacity;
*gimple_phi_num_args = *gccc::gimple_phi_num_args;
*gimple_phi_result = *gccc::gimple_phi_result;
*gimple_phi_result_ptr = *gccc::gimple_phi_result_ptr;
*gimple_phi_set_result = *gccc::gimple_phi_set_result;
*gimple_phi_arg = *gccc::gimple_phi_arg;
*gimple_phi_set_arg = *gccc::gimple_phi_set_arg;
*gimple_resx_region = *gccc::gimple_resx_region;
*gimple_resx_set_region = *gccc::gimple_resx_set_region;
*gimple_eh_dispatch_region = *gccc::gimple_eh_dispatch_region;
*gimple_eh_dispatch_set_region = *gccc::gimple_eh_dispatch_set_region;
*gimple_switch_num_labels = *gccc::gimple_switch_num_labels;
*gimple_switch_set_num_labels = *gccc::gimple_switch_set_num_labels;
*gimple_switch_index = *gccc::gimple_switch_index;
*gimple_switch_index_ptr = *gccc::gimple_switch_index_ptr;
*gimple_switch_set_index = *gccc::gimple_switch_set_index;
*gimple_switch_label = *gccc::gimple_switch_label;
*gimple_switch_set_label = *gccc::gimple_switch_set_label;
*gimple_switch_default_label = *gccc::gimple_switch_default_label;
*gimple_switch_set_default_label = *gccc::gimple_switch_set_default_label;
*is_gimple_debug = *gccc::is_gimple_debug;
*gimple_debug_bind_p = *gccc::gimple_debug_bind_p;
*gimple_debug_bind_get_var = *gccc::gimple_debug_bind_get_var;
*gimple_debug_bind_get_value = *gccc::gimple_debug_bind_get_value;
*gimple_debug_bind_get_value_ptr = *gccc::gimple_debug_bind_get_value_ptr;
*gimple_debug_bind_set_var = *gccc::gimple_debug_bind_set_var;
*gimple_debug_bind_set_value = *gccc::gimple_debug_bind_set_value;
*gimple_debug_bind_reset_value = *gccc::gimple_debug_bind_reset_value;
*gimple_debug_bind_has_value_p = *gccc::gimple_debug_bind_has_value_p;
*gimple_omp_body = *gccc::gimple_omp_body;
*gimple_omp_set_body = *gccc::gimple_omp_set_body;
*gimple_omp_critical_name = *gccc::gimple_omp_critical_name;
*gimple_omp_critical_name_ptr = *gccc::gimple_omp_critical_name_ptr;
*gimple_omp_critical_set_name = *gccc::gimple_omp_critical_set_name;
*gimple_omp_for_clauses = *gccc::gimple_omp_for_clauses;
*gimple_omp_for_clauses_ptr = *gccc::gimple_omp_for_clauses_ptr;
*gimple_omp_for_set_clauses = *gccc::gimple_omp_for_set_clauses;
*gimple_omp_for_collapse = *gccc::gimple_omp_for_collapse;
*gimple_omp_for_index = *gccc::gimple_omp_for_index;
*gimple_omp_for_index_ptr = *gccc::gimple_omp_for_index_ptr;
*gimple_omp_for_set_index = *gccc::gimple_omp_for_set_index;
*gimple_omp_for_initial = *gccc::gimple_omp_for_initial;
*gimple_omp_for_initial_ptr = *gccc::gimple_omp_for_initial_ptr;
*gimple_omp_for_set_initial = *gccc::gimple_omp_for_set_initial;
*gimple_omp_for_final = *gccc::gimple_omp_for_final;
*gimple_omp_for_final_ptr = *gccc::gimple_omp_for_final_ptr;
*gimple_omp_for_set_final = *gccc::gimple_omp_for_set_final;
*gimple_omp_for_incr = *gccc::gimple_omp_for_incr;
*gimple_omp_for_incr_ptr = *gccc::gimple_omp_for_incr_ptr;
*gimple_omp_for_set_incr = *gccc::gimple_omp_for_set_incr;
*gimple_omp_for_pre_body = *gccc::gimple_omp_for_pre_body;
*gimple_omp_for_set_pre_body = *gccc::gimple_omp_for_set_pre_body;
*gimple_omp_parallel_clauses = *gccc::gimple_omp_parallel_clauses;
*gimple_omp_parallel_clauses_ptr = *gccc::gimple_omp_parallel_clauses_ptr;
*gimple_omp_parallel_set_clauses = *gccc::gimple_omp_parallel_set_clauses;
*gimple_omp_parallel_child_fn = *gccc::gimple_omp_parallel_child_fn;
*gimple_omp_parallel_child_fn_ptr = *gccc::gimple_omp_parallel_child_fn_ptr;
*gimple_omp_parallel_set_child_fn = *gccc::gimple_omp_parallel_set_child_fn;
*gimple_omp_parallel_data_arg = *gccc::gimple_omp_parallel_data_arg;
*gimple_omp_parallel_data_arg_ptr = *gccc::gimple_omp_parallel_data_arg_ptr;
*gimple_omp_parallel_set_data_arg = *gccc::gimple_omp_parallel_set_data_arg;
*gimple_omp_task_clauses = *gccc::gimple_omp_task_clauses;
*gimple_omp_task_clauses_ptr = *gccc::gimple_omp_task_clauses_ptr;
*gimple_omp_task_set_clauses = *gccc::gimple_omp_task_set_clauses;
*gimple_omp_task_child_fn = *gccc::gimple_omp_task_child_fn;
*gimple_omp_task_child_fn_ptr = *gccc::gimple_omp_task_child_fn_ptr;
*gimple_omp_task_set_child_fn = *gccc::gimple_omp_task_set_child_fn;
*gimple_omp_task_data_arg = *gccc::gimple_omp_task_data_arg;
*gimple_omp_task_data_arg_ptr = *gccc::gimple_omp_task_data_arg_ptr;
*gimple_omp_task_set_data_arg = *gccc::gimple_omp_task_set_data_arg;
*gimple_omp_taskreg_clauses = *gccc::gimple_omp_taskreg_clauses;
*gimple_omp_taskreg_clauses_ptr = *gccc::gimple_omp_taskreg_clauses_ptr;
*gimple_omp_taskreg_set_clauses = *gccc::gimple_omp_taskreg_set_clauses;
*gimple_omp_taskreg_child_fn = *gccc::gimple_omp_taskreg_child_fn;
*gimple_omp_taskreg_child_fn_ptr = *gccc::gimple_omp_taskreg_child_fn_ptr;
*gimple_omp_taskreg_set_child_fn = *gccc::gimple_omp_taskreg_set_child_fn;
*gimple_omp_taskreg_data_arg = *gccc::gimple_omp_taskreg_data_arg;
*gimple_omp_taskreg_data_arg_ptr = *gccc::gimple_omp_taskreg_data_arg_ptr;
*gimple_omp_taskreg_set_data_arg = *gccc::gimple_omp_taskreg_set_data_arg;
*gimple_omp_task_copy_fn = *gccc::gimple_omp_task_copy_fn;
*gimple_omp_task_copy_fn_ptr = *gccc::gimple_omp_task_copy_fn_ptr;
*gimple_omp_task_set_copy_fn = *gccc::gimple_omp_task_set_copy_fn;
*gimple_omp_task_arg_size = *gccc::gimple_omp_task_arg_size;
*gimple_omp_task_arg_size_ptr = *gccc::gimple_omp_task_arg_size_ptr;
*gimple_omp_task_set_arg_size = *gccc::gimple_omp_task_set_arg_size;
*gimple_omp_task_arg_align = *gccc::gimple_omp_task_arg_align;
*gimple_omp_task_arg_align_ptr = *gccc::gimple_omp_task_arg_align_ptr;
*gimple_omp_task_set_arg_align = *gccc::gimple_omp_task_set_arg_align;
*gimple_omp_single_clauses = *gccc::gimple_omp_single_clauses;
*gimple_omp_single_clauses_ptr = *gccc::gimple_omp_single_clauses_ptr;
*gimple_omp_single_set_clauses = *gccc::gimple_omp_single_set_clauses;
*gimple_omp_sections_clauses = *gccc::gimple_omp_sections_clauses;
*gimple_omp_sections_clauses_ptr = *gccc::gimple_omp_sections_clauses_ptr;
*gimple_omp_sections_set_clauses = *gccc::gimple_omp_sections_set_clauses;
*gimple_omp_sections_control = *gccc::gimple_omp_sections_control;
*gimple_omp_sections_control_ptr = *gccc::gimple_omp_sections_control_ptr;
*gimple_omp_sections_set_control = *gccc::gimple_omp_sections_set_control;
*gimple_omp_for_set_cond = *gccc::gimple_omp_for_set_cond;
*gimple_omp_for_cond = *gccc::gimple_omp_for_cond;
*gimple_omp_atomic_store_set_val = *gccc::gimple_omp_atomic_store_set_val;
*gimple_omp_atomic_store_val = *gccc::gimple_omp_atomic_store_val;
*gimple_omp_atomic_store_val_ptr = *gccc::gimple_omp_atomic_store_val_ptr;
*gimple_omp_atomic_load_set_lhs = *gccc::gimple_omp_atomic_load_set_lhs;
*gimple_omp_atomic_load_lhs = *gccc::gimple_omp_atomic_load_lhs;
*gimple_omp_atomic_load_lhs_ptr = *gccc::gimple_omp_atomic_load_lhs_ptr;
*gimple_omp_atomic_load_set_rhs = *gccc::gimple_omp_atomic_load_set_rhs;
*gimple_omp_atomic_load_rhs = *gccc::gimple_omp_atomic_load_rhs;
*gimple_omp_atomic_load_rhs_ptr = *gccc::gimple_omp_atomic_load_rhs_ptr;
*gimple_omp_continue_control_def = *gccc::gimple_omp_continue_control_def;
*gimple_omp_continue_control_def_ptr = *gccc::gimple_omp_continue_control_def_ptr;
*gimple_omp_continue_set_control_def = *gccc::gimple_omp_continue_set_control_def;
*gimple_omp_continue_control_use = *gccc::gimple_omp_continue_control_use;
*gimple_omp_continue_control_use_ptr = *gccc::gimple_omp_continue_control_use_ptr;
*gimple_omp_continue_set_control_use = *gccc::gimple_omp_continue_set_control_use;
*gimple_return_retval_ptr = *gccc::gimple_return_retval_ptr;
*gimple_return_retval = *gccc::gimple_return_retval;
*gimple_return_set_retval = *gccc::gimple_return_set_retval;
*is_gimple_omp = *gccc::is_gimple_omp;
*gimple_nop_p = *gccc::gimple_nop_p;
*is_gimple_resx = *gccc::is_gimple_resx;
*gimple_predict_predictor = *gccc::gimple_predict_predictor;
*gimple_predict_set_predictor = *gccc::gimple_predict_set_predictor;
*gimple_predict_outcome = *gccc::gimple_predict_outcome;
*gimple_predict_set_outcome = *gccc::gimple_predict_set_outcome;
*gimple_expr_type = *gccc::gimple_expr_type;
*gsi_start = *gccc::gsi_start;
*gsi_start_bb = *gccc::gsi_start_bb;
*gsi_last = *gccc::gsi_last;
*gsi_last_bb = *gccc::gsi_last_bb;
*gsi_end_p = *gccc::gsi_end_p;
*gsi_one_before_end_p = *gccc::gsi_one_before_end_p;
*gsi_next = *gccc::gsi_next;
*gsi_prev = *gccc::gsi_prev;
*gsi_stmt = *gccc::gsi_stmt;
*gsi_after_labels = *gccc::gsi_after_labels;
*gsi_next_nondebug = *gccc::gsi_next_nondebug;
*gsi_prev_nondebug = *gccc::gsi_prev_nondebug;
*gsi_start_nondebug_bb = *gccc::gsi_start_nondebug_bb;
*gsi_last_nondebug_bb = *gccc::gsi_last_nondebug_bb;
*gsi_stmt_ptr = *gccc::gsi_stmt_ptr;
*gsi_bb = *gccc::gsi_bb;
*gsi_seq = *gccc::gsi_seq;
*gsi_start_phis = *gccc::gsi_start_phis;
*gsi_split_seq_after = *gccc::gsi_split_seq_after;
*gsi_split_seq_before = *gccc::gsi_split_seq_before;
*gsi_replace = *gccc::gsi_replace;
*gsi_insert_before = *gccc::gsi_insert_before;
*gsi_insert_before_without_update = *gccc::gsi_insert_before_without_update;
*gsi_insert_seq_before = *gccc::gsi_insert_seq_before;
*gsi_insert_seq_before_without_update = *gccc::gsi_insert_seq_before_without_update;
*gsi_insert_after = *gccc::gsi_insert_after;
*gsi_insert_after_without_update = *gccc::gsi_insert_after_without_update;
*gsi_insert_seq_after = *gccc::gsi_insert_seq_after;
*gsi_insert_seq_after_without_update = *gccc::gsi_insert_seq_after_without_update;
*gsi_remove = *gccc::gsi_remove;
*gsi_for_stmt = *gccc::gsi_for_stmt;
*gsi_move_after = *gccc::gsi_move_after;
*gsi_move_before = *gccc::gsi_move_before;
*gsi_move_to_bb_end = *gccc::gsi_move_to_bb_end;
*gsi_insert_on_edge = *gccc::gsi_insert_on_edge;
*gsi_insert_seq_on_edge = *gccc::gsi_insert_seq_on_edge;
*gsi_insert_on_edge_immediate = *gccc::gsi_insert_on_edge_immediate;
*gsi_insert_seq_on_edge_immediate = *gccc::gsi_insert_seq_on_edge_immediate;
*gsi_commit_one_edge_insert = *gccc::gsi_commit_one_edge_insert;
*gsi_commit_edge_inserts = *gccc::gsi_commit_edge_inserts;
*gimple_call_copy_skip_args = *gccc::gimple_call_copy_skip_args;
*walk_gimple_seq = *gccc::walk_gimple_seq;
*walk_gimple_stmt = *gccc::walk_gimple_stmt;
*walk_gimple_op = *gccc::walk_gimple_op;
*dump_gimple_statistics = *gccc::dump_gimple_statistics;
*gimplify_and_update_call_from_tree = *gccc::gimplify_and_update_call_from_tree;
*gimple_fold_builtin = *gccc::gimple_fold_builtin;
*fold_stmt = *gccc::fold_stmt;
*fold_stmt_inplace = *gccc::fold_stmt_inplace;
*maybe_fold_offset_to_address = *gccc::maybe_fold_offset_to_address;
*maybe_fold_offset_to_reference = *gccc::maybe_fold_offset_to_reference;
*maybe_fold_stmt_addition = *gccc::maybe_fold_stmt_addition;
*get_symbol_constant_value = *gccc::get_symbol_constant_value;
*canonicalize_constructor_val = *gccc::canonicalize_constructor_val;
*may_propagate_address_into_dereference = *gccc::may_propagate_address_into_dereference;
*maybe_fold_and_comparisons = *gccc::maybe_fold_and_comparisons;
*maybe_fold_or_comparisons = *gccc::maybe_fold_or_comparisons;
*VEC_ipa_ref_t_base_length = *gccc::VEC_ipa_ref_t_base_length;
*VEC_ipa_ref_t_base_last = *gccc::VEC_ipa_ref_t_base_last;
*VEC_ipa_ref_t_base_index = *gccc::VEC_ipa_ref_t_base_index;
*VEC_ipa_ref_t_base_iterate = *gccc::VEC_ipa_ref_t_base_iterate;
*VEC_ipa_ref_t_base_embedded_size = *gccc::VEC_ipa_ref_t_base_embedded_size;
*VEC_ipa_ref_t_base_embedded_init = *gccc::VEC_ipa_ref_t_base_embedded_init;
*VEC_ipa_ref_t_base_space = *gccc::VEC_ipa_ref_t_base_space;
*VEC_ipa_ref_t_base_splice = *gccc::VEC_ipa_ref_t_base_splice;
*VEC_ipa_ref_t_base_quick_push = *gccc::VEC_ipa_ref_t_base_quick_push;
*VEC_ipa_ref_t_base_pop = *gccc::VEC_ipa_ref_t_base_pop;
*VEC_ipa_ref_t_base_truncate = *gccc::VEC_ipa_ref_t_base_truncate;
*VEC_ipa_ref_t_base_replace = *gccc::VEC_ipa_ref_t_base_replace;
*VEC_ipa_ref_t_base_quick_insert = *gccc::VEC_ipa_ref_t_base_quick_insert;
*VEC_ipa_ref_t_base_ordered_remove = *gccc::VEC_ipa_ref_t_base_ordered_remove;
*VEC_ipa_ref_t_base_unordered_remove = *gccc::VEC_ipa_ref_t_base_unordered_remove;
*VEC_ipa_ref_t_base_block_remove = *gccc::VEC_ipa_ref_t_base_block_remove;
*VEC_ipa_ref_t_base_address = *gccc::VEC_ipa_ref_t_base_address;
*VEC_ipa_ref_t_base_lower_bound = *gccc::VEC_ipa_ref_t_base_lower_bound;
*VEC_ipa_ref_t_gc_alloc = *gccc::VEC_ipa_ref_t_gc_alloc;
*VEC_ipa_ref_t_gc_copy = *gccc::VEC_ipa_ref_t_gc_copy;
*VEC_ipa_ref_t_gc_free = *gccc::VEC_ipa_ref_t_gc_free;
*VEC_ipa_ref_t_gc_reserve = *gccc::VEC_ipa_ref_t_gc_reserve;
*VEC_ipa_ref_t_gc_reserve_exact = *gccc::VEC_ipa_ref_t_gc_reserve_exact;
*VEC_ipa_ref_t_gc_safe_grow = *gccc::VEC_ipa_ref_t_gc_safe_grow;
*VEC_ipa_ref_t_gc_safe_grow_cleared = *gccc::VEC_ipa_ref_t_gc_safe_grow_cleared;
*VEC_ipa_ref_t_gc_safe_splice = *gccc::VEC_ipa_ref_t_gc_safe_splice;
*VEC_ipa_ref_t_gc_safe_push = *gccc::VEC_ipa_ref_t_gc_safe_push;
*VEC_ipa_ref_t_gc_safe_insert = *gccc::VEC_ipa_ref_t_gc_safe_insert;
*VEC_ipa_ref_ptr_must_be_pointer_type = *gccc::VEC_ipa_ref_ptr_must_be_pointer_type;
*VEC_ipa_ref_ptr_base_length = *gccc::VEC_ipa_ref_ptr_base_length;
*VEC_ipa_ref_ptr_base_last = *gccc::VEC_ipa_ref_ptr_base_last;
*VEC_ipa_ref_ptr_base_index = *gccc::VEC_ipa_ref_ptr_base_index;
*VEC_ipa_ref_ptr_base_iterate = *gccc::VEC_ipa_ref_ptr_base_iterate;
*VEC_ipa_ref_ptr_base_embedded_size = *gccc::VEC_ipa_ref_ptr_base_embedded_size;
*VEC_ipa_ref_ptr_base_embedded_init = *gccc::VEC_ipa_ref_ptr_base_embedded_init;
*VEC_ipa_ref_ptr_base_space = *gccc::VEC_ipa_ref_ptr_base_space;
*VEC_ipa_ref_ptr_base_splice = *gccc::VEC_ipa_ref_ptr_base_splice;
*VEC_ipa_ref_ptr_base_quick_push = *gccc::VEC_ipa_ref_ptr_base_quick_push;
*VEC_ipa_ref_ptr_base_pop = *gccc::VEC_ipa_ref_ptr_base_pop;
*VEC_ipa_ref_ptr_base_truncate = *gccc::VEC_ipa_ref_ptr_base_truncate;
*VEC_ipa_ref_ptr_base_replace = *gccc::VEC_ipa_ref_ptr_base_replace;
*VEC_ipa_ref_ptr_base_quick_insert = *gccc::VEC_ipa_ref_ptr_base_quick_insert;
*VEC_ipa_ref_ptr_base_ordered_remove = *gccc::VEC_ipa_ref_ptr_base_ordered_remove;
*VEC_ipa_ref_ptr_base_unordered_remove = *gccc::VEC_ipa_ref_ptr_base_unordered_remove;
*VEC_ipa_ref_ptr_base_block_remove = *gccc::VEC_ipa_ref_ptr_base_block_remove;
*VEC_ipa_ref_ptr_base_address = *gccc::VEC_ipa_ref_ptr_base_address;
*VEC_ipa_ref_ptr_base_lower_bound = *gccc::VEC_ipa_ref_ptr_base_lower_bound;
*VEC_ipa_ref_ptr_heap_alloc = *gccc::VEC_ipa_ref_ptr_heap_alloc;
*VEC_ipa_ref_ptr_heap_free = *gccc::VEC_ipa_ref_ptr_heap_free;
*VEC_ipa_ref_ptr_heap_copy = *gccc::VEC_ipa_ref_ptr_heap_copy;
*VEC_ipa_ref_ptr_heap_reserve = *gccc::VEC_ipa_ref_ptr_heap_reserve;
*VEC_ipa_ref_ptr_heap_reserve_exact = *gccc::VEC_ipa_ref_ptr_heap_reserve_exact;
*VEC_ipa_ref_ptr_heap_safe_grow = *gccc::VEC_ipa_ref_ptr_heap_safe_grow;
*VEC_ipa_ref_ptr_heap_safe_grow_cleared = *gccc::VEC_ipa_ref_ptr_heap_safe_grow_cleared;
*VEC_ipa_ref_ptr_heap_safe_splice = *gccc::VEC_ipa_ref_ptr_heap_safe_splice;
*VEC_ipa_ref_ptr_heap_safe_push = *gccc::VEC_ipa_ref_ptr_heap_safe_push;
*VEC_ipa_ref_ptr_heap_safe_insert = *gccc::VEC_ipa_ref_ptr_heap_safe_insert;
*ipa_record_reference = *gccc::ipa_record_reference;
*ipa_remove_reference = *gccc::ipa_remove_reference;
*ipa_remove_all_references = *gccc::ipa_remove_all_references;
*ipa_remove_all_refering = *gccc::ipa_remove_all_refering;
*ipa_dump_references = *gccc::ipa_dump_references;
*ipa_dump_refering = *gccc::ipa_dump_refering;
*ipa_clone_references = *gccc::ipa_clone_references;
*ipa_clone_refering = *gccc::ipa_clone_refering;
*ipa_ref_cannot_lead_to_return = *gccc::ipa_ref_cannot_lead_to_return;
*VEC_ipa_replace_map_p_must_be_pointer_type = *gccc::VEC_ipa_replace_map_p_must_be_pointer_type;
*VEC_ipa_replace_map_p_base_length = *gccc::VEC_ipa_replace_map_p_base_length;
*VEC_ipa_replace_map_p_base_last = *gccc::VEC_ipa_replace_map_p_base_last;
*VEC_ipa_replace_map_p_base_index = *gccc::VEC_ipa_replace_map_p_base_index;
*VEC_ipa_replace_map_p_base_iterate = *gccc::VEC_ipa_replace_map_p_base_iterate;
*VEC_ipa_replace_map_p_base_embedded_size = *gccc::VEC_ipa_replace_map_p_base_embedded_size;
*VEC_ipa_replace_map_p_base_embedded_init = *gccc::VEC_ipa_replace_map_p_base_embedded_init;
*VEC_ipa_replace_map_p_base_space = *gccc::VEC_ipa_replace_map_p_base_space;
*VEC_ipa_replace_map_p_base_splice = *gccc::VEC_ipa_replace_map_p_base_splice;
*VEC_ipa_replace_map_p_base_quick_push = *gccc::VEC_ipa_replace_map_p_base_quick_push;
*VEC_ipa_replace_map_p_base_pop = *gccc::VEC_ipa_replace_map_p_base_pop;
*VEC_ipa_replace_map_p_base_truncate = *gccc::VEC_ipa_replace_map_p_base_truncate;
*VEC_ipa_replace_map_p_base_replace = *gccc::VEC_ipa_replace_map_p_base_replace;
*VEC_ipa_replace_map_p_base_quick_insert = *gccc::VEC_ipa_replace_map_p_base_quick_insert;
*VEC_ipa_replace_map_p_base_ordered_remove = *gccc::VEC_ipa_replace_map_p_base_ordered_remove;
*VEC_ipa_replace_map_p_base_unordered_remove = *gccc::VEC_ipa_replace_map_p_base_unordered_remove;
*VEC_ipa_replace_map_p_base_block_remove = *gccc::VEC_ipa_replace_map_p_base_block_remove;
*VEC_ipa_replace_map_p_base_address = *gccc::VEC_ipa_replace_map_p_base_address;
*VEC_ipa_replace_map_p_base_lower_bound = *gccc::VEC_ipa_replace_map_p_base_lower_bound;
*VEC_ipa_replace_map_p_gc_alloc = *gccc::VEC_ipa_replace_map_p_gc_alloc;
*VEC_ipa_replace_map_p_gc_free = *gccc::VEC_ipa_replace_map_p_gc_free;
*VEC_ipa_replace_map_p_gc_copy = *gccc::VEC_ipa_replace_map_p_gc_copy;
*VEC_ipa_replace_map_p_gc_reserve = *gccc::VEC_ipa_replace_map_p_gc_reserve;
*VEC_ipa_replace_map_p_gc_reserve_exact = *gccc::VEC_ipa_replace_map_p_gc_reserve_exact;
*VEC_ipa_replace_map_p_gc_safe_grow = *gccc::VEC_ipa_replace_map_p_gc_safe_grow;
*VEC_ipa_replace_map_p_gc_safe_grow_cleared = *gccc::VEC_ipa_replace_map_p_gc_safe_grow_cleared;
*VEC_ipa_replace_map_p_gc_safe_splice = *gccc::VEC_ipa_replace_map_p_gc_safe_splice;
*VEC_ipa_replace_map_p_gc_safe_push = *gccc::VEC_ipa_replace_map_p_gc_safe_push;
*VEC_ipa_replace_map_p_gc_safe_insert = *gccc::VEC_ipa_replace_map_p_gc_safe_insert;
*VEC_cgraph_node_ptr_must_be_pointer_type = *gccc::VEC_cgraph_node_ptr_must_be_pointer_type;
*VEC_cgraph_node_ptr_base_length = *gccc::VEC_cgraph_node_ptr_base_length;
*VEC_cgraph_node_ptr_base_last = *gccc::VEC_cgraph_node_ptr_base_last;
*VEC_cgraph_node_ptr_base_index = *gccc::VEC_cgraph_node_ptr_base_index;
*VEC_cgraph_node_ptr_base_iterate = *gccc::VEC_cgraph_node_ptr_base_iterate;
*VEC_cgraph_node_ptr_base_embedded_size = *gccc::VEC_cgraph_node_ptr_base_embedded_size;
*VEC_cgraph_node_ptr_base_embedded_init = *gccc::VEC_cgraph_node_ptr_base_embedded_init;
*VEC_cgraph_node_ptr_base_space = *gccc::VEC_cgraph_node_ptr_base_space;
*VEC_cgraph_node_ptr_base_splice = *gccc::VEC_cgraph_node_ptr_base_splice;
*VEC_cgraph_node_ptr_base_quick_push = *gccc::VEC_cgraph_node_ptr_base_quick_push;
*VEC_cgraph_node_ptr_base_pop = *gccc::VEC_cgraph_node_ptr_base_pop;
*VEC_cgraph_node_ptr_base_truncate = *gccc::VEC_cgraph_node_ptr_base_truncate;
*VEC_cgraph_node_ptr_base_replace = *gccc::VEC_cgraph_node_ptr_base_replace;
*VEC_cgraph_node_ptr_base_quick_insert = *gccc::VEC_cgraph_node_ptr_base_quick_insert;
*VEC_cgraph_node_ptr_base_ordered_remove = *gccc::VEC_cgraph_node_ptr_base_ordered_remove;
*VEC_cgraph_node_ptr_base_unordered_remove = *gccc::VEC_cgraph_node_ptr_base_unordered_remove;
*VEC_cgraph_node_ptr_base_block_remove = *gccc::VEC_cgraph_node_ptr_base_block_remove;
*VEC_cgraph_node_ptr_base_address = *gccc::VEC_cgraph_node_ptr_base_address;
*VEC_cgraph_node_ptr_base_lower_bound = *gccc::VEC_cgraph_node_ptr_base_lower_bound;
*VEC_cgraph_node_ptr_heap_alloc = *gccc::VEC_cgraph_node_ptr_heap_alloc;
*VEC_cgraph_node_ptr_heap_free = *gccc::VEC_cgraph_node_ptr_heap_free;
*VEC_cgraph_node_ptr_heap_copy = *gccc::VEC_cgraph_node_ptr_heap_copy;
*VEC_cgraph_node_ptr_heap_reserve = *gccc::VEC_cgraph_node_ptr_heap_reserve;
*VEC_cgraph_node_ptr_heap_reserve_exact = *gccc::VEC_cgraph_node_ptr_heap_reserve_exact;
*VEC_cgraph_node_ptr_heap_safe_grow = *gccc::VEC_cgraph_node_ptr_heap_safe_grow;
*VEC_cgraph_node_ptr_heap_safe_grow_cleared = *gccc::VEC_cgraph_node_ptr_heap_safe_grow_cleared;
*VEC_cgraph_node_ptr_heap_safe_splice = *gccc::VEC_cgraph_node_ptr_heap_safe_splice;
*VEC_cgraph_node_ptr_heap_safe_push = *gccc::VEC_cgraph_node_ptr_heap_safe_push;
*VEC_cgraph_node_ptr_heap_safe_insert = *gccc::VEC_cgraph_node_ptr_heap_safe_insert;
*VEC_cgraph_node_ptr_gc_alloc = *gccc::VEC_cgraph_node_ptr_gc_alloc;
*VEC_cgraph_node_ptr_gc_free = *gccc::VEC_cgraph_node_ptr_gc_free;
*VEC_cgraph_node_ptr_gc_copy = *gccc::VEC_cgraph_node_ptr_gc_copy;
*VEC_cgraph_node_ptr_gc_reserve = *gccc::VEC_cgraph_node_ptr_gc_reserve;
*VEC_cgraph_node_ptr_gc_reserve_exact = *gccc::VEC_cgraph_node_ptr_gc_reserve_exact;
*VEC_cgraph_node_ptr_gc_safe_grow = *gccc::VEC_cgraph_node_ptr_gc_safe_grow;
*VEC_cgraph_node_ptr_gc_safe_grow_cleared = *gccc::VEC_cgraph_node_ptr_gc_safe_grow_cleared;
*VEC_cgraph_node_ptr_gc_safe_splice = *gccc::VEC_cgraph_node_ptr_gc_safe_splice;
*VEC_cgraph_node_ptr_gc_safe_push = *gccc::VEC_cgraph_node_ptr_gc_safe_push;
*VEC_cgraph_node_ptr_gc_safe_insert = *gccc::VEC_cgraph_node_ptr_gc_safe_insert;
*VEC_varpool_node_ptr_must_be_pointer_type = *gccc::VEC_varpool_node_ptr_must_be_pointer_type;
*VEC_varpool_node_ptr_base_length = *gccc::VEC_varpool_node_ptr_base_length;
*VEC_varpool_node_ptr_base_last = *gccc::VEC_varpool_node_ptr_base_last;
*VEC_varpool_node_ptr_base_index = *gccc::VEC_varpool_node_ptr_base_index;
*VEC_varpool_node_ptr_base_iterate = *gccc::VEC_varpool_node_ptr_base_iterate;
*VEC_varpool_node_ptr_base_embedded_size = *gccc::VEC_varpool_node_ptr_base_embedded_size;
*VEC_varpool_node_ptr_base_embedded_init = *gccc::VEC_varpool_node_ptr_base_embedded_init;
*VEC_varpool_node_ptr_base_space = *gccc::VEC_varpool_node_ptr_base_space;
*VEC_varpool_node_ptr_base_splice = *gccc::VEC_varpool_node_ptr_base_splice;
*VEC_varpool_node_ptr_base_quick_push = *gccc::VEC_varpool_node_ptr_base_quick_push;
*VEC_varpool_node_ptr_base_pop = *gccc::VEC_varpool_node_ptr_base_pop;
*VEC_varpool_node_ptr_base_truncate = *gccc::VEC_varpool_node_ptr_base_truncate;
*VEC_varpool_node_ptr_base_replace = *gccc::VEC_varpool_node_ptr_base_replace;
*VEC_varpool_node_ptr_base_quick_insert = *gccc::VEC_varpool_node_ptr_base_quick_insert;
*VEC_varpool_node_ptr_base_ordered_remove = *gccc::VEC_varpool_node_ptr_base_ordered_remove;
*VEC_varpool_node_ptr_base_unordered_remove = *gccc::VEC_varpool_node_ptr_base_unordered_remove;
*VEC_varpool_node_ptr_base_block_remove = *gccc::VEC_varpool_node_ptr_base_block_remove;
*VEC_varpool_node_ptr_base_address = *gccc::VEC_varpool_node_ptr_base_address;
*VEC_varpool_node_ptr_base_lower_bound = *gccc::VEC_varpool_node_ptr_base_lower_bound;
*VEC_varpool_node_ptr_heap_alloc = *gccc::VEC_varpool_node_ptr_heap_alloc;
*VEC_varpool_node_ptr_heap_free = *gccc::VEC_varpool_node_ptr_heap_free;
*VEC_varpool_node_ptr_heap_copy = *gccc::VEC_varpool_node_ptr_heap_copy;
*VEC_varpool_node_ptr_heap_reserve = *gccc::VEC_varpool_node_ptr_heap_reserve;
*VEC_varpool_node_ptr_heap_reserve_exact = *gccc::VEC_varpool_node_ptr_heap_reserve_exact;
*VEC_varpool_node_ptr_heap_safe_grow = *gccc::VEC_varpool_node_ptr_heap_safe_grow;
*VEC_varpool_node_ptr_heap_safe_grow_cleared = *gccc::VEC_varpool_node_ptr_heap_safe_grow_cleared;
*VEC_varpool_node_ptr_heap_safe_splice = *gccc::VEC_varpool_node_ptr_heap_safe_splice;
*VEC_varpool_node_ptr_heap_safe_push = *gccc::VEC_varpool_node_ptr_heap_safe_push;
*VEC_varpool_node_ptr_heap_safe_insert = *gccc::VEC_varpool_node_ptr_heap_safe_insert;
*VEC_varpool_node_ptr_gc_alloc = *gccc::VEC_varpool_node_ptr_gc_alloc;
*VEC_varpool_node_ptr_gc_free = *gccc::VEC_varpool_node_ptr_gc_free;
*VEC_varpool_node_ptr_gc_copy = *gccc::VEC_varpool_node_ptr_gc_copy;
*VEC_varpool_node_ptr_gc_reserve = *gccc::VEC_varpool_node_ptr_gc_reserve;
*VEC_varpool_node_ptr_gc_reserve_exact = *gccc::VEC_varpool_node_ptr_gc_reserve_exact;
*VEC_varpool_node_ptr_gc_safe_grow = *gccc::VEC_varpool_node_ptr_gc_safe_grow;
*VEC_varpool_node_ptr_gc_safe_grow_cleared = *gccc::VEC_varpool_node_ptr_gc_safe_grow_cleared;
*VEC_varpool_node_ptr_gc_safe_splice = *gccc::VEC_varpool_node_ptr_gc_safe_splice;
*VEC_varpool_node_ptr_gc_safe_push = *gccc::VEC_varpool_node_ptr_gc_safe_push;
*VEC_varpool_node_ptr_gc_safe_insert = *gccc::VEC_varpool_node_ptr_gc_safe_insert;
*VEC_cgraph_node_set_must_be_pointer_type = *gccc::VEC_cgraph_node_set_must_be_pointer_type;
*VEC_cgraph_node_set_base_length = *gccc::VEC_cgraph_node_set_base_length;
*VEC_cgraph_node_set_base_last = *gccc::VEC_cgraph_node_set_base_last;
*VEC_cgraph_node_set_base_index = *gccc::VEC_cgraph_node_set_base_index;
*VEC_cgraph_node_set_base_iterate = *gccc::VEC_cgraph_node_set_base_iterate;
*VEC_cgraph_node_set_base_embedded_size = *gccc::VEC_cgraph_node_set_base_embedded_size;
*VEC_cgraph_node_set_base_embedded_init = *gccc::VEC_cgraph_node_set_base_embedded_init;
*VEC_cgraph_node_set_base_space = *gccc::VEC_cgraph_node_set_base_space;
*VEC_cgraph_node_set_base_splice = *gccc::VEC_cgraph_node_set_base_splice;
*VEC_cgraph_node_set_base_quick_push = *gccc::VEC_cgraph_node_set_base_quick_push;
*VEC_cgraph_node_set_base_pop = *gccc::VEC_cgraph_node_set_base_pop;
*VEC_cgraph_node_set_base_truncate = *gccc::VEC_cgraph_node_set_base_truncate;
*VEC_cgraph_node_set_base_replace = *gccc::VEC_cgraph_node_set_base_replace;
*VEC_cgraph_node_set_base_quick_insert = *gccc::VEC_cgraph_node_set_base_quick_insert;
*VEC_cgraph_node_set_base_ordered_remove = *gccc::VEC_cgraph_node_set_base_ordered_remove;
*VEC_cgraph_node_set_base_unordered_remove = *gccc::VEC_cgraph_node_set_base_unordered_remove;
*VEC_cgraph_node_set_base_block_remove = *gccc::VEC_cgraph_node_set_base_block_remove;
*VEC_cgraph_node_set_base_address = *gccc::VEC_cgraph_node_set_base_address;
*VEC_cgraph_node_set_base_lower_bound = *gccc::VEC_cgraph_node_set_base_lower_bound;
*VEC_cgraph_node_set_gc_alloc = *gccc::VEC_cgraph_node_set_gc_alloc;
*VEC_cgraph_node_set_gc_free = *gccc::VEC_cgraph_node_set_gc_free;
*VEC_cgraph_node_set_gc_copy = *gccc::VEC_cgraph_node_set_gc_copy;
*VEC_cgraph_node_set_gc_reserve = *gccc::VEC_cgraph_node_set_gc_reserve;
*VEC_cgraph_node_set_gc_reserve_exact = *gccc::VEC_cgraph_node_set_gc_reserve_exact;
*VEC_cgraph_node_set_gc_safe_grow = *gccc::VEC_cgraph_node_set_gc_safe_grow;
*VEC_cgraph_node_set_gc_safe_grow_cleared = *gccc::VEC_cgraph_node_set_gc_safe_grow_cleared;
*VEC_cgraph_node_set_gc_safe_splice = *gccc::VEC_cgraph_node_set_gc_safe_splice;
*VEC_cgraph_node_set_gc_safe_push = *gccc::VEC_cgraph_node_set_gc_safe_push;
*VEC_cgraph_node_set_gc_safe_insert = *gccc::VEC_cgraph_node_set_gc_safe_insert;
*VEC_cgraph_node_set_heap_alloc = *gccc::VEC_cgraph_node_set_heap_alloc;
*VEC_cgraph_node_set_heap_free = *gccc::VEC_cgraph_node_set_heap_free;
*VEC_cgraph_node_set_heap_copy = *gccc::VEC_cgraph_node_set_heap_copy;
*VEC_cgraph_node_set_heap_reserve = *gccc::VEC_cgraph_node_set_heap_reserve;
*VEC_cgraph_node_set_heap_reserve_exact = *gccc::VEC_cgraph_node_set_heap_reserve_exact;
*VEC_cgraph_node_set_heap_safe_grow = *gccc::VEC_cgraph_node_set_heap_safe_grow;
*VEC_cgraph_node_set_heap_safe_grow_cleared = *gccc::VEC_cgraph_node_set_heap_safe_grow_cleared;
*VEC_cgraph_node_set_heap_safe_splice = *gccc::VEC_cgraph_node_set_heap_safe_splice;
*VEC_cgraph_node_set_heap_safe_push = *gccc::VEC_cgraph_node_set_heap_safe_push;
*VEC_cgraph_node_set_heap_safe_insert = *gccc::VEC_cgraph_node_set_heap_safe_insert;
*VEC_varpool_node_set_must_be_pointer_type = *gccc::VEC_varpool_node_set_must_be_pointer_type;
*VEC_varpool_node_set_base_length = *gccc::VEC_varpool_node_set_base_length;
*VEC_varpool_node_set_base_last = *gccc::VEC_varpool_node_set_base_last;
*VEC_varpool_node_set_base_index = *gccc::VEC_varpool_node_set_base_index;
*VEC_varpool_node_set_base_iterate = *gccc::VEC_varpool_node_set_base_iterate;
*VEC_varpool_node_set_base_embedded_size = *gccc::VEC_varpool_node_set_base_embedded_size;
*VEC_varpool_node_set_base_embedded_init = *gccc::VEC_varpool_node_set_base_embedded_init;
*VEC_varpool_node_set_base_space = *gccc::VEC_varpool_node_set_base_space;
*VEC_varpool_node_set_base_splice = *gccc::VEC_varpool_node_set_base_splice;
*VEC_varpool_node_set_base_quick_push = *gccc::VEC_varpool_node_set_base_quick_push;
*VEC_varpool_node_set_base_pop = *gccc::VEC_varpool_node_set_base_pop;
*VEC_varpool_node_set_base_truncate = *gccc::VEC_varpool_node_set_base_truncate;
*VEC_varpool_node_set_base_replace = *gccc::VEC_varpool_node_set_base_replace;
*VEC_varpool_node_set_base_quick_insert = *gccc::VEC_varpool_node_set_base_quick_insert;
*VEC_varpool_node_set_base_ordered_remove = *gccc::VEC_varpool_node_set_base_ordered_remove;
*VEC_varpool_node_set_base_unordered_remove = *gccc::VEC_varpool_node_set_base_unordered_remove;
*VEC_varpool_node_set_base_block_remove = *gccc::VEC_varpool_node_set_base_block_remove;
*VEC_varpool_node_set_base_address = *gccc::VEC_varpool_node_set_base_address;
*VEC_varpool_node_set_base_lower_bound = *gccc::VEC_varpool_node_set_base_lower_bound;
*VEC_varpool_node_set_gc_alloc = *gccc::VEC_varpool_node_set_gc_alloc;
*VEC_varpool_node_set_gc_free = *gccc::VEC_varpool_node_set_gc_free;
*VEC_varpool_node_set_gc_copy = *gccc::VEC_varpool_node_set_gc_copy;
*VEC_varpool_node_set_gc_reserve = *gccc::VEC_varpool_node_set_gc_reserve;
*VEC_varpool_node_set_gc_reserve_exact = *gccc::VEC_varpool_node_set_gc_reserve_exact;
*VEC_varpool_node_set_gc_safe_grow = *gccc::VEC_varpool_node_set_gc_safe_grow;
*VEC_varpool_node_set_gc_safe_grow_cleared = *gccc::VEC_varpool_node_set_gc_safe_grow_cleared;
*VEC_varpool_node_set_gc_safe_splice = *gccc::VEC_varpool_node_set_gc_safe_splice;
*VEC_varpool_node_set_gc_safe_push = *gccc::VEC_varpool_node_set_gc_safe_push;
*VEC_varpool_node_set_gc_safe_insert = *gccc::VEC_varpool_node_set_gc_safe_insert;
*VEC_varpool_node_set_heap_alloc = *gccc::VEC_varpool_node_set_heap_alloc;
*VEC_varpool_node_set_heap_free = *gccc::VEC_varpool_node_set_heap_free;
*VEC_varpool_node_set_heap_copy = *gccc::VEC_varpool_node_set_heap_copy;
*VEC_varpool_node_set_heap_reserve = *gccc::VEC_varpool_node_set_heap_reserve;
*VEC_varpool_node_set_heap_reserve_exact = *gccc::VEC_varpool_node_set_heap_reserve_exact;
*VEC_varpool_node_set_heap_safe_grow = *gccc::VEC_varpool_node_set_heap_safe_grow;
*VEC_varpool_node_set_heap_safe_grow_cleared = *gccc::VEC_varpool_node_set_heap_safe_grow_cleared;
*VEC_varpool_node_set_heap_safe_splice = *gccc::VEC_varpool_node_set_heap_safe_splice;
*VEC_varpool_node_set_heap_safe_push = *gccc::VEC_varpool_node_set_heap_safe_push;
*VEC_varpool_node_set_heap_safe_insert = *gccc::VEC_varpool_node_set_heap_safe_insert;
*VEC_cgraph_edge_p_must_be_pointer_type = *gccc::VEC_cgraph_edge_p_must_be_pointer_type;
*VEC_cgraph_edge_p_base_length = *gccc::VEC_cgraph_edge_p_base_length;
*VEC_cgraph_edge_p_base_last = *gccc::VEC_cgraph_edge_p_base_last;
*VEC_cgraph_edge_p_base_index = *gccc::VEC_cgraph_edge_p_base_index;
*VEC_cgraph_edge_p_base_iterate = *gccc::VEC_cgraph_edge_p_base_iterate;
*VEC_cgraph_edge_p_base_embedded_size = *gccc::VEC_cgraph_edge_p_base_embedded_size;
*VEC_cgraph_edge_p_base_embedded_init = *gccc::VEC_cgraph_edge_p_base_embedded_init;
*VEC_cgraph_edge_p_base_space = *gccc::VEC_cgraph_edge_p_base_space;
*VEC_cgraph_edge_p_base_splice = *gccc::VEC_cgraph_edge_p_base_splice;
*VEC_cgraph_edge_p_base_quick_push = *gccc::VEC_cgraph_edge_p_base_quick_push;
*VEC_cgraph_edge_p_base_pop = *gccc::VEC_cgraph_edge_p_base_pop;
*VEC_cgraph_edge_p_base_truncate = *gccc::VEC_cgraph_edge_p_base_truncate;
*VEC_cgraph_edge_p_base_replace = *gccc::VEC_cgraph_edge_p_base_replace;
*VEC_cgraph_edge_p_base_quick_insert = *gccc::VEC_cgraph_edge_p_base_quick_insert;
*VEC_cgraph_edge_p_base_ordered_remove = *gccc::VEC_cgraph_edge_p_base_ordered_remove;
*VEC_cgraph_edge_p_base_unordered_remove = *gccc::VEC_cgraph_edge_p_base_unordered_remove;
*VEC_cgraph_edge_p_base_block_remove = *gccc::VEC_cgraph_edge_p_base_block_remove;
*VEC_cgraph_edge_p_base_address = *gccc::VEC_cgraph_edge_p_base_address;
*VEC_cgraph_edge_p_base_lower_bound = *gccc::VEC_cgraph_edge_p_base_lower_bound;
*VEC_cgraph_edge_p_heap_alloc = *gccc::VEC_cgraph_edge_p_heap_alloc;
*VEC_cgraph_edge_p_heap_free = *gccc::VEC_cgraph_edge_p_heap_free;
*VEC_cgraph_edge_p_heap_copy = *gccc::VEC_cgraph_edge_p_heap_copy;
*VEC_cgraph_edge_p_heap_reserve = *gccc::VEC_cgraph_edge_p_heap_reserve;
*VEC_cgraph_edge_p_heap_reserve_exact = *gccc::VEC_cgraph_edge_p_heap_reserve_exact;
*VEC_cgraph_edge_p_heap_safe_grow = *gccc::VEC_cgraph_edge_p_heap_safe_grow;
*VEC_cgraph_edge_p_heap_safe_grow_cleared = *gccc::VEC_cgraph_edge_p_heap_safe_grow_cleared;
*VEC_cgraph_edge_p_heap_safe_splice = *gccc::VEC_cgraph_edge_p_heap_safe_splice;
*VEC_cgraph_edge_p_heap_safe_push = *gccc::VEC_cgraph_edge_p_heap_safe_push;
*VEC_cgraph_edge_p_heap_safe_insert = *gccc::VEC_cgraph_edge_p_heap_safe_insert;
*dump_cgraph = *gccc::dump_cgraph;
*debug_cgraph = *gccc::debug_cgraph;
*dump_cgraph_node = *gccc::dump_cgraph_node;
*debug_cgraph_node = *gccc::debug_cgraph_node;
*cgraph_insert_node_to_hashtable = *gccc::cgraph_insert_node_to_hashtable;
*cgraph_remove_edge = *gccc::cgraph_remove_edge;
*cgraph_remove_node = *gccc::cgraph_remove_node;
*cgraph_remove_node_and_inline_clones = *gccc::cgraph_remove_node_and_inline_clones;
*cgraph_release_function_body = *gccc::cgraph_release_function_body;
*cgraph_node_remove_callees = *gccc::cgraph_node_remove_callees;
*cgraph_create_edge = *gccc::cgraph_create_edge;
*cgraph_create_indirect_edge = *gccc::cgraph_create_indirect_edge;
*cgraph_allocate_init_indirect_info = *gccc::cgraph_allocate_init_indirect_info;
*cgraph_get_node = *gccc::cgraph_get_node;
*cgraph_get_node_or_alias = *gccc::cgraph_get_node_or_alias;
*cgraph_same_body_alias = *gccc::cgraph_same_body_alias;
*cgraph_add_thunk = *gccc::cgraph_add_thunk;
*cgraph_remove_same_body_alias = *gccc::cgraph_remove_same_body_alias;
*cgraph_node_for_asm = *gccc::cgraph_node_for_asm;
*cgraph_set_call_stmt = *gccc::cgraph_set_call_stmt;
*cgraph_set_call_stmt_including_clones = *gccc::cgraph_set_call_stmt_including_clones;
*cgraph_create_edge_including_clones = *gccc::cgraph_create_edge_including_clones;
*cgraph_update_edges_for_call_stmt = *gccc::cgraph_update_edges_for_call_stmt;
*cgraph_node_name = *gccc::cgraph_node_name;
*cgraph_clone_edge = *gccc::cgraph_clone_edge;
*cgraph_clone_node = *gccc::cgraph_clone_node;
*cgraph_redirect_edge_callee = *gccc::cgraph_redirect_edge_callee;
*cgraph_make_edge_direct = *gccc::cgraph_make_edge_direct;
*cgraph_add_asm_node = *gccc::cgraph_add_asm_node;
*cgraph_function_possibly_inlined_p = *gccc::cgraph_function_possibly_inlined_p;
*cgraph_unnest_node = *gccc::cgraph_unnest_node;
*cgraph_function_body_availability = *gccc::cgraph_function_body_availability;
*cgraph_add_new_function = *gccc::cgraph_add_new_function;
*cgraph_inline_failed_string = *gccc::cgraph_inline_failed_string;
*cgraph_create_virtual_clone = *gccc::cgraph_create_virtual_clone;
*cgraph_set_nothrow_flag = *gccc::cgraph_set_nothrow_flag;
*cgraph_set_const_flag = *gccc::cgraph_set_const_flag;
*cgraph_set_pure_flag = *gccc::cgraph_set_pure_flag;
*clone_function_name = *gccc::clone_function_name;
*cgraph_node_cannot_return = *gccc::cgraph_node_cannot_return;
*cgraph_edge_cannot_lead_to_return = *gccc::cgraph_edge_cannot_lead_to_return;
*cgraph_will_be_removed_from_program_if_no_direct_calls = *gccc::cgraph_will_be_removed_from_program_if_no_direct_calls;
*cgraph_can_remove_if_no_direct_calls_and_refs_p = *gccc::cgraph_can_remove_if_no_direct_calls_and_refs_p;
*resolution_used_from_other_file_p = *gccc::resolution_used_from_other_file_p;
*cgraph_used_from_object_file_p = *gccc::cgraph_used_from_object_file_p;
*varpool_used_from_object_file_p = *gccc::varpool_used_from_object_file_p;
*cgraph_finalize_function = *gccc::cgraph_finalize_function;
*cgraph_mark_if_needed = *gccc::cgraph_mark_if_needed;
*cgraph_finalize_compilation_unit = *gccc::cgraph_finalize_compilation_unit;
*cgraph_optimize = *gccc::cgraph_optimize;
*cgraph_mark_needed_node = *gccc::cgraph_mark_needed_node;
*cgraph_mark_address_taken_node = *gccc::cgraph_mark_address_taken_node;
*cgraph_mark_reachable_node = *gccc::cgraph_mark_reachable_node;
*cgraph_inline_p = *gccc::cgraph_inline_p;
*cgraph_preserve_function_body_p = *gccc::cgraph_preserve_function_body_p;
*verify_cgraph = *gccc::verify_cgraph;
*verify_cgraph_node = *gccc::verify_cgraph_node;
*cgraph_build_static_cdtor = *gccc::cgraph_build_static_cdtor;
*cgraph_reset_static_var_maps = *gccc::cgraph_reset_static_var_maps;
*init_cgraph = *gccc::init_cgraph;
*cgraph_function_versioning = *gccc::cgraph_function_versioning;
*tree_function_versioning = *gccc::tree_function_versioning;
*save_inline_function_body = *gccc::save_inline_function_body;
*record_references_in_initializer = *gccc::record_references_in_initializer;
*cgraph_process_new_functions = *gccc::cgraph_process_new_functions;
*cgraph_decide_is_function_needed = *gccc::cgraph_decide_is_function_needed;
*cgraph_add_edge_removal_hook = *gccc::cgraph_add_edge_removal_hook;
*cgraph_remove_edge_removal_hook = *gccc::cgraph_remove_edge_removal_hook;
*cgraph_add_node_removal_hook = *gccc::cgraph_add_node_removal_hook;
*cgraph_remove_node_removal_hook = *gccc::cgraph_remove_node_removal_hook;
*cgraph_add_function_insertion_hook = *gccc::cgraph_add_function_insertion_hook;
*cgraph_remove_function_insertion_hook = *gccc::cgraph_remove_function_insertion_hook;
*cgraph_call_function_insertion_hooks = *gccc::cgraph_call_function_insertion_hooks;
*cgraph_add_edge_duplication_hook = *gccc::cgraph_add_edge_duplication_hook;
*cgraph_remove_edge_duplication_hook = *gccc::cgraph_remove_edge_duplication_hook;
*cgraph_add_node_duplication_hook = *gccc::cgraph_add_node_duplication_hook;
*cgraph_remove_node_duplication_hook = *gccc::cgraph_remove_node_duplication_hook;
*cgraph_materialize_all_clones = *gccc::cgraph_materialize_all_clones;
*cgraph_redirect_edge_call_stmt_to_callee = *gccc::cgraph_redirect_edge_call_stmt_to_callee;
*cgraph_propagate_frequency = *gccc::cgraph_propagate_frequency;
*rebuild_cgraph_edges = *gccc::rebuild_cgraph_edges;
*cgraph_rebuild_references = *gccc::cgraph_rebuild_references;
*reset_inline_failed = *gccc::reset_inline_failed;
*compute_call_stmt_bb_frequency = *gccc::compute_call_stmt_bb_frequency;
*cgraph_remove_unreachable_nodes = *gccc::cgraph_remove_unreachable_nodes;
*cgraph_postorder = *gccc::cgraph_postorder;
*cgraph_node_set_new = *gccc::cgraph_node_set_new;
*cgraph_node_set_find = *gccc::cgraph_node_set_find;
*cgraph_node_set_add = *gccc::cgraph_node_set_add;
*cgraph_node_set_remove = *gccc::cgraph_node_set_remove;
*dump_cgraph_node_set = *gccc::dump_cgraph_node_set;
*debug_cgraph_node_set = *gccc::debug_cgraph_node_set;
*varpool_node_set_new = *gccc::varpool_node_set_new;
*varpool_node_set_find = *gccc::varpool_node_set_find;
*varpool_node_set_add = *gccc::varpool_node_set_add;
*varpool_node_set_remove = *gccc::varpool_node_set_remove;
*dump_varpool_node_set = *gccc::dump_varpool_node_set;
*debug_varpool_node_set = *gccc::debug_varpool_node_set;
*ipa_discover_readonly_nonaddressable_vars = *gccc::ipa_discover_readonly_nonaddressable_vars;
*cgraph_comdat_can_be_unshared_p = *gccc::cgraph_comdat_can_be_unshared_p;
*cgraph_maybe_hot_edge_p = *gccc::cgraph_maybe_hot_edge_p;
*varpool_node_for_asm = *gccc::varpool_node_for_asm;
*varpool_mark_needed_node = *gccc::varpool_mark_needed_node;
*debug_varpool = *gccc::debug_varpool;
*dump_varpool = *gccc::dump_varpool;
*dump_varpool_node = *gccc::dump_varpool_node;
*varpool_finalize_decl = *gccc::varpool_finalize_decl;
*decide_is_variable_needed = *gccc::decide_is_variable_needed;
*cgraph_variable_initializer_availability = *gccc::cgraph_variable_initializer_availability;
*cgraph_make_decl_local = *gccc::cgraph_make_decl_local;
*cgraph_make_node_local = *gccc::cgraph_make_node_local;
*cgraph_node_can_be_local_p = *gccc::cgraph_node_can_be_local_p;
*varpool_get_node = *gccc::varpool_get_node;
*varpool_remove_node = *gccc::varpool_remove_node;
*varpool_finalize_named_section_flags = *gccc::varpool_finalize_named_section_flags;
*varpool_assemble_pending_decls = *gccc::varpool_assemble_pending_decls;
*varpool_assemble_decl = *gccc::varpool_assemble_decl;
*varpool_analyze_pending_decls = *gccc::varpool_analyze_pending_decls;
*varpool_remove_unreferenced_decls = *gccc::varpool_remove_unreferenced_decls;
*varpool_empty_needed_queue = *gccc::varpool_empty_needed_queue;
*varpool_extra_name_alias = *gccc::varpool_extra_name_alias;
*varpool_node_name = *gccc::varpool_node_name;
*varpool_reset_queue = *gccc::varpool_reset_queue;
*const_value_known_p = *gccc::const_value_known_p;
*varpool_first_static_initializer = *gccc::varpool_first_static_initializer;
*varpool_next_static_initializer = *gccc::varpool_next_static_initializer;
*cgraph_clone_inlined_nodes = *gccc::cgraph_clone_inlined_nodes;
*compute_inline_parameters = *gccc::compute_inline_parameters;
*add_new_static_var = *gccc::add_new_static_var;
*csi_end_p = *gccc::csi_end_p;
*csi_next = *gccc::csi_next;
*csi_node = *gccc::csi_node;
*csi_start = *gccc::csi_start;
*cgraph_node_in_set_p = *gccc::cgraph_node_in_set_p;
*cgraph_node_set_size = *gccc::cgraph_node_set_size;
*vsi_end_p = *gccc::vsi_end_p;
*vsi_next = *gccc::vsi_next;
*vsi_node = *gccc::vsi_node;
*vsi_start = *gccc::vsi_start;
*varpool_node_in_set_p = *gccc::varpool_node_in_set_p;
*varpool_node_set_size = *gccc::varpool_node_set_size;
*cgraph_node_set_nonempty_p = *gccc::cgraph_node_set_nonempty_p;
*varpool_node_set_nonempty_p = *gccc::varpool_node_set_nonempty_p;
*cgraph_only_called_directly_p = *gccc::cgraph_only_called_directly_p;
*cgraph_can_remove_if_no_direct_calls_p = *gccc::cgraph_can_remove_if_no_direct_calls_p;
*varpool_can_remove_if_no_refs = *gccc::varpool_can_remove_if_no_refs;
*varpool_all_refs_explicit_p = *gccc::varpool_all_refs_explicit_p;
*constant_pool_htab = *gccc::constant_pool_htab;
*ipa_ref_node = *gccc::ipa_ref_node;
*ipa_ref_varpool_node = *gccc::ipa_ref_varpool_node;
*ipa_ref_refering_node = *gccc::ipa_ref_refering_node;
*ipa_ref_refering_varpool_node = *gccc::ipa_ref_refering_varpool_node;
*ipa_ref_refering_ref_list = *gccc::ipa_ref_refering_ref_list;
*ipa_ref_refered_ref_list = *gccc::ipa_ref_refered_ref_list;
*ipa_ref_list_first_reference = *gccc::ipa_ref_list_first_reference;
*ipa_ref_list_first_refering = *gccc::ipa_ref_list_first_refering;
*ipa_empty_ref_list = *gccc::ipa_empty_ref_list;
*ipa_ref_list_nreferences = *gccc::ipa_ref_list_nreferences;
*ipa_reference_get_not_read_global = *gccc::ipa_reference_get_not_read_global;
*ipa_reference_get_not_written_global = *gccc::ipa_reference_get_not_written_global;
*var_ann = *gccc::var_ann;
*get_var_ann = *gccc::get_var_ann;
*get_lineno = *gccc::get_lineno;
*phi_nodes = *gccc::phi_nodes;
*set_phi_nodes = *gccc::set_phi_nodes;
*int_tree_map_hash = *gccc::int_tree_map_hash;
*int_tree_map_eq = *gccc::int_tree_map_eq;
*uid_decl_map_hash = *gccc::uid_decl_map_hash;
*uid_decl_map_eq = *gccc::uid_decl_map_eq;
*referenced_var_lookup = *gccc::referenced_var_lookup;
*referenced_var_check_and_insert = *gccc::referenced_var_check_and_insert;
*VEC_edge_var_map_base_length = *gccc::VEC_edge_var_map_base_length;
*VEC_edge_var_map_base_last = *gccc::VEC_edge_var_map_base_last;
*VEC_edge_var_map_base_index = *gccc::VEC_edge_var_map_base_index;
*VEC_edge_var_map_base_iterate = *gccc::VEC_edge_var_map_base_iterate;
*VEC_edge_var_map_base_embedded_size = *gccc::VEC_edge_var_map_base_embedded_size;
*VEC_edge_var_map_base_embedded_init = *gccc::VEC_edge_var_map_base_embedded_init;
*VEC_edge_var_map_base_space = *gccc::VEC_edge_var_map_base_space;
*VEC_edge_var_map_base_splice = *gccc::VEC_edge_var_map_base_splice;
*VEC_edge_var_map_base_quick_push = *gccc::VEC_edge_var_map_base_quick_push;
*VEC_edge_var_map_base_pop = *gccc::VEC_edge_var_map_base_pop;
*VEC_edge_var_map_base_truncate = *gccc::VEC_edge_var_map_base_truncate;
*VEC_edge_var_map_base_replace = *gccc::VEC_edge_var_map_base_replace;
*VEC_edge_var_map_base_quick_insert = *gccc::VEC_edge_var_map_base_quick_insert;
*VEC_edge_var_map_base_ordered_remove = *gccc::VEC_edge_var_map_base_ordered_remove;
*VEC_edge_var_map_base_unordered_remove = *gccc::VEC_edge_var_map_base_unordered_remove;
*VEC_edge_var_map_base_block_remove = *gccc::VEC_edge_var_map_base_block_remove;
*VEC_edge_var_map_base_address = *gccc::VEC_edge_var_map_base_address;
*VEC_edge_var_map_base_lower_bound = *gccc::VEC_edge_var_map_base_lower_bound;
*VEC_edge_var_map_heap_alloc = *gccc::VEC_edge_var_map_heap_alloc;
*VEC_edge_var_map_heap_copy = *gccc::VEC_edge_var_map_heap_copy;
*VEC_edge_var_map_heap_free = *gccc::VEC_edge_var_map_heap_free;
*VEC_edge_var_map_heap_reserve = *gccc::VEC_edge_var_map_heap_reserve;
*VEC_edge_var_map_heap_reserve_exact = *gccc::VEC_edge_var_map_heap_reserve_exact;
*VEC_edge_var_map_heap_safe_grow = *gccc::VEC_edge_var_map_heap_safe_grow;
*VEC_edge_var_map_heap_safe_grow_cleared = *gccc::VEC_edge_var_map_heap_safe_grow_cleared;
*VEC_edge_var_map_heap_safe_splice = *gccc::VEC_edge_var_map_heap_safe_splice;
*VEC_edge_var_map_heap_safe_push = *gccc::VEC_edge_var_map_heap_safe_push;
*VEC_edge_var_map_heap_safe_insert = *gccc::VEC_edge_var_map_heap_safe_insert;
*init_tree_ssa = *gccc::init_tree_ssa;
*redirect_edge_var_map_add = *gccc::redirect_edge_var_map_add;
*redirect_edge_var_map_clear = *gccc::redirect_edge_var_map_clear;
*redirect_edge_var_map_dup = *gccc::redirect_edge_var_map_dup;
*redirect_edge_var_map_vector = *gccc::redirect_edge_var_map_vector;
*redirect_edge_var_map_destroy = *gccc::redirect_edge_var_map_destroy;
*ssa_redirect_edge = *gccc::ssa_redirect_edge;
*flush_pending_stmts = *gccc::flush_pending_stmts;
*verify_ssa = *gccc::verify_ssa;
*delete_tree_ssa = *gccc::delete_tree_ssa;
*ssa_undefined_value_p = *gccc::ssa_undefined_value_p;
*warn_uninit = *gccc::warn_uninit;
*warn_uninitialized_vars = *gccc::warn_uninitialized_vars;
*execute_update_addresses_taken = *gccc::execute_update_addresses_taken;
*walk_use_def_chains = *gccc::walk_use_def_chains;
*insert_debug_temps_for_defs = *gccc::insert_debug_temps_for_defs;
*insert_debug_temp_for_var_def = *gccc::insert_debug_temp_for_var_def;
*reset_debug_uses = *gccc::reset_debug_uses;
*release_defs_bitset = *gccc::release_defs_bitset;
*update_ssa = *gccc::update_ssa;
*delete_update_ssa = *gccc::delete_update_ssa;
*register_new_name_mapping = *gccc::register_new_name_mapping;
*create_new_def_for = *gccc::create_new_def_for;
*need_ssa_update_p = *gccc::need_ssa_update_p;
*name_mappings_registered_p = *gccc::name_mappings_registered_p;
*name_registered_for_update_p = *gccc::name_registered_for_update_p;
*ssa_names_to_replace = *gccc::ssa_names_to_replace;
*release_ssa_name_after_update_ssa = *gccc::release_ssa_name_after_update_ssa;
*compute_global_livein = *gccc::compute_global_livein;
*mark_sym_for_renaming = *gccc::mark_sym_for_renaming;
*mark_set_for_renaming = *gccc::mark_set_for_renaming;
*symbol_marked_for_renaming = *gccc::symbol_marked_for_renaming;
*get_current_def = *gccc::get_current_def;
*set_current_def = *gccc::set_current_def;
*init_ssanames = *gccc::init_ssanames;
*fini_ssanames = *gccc::fini_ssanames;
*make_ssa_name_fn = *gccc::make_ssa_name_fn;
*duplicate_ssa_name = *gccc::duplicate_ssa_name;
*duplicate_ssa_name_ptr_info = *gccc::duplicate_ssa_name_ptr_info;
*release_ssa_name = *gccc::release_ssa_name;
*release_defs = *gccc::release_defs;
*replace_ssa_name_symbol = *gccc::replace_ssa_name_symbol;
*fold_const_aggregate_ref = *gccc::fold_const_aggregate_ref;
*dump_dominator_optimization_stats = *gccc::dump_dominator_optimization_stats;
*debug_dominator_optimization_stats = *gccc::debug_dominator_optimization_stats;
*loop_depth_of_name = *gccc::loop_depth_of_name;
*degenerate_phi_result = *gccc::degenerate_phi_result;
*propagate_value = *gccc::propagate_value;
*propagate_tree_value = *gccc::propagate_tree_value;
*propagate_tree_value_into_stmt = *gccc::propagate_tree_value_into_stmt;
*replace_exp = *gccc::replace_exp;
*may_propagate_copy = *gccc::may_propagate_copy;
*may_propagate_copy_into_stmt = *gccc::may_propagate_copy_into_stmt;
*may_propagate_copy_into_asm = *gccc::may_propagate_copy_into_asm;
*empty_block_p = *gccc::empty_block_p;
*blocks_in_phiopt_order = *gccc::blocks_in_phiopt_order;
*tree_ssa_lim = *gccc::tree_ssa_lim;
*tree_ssa_unswitch_loops = *gccc::tree_ssa_unswitch_loops;
*canonicalize_induction_variables = *gccc::canonicalize_induction_variables;
*tree_unroll_loops_completely = *gccc::tree_unroll_loops_completely;
*tree_ssa_prefetch_arrays = *gccc::tree_ssa_prefetch_arrays;
*tree_ssa_iv_optimize = *gccc::tree_ssa_iv_optimize;
*tree_predictive_commoning = *gccc::tree_predictive_commoning;
*canonicalize_loop_ivs = *gccc::canonicalize_loop_ivs;
*parallelize_loops = *gccc::parallelize_loops;
*loop_only_exit_p = *gccc::loop_only_exit_p;
*number_of_iterations_exit = *gccc::number_of_iterations_exit;
*find_loop_niter = *gccc::find_loop_niter;
*loop_niter_by_eval = *gccc::loop_niter_by_eval;
*find_loop_niter_by_eval = *gccc::find_loop_niter_by_eval;
*estimate_numbers_of_iterations = *gccc::estimate_numbers_of_iterations;
*array_at_struct_end_p = *gccc::array_at_struct_end_p;
*scev_probably_wraps_p = *gccc::scev_probably_wraps_p;
*convert_affine_scev = *gccc::convert_affine_scev;
*nowrap_type_p = *gccc::nowrap_type_p;
*scev_direction = *gccc::scev_direction;
*free_numbers_of_iterations_estimates = *gccc::free_numbers_of_iterations_estimates;
*free_numbers_of_iterations_estimates_loop = *gccc::free_numbers_of_iterations_estimates_loop;
*rewrite_into_loop_closed_ssa = *gccc::rewrite_into_loop_closed_ssa;
*verify_loop_closed_ssa = *gccc::verify_loop_closed_ssa;
*for_each_index = *gccc::for_each_index;
*create_iv = *gccc::create_iv;
*split_loop_exit_edge = *gccc::split_loop_exit_edge;
*standard_iv_increment_position = *gccc::standard_iv_increment_position;
*ip_end_pos = *gccc::ip_end_pos;
*ip_normal_pos = *gccc::ip_normal_pos;
*gimple_duplicate_loop_to_header_edge = *gccc::gimple_duplicate_loop_to_header_edge;
*slpeel_tree_duplicate_loop_to_edge_cfg = *gccc::slpeel_tree_duplicate_loop_to_edge_cfg;
*rename_variables_in_loop = *gccc::rename_variables_in_loop;
*rename_variables_in_bb = *gccc::rename_variables_in_bb;
*tree_ssa_loop_version = *gccc::tree_ssa_loop_version;
*expand_simple_operations = *gccc::expand_simple_operations;
*substitute_in_loop_info = *gccc::substitute_in_loop_info;
*single_dom_exit = *gccc::single_dom_exit;
*can_unroll_loop_p = *gccc::can_unroll_loop_p;
*tree_unroll_loop = *gccc::tree_unroll_loop;
*tree_transform_and_unroll_loop = *gccc::tree_transform_and_unroll_loop;
*contains_abnormal_ssa_name_p = *gccc::contains_abnormal_ssa_name_p;
*stmt_dominates_stmt_p = *gccc::stmt_dominates_stmt_p;
*mark_virtual_ops_for_renaming = *gccc::mark_virtual_ops_for_renaming;
*mark_virtual_phi_result_for_renaming = *gccc::mark_virtual_phi_result_for_renaming;
*threadedge_initialize_values = *gccc::threadedge_initialize_values;
*threadedge_finalize_values = *gccc::threadedge_finalize_values;
*set_ssa_name_value = *gccc::set_ssa_name_value;
*potentially_threadable_block = *gccc::potentially_threadable_block;
*thread_across_edge = *gccc::thread_across_edge;
*movement_possibility = *gccc::movement_possibility;
*get_lsm_tmp_name = *gccc::get_lsm_tmp_name;
*set_is_used = *gccc::set_is_used;
*unmodifiable_var_p = *gccc::unmodifiable_var_p;
*ref_contains_array_ref = *gccc::ref_contains_array_ref;
*make_eh_edges = *gccc::make_eh_edges;
*make_eh_dispatch_edges = *gccc::make_eh_dispatch_edges;
*redirect_eh_edge = *gccc::redirect_eh_edge;
*redirect_eh_dispatch_edge = *gccc::redirect_eh_dispatch_edge;
*tree_could_trap_p = *gccc::tree_could_trap_p;
*operation_could_trap_helper_p = *gccc::operation_could_trap_helper_p;
*operation_could_trap_p = *gccc::operation_could_trap_p;
*stmt_could_throw_p = *gccc::stmt_could_throw_p;
*tree_could_throw_p = *gccc::tree_could_throw_p;
*stmt_can_throw_internal = *gccc::stmt_can_throw_internal;
*stmt_can_throw_external = *gccc::stmt_can_throw_external;
*add_stmt_to_eh_lp_fn = *gccc::add_stmt_to_eh_lp_fn;
*add_stmt_to_eh_lp = *gccc::add_stmt_to_eh_lp;
*remove_stmt_from_eh_lp = *gccc::remove_stmt_from_eh_lp;
*remove_stmt_from_eh_lp_fn = *gccc::remove_stmt_from_eh_lp_fn;
*lookup_stmt_eh_lp_fn = *gccc::lookup_stmt_eh_lp_fn;
*lookup_stmt_eh_lp = *gccc::lookup_stmt_eh_lp;
*maybe_clean_eh_stmt_fn = *gccc::maybe_clean_eh_stmt_fn;
*maybe_clean_eh_stmt = *gccc::maybe_clean_eh_stmt;
*maybe_clean_or_replace_eh_stmt = *gccc::maybe_clean_or_replace_eh_stmt;
*maybe_duplicate_eh_stmt_fn = *gccc::maybe_duplicate_eh_stmt_fn;
*maybe_duplicate_eh_stmt = *gccc::maybe_duplicate_eh_stmt;
*verify_eh_edges = *gccc::verify_eh_edges;
*verify_eh_dispatch_edge = *gccc::verify_eh_dispatch_edge;
*add_to_value = *gccc::add_to_value;
*debug_value_expressions = *gccc::debug_value_expressions;
*print_value_expressions = *gccc::print_value_expressions;
*is_hidden_global_store = *gccc::is_hidden_global_store;
*linear_transform_loops = *gccc::linear_transform_loops;
*perfect_loop_nest_depth = *gccc::perfect_loop_nest_depth;
*graphite_transform_loops = *gccc::graphite_transform_loops;
*tree_check_data_deps = *gccc::tree_check_data_deps;
*expr_invariant_in_loop_p = *gccc::expr_invariant_in_loop_p;
*stmt_invariant_in_loop_p = *gccc::stmt_invariant_in_loop_p;
*multiplier_allowed_in_address_p = *gccc::multiplier_allowed_in_address_p;
*multiply_by_cost = *gccc::multiply_by_cost;
*may_be_nonaddressable_p = *gccc::may_be_nonaddressable_p;
*thread_through_all_blocks = *gccc::thread_through_all_blocks;
*register_jump_thread = *gccc::register_jump_thread;
*force_gimple_operand_1 = *gccc::force_gimple_operand_1;
*force_gimple_operand = *gccc::force_gimple_operand;
*force_gimple_operand_gsi_1 = *gccc::force_gimple_operand_gsi_1;
*force_gimple_operand_gsi = *gccc::force_gimple_operand_gsi;
*gimple_fold_indirect_ref = *gccc::gimple_fold_indirect_ref;
*remove_unused_locals = *gccc::remove_unused_locals;
*dump_scope_blocks = *gccc::dump_scope_blocks;
*debug_scope_blocks = *gccc::debug_scope_blocks;
*debug_scope_block = *gccc::debug_scope_block;
*create_mem_ref = *gccc::create_mem_ref;
*addr_for_mem_ref = *gccc::addr_for_mem_ref;
*get_address_description = *gccc::get_address_description;
*maybe_fold_tmr = *gccc::maybe_fold_tmr;
*execute_free_datastructures = *gccc::execute_free_datastructures;
*execute_fixup_cfg = *gccc::execute_fixup_cfg;
*fixup_noreturn_call = *gccc::fixup_noreturn_call;
*warn_function_noreturn = *gccc::warn_function_noreturn;
*stmt_is_replaceable_p = *gccc::stmt_is_replaceable_p;

############# Class : gcc::pex_time ##############

package gcc::pex_time;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_user_seconds_get = *gccc::pex_time_user_seconds_get;
*swig_user_seconds_set = *gccc::pex_time_user_seconds_set;
*swig_user_microseconds_get = *gccc::pex_time_user_microseconds_get;
*swig_user_microseconds_set = *gccc::pex_time_user_microseconds_set;
*swig_system_seconds_get = *gccc::pex_time_system_seconds_get;
*swig_system_seconds_set = *gccc::pex_time_system_seconds_set;
*swig_system_microseconds_get = *gccc::pex_time_system_microseconds_get;
*swig_system_microseconds_set = *gccc::pex_time_system_microseconds_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_pex_time(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_pex_time($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::htab ##############

package gcc::htab;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_hash_f_get = *gccc::htab_hash_f_get;
*swig_hash_f_set = *gccc::htab_hash_f_set;
*swig_eq_f_get = *gccc::htab_eq_f_get;
*swig_eq_f_set = *gccc::htab_eq_f_set;
*swig_del_f_get = *gccc::htab_del_f_get;
*swig_del_f_set = *gccc::htab_del_f_set;
*swig_entries_get = *gccc::htab_entries_get;
*swig_entries_set = *gccc::htab_entries_set;
*swig_size_get = *gccc::htab_size_get;
*swig_size_set = *gccc::htab_size_set;
*swig_n_elements_get = *gccc::htab_n_elements_get;
*swig_n_elements_set = *gccc::htab_n_elements_set;
*swig_n_deleted_get = *gccc::htab_n_deleted_get;
*swig_n_deleted_set = *gccc::htab_n_deleted_set;
*swig_searches_get = *gccc::htab_searches_get;
*swig_searches_set = *gccc::htab_searches_set;
*swig_collisions_get = *gccc::htab_collisions_get;
*swig_collisions_set = *gccc::htab_collisions_set;
*swig_alloc_f_get = *gccc::htab_alloc_f_get;
*swig_alloc_f_set = *gccc::htab_alloc_f_set;
*swig_free_f_get = *gccc::htab_free_f_get;
*swig_free_f_set = *gccc::htab_free_f_set;
*swig_alloc_arg_get = *gccc::htab_alloc_arg_get;
*swig_alloc_arg_set = *gccc::htab_alloc_arg_set;
*swig_alloc_with_arg_f_get = *gccc::htab_alloc_with_arg_f_get;
*swig_alloc_with_arg_f_set = *gccc::htab_alloc_with_arg_f_set;
*swig_free_with_arg_f_get = *gccc::htab_free_with_arg_f_get;
*swig_free_with_arg_f_set = *gccc::htab_free_with_arg_f_set;
*swig_size_prime_index_get = *gccc::htab_size_prime_index_get;
*swig_size_prime_index_set = *gccc::htab_size_prime_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_htab(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_htab($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::plugin_argument ##############

package gcc::plugin_argument;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_key_get = *gccc::plugin_argument_key_get;
*swig_key_set = *gccc::plugin_argument_key_set;
*swig_value_get = *gccc::plugin_argument_value_get;
*swig_value_set = *gccc::plugin_argument_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_plugin_argument(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_plugin_argument($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::plugin_info ##############

package gcc::plugin_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_version_get = *gccc::plugin_info_version_get;
*swig_version_set = *gccc::plugin_info_version_set;
*swig_help_get = *gccc::plugin_info_help_get;
*swig_help_set = *gccc::plugin_info_help_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_plugin_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_plugin_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::plugin_gcc_version ##############

package gcc::plugin_gcc_version;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_basever_get = *gccc::plugin_gcc_version_basever_get;
*swig_basever_set = *gccc::plugin_gcc_version_basever_set;
*swig_datestamp_get = *gccc::plugin_gcc_version_datestamp_get;
*swig_datestamp_set = *gccc::plugin_gcc_version_datestamp_set;
*swig_devphase_get = *gccc::plugin_gcc_version_devphase_get;
*swig_devphase_set = *gccc::plugin_gcc_version_devphase_set;
*swig_revision_get = *gccc::plugin_gcc_version_revision_get;
*swig_revision_set = *gccc::plugin_gcc_version_revision_set;
*swig_configuration_arguments_get = *gccc::plugin_gcc_version_configuration_arguments_get;
*swig_configuration_arguments_set = *gccc::plugin_gcc_version_configuration_arguments_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_plugin_gcc_version(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_plugin_gcc_version($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::plugin_name_args ##############

package gcc::plugin_name_args;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_name_get = *gccc::plugin_name_args_base_name_get;
*swig_base_name_set = *gccc::plugin_name_args_base_name_set;
*swig_full_name_get = *gccc::plugin_name_args_full_name_get;
*swig_full_name_set = *gccc::plugin_name_args_full_name_set;
*swig_argc_get = *gccc::plugin_name_args_argc_get;
*swig_argc_set = *gccc::plugin_name_args_argc_set;
*swig_argv_get = *gccc::plugin_name_args_argv_get;
*swig_argv_set = *gccc::plugin_name_args_argv_set;
*swig_version_get = *gccc::plugin_name_args_version_get;
*swig_version_set = *gccc::plugin_name_args_version_set;
*swig_help_get = *gccc::plugin_name_args_help_get;
*swig_help_set = *gccc::plugin_name_args_help_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_plugin_name_args(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_plugin_name_args($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::line_map ##############

package gcc::line_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_to_file_get = *gccc::line_map_to_file_get;
*swig_to_file_set = *gccc::line_map_to_file_set;
*swig_to_line_get = *gccc::line_map_to_line_get;
*swig_to_line_set = *gccc::line_map_to_line_set;
*swig_start_location_get = *gccc::line_map_start_location_get;
*swig_start_location_set = *gccc::line_map_start_location_set;
*swig_included_from_get = *gccc::line_map_included_from_get;
*swig_included_from_set = *gccc::line_map_included_from_set;
*swig_reason_get = *gccc::line_map_reason_get;
*swig_reason_set = *gccc::line_map_reason_set;
*swig_sysp_get = *gccc::line_map_sysp_get;
*swig_sysp_set = *gccc::line_map_sysp_set;
*swig_column_bits_get = *gccc::line_map_column_bits_get;
*swig_column_bits_set = *gccc::line_map_column_bits_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_line_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_line_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::line_maps ##############

package gcc::line_maps;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_maps_get = *gccc::line_maps_maps_get;
*swig_maps_set = *gccc::line_maps_maps_set;
*swig_allocated_get = *gccc::line_maps_allocated_get;
*swig_allocated_set = *gccc::line_maps_allocated_set;
*swig_used_get = *gccc::line_maps_used_get;
*swig_used_set = *gccc::line_maps_used_set;
*swig_cache_get = *gccc::line_maps_cache_get;
*swig_cache_set = *gccc::line_maps_cache_set;
*swig_last_listed_get = *gccc::line_maps_last_listed_get;
*swig_last_listed_set = *gccc::line_maps_last_listed_set;
*swig_depth_get = *gccc::line_maps_depth_get;
*swig_depth_set = *gccc::line_maps_depth_set;
*swig_trace_includes_get = *gccc::line_maps_trace_includes_get;
*swig_trace_includes_set = *gccc::line_maps_trace_includes_set;
*swig_highest_location_get = *gccc::line_maps_highest_location_get;
*swig_highest_location_set = *gccc::line_maps_highest_location_set;
*swig_highest_line_get = *gccc::line_maps_highest_line_get;
*swig_highest_line_set = *gccc::line_maps_highest_line_set;
*swig_max_column_hint_get = *gccc::line_maps_max_column_hint_get;
*swig_max_column_hint_set = *gccc::line_maps_max_column_hint_set;
*swig_reallocator_get = *gccc::line_maps_reallocator_get;
*swig_reallocator_set = *gccc::line_maps_reallocator_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_line_maps(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_line_maps($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::expanded_location ##############

package gcc::expanded_location;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_file_get = *gccc::expanded_location_file_get;
*swig_file_set = *gccc::expanded_location_file_set;
*swig_line_get = *gccc::expanded_location_line_get;
*swig_line_set = *gccc::expanded_location_line_set;
*swig_column_get = *gccc::expanded_location_column_get;
*swig_column_set = *gccc::expanded_location_column_set;
*swig_sysp_get = *gccc::expanded_location_sysp_get;
*swig_sysp_set = *gccc::expanded_location_sysp_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_expanded_location(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_expanded_location($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_base ##############

package gcc::VEC_tree_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_tree_base_num_get;
*swig_num_set = *gccc::VEC_tree_base_num_set;
*swig_alloc_get = *gccc::VEC_tree_base_alloc_get;
*swig_alloc_set = *gccc::VEC_tree_base_alloc_set;
*swig_vec_get = *gccc::VEC_tree_base_vec_get;
*swig_vec_set = *gccc::VEC_tree_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_none ##############

package gcc::VEC_tree_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_tree_none_base_get;
*swig_base_set = *gccc::VEC_tree_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_gc ##############

package gcc::VEC_tree_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_tree_gc_base_get;
*swig_base_set = *gccc::VEC_tree_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_heap ##############

package gcc::VEC_tree_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_tree_heap_base_get;
*swig_base_set = *gccc::VEC_tree_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_base ##############

package gcc::VEC_gimple_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_gimple_base_num_get;
*swig_num_set = *gccc::VEC_gimple_base_num_set;
*swig_alloc_get = *gccc::VEC_gimple_base_alloc_get;
*swig_alloc_set = *gccc::VEC_gimple_base_alloc_set;
*swig_vec_get = *gccc::VEC_gimple_base_vec_get;
*swig_vec_set = *gccc::VEC_gimple_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_none ##############

package gcc::VEC_gimple_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_none_base_get;
*swig_base_set = *gccc::VEC_gimple_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_heap ##############

package gcc::VEC_gimple_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_heap_base_get;
*swig_base_set = *gccc::VEC_gimple_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_gc ##############

package gcc::VEC_gimple_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_gc_base_get;
*swig_base_set = *gccc::VEC_gimple_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_p_base ##############

package gcc::VEC_gimple_p_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_gimple_p_base_num_get;
*swig_num_set = *gccc::VEC_gimple_p_base_num_set;
*swig_alloc_get = *gccc::VEC_gimple_p_base_alloc_get;
*swig_alloc_set = *gccc::VEC_gimple_p_base_alloc_set;
*swig_vec_get = *gccc::VEC_gimple_p_base_vec_get;
*swig_vec_set = *gccc::VEC_gimple_p_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_p_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_p_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_p_none ##############

package gcc::VEC_gimple_p_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_p_none_base_get;
*swig_base_set = *gccc::VEC_gimple_p_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_p_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_p_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_p_heap ##############

package gcc::VEC_gimple_p_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_p_heap_base_get;
*swig_base_set = *gccc::VEC_gimple_p_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_p_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_p_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_seq_base ##############

package gcc::VEC_gimple_seq_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_gimple_seq_base_num_get;
*swig_num_set = *gccc::VEC_gimple_seq_base_num_set;
*swig_alloc_get = *gccc::VEC_gimple_seq_base_alloc_get;
*swig_alloc_set = *gccc::VEC_gimple_seq_base_alloc_set;
*swig_vec_get = *gccc::VEC_gimple_seq_base_vec_get;
*swig_vec_set = *gccc::VEC_gimple_seq_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_seq_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_seq_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_seq_none ##############

package gcc::VEC_gimple_seq_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_seq_none_base_get;
*swig_base_set = *gccc::VEC_gimple_seq_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_seq_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_seq_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_seq_gc ##############

package gcc::VEC_gimple_seq_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_seq_gc_base_get;
*swig_base_set = *gccc::VEC_gimple_seq_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_seq_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_seq_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_seq_heap ##############

package gcc::VEC_gimple_seq_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_seq_heap_base_get;
*swig_base_set = *gccc::VEC_gimple_seq_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_seq_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_seq_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_rtx_base ##############

package gcc::VEC_rtx_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_rtx_base_num_get;
*swig_num_set = *gccc::VEC_rtx_base_num_set;
*swig_alloc_get = *gccc::VEC_rtx_base_alloc_get;
*swig_alloc_set = *gccc::VEC_rtx_base_alloc_set;
*swig_vec_get = *gccc::VEC_rtx_base_vec_get;
*swig_vec_set = *gccc::VEC_rtx_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_rtx_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_rtx_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_rtx_none ##############

package gcc::VEC_rtx_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_rtx_none_base_get;
*swig_base_set = *gccc::VEC_rtx_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_rtx_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_rtx_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_rtx_heap ##############

package gcc::VEC_rtx_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_rtx_heap_base_get;
*swig_base_set = *gccc::VEC_rtx_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_rtx_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_rtx_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_rtx_gc ##############

package gcc::VEC_rtx_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_rtx_gc_base_get;
*swig_base_set = *gccc::VEC_rtx_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_rtx_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_rtx_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::__mpz_struct ##############

package gcc::__mpz_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig__mp_alloc_get = *gccc::__mpz_struct__mp_alloc_get;
*swig__mp_alloc_set = *gccc::__mpz_struct__mp_alloc_set;
*swig__mp_size_get = *gccc::__mpz_struct__mp_size_get;
*swig__mp_size_set = *gccc::__mpz_struct__mp_size_set;
*swig__mp_d_get = *gccc::__mpz_struct__mp_d_get;
*swig__mp_d_set = *gccc::__mpz_struct__mp_d_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new___mpz_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete___mpz_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::__mpq_struct ##############

package gcc::__mpq_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig__mp_num_get = *gccc::__mpq_struct__mp_num_get;
*swig__mp_num_set = *gccc::__mpq_struct__mp_num_set;
*swig__mp_den_get = *gccc::__mpq_struct__mp_den_get;
*swig__mp_den_set = *gccc::__mpq_struct__mp_den_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new___mpq_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete___mpq_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::__mpf_struct ##############

package gcc::__mpf_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig__mp_prec_get = *gccc::__mpf_struct__mp_prec_get;
*swig__mp_prec_set = *gccc::__mpf_struct__mp_prec_set;
*swig__mp_size_get = *gccc::__mpf_struct__mp_size_get;
*swig__mp_size_set = *gccc::__mpf_struct__mp_size_set;
*swig__mp_exp_get = *gccc::__mpf_struct__mp_exp_get;
*swig__mp_exp_set = *gccc::__mpf_struct__mp_exp_set;
*swig__mp_d_get = *gccc::__mpf_struct__mp_d_get;
*swig__mp_d_set = *gccc::__mpf_struct__mp_d_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new___mpf_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete___mpf_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::__gmp_randstate_struct ##############

package gcc::__gmp_randstate_struct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig__mp_seed_get = *gccc::__gmp_randstate_struct__mp_seed_get;
*swig__mp_seed_set = *gccc::__gmp_randstate_struct__mp_seed_set;
*swig__mp_alg_get = *gccc::__gmp_randstate_struct__mp_alg_get;
*swig__mp_alg_set = *gccc::__gmp_randstate_struct__mp_alg_set;
*swig__mp_algdata_get = *gccc::__gmp_randstate_struct__mp_algdata_get;
*swig__mp_algdata_set = *gccc::__gmp_randstate_struct__mp_algdata_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new___gmp_randstate_struct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete___gmp_randstate_struct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::__gmp_randstate_struct__mp_algdata ##############

package gcc::__gmp_randstate_struct__mp_algdata;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig__mp_lc_get = *gccc::__gmp_randstate_struct__mp_algdata__mp_lc_get;
*swig__mp_lc_set = *gccc::__gmp_randstate_struct__mp_algdata__mp_lc_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new___gmp_randstate_struct__mp_algdata(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete___gmp_randstate_struct__mp_algdata($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::double_int ##############

package gcc::double_int;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_low_get = *gccc::double_int_low_get;
*swig_low_set = *gccc::double_int_low_set;
*swig_high_get = *gccc::double_int_high_get;
*swig_high_set = *gccc::double_int_high_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_double_int(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_double_int($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::real_value ##############

package gcc::real_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_cl_get = *gccc::real_value_cl_get;
*swig_cl_set = *gccc::real_value_cl_set;
*swig_decimal_get = *gccc::real_value_decimal_get;
*swig_decimal_set = *gccc::real_value_decimal_set;
*swig_sign_get = *gccc::real_value_sign_get;
*swig_sign_set = *gccc::real_value_sign_set;
*swig_signalling_get = *gccc::real_value_signalling_get;
*swig_signalling_set = *gccc::real_value_signalling_set;
*swig_canonical_get = *gccc::real_value_canonical_get;
*swig_canonical_set = *gccc::real_value_canonical_set;
*swig_uexp_get = *gccc::real_value_uexp_get;
*swig_uexp_set = *gccc::real_value_uexp_set;
*swig_sig_get = *gccc::real_value_sig_get;
*swig_sig_set = *gccc::real_value_sig_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_real_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_real_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::real_format ##############

package gcc::real_format;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_encode_get = *gccc::real_format_encode_get;
*swig_encode_set = *gccc::real_format_encode_set;
*swig_decode_get = *gccc::real_format_decode_get;
*swig_decode_set = *gccc::real_format_decode_set;
*swig_b_get = *gccc::real_format_b_get;
*swig_b_set = *gccc::real_format_b_set;
*swig_p_get = *gccc::real_format_p_get;
*swig_p_set = *gccc::real_format_p_set;
*swig_pnan_get = *gccc::real_format_pnan_get;
*swig_pnan_set = *gccc::real_format_pnan_set;
*swig_emin_get = *gccc::real_format_emin_get;
*swig_emin_set = *gccc::real_format_emin_set;
*swig_emax_get = *gccc::real_format_emax_get;
*swig_emax_set = *gccc::real_format_emax_set;
*swig_signbit_ro_get = *gccc::real_format_signbit_ro_get;
*swig_signbit_ro_set = *gccc::real_format_signbit_ro_set;
*swig_signbit_rw_get = *gccc::real_format_signbit_rw_get;
*swig_signbit_rw_set = *gccc::real_format_signbit_rw_set;
*swig_round_towards_zero_get = *gccc::real_format_round_towards_zero_get;
*swig_round_towards_zero_set = *gccc::real_format_round_towards_zero_set;
*swig_has_sign_dependent_rounding_get = *gccc::real_format_has_sign_dependent_rounding_get;
*swig_has_sign_dependent_rounding_set = *gccc::real_format_has_sign_dependent_rounding_set;
*swig_has_nans_get = *gccc::real_format_has_nans_get;
*swig_has_nans_set = *gccc::real_format_has_nans_set;
*swig_has_inf_get = *gccc::real_format_has_inf_get;
*swig_has_inf_set = *gccc::real_format_has_inf_set;
*swig_has_denorm_get = *gccc::real_format_has_denorm_get;
*swig_has_denorm_set = *gccc::real_format_has_denorm_set;
*swig_has_signed_zero_get = *gccc::real_format_has_signed_zero_get;
*swig_has_signed_zero_set = *gccc::real_format_has_signed_zero_set;
*swig_qnan_msb_set_get = *gccc::real_format_qnan_msb_set_get;
*swig_qnan_msb_set_set = *gccc::real_format_qnan_msb_set_set;
*swig_canonical_nan_lsbs_set_get = *gccc::real_format_canonical_nan_lsbs_set_get;
*swig_canonical_nan_lsbs_set_set = *gccc::real_format_canonical_nan_lsbs_set_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_real_format(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_real_format($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::fixed_value ##############

package gcc::fixed_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_data_get = *gccc::fixed_value_data_get;
*swig_data_set = *gccc::fixed_value_data_set;
*swig_mode_get = *gccc::fixed_value_mode_get;
*swig_mode_set = *gccc::fixed_value_mode_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_fixed_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_fixed_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gcc_options ##############

package gcc::gcc_options;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_frame_larger_than_size_get = *gccc::gcc_options_x_frame_larger_than_size_get;
*swig_x_frame_larger_than_size_set = *gccc::gcc_options_x_frame_larger_than_size_set;
*swig_x_larger_than_size_get = *gccc::gcc_options_x_larger_than_size_get;
*swig_x_larger_than_size_set = *gccc::gcc_options_x_larger_than_size_set;
*swig_x_exit_after_options_get = *gccc::gcc_options_x_exit_after_options_get;
*swig_x_exit_after_options_set = *gccc::gcc_options_x_exit_after_options_set;
*swig_x_flag_dump_all_passed_get = *gccc::gcc_options_x_flag_dump_all_passed_get;
*swig_x_flag_dump_all_passed_set = *gccc::gcc_options_x_flag_dump_all_passed_set;
*swig_x_flag_opts_finished_get = *gccc::gcc_options_x_flag_opts_finished_get;
*swig_x_flag_opts_finished_set = *gccc::gcc_options_x_flag_opts_finished_set;
*swig_x_flag_warn_unused_result_get = *gccc::gcc_options_x_flag_warn_unused_result_get;
*swig_x_flag_warn_unused_result_set = *gccc::gcc_options_x_flag_warn_unused_result_set;
*swig_x_use_gnu_debug_info_extensions_get = *gccc::gcc_options_x_use_gnu_debug_info_extensions_get;
*swig_x_use_gnu_debug_info_extensions_set = *gccc::gcc_options_x_use_gnu_debug_info_extensions_set;
*swig_x_warn_frame_larger_than_get = *gccc::gcc_options_x_warn_frame_larger_than_get;
*swig_x_warn_frame_larger_than_set = *gccc::gcc_options_x_warn_frame_larger_than_set;
*swig_x_warn_larger_than_get = *gccc::gcc_options_x_warn_larger_than_get;
*swig_x_warn_larger_than_set = *gccc::gcc_options_x_warn_larger_than_set;
*swig_x_help_enum_printed_get = *gccc::gcc_options_x_help_enum_printed_get;
*swig_x_help_enum_printed_set = *gccc::gcc_options_x_help_enum_printed_set;
*swig_x_help_printed_get = *gccc::gcc_options_x_help_printed_get;
*swig_x_help_printed_set = *gccc::gcc_options_x_help_printed_set;
*swig_x_main_input_basename_get = *gccc::gcc_options_x_main_input_basename_get;
*swig_x_main_input_basename_set = *gccc::gcc_options_x_main_input_basename_set;
*swig_x_main_input_filename_get = *gccc::gcc_options_x_main_input_filename_get;
*swig_x_main_input_filename_set = *gccc::gcc_options_x_main_input_filename_set;
*swig_x_debug_info_level_get = *gccc::gcc_options_x_debug_info_level_get;
*swig_x_debug_info_level_set = *gccc::gcc_options_x_debug_info_level_set;
*swig_x_write_symbols_get = *gccc::gcc_options_x_write_symbols_get;
*swig_x_write_symbols_set = *gccc::gcc_options_x_write_symbols_set;
*swig_x_debug_struct_generic_get = *gccc::gcc_options_x_debug_struct_generic_get;
*swig_x_debug_struct_generic_set = *gccc::gcc_options_x_debug_struct_generic_set;
*swig_x_debug_struct_ordinary_get = *gccc::gcc_options_x_debug_struct_ordinary_get;
*swig_x_debug_struct_ordinary_set = *gccc::gcc_options_x_debug_struct_ordinary_set;
*swig_x_graph_dump_format_get = *gccc::gcc_options_x_graph_dump_format_get;
*swig_x_graph_dump_format_set = *gccc::gcc_options_x_graph_dump_format_set;
*swig_x_flag_stack_check_get = *gccc::gcc_options_x_flag_stack_check_get;
*swig_x_flag_stack_check_set = *gccc::gcc_options_x_flag_stack_check_set;
*swig_x_user_vect_verbosity_level_get = *gccc::gcc_options_x_user_vect_verbosity_level_get;
*swig_x_user_vect_verbosity_level_set = *gccc::gcc_options_x_user_vect_verbosity_level_set;
*swig_x_param_values_get = *gccc::gcc_options_x_param_values_get;
*swig_x_param_values_set = *gccc::gcc_options_x_param_values_set;
*swig_x_flag_complex_method_get = *gccc::gcc_options_x_flag_complex_method_get;
*swig_x_flag_complex_method_set = *gccc::gcc_options_x_flag_complex_method_set;
*swig_x_flag_debug_asm_get = *gccc::gcc_options_x_flag_debug_asm_get;
*swig_x_flag_debug_asm_set = *gccc::gcc_options_x_flag_debug_asm_set;
*swig_x_flag_dump_rtl_in_asm_get = *gccc::gcc_options_x_flag_dump_rtl_in_asm_get;
*swig_x_flag_dump_rtl_in_asm_set = *gccc::gcc_options_x_flag_dump_rtl_in_asm_set;
*swig_x_flag_evaluation_order_get = *gccc::gcc_options_x_flag_evaluation_order_get;
*swig_x_flag_evaluation_order_set = *gccc::gcc_options_x_flag_evaluation_order_set;
*swig_x_flag_gen_aux_info_get = *gccc::gcc_options_x_flag_gen_aux_info_get;
*swig_x_flag_gen_aux_info_set = *gccc::gcc_options_x_flag_gen_aux_info_set;
*swig_x_flag_generate_lto_get = *gccc::gcc_options_x_flag_generate_lto_get;
*swig_x_flag_generate_lto_set = *gccc::gcc_options_x_flag_generate_lto_set;
*swig_x_flag_print_asm_name_get = *gccc::gcc_options_x_flag_print_asm_name_get;
*swig_x_flag_print_asm_name_set = *gccc::gcc_options_x_flag_print_asm_name_set;
*swig_x_flag_shlib_get = *gccc::gcc_options_x_flag_shlib_get;
*swig_x_flag_shlib_set = *gccc::gcc_options_x_flag_shlib_set;
*swig_x_ix86_isa_flags_get = *gccc::gcc_options_x_ix86_isa_flags_get;
*swig_x_ix86_isa_flags_set = *gccc::gcc_options_x_ix86_isa_flags_set;
*swig_x_main_input_baselength_get = *gccc::gcc_options_x_main_input_baselength_get;
*swig_x_main_input_baselength_set = *gccc::gcc_options_x_main_input_baselength_set;
*swig_x_optimize_get = *gccc::gcc_options_x_optimize_get;
*swig_x_optimize_set = *gccc::gcc_options_x_optimize_set;
*swig_x_optimize_fast_get = *gccc::gcc_options_x_optimize_fast_get;
*swig_x_optimize_fast_set = *gccc::gcc_options_x_optimize_fast_set;
*swig_x_optimize_size_get = *gccc::gcc_options_x_optimize_size_get;
*swig_x_optimize_size_set = *gccc::gcc_options_x_optimize_size_set;
*swig_x_rtl_dump_and_exit_get = *gccc::gcc_options_x_rtl_dump_and_exit_get;
*swig_x_rtl_dump_and_exit_set = *gccc::gcc_options_x_rtl_dump_and_exit_set;
*swig_x_target_flags_get = *gccc::gcc_options_x_target_flags_get;
*swig_x_target_flags_set = *gccc::gcc_options_x_target_flags_set;
*swig_x_help_columns_get = *gccc::gcc_options_x_help_columns_get;
*swig_x_help_columns_set = *gccc::gcc_options_x_help_columns_set;
*swig_x_initial_max_fld_align_get = *gccc::gcc_options_x_initial_max_fld_align_get;
*swig_x_initial_max_fld_align_set = *gccc::gcc_options_x_initial_max_fld_align_set;
*swig_x_flag_instrument_functions_exclude_files_get = *gccc::gcc_options_x_flag_instrument_functions_exclude_files_get;
*swig_x_flag_instrument_functions_exclude_files_set = *gccc::gcc_options_x_flag_instrument_functions_exclude_files_set;
*swig_x_flag_instrument_functions_exclude_functions_get = *gccc::gcc_options_x_flag_instrument_functions_exclude_functions_get;
*swig_x_flag_instrument_functions_exclude_functions_set = *gccc::gcc_options_x_flag_instrument_functions_exclude_functions_set;
*swig_x_help_flag_get = *gccc::gcc_options_x_help_flag_get;
*swig_x_help_flag_set = *gccc::gcc_options_x_help_flag_set;
*swig_x_flag_preprocess_only_get = *gccc::gcc_options_x_flag_preprocess_only_get;
*swig_x_flag_preprocess_only_set = *gccc::gcc_options_x_flag_preprocess_only_set;
*swig_x_warn_abi_get = *gccc::gcc_options_x_warn_abi_get;
*swig_x_warn_abi_set = *gccc::gcc_options_x_warn_abi_set;
*swig_x_warn_address_get = *gccc::gcc_options_x_warn_address_get;
*swig_x_warn_address_set = *gccc::gcc_options_x_warn_address_set;
*swig_x_warn_aggregate_return_get = *gccc::gcc_options_x_warn_aggregate_return_get;
*swig_x_warn_aggregate_return_set = *gccc::gcc_options_x_warn_aggregate_return_set;
*swig_x_warn_array_bounds_get = *gccc::gcc_options_x_warn_array_bounds_get;
*swig_x_warn_array_bounds_set = *gccc::gcc_options_x_warn_array_bounds_set;
*swig_x_warn_assign_intercept_get = *gccc::gcc_options_x_warn_assign_intercept_get;
*swig_x_warn_assign_intercept_set = *gccc::gcc_options_x_warn_assign_intercept_set;
*swig_x_warn_attributes_get = *gccc::gcc_options_x_warn_attributes_get;
*swig_x_warn_attributes_set = *gccc::gcc_options_x_warn_attributes_set;
*swig_x_warn_bad_function_cast_get = *gccc::gcc_options_x_warn_bad_function_cast_get;
*swig_x_warn_bad_function_cast_set = *gccc::gcc_options_x_warn_bad_function_cast_set;
*swig_x_warn_cxx_compat_get = *gccc::gcc_options_x_warn_cxx_compat_get;
*swig_x_warn_cxx_compat_set = *gccc::gcc_options_x_warn_cxx_compat_set;
*swig_x_warn_cxx0x_compat_get = *gccc::gcc_options_x_warn_cxx0x_compat_get;
*swig_x_warn_cxx0x_compat_set = *gccc::gcc_options_x_warn_cxx0x_compat_set;
*swig_x_warn_cast_align_get = *gccc::gcc_options_x_warn_cast_align_get;
*swig_x_warn_cast_align_set = *gccc::gcc_options_x_warn_cast_align_set;
*swig_x_warn_cast_qual_get = *gccc::gcc_options_x_warn_cast_qual_get;
*swig_x_warn_cast_qual_set = *gccc::gcc_options_x_warn_cast_qual_set;
*swig_x_warn_char_subscripts_get = *gccc::gcc_options_x_warn_char_subscripts_get;
*swig_x_warn_char_subscripts_set = *gccc::gcc_options_x_warn_char_subscripts_set;
*swig_x_warn_clobbered_get = *gccc::gcc_options_x_warn_clobbered_get;
*swig_x_warn_clobbered_set = *gccc::gcc_options_x_warn_clobbered_set;
*swig_x_warn_conversion_get = *gccc::gcc_options_x_warn_conversion_get;
*swig_x_warn_conversion_set = *gccc::gcc_options_x_warn_conversion_set;
*swig_x_warn_conversion_null_get = *gccc::gcc_options_x_warn_conversion_null_get;
*swig_x_warn_conversion_null_set = *gccc::gcc_options_x_warn_conversion_null_set;
*swig_x_warn_coverage_mismatch_get = *gccc::gcc_options_x_warn_coverage_mismatch_get;
*swig_x_warn_coverage_mismatch_set = *gccc::gcc_options_x_warn_coverage_mismatch_set;
*swig_x_warn_cpp_get = *gccc::gcc_options_x_warn_cpp_get;
*swig_x_warn_cpp_set = *gccc::gcc_options_x_warn_cpp_set;
*swig_x_warn_ctor_dtor_privacy_get = *gccc::gcc_options_x_warn_ctor_dtor_privacy_get;
*swig_x_warn_ctor_dtor_privacy_set = *gccc::gcc_options_x_warn_ctor_dtor_privacy_set;
*swig_x_warn_declaration_after_statement_get = *gccc::gcc_options_x_warn_declaration_after_statement_get;
*swig_x_warn_declaration_after_statement_set = *gccc::gcc_options_x_warn_declaration_after_statement_set;
*swig_x_warn_deprecated_get = *gccc::gcc_options_x_warn_deprecated_get;
*swig_x_warn_deprecated_set = *gccc::gcc_options_x_warn_deprecated_set;
*swig_x_warn_deprecated_decl_get = *gccc::gcc_options_x_warn_deprecated_decl_get;
*swig_x_warn_deprecated_decl_set = *gccc::gcc_options_x_warn_deprecated_decl_set;
*swig_x_warn_disabled_optimization_get = *gccc::gcc_options_x_warn_disabled_optimization_get;
*swig_x_warn_disabled_optimization_set = *gccc::gcc_options_x_warn_disabled_optimization_set;
*swig_x_warn_div_by_zero_get = *gccc::gcc_options_x_warn_div_by_zero_get;
*swig_x_warn_div_by_zero_set = *gccc::gcc_options_x_warn_div_by_zero_set;
*swig_x_warn_double_promotion_get = *gccc::gcc_options_x_warn_double_promotion_get;
*swig_x_warn_double_promotion_set = *gccc::gcc_options_x_warn_double_promotion_set;
*swig_x_warn_ecpp_get = *gccc::gcc_options_x_warn_ecpp_get;
*swig_x_warn_ecpp_set = *gccc::gcc_options_x_warn_ecpp_set;
*swig_x_warn_empty_body_get = *gccc::gcc_options_x_warn_empty_body_get;
*swig_x_warn_empty_body_set = *gccc::gcc_options_x_warn_empty_body_set;
*swig_x_warn_enum_compare_get = *gccc::gcc_options_x_warn_enum_compare_get;
*swig_x_warn_enum_compare_set = *gccc::gcc_options_x_warn_enum_compare_set;
*swig_x_warnings_are_errors_get = *gccc::gcc_options_x_warnings_are_errors_get;
*swig_x_warnings_are_errors_set = *gccc::gcc_options_x_warnings_are_errors_set;
*swig_x_extra_warnings_get = *gccc::gcc_options_x_extra_warnings_get;
*swig_x_extra_warnings_set = *gccc::gcc_options_x_extra_warnings_set;
*swig_x_flag_extraneous_semicolon_get = *gccc::gcc_options_x_flag_extraneous_semicolon_get;
*swig_x_flag_extraneous_semicolon_set = *gccc::gcc_options_x_flag_extraneous_semicolon_set;
*swig_x_flag_fatal_errors_get = *gccc::gcc_options_x_flag_fatal_errors_get;
*swig_x_flag_fatal_errors_set = *gccc::gcc_options_x_flag_fatal_errors_set;
*swig_x_warn_float_equal_get = *gccc::gcc_options_x_warn_float_equal_get;
*swig_x_warn_float_equal_set = *gccc::gcc_options_x_warn_float_equal_set;
*swig_x_warn_format_contains_nul_get = *gccc::gcc_options_x_warn_format_contains_nul_get;
*swig_x_warn_format_contains_nul_set = *gccc::gcc_options_x_warn_format_contains_nul_set;
*swig_x_warn_format_extra_args_get = *gccc::gcc_options_x_warn_format_extra_args_get;
*swig_x_warn_format_extra_args_set = *gccc::gcc_options_x_warn_format_extra_args_set;
*swig_x_warn_format_nonliteral_get = *gccc::gcc_options_x_warn_format_nonliteral_get;
*swig_x_warn_format_nonliteral_set = *gccc::gcc_options_x_warn_format_nonliteral_set;
*swig_x_warn_format_security_get = *gccc::gcc_options_x_warn_format_security_get;
*swig_x_warn_format_security_set = *gccc::gcc_options_x_warn_format_security_set;
*swig_x_warn_format_y2k_get = *gccc::gcc_options_x_warn_format_y2k_get;
*swig_x_warn_format_y2k_set = *gccc::gcc_options_x_warn_format_y2k_set;
*swig_x_warn_format_zero_length_get = *gccc::gcc_options_x_warn_format_zero_length_get;
*swig_x_warn_format_zero_length_set = *gccc::gcc_options_x_warn_format_zero_length_set;
*swig_x_warn_ignored_qualifiers_get = *gccc::gcc_options_x_warn_ignored_qualifiers_get;
*swig_x_warn_ignored_qualifiers_set = *gccc::gcc_options_x_warn_ignored_qualifiers_set;
*swig_x_warn_implicit_get = *gccc::gcc_options_x_warn_implicit_get;
*swig_x_warn_implicit_set = *gccc::gcc_options_x_warn_implicit_set;
*swig_x_warn_implicit_function_declaration_get = *gccc::gcc_options_x_warn_implicit_function_declaration_get;
*swig_x_warn_implicit_function_declaration_set = *gccc::gcc_options_x_warn_implicit_function_declaration_set;
*swig_x_warn_implicit_int_get = *gccc::gcc_options_x_warn_implicit_int_get;
*swig_x_warn_implicit_int_set = *gccc::gcc_options_x_warn_implicit_int_set;
*swig_x_warn_init_self_get = *gccc::gcc_options_x_warn_init_self_get;
*swig_x_warn_init_self_set = *gccc::gcc_options_x_warn_init_self_set;
*swig_x_warn_inline_get = *gccc::gcc_options_x_warn_inline_get;
*swig_x_warn_inline_set = *gccc::gcc_options_x_warn_inline_set;
*swig_x_warn_int_to_pointer_cast_get = *gccc::gcc_options_x_warn_int_to_pointer_cast_get;
*swig_x_warn_int_to_pointer_cast_set = *gccc::gcc_options_x_warn_int_to_pointer_cast_set;
*swig_x_warn_invalid_offsetof_get = *gccc::gcc_options_x_warn_invalid_offsetof_get;
*swig_x_warn_invalid_offsetof_set = *gccc::gcc_options_x_warn_invalid_offsetof_set;
*swig_x_warn_jump_misses_init_get = *gccc::gcc_options_x_warn_jump_misses_init_get;
*swig_x_warn_jump_misses_init_set = *gccc::gcc_options_x_warn_jump_misses_init_set;
*swig_x_warn_logical_op_get = *gccc::gcc_options_x_warn_logical_op_get;
*swig_x_warn_logical_op_set = *gccc::gcc_options_x_warn_logical_op_set;
*swig_x_warn_long_long_get = *gccc::gcc_options_x_warn_long_long_get;
*swig_x_warn_long_long_set = *gccc::gcc_options_x_warn_long_long_set;
*swig_x_warn_main_get = *gccc::gcc_options_x_warn_main_get;
*swig_x_warn_main_set = *gccc::gcc_options_x_warn_main_set;
*swig_x_warn_missing_braces_get = *gccc::gcc_options_x_warn_missing_braces_get;
*swig_x_warn_missing_braces_set = *gccc::gcc_options_x_warn_missing_braces_set;
*swig_x_warn_missing_declarations_get = *gccc::gcc_options_x_warn_missing_declarations_get;
*swig_x_warn_missing_declarations_set = *gccc::gcc_options_x_warn_missing_declarations_set;
*swig_x_warn_missing_field_initializers_get = *gccc::gcc_options_x_warn_missing_field_initializers_get;
*swig_x_warn_missing_field_initializers_set = *gccc::gcc_options_x_warn_missing_field_initializers_set;
*swig_x_warn_missing_format_attribute_get = *gccc::gcc_options_x_warn_missing_format_attribute_get;
*swig_x_warn_missing_format_attribute_set = *gccc::gcc_options_x_warn_missing_format_attribute_set;
*swig_x_warn_missing_noreturn_get = *gccc::gcc_options_x_warn_missing_noreturn_get;
*swig_x_warn_missing_noreturn_set = *gccc::gcc_options_x_warn_missing_noreturn_set;
*swig_x_warn_missing_parameter_type_get = *gccc::gcc_options_x_warn_missing_parameter_type_get;
*swig_x_warn_missing_parameter_type_set = *gccc::gcc_options_x_warn_missing_parameter_type_set;
*swig_x_warn_missing_prototypes_get = *gccc::gcc_options_x_warn_missing_prototypes_get;
*swig_x_warn_missing_prototypes_set = *gccc::gcc_options_x_warn_missing_prototypes_set;
*swig_x_warn_mudflap_get = *gccc::gcc_options_x_warn_mudflap_get;
*swig_x_warn_mudflap_set = *gccc::gcc_options_x_warn_mudflap_set;
*swig_x_warn_nested_externs_get = *gccc::gcc_options_x_warn_nested_externs_get;
*swig_x_warn_nested_externs_set = *gccc::gcc_options_x_warn_nested_externs_set;
*swig_x_warn_noexcept_get = *gccc::gcc_options_x_warn_noexcept_get;
*swig_x_warn_noexcept_set = *gccc::gcc_options_x_warn_noexcept_set;
*swig_x_warn_nontemplate_friend_get = *gccc::gcc_options_x_warn_nontemplate_friend_get;
*swig_x_warn_nontemplate_friend_set = *gccc::gcc_options_x_warn_nontemplate_friend_set;
*swig_x_warn_nonvdtor_get = *gccc::gcc_options_x_warn_nonvdtor_get;
*swig_x_warn_nonvdtor_set = *gccc::gcc_options_x_warn_nonvdtor_set;
*swig_x_warn_nonnull_get = *gccc::gcc_options_x_warn_nonnull_get;
*swig_x_warn_nonnull_set = *gccc::gcc_options_x_warn_nonnull_set;
*swig_x_warn_old_style_cast_get = *gccc::gcc_options_x_warn_old_style_cast_get;
*swig_x_warn_old_style_cast_set = *gccc::gcc_options_x_warn_old_style_cast_set;
*swig_x_warn_old_style_declaration_get = *gccc::gcc_options_x_warn_old_style_declaration_get;
*swig_x_warn_old_style_declaration_set = *gccc::gcc_options_x_warn_old_style_declaration_set;
*swig_x_warn_old_style_definition_get = *gccc::gcc_options_x_warn_old_style_definition_get;
*swig_x_warn_old_style_definition_set = *gccc::gcc_options_x_warn_old_style_definition_set;
*swig_x_flag_newer_get = *gccc::gcc_options_x_flag_newer_get;
*swig_x_flag_newer_set = *gccc::gcc_options_x_flag_newer_set;
*swig_x_warn_overflow_get = *gccc::gcc_options_x_warn_overflow_get;
*swig_x_warn_overflow_set = *gccc::gcc_options_x_warn_overflow_set;
*swig_x_warn_overlength_strings_get = *gccc::gcc_options_x_warn_overlength_strings_get;
*swig_x_warn_overlength_strings_set = *gccc::gcc_options_x_warn_overlength_strings_set;
*swig_x_warn_overloaded_virtual_get = *gccc::gcc_options_x_warn_overloaded_virtual_get;
*swig_x_warn_overloaded_virtual_set = *gccc::gcc_options_x_warn_overloaded_virtual_set;
*swig_x_warn_override_init_get = *gccc::gcc_options_x_warn_override_init_get;
*swig_x_warn_override_init_set = *gccc::gcc_options_x_warn_override_init_set;
*swig_x_warn_packed_get = *gccc::gcc_options_x_warn_packed_get;
*swig_x_warn_packed_set = *gccc::gcc_options_x_warn_packed_set;
*swig_x_warn_packed_bitfield_compat_get = *gccc::gcc_options_x_warn_packed_bitfield_compat_get;
*swig_x_warn_packed_bitfield_compat_set = *gccc::gcc_options_x_warn_packed_bitfield_compat_set;
*swig_x_warn_padded_get = *gccc::gcc_options_x_warn_padded_get;
*swig_x_warn_padded_set = *gccc::gcc_options_x_warn_padded_set;
*swig_x_warn_parentheses_get = *gccc::gcc_options_x_warn_parentheses_get;
*swig_x_warn_parentheses_set = *gccc::gcc_options_x_warn_parentheses_set;
*swig_x_warn_pmf2ptr_get = *gccc::gcc_options_x_warn_pmf2ptr_get;
*swig_x_warn_pmf2ptr_set = *gccc::gcc_options_x_warn_pmf2ptr_set;
*swig_x_warn_pointer_arith_get = *gccc::gcc_options_x_warn_pointer_arith_get;
*swig_x_warn_pointer_arith_set = *gccc::gcc_options_x_warn_pointer_arith_set;
*swig_x_warn_pointer_sign_get = *gccc::gcc_options_x_warn_pointer_sign_get;
*swig_x_warn_pointer_sign_set = *gccc::gcc_options_x_warn_pointer_sign_set;
*swig_x_warn_pointer_to_int_cast_get = *gccc::gcc_options_x_warn_pointer_to_int_cast_get;
*swig_x_warn_pointer_to_int_cast_set = *gccc::gcc_options_x_warn_pointer_to_int_cast_set;
*swig_x_warn_pragmas_get = *gccc::gcc_options_x_warn_pragmas_get;
*swig_x_warn_pragmas_set = *gccc::gcc_options_x_warn_pragmas_set;
*swig_x_warn_property_assign_default_get = *gccc::gcc_options_x_warn_property_assign_default_get;
*swig_x_warn_property_assign_default_set = *gccc::gcc_options_x_warn_property_assign_default_set;
*swig_x_warn_protocol_get = *gccc::gcc_options_x_warn_protocol_get;
*swig_x_warn_protocol_set = *gccc::gcc_options_x_warn_protocol_set;
*swig_x_warn_psabi_get = *gccc::gcc_options_x_warn_psabi_get;
*swig_x_warn_psabi_set = *gccc::gcc_options_x_warn_psabi_set;
*swig_x_warn_redundant_decls_get = *gccc::gcc_options_x_warn_redundant_decls_get;
*swig_x_warn_redundant_decls_set = *gccc::gcc_options_x_warn_redundant_decls_set;
*swig_x_flag_redundant_get = *gccc::gcc_options_x_flag_redundant_get;
*swig_x_flag_redundant_set = *gccc::gcc_options_x_flag_redundant_set;
*swig_x_warn_reorder_get = *gccc::gcc_options_x_warn_reorder_get;
*swig_x_warn_reorder_set = *gccc::gcc_options_x_warn_reorder_set;
*swig_x_warn_return_type_get = *gccc::gcc_options_x_warn_return_type_get;
*swig_x_warn_return_type_set = *gccc::gcc_options_x_warn_return_type_set;
*swig_x_warn_selector_get = *gccc::gcc_options_x_warn_selector_get;
*swig_x_warn_selector_set = *gccc::gcc_options_x_warn_selector_set;
*swig_x_warn_sequence_point_get = *gccc::gcc_options_x_warn_sequence_point_get;
*swig_x_warn_sequence_point_set = *gccc::gcc_options_x_warn_sequence_point_set;
*swig_x_warn_shadow_get = *gccc::gcc_options_x_warn_shadow_get;
*swig_x_warn_shadow_set = *gccc::gcc_options_x_warn_shadow_set;
*swig_x_warn_sign_compare_get = *gccc::gcc_options_x_warn_sign_compare_get;
*swig_x_warn_sign_compare_set = *gccc::gcc_options_x_warn_sign_compare_set;
*swig_x_warn_sign_conversion_get = *gccc::gcc_options_x_warn_sign_conversion_get;
*swig_x_warn_sign_conversion_set = *gccc::gcc_options_x_warn_sign_conversion_set;
*swig_x_warn_sign_promo_get = *gccc::gcc_options_x_warn_sign_promo_get;
*swig_x_warn_sign_promo_set = *gccc::gcc_options_x_warn_sign_promo_set;
*swig_x_warn_stack_protect_get = *gccc::gcc_options_x_warn_stack_protect_get;
*swig_x_warn_stack_protect_set = *gccc::gcc_options_x_warn_stack_protect_set;
*swig_x_warn_strict_aliasing_get = *gccc::gcc_options_x_warn_strict_aliasing_get;
*swig_x_warn_strict_aliasing_set = *gccc::gcc_options_x_warn_strict_aliasing_set;
*swig_x_warn_strict_null_sentinel_get = *gccc::gcc_options_x_warn_strict_null_sentinel_get;
*swig_x_warn_strict_null_sentinel_set = *gccc::gcc_options_x_warn_strict_null_sentinel_set;
*swig_x_warn_strict_overflow_get = *gccc::gcc_options_x_warn_strict_overflow_get;
*swig_x_warn_strict_overflow_set = *gccc::gcc_options_x_warn_strict_overflow_set;
*swig_x_warn_strict_prototypes_get = *gccc::gcc_options_x_warn_strict_prototypes_get;
*swig_x_warn_strict_prototypes_set = *gccc::gcc_options_x_warn_strict_prototypes_set;
*swig_x_warn_strict_selector_match_get = *gccc::gcc_options_x_warn_strict_selector_match_get;
*swig_x_warn_strict_selector_match_set = *gccc::gcc_options_x_warn_strict_selector_match_set;
*swig_x_warn_suggest_attribute_const_get = *gccc::gcc_options_x_warn_suggest_attribute_const_get;
*swig_x_warn_suggest_attribute_const_set = *gccc::gcc_options_x_warn_suggest_attribute_const_set;
*swig_x_warn_suggest_attribute_noreturn_get = *gccc::gcc_options_x_warn_suggest_attribute_noreturn_get;
*swig_x_warn_suggest_attribute_noreturn_set = *gccc::gcc_options_x_warn_suggest_attribute_noreturn_set;
*swig_x_warn_suggest_attribute_pure_get = *gccc::gcc_options_x_warn_suggest_attribute_pure_get;
*swig_x_warn_suggest_attribute_pure_set = *gccc::gcc_options_x_warn_suggest_attribute_pure_set;
*swig_x_warn_switch_get = *gccc::gcc_options_x_warn_switch_get;
*swig_x_warn_switch_set = *gccc::gcc_options_x_warn_switch_set;
*swig_x_warn_switch_default_get = *gccc::gcc_options_x_warn_switch_default_get;
*swig_x_warn_switch_default_set = *gccc::gcc_options_x_warn_switch_default_set;
*swig_x_warn_switch_enum_get = *gccc::gcc_options_x_warn_switch_enum_get;
*swig_x_warn_switch_enum_set = *gccc::gcc_options_x_warn_switch_enum_set;
*swig_x_warn_sync_nand_get = *gccc::gcc_options_x_warn_sync_nand_get;
*swig_x_warn_sync_nand_set = *gccc::gcc_options_x_warn_sync_nand_set;
*swig_x_warn_synth_get = *gccc::gcc_options_x_warn_synth_get;
*swig_x_warn_synth_set = *gccc::gcc_options_x_warn_synth_set;
*swig_x_warn_system_headers_get = *gccc::gcc_options_x_warn_system_headers_get;
*swig_x_warn_system_headers_set = *gccc::gcc_options_x_warn_system_headers_set;
*swig_x_warn_traditional_get = *gccc::gcc_options_x_warn_traditional_get;
*swig_x_warn_traditional_set = *gccc::gcc_options_x_warn_traditional_set;
*swig_x_warn_traditional_conversion_get = *gccc::gcc_options_x_warn_traditional_conversion_get;
*swig_x_warn_traditional_conversion_set = *gccc::gcc_options_x_warn_traditional_conversion_set;
*swig_x_warn_trampolines_get = *gccc::gcc_options_x_warn_trampolines_get;
*swig_x_warn_trampolines_set = *gccc::gcc_options_x_warn_trampolines_set;
*swig_x_warn_type_limits_get = *gccc::gcc_options_x_warn_type_limits_get;
*swig_x_warn_type_limits_set = *gccc::gcc_options_x_warn_type_limits_set;
*swig_x_warn_undeclared_selector_get = *gccc::gcc_options_x_warn_undeclared_selector_get;
*swig_x_warn_undeclared_selector_set = *gccc::gcc_options_x_warn_undeclared_selector_set;
*swig_x_warn_uninitialized_get = *gccc::gcc_options_x_warn_uninitialized_get;
*swig_x_warn_uninitialized_set = *gccc::gcc_options_x_warn_uninitialized_set;
*swig_x_warn_unsafe_loop_optimizations_get = *gccc::gcc_options_x_warn_unsafe_loop_optimizations_get;
*swig_x_warn_unsafe_loop_optimizations_set = *gccc::gcc_options_x_warn_unsafe_loop_optimizations_set;
*swig_x_warn_unsuffixed_float_constants_get = *gccc::gcc_options_x_warn_unsuffixed_float_constants_get;
*swig_x_warn_unsuffixed_float_constants_set = *gccc::gcc_options_x_warn_unsuffixed_float_constants_set;
*swig_x_warn_unused_get = *gccc::gcc_options_x_warn_unused_get;
*swig_x_warn_unused_set = *gccc::gcc_options_x_warn_unused_set;
*swig_x_warn_unused_but_set_parameter_get = *gccc::gcc_options_x_warn_unused_but_set_parameter_get;
*swig_x_warn_unused_but_set_parameter_set = *gccc::gcc_options_x_warn_unused_but_set_parameter_set;
*swig_x_warn_unused_but_set_variable_get = *gccc::gcc_options_x_warn_unused_but_set_variable_get;
*swig_x_warn_unused_but_set_variable_set = *gccc::gcc_options_x_warn_unused_but_set_variable_set;
*swig_x_warn_unused_function_get = *gccc::gcc_options_x_warn_unused_function_get;
*swig_x_warn_unused_function_set = *gccc::gcc_options_x_warn_unused_function_set;
*swig_x_warn_unused_label_get = *gccc::gcc_options_x_warn_unused_label_get;
*swig_x_warn_unused_label_set = *gccc::gcc_options_x_warn_unused_label_set;
*swig_x_warn_unused_parameter_get = *gccc::gcc_options_x_warn_unused_parameter_get;
*swig_x_warn_unused_parameter_set = *gccc::gcc_options_x_warn_unused_parameter_set;
*swig_x_warn_unused_result_get = *gccc::gcc_options_x_warn_unused_result_get;
*swig_x_warn_unused_result_set = *gccc::gcc_options_x_warn_unused_result_set;
*swig_x_warn_unused_value_get = *gccc::gcc_options_x_warn_unused_value_get;
*swig_x_warn_unused_value_set = *gccc::gcc_options_x_warn_unused_value_set;
*swig_x_warn_unused_variable_get = *gccc::gcc_options_x_warn_unused_variable_get;
*swig_x_warn_unused_variable_set = *gccc::gcc_options_x_warn_unused_variable_set;
*swig_x_warn_vla_get = *gccc::gcc_options_x_warn_vla_get;
*swig_x_warn_vla_set = *gccc::gcc_options_x_warn_vla_set;
*swig_x_warn_volatile_register_var_get = *gccc::gcc_options_x_warn_volatile_register_var_get;
*swig_x_warn_volatile_register_var_set = *gccc::gcc_options_x_warn_volatile_register_var_set;
*swig_x_warn_write_strings_get = *gccc::gcc_options_x_warn_write_strings_get;
*swig_x_warn_write_strings_set = *gccc::gcc_options_x_warn_write_strings_set;
*swig_x_aux_info_file_name_get = *gccc::gcc_options_x_aux_info_file_name_get;
*swig_x_aux_info_file_name_set = *gccc::gcc_options_x_aux_info_file_name_set;
*swig_x_aux_base_name_get = *gccc::gcc_options_x_aux_base_name_get;
*swig_x_aux_base_name_set = *gccc::gcc_options_x_aux_base_name_set;
*swig_x_dump_base_name_get = *gccc::gcc_options_x_dump_base_name_get;
*swig_x_dump_base_name_set = *gccc::gcc_options_x_dump_base_name_set;
*swig_x_dump_dir_name_get = *gccc::gcc_options_x_dump_dir_name_get;
*swig_x_dump_dir_name_set = *gccc::gcc_options_x_dump_dir_name_set;
*swig_x_flag_pic_get = *gccc::gcc_options_x_flag_pic_get;
*swig_x_flag_pic_set = *gccc::gcc_options_x_flag_pic_set;
*swig_x_flag_pie_get = *gccc::gcc_options_x_flag_pie_get;
*swig_x_flag_pie_set = *gccc::gcc_options_x_flag_pie_set;
*swig_x_flag_abi_version_get = *gccc::gcc_options_x_flag_abi_version_get;
*swig_x_flag_abi_version_set = *gccc::gcc_options_x_flag_abi_version_set;
*swig_x_flag_access_control_get = *gccc::gcc_options_x_flag_access_control_get;
*swig_x_flag_access_control_set = *gccc::gcc_options_x_flag_access_control_set;
*swig_x_align_functions_get = *gccc::gcc_options_x_align_functions_get;
*swig_x_align_functions_set = *gccc::gcc_options_x_align_functions_set;
*swig_x_align_jumps_get = *gccc::gcc_options_x_align_jumps_get;
*swig_x_align_jumps_set = *gccc::gcc_options_x_align_jumps_set;
*swig_x_align_labels_get = *gccc::gcc_options_x_align_labels_get;
*swig_x_align_labels_set = *gccc::gcc_options_x_align_labels_set;
*swig_x_align_loops_get = *gccc::gcc_options_x_align_loops_get;
*swig_x_align_loops_set = *gccc::gcc_options_x_align_loops_set;
*swig_x_flag_no_asm_get = *gccc::gcc_options_x_flag_no_asm_get;
*swig_x_flag_no_asm_set = *gccc::gcc_options_x_flag_no_asm_set;
*swig_x_flag_assert_get = *gccc::gcc_options_x_flag_assert_get;
*swig_x_flag_assert_set = *gccc::gcc_options_x_flag_assert_set;
*swig_x_flag_associative_math_get = *gccc::gcc_options_x_flag_associative_math_get;
*swig_x_flag_associative_math_set = *gccc::gcc_options_x_flag_associative_math_set;
*swig_x_flag_asynchronous_unwind_tables_get = *gccc::gcc_options_x_flag_asynchronous_unwind_tables_get;
*swig_x_flag_asynchronous_unwind_tables_set = *gccc::gcc_options_x_flag_asynchronous_unwind_tables_set;
*swig_x_flag_auto_inc_dec_get = *gccc::gcc_options_x_flag_auto_inc_dec_get;
*swig_x_flag_auto_inc_dec_set = *gccc::gcc_options_x_flag_auto_inc_dec_set;
*swig_x_flag_bootstrap_classes_get = *gccc::gcc_options_x_flag_bootstrap_classes_get;
*swig_x_flag_bootstrap_classes_set = *gccc::gcc_options_x_flag_bootstrap_classes_set;
*swig_x_flag_bounds_check_get = *gccc::gcc_options_x_flag_bounds_check_get;
*swig_x_flag_bounds_check_set = *gccc::gcc_options_x_flag_bounds_check_set;
*swig_x_flag_branch_on_count_reg_get = *gccc::gcc_options_x_flag_branch_on_count_reg_get;
*swig_x_flag_branch_on_count_reg_set = *gccc::gcc_options_x_flag_branch_on_count_reg_set;
*swig_x_flag_branch_probabilities_get = *gccc::gcc_options_x_flag_branch_probabilities_get;
*swig_x_flag_branch_probabilities_set = *gccc::gcc_options_x_flag_branch_probabilities_set;
*swig_x_flag_branch_target_load_optimize_get = *gccc::gcc_options_x_flag_branch_target_load_optimize_get;
*swig_x_flag_branch_target_load_optimize_set = *gccc::gcc_options_x_flag_branch_target_load_optimize_set;
*swig_x_flag_branch_target_load_optimize2_get = *gccc::gcc_options_x_flag_branch_target_load_optimize2_get;
*swig_x_flag_branch_target_load_optimize2_set = *gccc::gcc_options_x_flag_branch_target_load_optimize2_set;
*swig_x_flag_btr_bb_exclusive_get = *gccc::gcc_options_x_flag_btr_bb_exclusive_get;
*swig_x_flag_btr_bb_exclusive_set = *gccc::gcc_options_x_flag_btr_bb_exclusive_set;
*swig_x_flag_no_builtin_get = *gccc::gcc_options_x_flag_no_builtin_get;
*swig_x_flag_no_builtin_set = *gccc::gcc_options_x_flag_no_builtin_set;
*swig_x_common_deferred_options_get = *gccc::gcc_options_x_common_deferred_options_get;
*swig_x_common_deferred_options_set = *gccc::gcc_options_x_common_deferred_options_set;
*swig_x_flag_caller_saves_get = *gccc::gcc_options_x_flag_caller_saves_get;
*swig_x_flag_caller_saves_set = *gccc::gcc_options_x_flag_caller_saves_set;
*swig_x_flag_check_data_deps_get = *gccc::gcc_options_x_flag_check_data_deps_get;
*swig_x_flag_check_data_deps_set = *gccc::gcc_options_x_flag_check_data_deps_set;
*swig_x_flag_check_new_get = *gccc::gcc_options_x_flag_check_new_get;
*swig_x_flag_check_new_set = *gccc::gcc_options_x_flag_check_new_set;
*swig_x_flag_check_references_get = *gccc::gcc_options_x_flag_check_references_get;
*swig_x_flag_check_references_set = *gccc::gcc_options_x_flag_check_references_set;
*swig_x_flag_combine_stack_adjustments_get = *gccc::gcc_options_x_flag_combine_stack_adjustments_get;
*swig_x_flag_combine_stack_adjustments_set = *gccc::gcc_options_x_flag_combine_stack_adjustments_set;
*swig_x_flag_no_common_get = *gccc::gcc_options_x_flag_no_common_get;
*swig_x_flag_no_common_set = *gccc::gcc_options_x_flag_no_common_set;
*swig_x_flag_compare_debug_get = *gccc::gcc_options_x_flag_compare_debug_get;
*swig_x_flag_compare_debug_set = *gccc::gcc_options_x_flag_compare_debug_set;
*swig_x_flag_compare_debug_opt_get = *gccc::gcc_options_x_flag_compare_debug_opt_get;
*swig_x_flag_compare_debug_opt_set = *gccc::gcc_options_x_flag_compare_debug_opt_set;
*swig_x_flag_compare_elim_after_reload_get = *gccc::gcc_options_x_flag_compare_elim_after_reload_get;
*swig_x_flag_compare_elim_after_reload_set = *gccc::gcc_options_x_flag_compare_elim_after_reload_set;
*swig_x_flag_conserve_space_get = *gccc::gcc_options_x_flag_conserve_space_get;
*swig_x_flag_conserve_space_set = *gccc::gcc_options_x_flag_conserve_space_set;
*swig_x_flag_conserve_stack_get = *gccc::gcc_options_x_flag_conserve_stack_get;
*swig_x_flag_conserve_stack_set = *gccc::gcc_options_x_flag_conserve_stack_set;
*swig_x_max_constexpr_depth_get = *gccc::gcc_options_x_max_constexpr_depth_get;
*swig_x_max_constexpr_depth_set = *gccc::gcc_options_x_max_constexpr_depth_set;
*swig_x_flag_cprop_registers_get = *gccc::gcc_options_x_flag_cprop_registers_get;
*swig_x_flag_cprop_registers_set = *gccc::gcc_options_x_flag_cprop_registers_set;
*swig_x_flag_crossjumping_get = *gccc::gcc_options_x_flag_crossjumping_get;
*swig_x_flag_crossjumping_set = *gccc::gcc_options_x_flag_crossjumping_set;
*swig_x_flag_cse_follow_jumps_get = *gccc::gcc_options_x_flag_cse_follow_jumps_get;
*swig_x_flag_cse_follow_jumps_set = *gccc::gcc_options_x_flag_cse_follow_jumps_set;
*swig_x_flag_cx_fortran_rules_get = *gccc::gcc_options_x_flag_cx_fortran_rules_get;
*swig_x_flag_cx_fortran_rules_set = *gccc::gcc_options_x_flag_cx_fortran_rules_set;
*swig_x_flag_cx_limited_range_get = *gccc::gcc_options_x_flag_cx_limited_range_get;
*swig_x_flag_cx_limited_range_set = *gccc::gcc_options_x_flag_cx_limited_range_set;
*swig_x_flag_data_sections_get = *gccc::gcc_options_x_flag_data_sections_get;
*swig_x_flag_data_sections_set = *gccc::gcc_options_x_flag_data_sections_set;
*swig_x_flag_dce_get = *gccc::gcc_options_x_flag_dce_get;
*swig_x_flag_dce_set = *gccc::gcc_options_x_flag_dce_set;
*swig_x_flag_deduce_init_list_get = *gccc::gcc_options_x_flag_deduce_init_list_get;
*swig_x_flag_deduce_init_list_set = *gccc::gcc_options_x_flag_deduce_init_list_set;
*swig_x_flag_defer_pop_get = *gccc::gcc_options_x_flag_defer_pop_get;
*swig_x_flag_defer_pop_set = *gccc::gcc_options_x_flag_defer_pop_set;
*swig_x_flag_delayed_branch_get = *gccc::gcc_options_x_flag_delayed_branch_get;
*swig_x_flag_delayed_branch_set = *gccc::gcc_options_x_flag_delayed_branch_set;
*swig_x_flag_delete_null_pointer_checks_get = *gccc::gcc_options_x_flag_delete_null_pointer_checks_get;
*swig_x_flag_delete_null_pointer_checks_set = *gccc::gcc_options_x_flag_delete_null_pointer_checks_set;
*swig_x_flag_devirtualize_get = *gccc::gcc_options_x_flag_devirtualize_get;
*swig_x_flag_devirtualize_set = *gccc::gcc_options_x_flag_devirtualize_set;
*swig_x_flag_diagnostics_show_option_get = *gccc::gcc_options_x_flag_diagnostics_show_option_get;
*swig_x_flag_diagnostics_show_option_set = *gccc::gcc_options_x_flag_diagnostics_show_option_set;
*swig_x_flag_dse_get = *gccc::gcc_options_x_flag_dse_get;
*swig_x_flag_dse_set = *gccc::gcc_options_x_flag_dse_set;
*swig_x_flag_dump_final_insns_get = *gccc::gcc_options_x_flag_dump_final_insns_get;
*swig_x_flag_dump_final_insns_set = *gccc::gcc_options_x_flag_dump_final_insns_set;
*swig_x_flag_dump_go_spec_get = *gccc::gcc_options_x_flag_dump_go_spec_get;
*swig_x_flag_dump_go_spec_set = *gccc::gcc_options_x_flag_dump_go_spec_set;
*swig_x_flag_dump_noaddr_get = *gccc::gcc_options_x_flag_dump_noaddr_get;
*swig_x_flag_dump_noaddr_set = *gccc::gcc_options_x_flag_dump_noaddr_set;
*swig_x_flag_dump_unnumbered_get = *gccc::gcc_options_x_flag_dump_unnumbered_get;
*swig_x_flag_dump_unnumbered_set = *gccc::gcc_options_x_flag_dump_unnumbered_set;
*swig_x_flag_dump_unnumbered_links_get = *gccc::gcc_options_x_flag_dump_unnumbered_links_get;
*swig_x_flag_dump_unnumbered_links_set = *gccc::gcc_options_x_flag_dump_unnumbered_links_set;
*swig_x_flag_dwarf2_cfi_asm_get = *gccc::gcc_options_x_flag_dwarf2_cfi_asm_get;
*swig_x_flag_dwarf2_cfi_asm_set = *gccc::gcc_options_x_flag_dwarf2_cfi_asm_set;
*swig_x_flag_early_inlining_get = *gccc::gcc_options_x_flag_early_inlining_get;
*swig_x_flag_early_inlining_set = *gccc::gcc_options_x_flag_early_inlining_set;
*swig_x_flag_elide_constructors_get = *gccc::gcc_options_x_flag_elide_constructors_get;
*swig_x_flag_elide_constructors_set = *gccc::gcc_options_x_flag_elide_constructors_set;
*swig_x_flag_eliminate_dwarf2_dups_get = *gccc::gcc_options_x_flag_eliminate_dwarf2_dups_get;
*swig_x_flag_eliminate_dwarf2_dups_set = *gccc::gcc_options_x_flag_eliminate_dwarf2_dups_set;
*swig_x_flag_debug_only_used_symbols_get = *gccc::gcc_options_x_flag_debug_only_used_symbols_get;
*swig_x_flag_debug_only_used_symbols_set = *gccc::gcc_options_x_flag_debug_only_used_symbols_set;
*swig_x_flag_eliminate_unused_debug_types_get = *gccc::gcc_options_x_flag_eliminate_unused_debug_types_get;
*swig_x_flag_eliminate_unused_debug_types_set = *gccc::gcc_options_x_flag_eliminate_unused_debug_types_set;
*swig_x_flag_emit_class_debug_always_get = *gccc::gcc_options_x_flag_emit_class_debug_always_get;
*swig_x_flag_emit_class_debug_always_set = *gccc::gcc_options_x_flag_emit_class_debug_always_set;
*swig_x_flag_emit_class_files_get = *gccc::gcc_options_x_flag_emit_class_files_get;
*swig_x_flag_emit_class_files_set = *gccc::gcc_options_x_flag_emit_class_files_set;
*swig_x_flag_enable_icf_debug_get = *gccc::gcc_options_x_flag_enable_icf_debug_get;
*swig_x_flag_enable_icf_debug_set = *gccc::gcc_options_x_flag_enable_icf_debug_set;
*swig_x_flag_enforce_eh_specs_get = *gccc::gcc_options_x_flag_enforce_eh_specs_get;
*swig_x_flag_enforce_eh_specs_set = *gccc::gcc_options_x_flag_enforce_eh_specs_set;
*swig_x_flag_exceptions_get = *gccc::gcc_options_x_flag_exceptions_get;
*swig_x_flag_exceptions_set = *gccc::gcc_options_x_flag_exceptions_set;
*swig_x_flag_excess_precision_cmdline_get = *gccc::gcc_options_x_flag_excess_precision_cmdline_get;
*swig_x_flag_excess_precision_cmdline_set = *gccc::gcc_options_x_flag_excess_precision_cmdline_set;
*swig_x_flag_expensive_optimizations_get = *gccc::gcc_options_x_flag_expensive_optimizations_get;
*swig_x_flag_expensive_optimizations_set = *gccc::gcc_options_x_flag_expensive_optimizations_set;
*swig_x_flag_filelist_file_get = *gccc::gcc_options_x_flag_filelist_file_get;
*swig_x_flag_filelist_file_set = *gccc::gcc_options_x_flag_filelist_file_set;
*swig_x_flag_finite_math_only_get = *gccc::gcc_options_x_flag_finite_math_only_get;
*swig_x_flag_finite_math_only_set = *gccc::gcc_options_x_flag_finite_math_only_set;
*swig_x_flag_float_store_get = *gccc::gcc_options_x_flag_float_store_get;
*swig_x_flag_float_store_set = *gccc::gcc_options_x_flag_float_store_set;
*swig_x_flag_new_for_scope_get = *gccc::gcc_options_x_flag_new_for_scope_get;
*swig_x_flag_new_for_scope_set = *gccc::gcc_options_x_flag_new_for_scope_set;
*swig_x_flag_force_classes_archive_check_get = *gccc::gcc_options_x_flag_force_classes_archive_check_get;
*swig_x_flag_force_classes_archive_check_set = *gccc::gcc_options_x_flag_force_classes_archive_check_set;
*swig_x_flag_forward_propagate_get = *gccc::gcc_options_x_flag_forward_propagate_get;
*swig_x_flag_forward_propagate_set = *gccc::gcc_options_x_flag_forward_propagate_set;
*swig_x_flag_fp_contract_mode_get = *gccc::gcc_options_x_flag_fp_contract_mode_get;
*swig_x_flag_fp_contract_mode_set = *gccc::gcc_options_x_flag_fp_contract_mode_set;
*swig_x_flag_friend_injection_get = *gccc::gcc_options_x_flag_friend_injection_get;
*swig_x_flag_friend_injection_set = *gccc::gcc_options_x_flag_friend_injection_set;
*swig_x_flag_no_function_cse_get = *gccc::gcc_options_x_flag_no_function_cse_get;
*swig_x_flag_no_function_cse_set = *gccc::gcc_options_x_flag_no_function_cse_set;
*swig_x_flag_function_sections_get = *gccc::gcc_options_x_flag_function_sections_get;
*swig_x_flag_function_sections_set = *gccc::gcc_options_x_flag_function_sections_set;
*swig_x_flag_gcse_get = *gccc::gcc_options_x_flag_gcse_get;
*swig_x_flag_gcse_set = *gccc::gcc_options_x_flag_gcse_set;
*swig_x_flag_gcse_after_reload_get = *gccc::gcc_options_x_flag_gcse_after_reload_get;
*swig_x_flag_gcse_after_reload_set = *gccc::gcc_options_x_flag_gcse_after_reload_set;
*swig_x_flag_gcse_las_get = *gccc::gcc_options_x_flag_gcse_las_get;
*swig_x_flag_gcse_las_set = *gccc::gcc_options_x_flag_gcse_las_set;
*swig_x_flag_gcse_lm_get = *gccc::gcc_options_x_flag_gcse_lm_get;
*swig_x_flag_gcse_lm_set = *gccc::gcc_options_x_flag_gcse_lm_set;
*swig_x_flag_gcse_sm_get = *gccc::gcc_options_x_flag_gcse_sm_get;
*swig_x_flag_gcse_sm_set = *gccc::gcc_options_x_flag_gcse_sm_set;
*swig_x_flag_no_gnu_keywords_get = *gccc::gcc_options_x_flag_no_gnu_keywords_get;
*swig_x_flag_no_gnu_keywords_set = *gccc::gcc_options_x_flag_no_gnu_keywords_set;
*swig_x_flag_gnu89_inline_get = *gccc::gcc_options_x_flag_gnu89_inline_get;
*swig_x_flag_gnu89_inline_set = *gccc::gcc_options_x_flag_gnu89_inline_set;
*swig_x_flag_graphite_get = *gccc::gcc_options_x_flag_graphite_get;
*swig_x_flag_graphite_set = *gccc::gcc_options_x_flag_graphite_set;
*swig_x_flag_graphite_identity_get = *gccc::gcc_options_x_flag_graphite_identity_get;
*swig_x_flag_graphite_identity_set = *gccc::gcc_options_x_flag_graphite_identity_set;
*swig_x_flag_guess_branch_prob_get = *gccc::gcc_options_x_flag_guess_branch_prob_get;
*swig_x_flag_guess_branch_prob_set = *gccc::gcc_options_x_flag_guess_branch_prob_set;
*swig_x_flag_hash_synchronization_get = *gccc::gcc_options_x_flag_hash_synchronization_get;
*swig_x_flag_hash_synchronization_set = *gccc::gcc_options_x_flag_hash_synchronization_set;
*swig_x_flag_no_ident_get = *gccc::gcc_options_x_flag_no_ident_get;
*swig_x_flag_no_ident_set = *gccc::gcc_options_x_flag_no_ident_set;
*swig_x_flag_if_conversion_get = *gccc::gcc_options_x_flag_if_conversion_get;
*swig_x_flag_if_conversion_set = *gccc::gcc_options_x_flag_if_conversion_set;
*swig_x_flag_if_conversion2_get = *gccc::gcc_options_x_flag_if_conversion2_get;
*swig_x_flag_if_conversion2_set = *gccc::gcc_options_x_flag_if_conversion2_set;
*swig_x_flag_implement_inlines_get = *gccc::gcc_options_x_flag_implement_inlines_get;
*swig_x_flag_implement_inlines_set = *gccc::gcc_options_x_flag_implement_inlines_set;
*swig_x_flag_implicit_inline_templates_get = *gccc::gcc_options_x_flag_implicit_inline_templates_get;
*swig_x_flag_implicit_inline_templates_set = *gccc::gcc_options_x_flag_implicit_inline_templates_set;
*swig_x_flag_implicit_templates_get = *gccc::gcc_options_x_flag_implicit_templates_get;
*swig_x_flag_implicit_templates_set = *gccc::gcc_options_x_flag_implicit_templates_set;
*swig_x_flag_indirect_classes_get = *gccc::gcc_options_x_flag_indirect_classes_get;
*swig_x_flag_indirect_classes_set = *gccc::gcc_options_x_flag_indirect_classes_set;
*swig_x_flag_indirect_dispatch_get = *gccc::gcc_options_x_flag_indirect_dispatch_get;
*swig_x_flag_indirect_dispatch_set = *gccc::gcc_options_x_flag_indirect_dispatch_set;
*swig_x_flag_indirect_inlining_get = *gccc::gcc_options_x_flag_indirect_inlining_get;
*swig_x_flag_indirect_inlining_set = *gccc::gcc_options_x_flag_indirect_inlining_set;
*swig_x_flag_inhibit_size_directive_get = *gccc::gcc_options_x_flag_inhibit_size_directive_get;
*swig_x_flag_inhibit_size_directive_set = *gccc::gcc_options_x_flag_inhibit_size_directive_set;
*swig_x_flag_no_inline_get = *gccc::gcc_options_x_flag_no_inline_get;
*swig_x_flag_no_inline_set = *gccc::gcc_options_x_flag_no_inline_set;
*swig_x_flag_inline_functions_get = *gccc::gcc_options_x_flag_inline_functions_get;
*swig_x_flag_inline_functions_set = *gccc::gcc_options_x_flag_inline_functions_set;
*swig_x_flag_inline_functions_called_once_get = *gccc::gcc_options_x_flag_inline_functions_called_once_get;
*swig_x_flag_inline_functions_called_once_set = *gccc::gcc_options_x_flag_inline_functions_called_once_set;
*swig_x_flag_inline_small_functions_get = *gccc::gcc_options_x_flag_inline_small_functions_get;
*swig_x_flag_inline_small_functions_set = *gccc::gcc_options_x_flag_inline_small_functions_set;
*swig_x_flag_instrument_function_entry_exit_get = *gccc::gcc_options_x_flag_instrument_function_entry_exit_get;
*swig_x_flag_instrument_function_entry_exit_set = *gccc::gcc_options_x_flag_instrument_function_entry_exit_set;
*swig_x_flag_ipa_cp_get = *gccc::gcc_options_x_flag_ipa_cp_get;
*swig_x_flag_ipa_cp_set = *gccc::gcc_options_x_flag_ipa_cp_set;
*swig_x_flag_ipa_cp_clone_get = *gccc::gcc_options_x_flag_ipa_cp_clone_get;
*swig_x_flag_ipa_cp_clone_set = *gccc::gcc_options_x_flag_ipa_cp_clone_set;
*swig_x_flag_ipa_matrix_reorg_get = *gccc::gcc_options_x_flag_ipa_matrix_reorg_get;
*swig_x_flag_ipa_matrix_reorg_set = *gccc::gcc_options_x_flag_ipa_matrix_reorg_set;
*swig_x_flag_ipa_profile_get = *gccc::gcc_options_x_flag_ipa_profile_get;
*swig_x_flag_ipa_profile_set = *gccc::gcc_options_x_flag_ipa_profile_set;
*swig_x_flag_ipa_pta_get = *gccc::gcc_options_x_flag_ipa_pta_get;
*swig_x_flag_ipa_pta_set = *gccc::gcc_options_x_flag_ipa_pta_set;
*swig_x_flag_ipa_pure_const_get = *gccc::gcc_options_x_flag_ipa_pure_const_get;
*swig_x_flag_ipa_pure_const_set = *gccc::gcc_options_x_flag_ipa_pure_const_set;
*swig_x_flag_ipa_reference_get = *gccc::gcc_options_x_flag_ipa_reference_get;
*swig_x_flag_ipa_reference_set = *gccc::gcc_options_x_flag_ipa_reference_set;
*swig_x_flag_ipa_sra_get = *gccc::gcc_options_x_flag_ipa_sra_get;
*swig_x_flag_ipa_sra_set = *gccc::gcc_options_x_flag_ipa_sra_set;
*swig_x_flag_ipa_struct_reorg_get = *gccc::gcc_options_x_flag_ipa_struct_reorg_get;
*swig_x_flag_ipa_struct_reorg_set = *gccc::gcc_options_x_flag_ipa_struct_reorg_set;
*swig_x_flag_ira_algorithm_get = *gccc::gcc_options_x_flag_ira_algorithm_get;
*swig_x_flag_ira_algorithm_set = *gccc::gcc_options_x_flag_ira_algorithm_set;
*swig_x_flag_ira_loop_pressure_get = *gccc::gcc_options_x_flag_ira_loop_pressure_get;
*swig_x_flag_ira_loop_pressure_set = *gccc::gcc_options_x_flag_ira_loop_pressure_set;
*swig_x_flag_ira_region_get = *gccc::gcc_options_x_flag_ira_region_get;
*swig_x_flag_ira_region_set = *gccc::gcc_options_x_flag_ira_region_set;
*swig_x_flag_ira_share_save_slots_get = *gccc::gcc_options_x_flag_ira_share_save_slots_get;
*swig_x_flag_ira_share_save_slots_set = *gccc::gcc_options_x_flag_ira_share_save_slots_set;
*swig_x_flag_ira_share_spill_slots_get = *gccc::gcc_options_x_flag_ira_share_spill_slots_get;
*swig_x_flag_ira_share_spill_slots_set = *gccc::gcc_options_x_flag_ira_share_spill_slots_set;
*swig_x_flag_ira_verbose_get = *gccc::gcc_options_x_flag_ira_verbose_get;
*swig_x_flag_ira_verbose_set = *gccc::gcc_options_x_flag_ira_verbose_set;
*swig_x_flag_ivopts_get = *gccc::gcc_options_x_flag_ivopts_get;
*swig_x_flag_ivopts_set = *gccc::gcc_options_x_flag_ivopts_set;
*swig_x_flag_jni_get = *gccc::gcc_options_x_flag_jni_get;
*swig_x_flag_jni_set = *gccc::gcc_options_x_flag_jni_set;
*swig_x_flag_jump_tables_get = *gccc::gcc_options_x_flag_jump_tables_get;
*swig_x_flag_jump_tables_set = *gccc::gcc_options_x_flag_jump_tables_set;
*swig_x_flag_keep_inline_dllexport_get = *gccc::gcc_options_x_flag_keep_inline_dllexport_get;
*swig_x_flag_keep_inline_dllexport_set = *gccc::gcc_options_x_flag_keep_inline_dllexport_set;
*swig_x_flag_keep_inline_functions_get = *gccc::gcc_options_x_flag_keep_inline_functions_get;
*swig_x_flag_keep_inline_functions_set = *gccc::gcc_options_x_flag_keep_inline_functions_set;
*swig_x_flag_keep_static_consts_get = *gccc::gcc_options_x_flag_keep_static_consts_get;
*swig_x_flag_keep_static_consts_set = *gccc::gcc_options_x_flag_keep_static_consts_set;
*swig_x_flag_lax_vector_conversions_get = *gccc::gcc_options_x_flag_lax_vector_conversions_get;
*swig_x_flag_lax_vector_conversions_set = *gccc::gcc_options_x_flag_lax_vector_conversions_set;
*swig_x_flag_leading_underscore_get = *gccc::gcc_options_x_flag_leading_underscore_get;
*swig_x_flag_leading_underscore_set = *gccc::gcc_options_x_flag_leading_underscore_set;
*swig_x_flag_loop_block_get = *gccc::gcc_options_x_flag_loop_block_get;
*swig_x_flag_loop_block_set = *gccc::gcc_options_x_flag_loop_block_set;
*swig_x_flag_loop_flatten_get = *gccc::gcc_options_x_flag_loop_flatten_get;
*swig_x_flag_loop_flatten_set = *gccc::gcc_options_x_flag_loop_flatten_set;
*swig_x_flag_loop_interchange_get = *gccc::gcc_options_x_flag_loop_interchange_get;
*swig_x_flag_loop_interchange_set = *gccc::gcc_options_x_flag_loop_interchange_set;
*swig_x_flag_loop_parallelize_all_get = *gccc::gcc_options_x_flag_loop_parallelize_all_get;
*swig_x_flag_loop_parallelize_all_set = *gccc::gcc_options_x_flag_loop_parallelize_all_set;
*swig_x_flag_loop_strip_mine_get = *gccc::gcc_options_x_flag_loop_strip_mine_get;
*swig_x_flag_loop_strip_mine_set = *gccc::gcc_options_x_flag_loop_strip_mine_set;
*swig_x_flag_lto_compression_level_get = *gccc::gcc_options_x_flag_lto_compression_level_get;
*swig_x_flag_lto_compression_level_set = *gccc::gcc_options_x_flag_lto_compression_level_set;
*swig_x_flag_lto_partition_1to1_get = *gccc::gcc_options_x_flag_lto_partition_1to1_get;
*swig_x_flag_lto_partition_1to1_set = *gccc::gcc_options_x_flag_lto_partition_1to1_set;
*swig_x_flag_lto_partition_balanced_get = *gccc::gcc_options_x_flag_lto_partition_balanced_get;
*swig_x_flag_lto_partition_balanced_set = *gccc::gcc_options_x_flag_lto_partition_balanced_set;
*swig_x_flag_lto_partition_none_get = *gccc::gcc_options_x_flag_lto_partition_none_get;
*swig_x_flag_lto_partition_none_set = *gccc::gcc_options_x_flag_lto_partition_none_set;
*swig_x_flag_lto_report_get = *gccc::gcc_options_x_flag_lto_report_get;
*swig_x_flag_lto_report_set = *gccc::gcc_options_x_flag_lto_report_set;
*swig_x_flag_lto_get = *gccc::gcc_options_x_flag_lto_get;
*swig_x_flag_lto_set = *gccc::gcc_options_x_flag_lto_set;
*swig_x_flag_ltrans_get = *gccc::gcc_options_x_flag_ltrans_get;
*swig_x_flag_ltrans_set = *gccc::gcc_options_x_flag_ltrans_set;
*swig_x_ltrans_output_list_get = *gccc::gcc_options_x_ltrans_output_list_get;
*swig_x_ltrans_output_list_set = *gccc::gcc_options_x_ltrans_output_list_set;
*swig_x_flag_errno_math_get = *gccc::gcc_options_x_flag_errno_math_get;
*swig_x_flag_errno_math_set = *gccc::gcc_options_x_flag_errno_math_set;
*swig_x_flag_max_errors_get = *gccc::gcc_options_x_flag_max_errors_get;
*swig_x_flag_max_errors_set = *gccc::gcc_options_x_flag_max_errors_set;
*swig_x_mem_report_get = *gccc::gcc_options_x_mem_report_get;
*swig_x_mem_report_set = *gccc::gcc_options_x_mem_report_set;
*swig_x_flag_merge_constants_get = *gccc::gcc_options_x_flag_merge_constants_get;
*swig_x_flag_merge_constants_set = *gccc::gcc_options_x_flag_merge_constants_set;
*swig_x_flag_merge_debug_strings_get = *gccc::gcc_options_x_flag_merge_debug_strings_get;
*swig_x_flag_merge_debug_strings_set = *gccc::gcc_options_x_flag_merge_debug_strings_set;
*swig_x_flag_modulo_sched_get = *gccc::gcc_options_x_flag_modulo_sched_get;
*swig_x_flag_modulo_sched_set = *gccc::gcc_options_x_flag_modulo_sched_set;
*swig_x_flag_modulo_sched_allow_regmoves_get = *gccc::gcc_options_x_flag_modulo_sched_allow_regmoves_get;
*swig_x_flag_modulo_sched_allow_regmoves_set = *gccc::gcc_options_x_flag_modulo_sched_allow_regmoves_set;
*swig_x_flag_move_loop_invariants_get = *gccc::gcc_options_x_flag_move_loop_invariants_get;
*swig_x_flag_move_loop_invariants_set = *gccc::gcc_options_x_flag_move_loop_invariants_set;
*swig_x_flag_ms_extensions_get = *gccc::gcc_options_x_flag_ms_extensions_get;
*swig_x_flag_ms_extensions_set = *gccc::gcc_options_x_flag_ms_extensions_set;
*swig_x_flag_mudflap_get = *gccc::gcc_options_x_flag_mudflap_get;
*swig_x_flag_mudflap_set = *gccc::gcc_options_x_flag_mudflap_set;
*swig_x_flag_mudflap_ignore_reads_get = *gccc::gcc_options_x_flag_mudflap_ignore_reads_get;
*swig_x_flag_mudflap_ignore_reads_set = *gccc::gcc_options_x_flag_mudflap_ignore_reads_set;
*swig_x_flag_nil_receivers_get = *gccc::gcc_options_x_flag_nil_receivers_get;
*swig_x_flag_nil_receivers_set = *gccc::gcc_options_x_flag_nil_receivers_set;
*swig_x_flag_non_call_exceptions_get = *gccc::gcc_options_x_flag_non_call_exceptions_get;
*swig_x_flag_non_call_exceptions_set = *gccc::gcc_options_x_flag_non_call_exceptions_set;
*swig_x_flag_no_nonansi_builtin_get = *gccc::gcc_options_x_flag_no_nonansi_builtin_get;
*swig_x_flag_no_nonansi_builtin_set = *gccc::gcc_options_x_flag_no_nonansi_builtin_set;
*swig_x_flag_nothrow_opt_get = *gccc::gcc_options_x_flag_nothrow_opt_get;
*swig_x_flag_nothrow_opt_set = *gccc::gcc_options_x_flag_nothrow_opt_set;
*swig_x_flag_objc_abi_get = *gccc::gcc_options_x_flag_objc_abi_get;
*swig_x_flag_objc_abi_set = *gccc::gcc_options_x_flag_objc_abi_set;
*swig_x_flag_objc_call_cxx_cdtors_get = *gccc::gcc_options_x_flag_objc_call_cxx_cdtors_get;
*swig_x_flag_objc_call_cxx_cdtors_set = *gccc::gcc_options_x_flag_objc_call_cxx_cdtors_set;
*swig_x_flag_objc_direct_dispatch_get = *gccc::gcc_options_x_flag_objc_direct_dispatch_get;
*swig_x_flag_objc_direct_dispatch_set = *gccc::gcc_options_x_flag_objc_direct_dispatch_set;
*swig_x_flag_objc_exceptions_get = *gccc::gcc_options_x_flag_objc_exceptions_get;
*swig_x_flag_objc_exceptions_set = *gccc::gcc_options_x_flag_objc_exceptions_set;
*swig_x_flag_objc_gc_get = *gccc::gcc_options_x_flag_objc_gc_get;
*swig_x_flag_objc_gc_set = *gccc::gcc_options_x_flag_objc_gc_set;
*swig_x_flag_objc_nilcheck_get = *gccc::gcc_options_x_flag_objc_nilcheck_get;
*swig_x_flag_objc_nilcheck_set = *gccc::gcc_options_x_flag_objc_nilcheck_set;
*swig_x_flag_objc_sjlj_exceptions_get = *gccc::gcc_options_x_flag_objc_sjlj_exceptions_get;
*swig_x_flag_objc_sjlj_exceptions_set = *gccc::gcc_options_x_flag_objc_sjlj_exceptions_set;
*swig_x_flag_objc1_only_get = *gccc::gcc_options_x_flag_objc1_only_get;
*swig_x_flag_objc1_only_set = *gccc::gcc_options_x_flag_objc1_only_set;
*swig_x_flag_omit_frame_pointer_get = *gccc::gcc_options_x_flag_omit_frame_pointer_get;
*swig_x_flag_omit_frame_pointer_set = *gccc::gcc_options_x_flag_omit_frame_pointer_set;
*swig_x_flag_openmp_get = *gccc::gcc_options_x_flag_openmp_get;
*swig_x_flag_openmp_set = *gccc::gcc_options_x_flag_openmp_set;
*swig_x_flag_regmove_get = *gccc::gcc_options_x_flag_regmove_get;
*swig_x_flag_regmove_set = *gccc::gcc_options_x_flag_regmove_set;
*swig_x_flag_optimize_sibling_calls_get = *gccc::gcc_options_x_flag_optimize_sibling_calls_get;
*swig_x_flag_optimize_sibling_calls_set = *gccc::gcc_options_x_flag_optimize_sibling_calls_set;
*swig_x_flag_optimize_sci_get = *gccc::gcc_options_x_flag_optimize_sci_get;
*swig_x_flag_optimize_sci_set = *gccc::gcc_options_x_flag_optimize_sci_set;
*swig_x_flag_pack_struct_get = *gccc::gcc_options_x_flag_pack_struct_get;
*swig_x_flag_pack_struct_set = *gccc::gcc_options_x_flag_pack_struct_set;
*swig_x_flag_partial_inlining_get = *gccc::gcc_options_x_flag_partial_inlining_get;
*swig_x_flag_partial_inlining_set = *gccc::gcc_options_x_flag_partial_inlining_set;
*swig_x_flag_pcc_struct_return_get = *gccc::gcc_options_x_flag_pcc_struct_return_get;
*swig_x_flag_pcc_struct_return_set = *gccc::gcc_options_x_flag_pcc_struct_return_set;
*swig_x_flag_peel_loops_get = *gccc::gcc_options_x_flag_peel_loops_get;
*swig_x_flag_peel_loops_set = *gccc::gcc_options_x_flag_peel_loops_set;
*swig_x_flag_no_peephole_get = *gccc::gcc_options_x_flag_no_peephole_get;
*swig_x_flag_no_peephole_set = *gccc::gcc_options_x_flag_no_peephole_set;
*swig_x_flag_peephole2_get = *gccc::gcc_options_x_flag_peephole2_get;
*swig_x_flag_peephole2_set = *gccc::gcc_options_x_flag_peephole2_set;
*swig_x_flag_plan9_extensions_get = *gccc::gcc_options_x_flag_plan9_extensions_get;
*swig_x_flag_plan9_extensions_set = *gccc::gcc_options_x_flag_plan9_extensions_set;
*swig_x_post_ipa_mem_report_get = *gccc::gcc_options_x_post_ipa_mem_report_get;
*swig_x_post_ipa_mem_report_set = *gccc::gcc_options_x_post_ipa_mem_report_set;
*swig_x_pre_ipa_mem_report_get = *gccc::gcc_options_x_pre_ipa_mem_report_get;
*swig_x_pre_ipa_mem_report_set = *gccc::gcc_options_x_pre_ipa_mem_report_set;
*swig_x_flag_predictive_commoning_get = *gccc::gcc_options_x_flag_predictive_commoning_get;
*swig_x_flag_predictive_commoning_set = *gccc::gcc_options_x_flag_predictive_commoning_set;
*swig_x_flag_prefetch_loop_arrays_get = *gccc::gcc_options_x_flag_prefetch_loop_arrays_get;
*swig_x_flag_prefetch_loop_arrays_set = *gccc::gcc_options_x_flag_prefetch_loop_arrays_set;
*swig_x_flag_pretty_templates_get = *gccc::gcc_options_x_flag_pretty_templates_get;
*swig_x_flag_pretty_templates_set = *gccc::gcc_options_x_flag_pretty_templates_set;
*swig_x_profile_flag_get = *gccc::gcc_options_x_profile_flag_get;
*swig_x_profile_flag_set = *gccc::gcc_options_x_profile_flag_set;
*swig_x_profile_arc_flag_get = *gccc::gcc_options_x_profile_arc_flag_get;
*swig_x_profile_arc_flag_set = *gccc::gcc_options_x_profile_arc_flag_set;
*swig_x_flag_profile_correction_get = *gccc::gcc_options_x_flag_profile_correction_get;
*swig_x_flag_profile_correction_set = *gccc::gcc_options_x_flag_profile_correction_set;
*swig_x_profile_data_prefix_get = *gccc::gcc_options_x_profile_data_prefix_get;
*swig_x_profile_data_prefix_set = *gccc::gcc_options_x_profile_data_prefix_set;
*swig_x_flag_profile_use_get = *gccc::gcc_options_x_flag_profile_use_get;
*swig_x_flag_profile_use_set = *gccc::gcc_options_x_flag_profile_use_set;
*swig_x_flag_profile_values_get = *gccc::gcc_options_x_flag_profile_values_get;
*swig_x_flag_profile_values_set = *gccc::gcc_options_x_flag_profile_values_set;
*swig_x_flag_reciprocal_math_get = *gccc::gcc_options_x_flag_reciprocal_math_get;
*swig_x_flag_reciprocal_math_set = *gccc::gcc_options_x_flag_reciprocal_math_set;
*swig_x_flag_record_gcc_switches_get = *gccc::gcc_options_x_flag_record_gcc_switches_get;
*swig_x_flag_record_gcc_switches_set = *gccc::gcc_options_x_flag_record_gcc_switches_set;
*swig_x_flag_reduced_reflection_get = *gccc::gcc_options_x_flag_reduced_reflection_get;
*swig_x_flag_reduced_reflection_set = *gccc::gcc_options_x_flag_reduced_reflection_set;
*swig_x_flag_rename_registers_get = *gccc::gcc_options_x_flag_rename_registers_get;
*swig_x_flag_rename_registers_set = *gccc::gcc_options_x_flag_rename_registers_set;
*swig_x_flag_reorder_blocks_get = *gccc::gcc_options_x_flag_reorder_blocks_get;
*swig_x_flag_reorder_blocks_set = *gccc::gcc_options_x_flag_reorder_blocks_set;
*swig_x_flag_reorder_blocks_and_partition_get = *gccc::gcc_options_x_flag_reorder_blocks_and_partition_get;
*swig_x_flag_reorder_blocks_and_partition_set = *gccc::gcc_options_x_flag_reorder_blocks_and_partition_set;
*swig_x_flag_reorder_functions_get = *gccc::gcc_options_x_flag_reorder_functions_get;
*swig_x_flag_reorder_functions_set = *gccc::gcc_options_x_flag_reorder_functions_set;
*swig_x_flag_replace_objc_classes_get = *gccc::gcc_options_x_flag_replace_objc_classes_get;
*swig_x_flag_replace_objc_classes_set = *gccc::gcc_options_x_flag_replace_objc_classes_set;
*swig_x_go_require_return_statement_get = *gccc::gcc_options_x_go_require_return_statement_get;
*swig_x_go_require_return_statement_set = *gccc::gcc_options_x_go_require_return_statement_set;
*swig_x_flag_rerun_cse_after_loop_get = *gccc::gcc_options_x_flag_rerun_cse_after_loop_get;
*swig_x_flag_rerun_cse_after_loop_set = *gccc::gcc_options_x_flag_rerun_cse_after_loop_set;
*swig_x_flag_resched_modulo_sched_get = *gccc::gcc_options_x_flag_resched_modulo_sched_get;
*swig_x_flag_resched_modulo_sched_set = *gccc::gcc_options_x_flag_resched_modulo_sched_set;
*swig_x_flag_rounding_math_get = *gccc::gcc_options_x_flag_rounding_math_get;
*swig_x_flag_rounding_math_set = *gccc::gcc_options_x_flag_rounding_math_set;
*swig_x_flag_rtti_get = *gccc::gcc_options_x_flag_rtti_get;
*swig_x_flag_rtti_set = *gccc::gcc_options_x_flag_rtti_set;
*swig_x_flag_sched_critical_path_heuristic_get = *gccc::gcc_options_x_flag_sched_critical_path_heuristic_get;
*swig_x_flag_sched_critical_path_heuristic_set = *gccc::gcc_options_x_flag_sched_critical_path_heuristic_set;
*swig_x_flag_sched_dep_count_heuristic_get = *gccc::gcc_options_x_flag_sched_dep_count_heuristic_get;
*swig_x_flag_sched_dep_count_heuristic_set = *gccc::gcc_options_x_flag_sched_dep_count_heuristic_set;
*swig_x_flag_sched_group_heuristic_get = *gccc::gcc_options_x_flag_sched_group_heuristic_get;
*swig_x_flag_sched_group_heuristic_set = *gccc::gcc_options_x_flag_sched_group_heuristic_set;
*swig_x_flag_schedule_interblock_get = *gccc::gcc_options_x_flag_schedule_interblock_get;
*swig_x_flag_schedule_interblock_set = *gccc::gcc_options_x_flag_schedule_interblock_set;
*swig_x_flag_sched_last_insn_heuristic_get = *gccc::gcc_options_x_flag_sched_last_insn_heuristic_get;
*swig_x_flag_sched_last_insn_heuristic_set = *gccc::gcc_options_x_flag_sched_last_insn_heuristic_set;
*swig_x_flag_sched_pressure_get = *gccc::gcc_options_x_flag_sched_pressure_get;
*swig_x_flag_sched_pressure_set = *gccc::gcc_options_x_flag_sched_pressure_set;
*swig_x_flag_sched_rank_heuristic_get = *gccc::gcc_options_x_flag_sched_rank_heuristic_get;
*swig_x_flag_sched_rank_heuristic_set = *gccc::gcc_options_x_flag_sched_rank_heuristic_set;
*swig_x_flag_schedule_speculative_get = *gccc::gcc_options_x_flag_schedule_speculative_get;
*swig_x_flag_schedule_speculative_set = *gccc::gcc_options_x_flag_schedule_speculative_set;
*swig_x_flag_sched_spec_insn_heuristic_get = *gccc::gcc_options_x_flag_sched_spec_insn_heuristic_get;
*swig_x_flag_sched_spec_insn_heuristic_set = *gccc::gcc_options_x_flag_sched_spec_insn_heuristic_set;
*swig_x_flag_schedule_speculative_load_get = *gccc::gcc_options_x_flag_schedule_speculative_load_get;
*swig_x_flag_schedule_speculative_load_set = *gccc::gcc_options_x_flag_schedule_speculative_load_set;
*swig_x_flag_schedule_speculative_load_dangerous_get = *gccc::gcc_options_x_flag_schedule_speculative_load_dangerous_get;
*swig_x_flag_schedule_speculative_load_dangerous_set = *gccc::gcc_options_x_flag_schedule_speculative_load_dangerous_set;
*swig_x_flag_sched_stalled_insns_get = *gccc::gcc_options_x_flag_sched_stalled_insns_get;
*swig_x_flag_sched_stalled_insns_set = *gccc::gcc_options_x_flag_sched_stalled_insns_set;
*swig_x_flag_sched_stalled_insns_dep_get = *gccc::gcc_options_x_flag_sched_stalled_insns_dep_get;
*swig_x_flag_sched_stalled_insns_dep_set = *gccc::gcc_options_x_flag_sched_stalled_insns_dep_set;
*swig_x_sched_verbose_param_get = *gccc::gcc_options_x_sched_verbose_param_get;
*swig_x_sched_verbose_param_set = *gccc::gcc_options_x_sched_verbose_param_set;
*swig_x_flag_sched2_use_superblocks_get = *gccc::gcc_options_x_flag_sched2_use_superblocks_get;
*swig_x_flag_sched2_use_superblocks_set = *gccc::gcc_options_x_flag_sched2_use_superblocks_set;
*swig_x_flag_schedule_insns_get = *gccc::gcc_options_x_flag_schedule_insns_get;
*swig_x_flag_schedule_insns_set = *gccc::gcc_options_x_flag_schedule_insns_set;
*swig_x_flag_schedule_insns_after_reload_get = *gccc::gcc_options_x_flag_schedule_insns_after_reload_get;
*swig_x_flag_schedule_insns_after_reload_set = *gccc::gcc_options_x_flag_schedule_insns_after_reload_set;
*swig_x_flag_section_anchors_get = *gccc::gcc_options_x_flag_section_anchors_get;
*swig_x_flag_section_anchors_set = *gccc::gcc_options_x_flag_section_anchors_set;
*swig_x_flag_sel_sched_pipelining_get = *gccc::gcc_options_x_flag_sel_sched_pipelining_get;
*swig_x_flag_sel_sched_pipelining_set = *gccc::gcc_options_x_flag_sel_sched_pipelining_set;
*swig_x_flag_sel_sched_pipelining_outer_loops_get = *gccc::gcc_options_x_flag_sel_sched_pipelining_outer_loops_get;
*swig_x_flag_sel_sched_pipelining_outer_loops_set = *gccc::gcc_options_x_flag_sel_sched_pipelining_outer_loops_set;
*swig_x_flag_sel_sched_reschedule_pipelined_get = *gccc::gcc_options_x_flag_sel_sched_reschedule_pipelined_get;
*swig_x_flag_sel_sched_reschedule_pipelined_set = *gccc::gcc_options_x_flag_sel_sched_reschedule_pipelined_set;
*swig_x_flag_selective_scheduling_get = *gccc::gcc_options_x_flag_selective_scheduling_get;
*swig_x_flag_selective_scheduling_set = *gccc::gcc_options_x_flag_selective_scheduling_set;
*swig_x_flag_selective_scheduling2_get = *gccc::gcc_options_x_flag_selective_scheduling2_get;
*swig_x_flag_selective_scheduling2_set = *gccc::gcc_options_x_flag_selective_scheduling2_set;
*swig_x_flag_short_double_get = *gccc::gcc_options_x_flag_short_double_get;
*swig_x_flag_short_double_set = *gccc::gcc_options_x_flag_short_double_set;
*swig_x_flag_short_enums_get = *gccc::gcc_options_x_flag_short_enums_get;
*swig_x_flag_short_enums_set = *gccc::gcc_options_x_flag_short_enums_set;
*swig_x_flag_short_wchar_get = *gccc::gcc_options_x_flag_short_wchar_get;
*swig_x_flag_short_wchar_set = *gccc::gcc_options_x_flag_short_wchar_set;
*swig_x_flag_show_column_get = *gccc::gcc_options_x_flag_show_column_get;
*swig_x_flag_show_column_set = *gccc::gcc_options_x_flag_show_column_set;
*swig_x_flag_signaling_nans_get = *gccc::gcc_options_x_flag_signaling_nans_get;
*swig_x_flag_signaling_nans_set = *gccc::gcc_options_x_flag_signaling_nans_set;
*swig_x_flag_signed_bitfields_get = *gccc::gcc_options_x_flag_signed_bitfields_get;
*swig_x_flag_signed_bitfields_set = *gccc::gcc_options_x_flag_signed_bitfields_set;
*swig_x_flag_signed_char_get = *gccc::gcc_options_x_flag_signed_char_get;
*swig_x_flag_signed_char_set = *gccc::gcc_options_x_flag_signed_char_set;
*swig_x_flag_signed_zeros_get = *gccc::gcc_options_x_flag_signed_zeros_get;
*swig_x_flag_signed_zeros_set = *gccc::gcc_options_x_flag_signed_zeros_set;
*swig_x_flag_single_precision_constant_get = *gccc::gcc_options_x_flag_single_precision_constant_get;
*swig_x_flag_single_precision_constant_set = *gccc::gcc_options_x_flag_single_precision_constant_set;
*swig_x_flag_split_ivs_in_unroller_get = *gccc::gcc_options_x_flag_split_ivs_in_unroller_get;
*swig_x_flag_split_ivs_in_unroller_set = *gccc::gcc_options_x_flag_split_ivs_in_unroller_set;
*swig_x_flag_split_stack_get = *gccc::gcc_options_x_flag_split_stack_get;
*swig_x_flag_split_stack_set = *gccc::gcc_options_x_flag_split_stack_set;
*swig_x_flag_split_wide_types_get = *gccc::gcc_options_x_flag_split_wide_types_get;
*swig_x_flag_split_wide_types_set = *gccc::gcc_options_x_flag_split_wide_types_set;
*swig_x_flag_stack_protect_get = *gccc::gcc_options_x_flag_stack_protect_get;
*swig_x_flag_stack_protect_set = *gccc::gcc_options_x_flag_stack_protect_set;
*swig_x_flag_stack_usage_get = *gccc::gcc_options_x_flag_stack_usage_get;
*swig_x_flag_stack_usage_set = *gccc::gcc_options_x_flag_stack_usage_set;
*swig_x_flag_detailed_statistics_get = *gccc::gcc_options_x_flag_detailed_statistics_get;
*swig_x_flag_detailed_statistics_set = *gccc::gcc_options_x_flag_detailed_statistics_set;
*swig_x_flag_store_check_get = *gccc::gcc_options_x_flag_store_check_get;
*swig_x_flag_store_check_set = *gccc::gcc_options_x_flag_store_check_set;
*swig_x_flag_strict_aliasing_get = *gccc::gcc_options_x_flag_strict_aliasing_get;
*swig_x_flag_strict_aliasing_set = *gccc::gcc_options_x_flag_strict_aliasing_set;
*swig_x_flag_strict_enums_get = *gccc::gcc_options_x_flag_strict_enums_get;
*swig_x_flag_strict_enums_set = *gccc::gcc_options_x_flag_strict_enums_set;
*swig_x_flag_strict_overflow_get = *gccc::gcc_options_x_flag_strict_overflow_get;
*swig_x_flag_strict_overflow_set = *gccc::gcc_options_x_flag_strict_overflow_set;
*swig_x_flag_strict_volatile_bitfields_get = *gccc::gcc_options_x_flag_strict_volatile_bitfields_get;
*swig_x_flag_strict_volatile_bitfields_set = *gccc::gcc_options_x_flag_strict_volatile_bitfields_set;
*swig_x_flag_syntax_only_get = *gccc::gcc_options_x_flag_syntax_only_get;
*swig_x_flag_syntax_only_set = *gccc::gcc_options_x_flag_syntax_only_set;
*swig_x_flag_test_coverage_get = *gccc::gcc_options_x_flag_test_coverage_get;
*swig_x_flag_test_coverage_set = *gccc::gcc_options_x_flag_test_coverage_set;
*swig_x_flag_thread_jumps_get = *gccc::gcc_options_x_flag_thread_jumps_get;
*swig_x_flag_thread_jumps_set = *gccc::gcc_options_x_flag_thread_jumps_set;
*swig_x_flag_threadsafe_statics_get = *gccc::gcc_options_x_flag_threadsafe_statics_get;
*swig_x_flag_threadsafe_statics_set = *gccc::gcc_options_x_flag_threadsafe_statics_set;
*swig_x_time_report_get = *gccc::gcc_options_x_time_report_get;
*swig_x_time_report_set = *gccc::gcc_options_x_time_report_set;
*swig_x_flag_tls_default_get = *gccc::gcc_options_x_flag_tls_default_get;
*swig_x_flag_tls_default_set = *gccc::gcc_options_x_flag_tls_default_set;
*swig_x_flag_toplevel_reorder_get = *gccc::gcc_options_x_flag_toplevel_reorder_get;
*swig_x_flag_toplevel_reorder_set = *gccc::gcc_options_x_flag_toplevel_reorder_set;
*swig_x_flag_tracer_get = *gccc::gcc_options_x_flag_tracer_get;
*swig_x_flag_tracer_set = *gccc::gcc_options_x_flag_tracer_set;
*swig_x_flag_trapping_math_get = *gccc::gcc_options_x_flag_trapping_math_get;
*swig_x_flag_trapping_math_set = *gccc::gcc_options_x_flag_trapping_math_set;
*swig_x_flag_trapv_get = *gccc::gcc_options_x_flag_trapv_get;
*swig_x_flag_trapv_set = *gccc::gcc_options_x_flag_trapv_set;
*swig_x_flag_tree_bit_ccp_get = *gccc::gcc_options_x_flag_tree_bit_ccp_get;
*swig_x_flag_tree_bit_ccp_set = *gccc::gcc_options_x_flag_tree_bit_ccp_set;
*swig_x_flag_tree_builtin_call_dce_get = *gccc::gcc_options_x_flag_tree_builtin_call_dce_get;
*swig_x_flag_tree_builtin_call_dce_set = *gccc::gcc_options_x_flag_tree_builtin_call_dce_set;
*swig_x_flag_tree_ccp_get = *gccc::gcc_options_x_flag_tree_ccp_get;
*swig_x_flag_tree_ccp_set = *gccc::gcc_options_x_flag_tree_ccp_set;
*swig_x_flag_tree_ch_get = *gccc::gcc_options_x_flag_tree_ch_get;
*swig_x_flag_tree_ch_set = *gccc::gcc_options_x_flag_tree_ch_set;
*swig_x_flag_tree_copy_prop_get = *gccc::gcc_options_x_flag_tree_copy_prop_get;
*swig_x_flag_tree_copy_prop_set = *gccc::gcc_options_x_flag_tree_copy_prop_set;
*swig_x_flag_tree_copyrename_get = *gccc::gcc_options_x_flag_tree_copyrename_get;
*swig_x_flag_tree_copyrename_set = *gccc::gcc_options_x_flag_tree_copyrename_set;
*swig_x_flag_tree_cselim_get = *gccc::gcc_options_x_flag_tree_cselim_get;
*swig_x_flag_tree_cselim_set = *gccc::gcc_options_x_flag_tree_cselim_set;
*swig_x_flag_tree_dce_get = *gccc::gcc_options_x_flag_tree_dce_get;
*swig_x_flag_tree_dce_set = *gccc::gcc_options_x_flag_tree_dce_set;
*swig_x_flag_tree_dom_get = *gccc::gcc_options_x_flag_tree_dom_get;
*swig_x_flag_tree_dom_set = *gccc::gcc_options_x_flag_tree_dom_set;
*swig_x_flag_tree_dse_get = *gccc::gcc_options_x_flag_tree_dse_get;
*swig_x_flag_tree_dse_set = *gccc::gcc_options_x_flag_tree_dse_set;
*swig_x_flag_tree_forwprop_get = *gccc::gcc_options_x_flag_tree_forwprop_get;
*swig_x_flag_tree_forwprop_set = *gccc::gcc_options_x_flag_tree_forwprop_set;
*swig_x_flag_tree_fre_get = *gccc::gcc_options_x_flag_tree_fre_get;
*swig_x_flag_tree_fre_set = *gccc::gcc_options_x_flag_tree_fre_set;
*swig_x_flag_tree_loop_distribute_patterns_get = *gccc::gcc_options_x_flag_tree_loop_distribute_patterns_get;
*swig_x_flag_tree_loop_distribute_patterns_set = *gccc::gcc_options_x_flag_tree_loop_distribute_patterns_set;
*swig_x_flag_tree_loop_distribution_get = *gccc::gcc_options_x_flag_tree_loop_distribution_get;
*swig_x_flag_tree_loop_distribution_set = *gccc::gcc_options_x_flag_tree_loop_distribution_set;
*swig_x_flag_tree_loop_if_convert_get = *gccc::gcc_options_x_flag_tree_loop_if_convert_get;
*swig_x_flag_tree_loop_if_convert_set = *gccc::gcc_options_x_flag_tree_loop_if_convert_set;
*swig_x_flag_tree_loop_if_convert_stores_get = *gccc::gcc_options_x_flag_tree_loop_if_convert_stores_get;
*swig_x_flag_tree_loop_if_convert_stores_set = *gccc::gcc_options_x_flag_tree_loop_if_convert_stores_set;
*swig_x_flag_tree_loop_im_get = *gccc::gcc_options_x_flag_tree_loop_im_get;
*swig_x_flag_tree_loop_im_set = *gccc::gcc_options_x_flag_tree_loop_im_set;
*swig_x_flag_tree_loop_ivcanon_get = *gccc::gcc_options_x_flag_tree_loop_ivcanon_get;
*swig_x_flag_tree_loop_ivcanon_set = *gccc::gcc_options_x_flag_tree_loop_ivcanon_set;
*swig_x_flag_tree_loop_optimize_get = *gccc::gcc_options_x_flag_tree_loop_optimize_get;
*swig_x_flag_tree_loop_optimize_set = *gccc::gcc_options_x_flag_tree_loop_optimize_set;
*swig_x_flag_tree_live_range_split_get = *gccc::gcc_options_x_flag_tree_live_range_split_get;
*swig_x_flag_tree_live_range_split_set = *gccc::gcc_options_x_flag_tree_live_range_split_set;
*swig_x_flag_tree_parallelize_loops_get = *gccc::gcc_options_x_flag_tree_parallelize_loops_get;
*swig_x_flag_tree_parallelize_loops_set = *gccc::gcc_options_x_flag_tree_parallelize_loops_set;
*swig_x_flag_tree_phiprop_get = *gccc::gcc_options_x_flag_tree_phiprop_get;
*swig_x_flag_tree_phiprop_set = *gccc::gcc_options_x_flag_tree_phiprop_set;
*swig_x_flag_tree_pre_get = *gccc::gcc_options_x_flag_tree_pre_get;
*swig_x_flag_tree_pre_set = *gccc::gcc_options_x_flag_tree_pre_set;
*swig_x_flag_tree_pta_get = *gccc::gcc_options_x_flag_tree_pta_get;
*swig_x_flag_tree_pta_set = *gccc::gcc_options_x_flag_tree_pta_set;
*swig_x_flag_tree_reassoc_get = *gccc::gcc_options_x_flag_tree_reassoc_get;
*swig_x_flag_tree_reassoc_set = *gccc::gcc_options_x_flag_tree_reassoc_set;
*swig_x_flag_tree_scev_cprop_get = *gccc::gcc_options_x_flag_tree_scev_cprop_get;
*swig_x_flag_tree_scev_cprop_set = *gccc::gcc_options_x_flag_tree_scev_cprop_set;
*swig_x_flag_tree_sink_get = *gccc::gcc_options_x_flag_tree_sink_get;
*swig_x_flag_tree_sink_set = *gccc::gcc_options_x_flag_tree_sink_set;
*swig_x_flag_tree_slp_vectorize_get = *gccc::gcc_options_x_flag_tree_slp_vectorize_get;
*swig_x_flag_tree_slp_vectorize_set = *gccc::gcc_options_x_flag_tree_slp_vectorize_set;
*swig_x_flag_tree_sra_get = *gccc::gcc_options_x_flag_tree_sra_get;
*swig_x_flag_tree_sra_set = *gccc::gcc_options_x_flag_tree_sra_set;
*swig_x_flag_tree_switch_conversion_get = *gccc::gcc_options_x_flag_tree_switch_conversion_get;
*swig_x_flag_tree_switch_conversion_set = *gccc::gcc_options_x_flag_tree_switch_conversion_set;
*swig_x_flag_tree_ter_get = *gccc::gcc_options_x_flag_tree_ter_get;
*swig_x_flag_tree_ter_set = *gccc::gcc_options_x_flag_tree_ter_set;
*swig_x_flag_tree_vect_loop_version_get = *gccc::gcc_options_x_flag_tree_vect_loop_version_get;
*swig_x_flag_tree_vect_loop_version_set = *gccc::gcc_options_x_flag_tree_vect_loop_version_set;
*swig_x_flag_tree_vectorize_get = *gccc::gcc_options_x_flag_tree_vectorize_get;
*swig_x_flag_tree_vectorize_set = *gccc::gcc_options_x_flag_tree_vectorize_set;
*swig_x_flag_tree_vrp_get = *gccc::gcc_options_x_flag_tree_vrp_get;
*swig_x_flag_tree_vrp_set = *gccc::gcc_options_x_flag_tree_vrp_set;
*swig_x_flag_unit_at_a_time_get = *gccc::gcc_options_x_flag_unit_at_a_time_get;
*swig_x_flag_unit_at_a_time_set = *gccc::gcc_options_x_flag_unit_at_a_time_set;
*swig_x_flag_unroll_all_loops_get = *gccc::gcc_options_x_flag_unroll_all_loops_get;
*swig_x_flag_unroll_all_loops_set = *gccc::gcc_options_x_flag_unroll_all_loops_set;
*swig_x_flag_unroll_loops_get = *gccc::gcc_options_x_flag_unroll_loops_get;
*swig_x_flag_unroll_loops_set = *gccc::gcc_options_x_flag_unroll_loops_set;
*swig_x_flag_unsafe_loop_optimizations_get = *gccc::gcc_options_x_flag_unsafe_loop_optimizations_get;
*swig_x_flag_unsafe_loop_optimizations_set = *gccc::gcc_options_x_flag_unsafe_loop_optimizations_set;
*swig_x_flag_unsafe_math_optimizations_get = *gccc::gcc_options_x_flag_unsafe_math_optimizations_get;
*swig_x_flag_unsafe_math_optimizations_set = *gccc::gcc_options_x_flag_unsafe_math_optimizations_set;
*swig_x_flag_unswitch_loops_get = *gccc::gcc_options_x_flag_unswitch_loops_get;
*swig_x_flag_unswitch_loops_set = *gccc::gcc_options_x_flag_unswitch_loops_set;
*swig_x_flag_unwind_tables_get = *gccc::gcc_options_x_flag_unwind_tables_get;
*swig_x_flag_unwind_tables_set = *gccc::gcc_options_x_flag_unwind_tables_set;
*swig_x_flag_use_atomic_builtins_get = *gccc::gcc_options_x_flag_use_atomic_builtins_get;
*swig_x_flag_use_atomic_builtins_set = *gccc::gcc_options_x_flag_use_atomic_builtins_set;
*swig_x_flag_use_boehm_gc_get = *gccc::gcc_options_x_flag_use_boehm_gc_get;
*swig_x_flag_use_boehm_gc_set = *gccc::gcc_options_x_flag_use_boehm_gc_set;
*swig_x_flag_use_cxa_atexit_get = *gccc::gcc_options_x_flag_use_cxa_atexit_get;
*swig_x_flag_use_cxa_atexit_set = *gccc::gcc_options_x_flag_use_cxa_atexit_set;
*swig_x_flag_use_cxa_get_exception_ptr_get = *gccc::gcc_options_x_flag_use_cxa_get_exception_ptr_get;
*swig_x_flag_use_cxa_get_exception_ptr_set = *gccc::gcc_options_x_flag_use_cxa_get_exception_ptr_set;
*swig_x_flag_use_divide_subroutine_get = *gccc::gcc_options_x_flag_use_divide_subroutine_get;
*swig_x_flag_use_divide_subroutine_set = *gccc::gcc_options_x_flag_use_divide_subroutine_set;
*swig_x_flag_var_tracking_get = *gccc::gcc_options_x_flag_var_tracking_get;
*swig_x_flag_var_tracking_set = *gccc::gcc_options_x_flag_var_tracking_set;
*swig_x_flag_var_tracking_assignments_get = *gccc::gcc_options_x_flag_var_tracking_assignments_get;
*swig_x_flag_var_tracking_assignments_set = *gccc::gcc_options_x_flag_var_tracking_assignments_set;
*swig_x_flag_var_tracking_assignments_toggle_get = *gccc::gcc_options_x_flag_var_tracking_assignments_toggle_get;
*swig_x_flag_var_tracking_assignments_toggle_set = *gccc::gcc_options_x_flag_var_tracking_assignments_toggle_set;
*swig_x_flag_var_tracking_uninit_get = *gccc::gcc_options_x_flag_var_tracking_uninit_get;
*swig_x_flag_var_tracking_uninit_set = *gccc::gcc_options_x_flag_var_tracking_uninit_set;
*swig_x_flag_variable_expansion_in_unroller_get = *gccc::gcc_options_x_flag_variable_expansion_in_unroller_get;
*swig_x_flag_variable_expansion_in_unroller_set = *gccc::gcc_options_x_flag_variable_expansion_in_unroller_set;
*swig_x_flag_vect_cost_model_get = *gccc::gcc_options_x_flag_vect_cost_model_get;
*swig_x_flag_vect_cost_model_set = *gccc::gcc_options_x_flag_vect_cost_model_set;
*swig_x_flag_verbose_asm_get = *gccc::gcc_options_x_flag_verbose_asm_get;
*swig_x_flag_verbose_asm_set = *gccc::gcc_options_x_flag_verbose_asm_set;
*swig_x_flag_visibility_ms_compat_get = *gccc::gcc_options_x_flag_visibility_ms_compat_get;
*swig_x_flag_visibility_ms_compat_set = *gccc::gcc_options_x_flag_visibility_ms_compat_set;
*swig_x_default_visibility_get = *gccc::gcc_options_x_default_visibility_get;
*swig_x_default_visibility_set = *gccc::gcc_options_x_default_visibility_set;
*swig_x_flag_value_profile_transformations_get = *gccc::gcc_options_x_flag_value_profile_transformations_get;
*swig_x_flag_value_profile_transformations_set = *gccc::gcc_options_x_flag_value_profile_transformations_set;
*swig_x_flag_weak_get = *gccc::gcc_options_x_flag_weak_get;
*swig_x_flag_weak_set = *gccc::gcc_options_x_flag_weak_set;
*swig_x_flag_web_get = *gccc::gcc_options_x_flag_web_get;
*swig_x_flag_web_set = *gccc::gcc_options_x_flag_web_set;
*swig_x_flag_whole_program_get = *gccc::gcc_options_x_flag_whole_program_get;
*swig_x_flag_whole_program_set = *gccc::gcc_options_x_flag_whole_program_set;
*swig_x_flag_working_directory_get = *gccc::gcc_options_x_flag_working_directory_get;
*swig_x_flag_working_directory_set = *gccc::gcc_options_x_flag_working_directory_set;
*swig_x_flag_wpa_get = *gccc::gcc_options_x_flag_wpa_get;
*swig_x_flag_wpa_set = *gccc::gcc_options_x_flag_wpa_set;
*swig_x_flag_wrapv_get = *gccc::gcc_options_x_flag_wrapv_get;
*swig_x_flag_wrapv_set = *gccc::gcc_options_x_flag_wrapv_set;
*swig_x_flag_zee_get = *gccc::gcc_options_x_flag_zee_get;
*swig_x_flag_zee_set = *gccc::gcc_options_x_flag_zee_set;
*swig_x_flag_zero_initialized_in_bss_get = *gccc::gcc_options_x_flag_zero_initialized_in_bss_get;
*swig_x_flag_zero_initialized_in_bss_set = *gccc::gcc_options_x_flag_zero_initialized_in_bss_set;
*swig_x_flag_zero_link_get = *gccc::gcc_options_x_flag_zero_link_get;
*swig_x_flag_zero_link_set = *gccc::gcc_options_x_flag_zero_link_set;
*swig_x_dwarf_version_get = *gccc::gcc_options_x_dwarf_version_get;
*swig_x_dwarf_version_set = *gccc::gcc_options_x_dwarf_version_set;
*swig_x_flag_gen_declaration_get = *gccc::gcc_options_x_flag_gen_declaration_get;
*swig_x_flag_gen_declaration_set = *gccc::gcc_options_x_flag_gen_declaration_set;
*swig_x_dwarf_strict_get = *gccc::gcc_options_x_dwarf_strict_get;
*swig_x_dwarf_strict_set = *gccc::gcc_options_x_dwarf_strict_set;
*swig_x_flag_gtoggle_get = *gccc::gcc_options_x_flag_gtoggle_get;
*swig_x_flag_gtoggle_set = *gccc::gcc_options_x_flag_gtoggle_set;
*swig_x_imultiarch_get = *gccc::gcc_options_x_imultiarch_get;
*swig_x_imultiarch_set = *gccc::gcc_options_x_imultiarch_set;
*swig_x_plugindir_string_get = *gccc::gcc_options_x_plugindir_string_get;
*swig_x_plugindir_string_set = *gccc::gcc_options_x_plugindir_string_set;
*swig_x_ix86_abi_string_get = *gccc::gcc_options_x_ix86_abi_string_get;
*swig_x_ix86_abi_string_set = *gccc::gcc_options_x_ix86_abi_string_set;
*swig_x_ix86_align_funcs_string_get = *gccc::gcc_options_x_ix86_align_funcs_string_get;
*swig_x_ix86_align_funcs_string_set = *gccc::gcc_options_x_ix86_align_funcs_string_set;
*swig_x_ix86_align_jumps_string_get = *gccc::gcc_options_x_ix86_align_jumps_string_get;
*swig_x_ix86_align_jumps_string_set = *gccc::gcc_options_x_ix86_align_jumps_string_set;
*swig_x_ix86_align_loops_string_get = *gccc::gcc_options_x_ix86_align_loops_string_get;
*swig_x_ix86_align_loops_string_set = *gccc::gcc_options_x_ix86_align_loops_string_set;
*swig_x_flag_android_get = *gccc::gcc_options_x_flag_android_get;
*swig_x_flag_android_set = *gccc::gcc_options_x_flag_android_set;
*swig_x_ix86_arch_string_get = *gccc::gcc_options_x_ix86_arch_string_get;
*swig_x_ix86_arch_string_set = *gccc::gcc_options_x_ix86_arch_string_set;
*swig_x_ix86_asm_string_get = *gccc::gcc_options_x_ix86_asm_string_get;
*swig_x_ix86_asm_string_set = *gccc::gcc_options_x_ix86_asm_string_set;
*swig_x_linux_libc_get = *gccc::gcc_options_x_linux_libc_get;
*swig_x_linux_libc_set = *gccc::gcc_options_x_linux_libc_set;
*swig_x_ix86_branch_cost_string_get = *gccc::gcc_options_x_ix86_branch_cost_string_get;
*swig_x_ix86_branch_cost_string_set = *gccc::gcc_options_x_ix86_branch_cost_string_set;
*swig_x_ix86_cmodel_string_get = *gccc::gcc_options_x_ix86_cmodel_string_get;
*swig_x_ix86_cmodel_string_set = *gccc::gcc_options_x_ix86_cmodel_string_set;
*swig_x_flag_dispatch_scheduler_get = *gccc::gcc_options_x_flag_dispatch_scheduler_get;
*swig_x_flag_dispatch_scheduler_set = *gccc::gcc_options_x_flag_dispatch_scheduler_set;
*swig_x_flag_fentry_get = *gccc::gcc_options_x_flag_fentry_get;
*swig_x_flag_fentry_set = *gccc::gcc_options_x_flag_fentry_set;
*swig_x_ix86_force_drap_get = *gccc::gcc_options_x_ix86_force_drap_get;
*swig_x_ix86_force_drap_set = *gccc::gcc_options_x_ix86_force_drap_set;
*swig_x_ix86_fpmath_string_get = *gccc::gcc_options_x_ix86_fpmath_string_get;
*swig_x_ix86_fpmath_string_set = *gccc::gcc_options_x_ix86_fpmath_string_set;
*swig_x_ix86_incoming_stack_boundary_string_get = *gccc::gcc_options_x_ix86_incoming_stack_boundary_string_get;
*swig_x_ix86_incoming_stack_boundary_string_set = *gccc::gcc_options_x_ix86_incoming_stack_boundary_string_set;
*swig_x_ix86_section_threshold_string_get = *gccc::gcc_options_x_ix86_section_threshold_string_get;
*swig_x_ix86_section_threshold_string_set = *gccc::gcc_options_x_ix86_section_threshold_string_set;
*swig_x_ix87_precision_string_get = *gccc::gcc_options_x_ix87_precision_string_get;
*swig_x_ix87_precision_string_set = *gccc::gcc_options_x_ix87_precision_string_set;
*swig_x_ix86_preferred_stack_boundary_string_get = *gccc::gcc_options_x_ix86_preferred_stack_boundary_string_get;
*swig_x_ix86_preferred_stack_boundary_string_set = *gccc::gcc_options_x_ix86_preferred_stack_boundary_string_set;
*swig_x_ix86_regparm_string_get = *gccc::gcc_options_x_ix86_regparm_string_get;
*swig_x_ix86_regparm_string_set = *gccc::gcc_options_x_ix86_regparm_string_set;
*swig_x_ix86_sse2avx_get = *gccc::gcc_options_x_ix86_sse2avx_get;
*swig_x_ix86_sse2avx_set = *gccc::gcc_options_x_ix86_sse2avx_set;
*swig_x_ix86_force_align_arg_pointer_get = *gccc::gcc_options_x_ix86_force_align_arg_pointer_get;
*swig_x_ix86_force_align_arg_pointer_set = *gccc::gcc_options_x_ix86_force_align_arg_pointer_set;
*swig_x_ix86_stringop_string_get = *gccc::gcc_options_x_ix86_stringop_string_get;
*swig_x_ix86_stringop_string_set = *gccc::gcc_options_x_ix86_stringop_string_set;
*swig_x_ix86_tls_dialect_string_get = *gccc::gcc_options_x_ix86_tls_dialect_string_get;
*swig_x_ix86_tls_dialect_string_set = *gccc::gcc_options_x_ix86_tls_dialect_string_set;
*swig_x_ix86_tune_string_get = *gccc::gcc_options_x_ix86_tune_string_get;
*swig_x_ix86_tune_string_set = *gccc::gcc_options_x_ix86_tune_string_set;
*swig_x_ix86_veclibabi_string_get = *gccc::gcc_options_x_ix86_veclibabi_string_get;
*swig_x_ix86_veclibabi_string_set = *gccc::gcc_options_x_ix86_veclibabi_string_set;
*swig_x_asm_file_name_get = *gccc::gcc_options_x_asm_file_name_get;
*swig_x_asm_file_name_set = *gccc::gcc_options_x_asm_file_name_set;
*swig_x_pass_exit_codes_get = *gccc::gcc_options_x_pass_exit_codes_get;
*swig_x_pass_exit_codes_set = *gccc::gcc_options_x_pass_exit_codes_set;
*swig_x_pedantic_get = *gccc::gcc_options_x_pedantic_get;
*swig_x_pedantic_set = *gccc::gcc_options_x_pedantic_set;
*swig_x_flag_pedantic_errors_get = *gccc::gcc_options_x_flag_pedantic_errors_get;
*swig_x_flag_pedantic_errors_set = *gccc::gcc_options_x_flag_pedantic_errors_set;
*swig_x_use_pipes_get = *gccc::gcc_options_x_use_pipes_get;
*swig_x_use_pipes_set = *gccc::gcc_options_x_use_pipes_set;
*swig_x_print_file_name_get = *gccc::gcc_options_x_print_file_name_get;
*swig_x_print_file_name_set = *gccc::gcc_options_x_print_file_name_set;
*swig_x_print_multi_directory_get = *gccc::gcc_options_x_print_multi_directory_get;
*swig_x_print_multi_directory_set = *gccc::gcc_options_x_print_multi_directory_set;
*swig_x_print_multi_lib_get = *gccc::gcc_options_x_print_multi_lib_get;
*swig_x_print_multi_lib_set = *gccc::gcc_options_x_print_multi_lib_set;
*swig_x_print_multi_os_directory_get = *gccc::gcc_options_x_print_multi_os_directory_get;
*swig_x_print_multi_os_directory_set = *gccc::gcc_options_x_print_multi_os_directory_set;
*swig_x_print_multiarch_get = *gccc::gcc_options_x_print_multiarch_get;
*swig_x_print_multiarch_set = *gccc::gcc_options_x_print_multiarch_set;
*swig_x_print_prog_name_get = *gccc::gcc_options_x_print_prog_name_get;
*swig_x_print_prog_name_set = *gccc::gcc_options_x_print_prog_name_set;
*swig_x_print_search_dirs_get = *gccc::gcc_options_x_print_search_dirs_get;
*swig_x_print_search_dirs_set = *gccc::gcc_options_x_print_search_dirs_set;
*swig_x_print_sysroot_get = *gccc::gcc_options_x_print_sysroot_get;
*swig_x_print_sysroot_set = *gccc::gcc_options_x_print_sysroot_set;
*swig_x_print_sysroot_headers_suffix_get = *gccc::gcc_options_x_print_sysroot_headers_suffix_get;
*swig_x_print_sysroot_headers_suffix_set = *gccc::gcc_options_x_print_sysroot_headers_suffix_set;
*swig_x_quiet_flag_get = *gccc::gcc_options_x_quiet_flag_get;
*swig_x_quiet_flag_set = *gccc::gcc_options_x_quiet_flag_set;
*swig_x_report_times_get = *gccc::gcc_options_x_report_times_get;
*swig_x_report_times_set = *gccc::gcc_options_x_report_times_set;
*swig_x_flag_undef_get = *gccc::gcc_options_x_flag_undef_get;
*swig_x_flag_undef_set = *gccc::gcc_options_x_flag_undef_set;
*swig_x_verbose_flag_get = *gccc::gcc_options_x_verbose_flag_get;
*swig_x_verbose_flag_set = *gccc::gcc_options_x_verbose_flag_set;
*swig_x_version_flag_get = *gccc::gcc_options_x_version_flag_get;
*swig_x_version_flag_set = *gccc::gcc_options_x_version_flag_set;
*swig_x_inhibit_warnings_get = *gccc::gcc_options_x_inhibit_warnings_get;
*swig_x_inhibit_warnings_set = *gccc::gcc_options_x_inhibit_warnings_set;
*swig_x_wrapper_string_get = *gccc::gcc_options_x_wrapper_string_get;
*swig_x_wrapper_string_set = *gccc::gcc_options_x_wrapper_string_set;
*swig_frontend_set_flag_associative_math_get = *gccc::gcc_options_frontend_set_flag_associative_math_get;
*swig_frontend_set_flag_associative_math_set = *gccc::gcc_options_frontend_set_flag_associative_math_set;
*swig_frontend_set_flag_cx_limited_range_get = *gccc::gcc_options_frontend_set_flag_cx_limited_range_get;
*swig_frontend_set_flag_cx_limited_range_set = *gccc::gcc_options_frontend_set_flag_cx_limited_range_set;
*swig_frontend_set_flag_finite_math_only_get = *gccc::gcc_options_frontend_set_flag_finite_math_only_get;
*swig_frontend_set_flag_finite_math_only_set = *gccc::gcc_options_frontend_set_flag_finite_math_only_set;
*swig_frontend_set_flag_errno_math_get = *gccc::gcc_options_frontend_set_flag_errno_math_get;
*swig_frontend_set_flag_errno_math_set = *gccc::gcc_options_frontend_set_flag_errno_math_set;
*swig_frontend_set_flag_reciprocal_math_get = *gccc::gcc_options_frontend_set_flag_reciprocal_math_get;
*swig_frontend_set_flag_reciprocal_math_set = *gccc::gcc_options_frontend_set_flag_reciprocal_math_set;
*swig_frontend_set_flag_rounding_math_get = *gccc::gcc_options_frontend_set_flag_rounding_math_get;
*swig_frontend_set_flag_rounding_math_set = *gccc::gcc_options_frontend_set_flag_rounding_math_set;
*swig_frontend_set_flag_signaling_nans_get = *gccc::gcc_options_frontend_set_flag_signaling_nans_get;
*swig_frontend_set_flag_signaling_nans_set = *gccc::gcc_options_frontend_set_flag_signaling_nans_set;
*swig_frontend_set_flag_signed_zeros_get = *gccc::gcc_options_frontend_set_flag_signed_zeros_get;
*swig_frontend_set_flag_signed_zeros_set = *gccc::gcc_options_frontend_set_flag_signed_zeros_set;
*swig_frontend_set_flag_trapping_math_get = *gccc::gcc_options_frontend_set_flag_trapping_math_get;
*swig_frontend_set_flag_trapping_math_set = *gccc::gcc_options_frontend_set_flag_trapping_math_set;
*swig_frontend_set_flag_unsafe_math_optimizations_get = *gccc::gcc_options_frontend_set_flag_unsafe_math_optimizations_get;
*swig_frontend_set_flag_unsafe_math_optimizations_set = *gccc::gcc_options_frontend_set_flag_unsafe_math_optimizations_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gcc_options(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gcc_options($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cl_optimization ##############

package gcc::cl_optimization;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_align_functions_get = *gccc::cl_optimization_x_align_functions_get;
*swig_x_align_functions_set = *gccc::cl_optimization_x_align_functions_set;
*swig_x_align_jumps_get = *gccc::cl_optimization_x_align_jumps_get;
*swig_x_align_jumps_set = *gccc::cl_optimization_x_align_jumps_set;
*swig_x_align_labels_get = *gccc::cl_optimization_x_align_labels_get;
*swig_x_align_labels_set = *gccc::cl_optimization_x_align_labels_set;
*swig_x_align_loops_get = *gccc::cl_optimization_x_align_loops_get;
*swig_x_align_loops_set = *gccc::cl_optimization_x_align_loops_set;
*swig_x_flag_sched_stalled_insns_get = *gccc::cl_optimization_x_flag_sched_stalled_insns_get;
*swig_x_flag_sched_stalled_insns_set = *gccc::cl_optimization_x_flag_sched_stalled_insns_set;
*swig_x_flag_sched_stalled_insns_dep_get = *gccc::cl_optimization_x_flag_sched_stalled_insns_dep_get;
*swig_x_flag_sched_stalled_insns_dep_set = *gccc::cl_optimization_x_flag_sched_stalled_insns_dep_set;
*swig_x_flag_fp_contract_mode_get = *gccc::cl_optimization_x_flag_fp_contract_mode_get;
*swig_x_flag_fp_contract_mode_set = *gccc::cl_optimization_x_flag_fp_contract_mode_set;
*swig_x_optimize_get = *gccc::cl_optimization_x_optimize_get;
*swig_x_optimize_set = *gccc::cl_optimization_x_optimize_set;
*swig_x_optimize_size_get = *gccc::cl_optimization_x_optimize_size_get;
*swig_x_optimize_size_set = *gccc::cl_optimization_x_optimize_size_set;
*swig_x_flag_asynchronous_unwind_tables_get = *gccc::cl_optimization_x_flag_asynchronous_unwind_tables_get;
*swig_x_flag_asynchronous_unwind_tables_set = *gccc::cl_optimization_x_flag_asynchronous_unwind_tables_set;
*swig_x_flag_branch_on_count_reg_get = *gccc::cl_optimization_x_flag_branch_on_count_reg_get;
*swig_x_flag_branch_on_count_reg_set = *gccc::cl_optimization_x_flag_branch_on_count_reg_set;
*swig_x_flag_branch_probabilities_get = *gccc::cl_optimization_x_flag_branch_probabilities_get;
*swig_x_flag_branch_probabilities_set = *gccc::cl_optimization_x_flag_branch_probabilities_set;
*swig_x_flag_branch_target_load_optimize_get = *gccc::cl_optimization_x_flag_branch_target_load_optimize_get;
*swig_x_flag_branch_target_load_optimize_set = *gccc::cl_optimization_x_flag_branch_target_load_optimize_set;
*swig_x_flag_branch_target_load_optimize2_get = *gccc::cl_optimization_x_flag_branch_target_load_optimize2_get;
*swig_x_flag_branch_target_load_optimize2_set = *gccc::cl_optimization_x_flag_branch_target_load_optimize2_set;
*swig_x_flag_btr_bb_exclusive_get = *gccc::cl_optimization_x_flag_btr_bb_exclusive_get;
*swig_x_flag_btr_bb_exclusive_set = *gccc::cl_optimization_x_flag_btr_bb_exclusive_set;
*swig_x_flag_caller_saves_get = *gccc::cl_optimization_x_flag_caller_saves_get;
*swig_x_flag_caller_saves_set = *gccc::cl_optimization_x_flag_caller_saves_set;
*swig_x_flag_combine_stack_adjustments_get = *gccc::cl_optimization_x_flag_combine_stack_adjustments_get;
*swig_x_flag_combine_stack_adjustments_set = *gccc::cl_optimization_x_flag_combine_stack_adjustments_set;
*swig_x_flag_no_common_get = *gccc::cl_optimization_x_flag_no_common_get;
*swig_x_flag_no_common_set = *gccc::cl_optimization_x_flag_no_common_set;
*swig_x_flag_compare_elim_after_reload_get = *gccc::cl_optimization_x_flag_compare_elim_after_reload_get;
*swig_x_flag_compare_elim_after_reload_set = *gccc::cl_optimization_x_flag_compare_elim_after_reload_set;
*swig_x_flag_conserve_stack_get = *gccc::cl_optimization_x_flag_conserve_stack_get;
*swig_x_flag_conserve_stack_set = *gccc::cl_optimization_x_flag_conserve_stack_set;
*swig_x_flag_cprop_registers_get = *gccc::cl_optimization_x_flag_cprop_registers_get;
*swig_x_flag_cprop_registers_set = *gccc::cl_optimization_x_flag_cprop_registers_set;
*swig_x_flag_crossjumping_get = *gccc::cl_optimization_x_flag_crossjumping_get;
*swig_x_flag_crossjumping_set = *gccc::cl_optimization_x_flag_crossjumping_set;
*swig_x_flag_cse_follow_jumps_get = *gccc::cl_optimization_x_flag_cse_follow_jumps_get;
*swig_x_flag_cse_follow_jumps_set = *gccc::cl_optimization_x_flag_cse_follow_jumps_set;
*swig_x_flag_cx_fortran_rules_get = *gccc::cl_optimization_x_flag_cx_fortran_rules_get;
*swig_x_flag_cx_fortran_rules_set = *gccc::cl_optimization_x_flag_cx_fortran_rules_set;
*swig_x_flag_cx_limited_range_get = *gccc::cl_optimization_x_flag_cx_limited_range_get;
*swig_x_flag_cx_limited_range_set = *gccc::cl_optimization_x_flag_cx_limited_range_set;
*swig_x_flag_data_sections_get = *gccc::cl_optimization_x_flag_data_sections_get;
*swig_x_flag_data_sections_set = *gccc::cl_optimization_x_flag_data_sections_set;
*swig_x_flag_dce_get = *gccc::cl_optimization_x_flag_dce_get;
*swig_x_flag_dce_set = *gccc::cl_optimization_x_flag_dce_set;
*swig_x_flag_defer_pop_get = *gccc::cl_optimization_x_flag_defer_pop_get;
*swig_x_flag_defer_pop_set = *gccc::cl_optimization_x_flag_defer_pop_set;
*swig_x_flag_delayed_branch_get = *gccc::cl_optimization_x_flag_delayed_branch_get;
*swig_x_flag_delayed_branch_set = *gccc::cl_optimization_x_flag_delayed_branch_set;
*swig_x_flag_delete_null_pointer_checks_get = *gccc::cl_optimization_x_flag_delete_null_pointer_checks_get;
*swig_x_flag_delete_null_pointer_checks_set = *gccc::cl_optimization_x_flag_delete_null_pointer_checks_set;
*swig_x_flag_devirtualize_get = *gccc::cl_optimization_x_flag_devirtualize_get;
*swig_x_flag_devirtualize_set = *gccc::cl_optimization_x_flag_devirtualize_set;
*swig_x_flag_dse_get = *gccc::cl_optimization_x_flag_dse_get;
*swig_x_flag_dse_set = *gccc::cl_optimization_x_flag_dse_set;
*swig_x_flag_early_inlining_get = *gccc::cl_optimization_x_flag_early_inlining_get;
*swig_x_flag_early_inlining_set = *gccc::cl_optimization_x_flag_early_inlining_set;
*swig_x_flag_exceptions_get = *gccc::cl_optimization_x_flag_exceptions_get;
*swig_x_flag_exceptions_set = *gccc::cl_optimization_x_flag_exceptions_set;
*swig_x_flag_expensive_optimizations_get = *gccc::cl_optimization_x_flag_expensive_optimizations_get;
*swig_x_flag_expensive_optimizations_set = *gccc::cl_optimization_x_flag_expensive_optimizations_set;
*swig_x_flag_finite_math_only_get = *gccc::cl_optimization_x_flag_finite_math_only_get;
*swig_x_flag_finite_math_only_set = *gccc::cl_optimization_x_flag_finite_math_only_set;
*swig_x_flag_float_store_get = *gccc::cl_optimization_x_flag_float_store_get;
*swig_x_flag_float_store_set = *gccc::cl_optimization_x_flag_float_store_set;
*swig_x_flag_forward_propagate_get = *gccc::cl_optimization_x_flag_forward_propagate_get;
*swig_x_flag_forward_propagate_set = *gccc::cl_optimization_x_flag_forward_propagate_set;
*swig_x_flag_gcse_get = *gccc::cl_optimization_x_flag_gcse_get;
*swig_x_flag_gcse_set = *gccc::cl_optimization_x_flag_gcse_set;
*swig_x_flag_gcse_after_reload_get = *gccc::cl_optimization_x_flag_gcse_after_reload_get;
*swig_x_flag_gcse_after_reload_set = *gccc::cl_optimization_x_flag_gcse_after_reload_set;
*swig_x_flag_gcse_las_get = *gccc::cl_optimization_x_flag_gcse_las_get;
*swig_x_flag_gcse_las_set = *gccc::cl_optimization_x_flag_gcse_las_set;
*swig_x_flag_gcse_lm_get = *gccc::cl_optimization_x_flag_gcse_lm_get;
*swig_x_flag_gcse_lm_set = *gccc::cl_optimization_x_flag_gcse_lm_set;
*swig_x_flag_gcse_sm_get = *gccc::cl_optimization_x_flag_gcse_sm_get;
*swig_x_flag_gcse_sm_set = *gccc::cl_optimization_x_flag_gcse_sm_set;
*swig_x_flag_graphite_identity_get = *gccc::cl_optimization_x_flag_graphite_identity_get;
*swig_x_flag_graphite_identity_set = *gccc::cl_optimization_x_flag_graphite_identity_set;
*swig_x_flag_guess_branch_prob_get = *gccc::cl_optimization_x_flag_guess_branch_prob_get;
*swig_x_flag_guess_branch_prob_set = *gccc::cl_optimization_x_flag_guess_branch_prob_set;
*swig_x_flag_if_conversion_get = *gccc::cl_optimization_x_flag_if_conversion_get;
*swig_x_flag_if_conversion_set = *gccc::cl_optimization_x_flag_if_conversion_set;
*swig_x_flag_if_conversion2_get = *gccc::cl_optimization_x_flag_if_conversion2_get;
*swig_x_flag_if_conversion2_set = *gccc::cl_optimization_x_flag_if_conversion2_set;
*swig_x_flag_inline_functions_get = *gccc::cl_optimization_x_flag_inline_functions_get;
*swig_x_flag_inline_functions_set = *gccc::cl_optimization_x_flag_inline_functions_set;
*swig_x_flag_inline_functions_called_once_get = *gccc::cl_optimization_x_flag_inline_functions_called_once_get;
*swig_x_flag_inline_functions_called_once_set = *gccc::cl_optimization_x_flag_inline_functions_called_once_set;
*swig_x_flag_inline_small_functions_get = *gccc::cl_optimization_x_flag_inline_small_functions_get;
*swig_x_flag_inline_small_functions_set = *gccc::cl_optimization_x_flag_inline_small_functions_set;
*swig_x_flag_ipa_cp_get = *gccc::cl_optimization_x_flag_ipa_cp_get;
*swig_x_flag_ipa_cp_set = *gccc::cl_optimization_x_flag_ipa_cp_set;
*swig_x_flag_ipa_cp_clone_get = *gccc::cl_optimization_x_flag_ipa_cp_clone_get;
*swig_x_flag_ipa_cp_clone_set = *gccc::cl_optimization_x_flag_ipa_cp_clone_set;
*swig_x_flag_ipa_matrix_reorg_get = *gccc::cl_optimization_x_flag_ipa_matrix_reorg_get;
*swig_x_flag_ipa_matrix_reorg_set = *gccc::cl_optimization_x_flag_ipa_matrix_reorg_set;
*swig_x_flag_ipa_profile_get = *gccc::cl_optimization_x_flag_ipa_profile_get;
*swig_x_flag_ipa_profile_set = *gccc::cl_optimization_x_flag_ipa_profile_set;
*swig_x_flag_ipa_pta_get = *gccc::cl_optimization_x_flag_ipa_pta_get;
*swig_x_flag_ipa_pta_set = *gccc::cl_optimization_x_flag_ipa_pta_set;
*swig_x_flag_ipa_pure_const_get = *gccc::cl_optimization_x_flag_ipa_pure_const_get;
*swig_x_flag_ipa_pure_const_set = *gccc::cl_optimization_x_flag_ipa_pure_const_set;
*swig_x_flag_ipa_reference_get = *gccc::cl_optimization_x_flag_ipa_reference_get;
*swig_x_flag_ipa_reference_set = *gccc::cl_optimization_x_flag_ipa_reference_set;
*swig_x_flag_ipa_sra_get = *gccc::cl_optimization_x_flag_ipa_sra_get;
*swig_x_flag_ipa_sra_set = *gccc::cl_optimization_x_flag_ipa_sra_set;
*swig_x_flag_ivopts_get = *gccc::cl_optimization_x_flag_ivopts_get;
*swig_x_flag_ivopts_set = *gccc::cl_optimization_x_flag_ivopts_set;
*swig_x_flag_jump_tables_get = *gccc::cl_optimization_x_flag_jump_tables_get;
*swig_x_flag_jump_tables_set = *gccc::cl_optimization_x_flag_jump_tables_set;
*swig_x_flag_loop_block_get = *gccc::cl_optimization_x_flag_loop_block_get;
*swig_x_flag_loop_block_set = *gccc::cl_optimization_x_flag_loop_block_set;
*swig_x_flag_loop_flatten_get = *gccc::cl_optimization_x_flag_loop_flatten_get;
*swig_x_flag_loop_flatten_set = *gccc::cl_optimization_x_flag_loop_flatten_set;
*swig_x_flag_loop_interchange_get = *gccc::cl_optimization_x_flag_loop_interchange_get;
*swig_x_flag_loop_interchange_set = *gccc::cl_optimization_x_flag_loop_interchange_set;
*swig_x_flag_loop_parallelize_all_get = *gccc::cl_optimization_x_flag_loop_parallelize_all_get;
*swig_x_flag_loop_parallelize_all_set = *gccc::cl_optimization_x_flag_loop_parallelize_all_set;
*swig_x_flag_loop_strip_mine_get = *gccc::cl_optimization_x_flag_loop_strip_mine_get;
*swig_x_flag_loop_strip_mine_set = *gccc::cl_optimization_x_flag_loop_strip_mine_set;
*swig_x_flag_lto_report_get = *gccc::cl_optimization_x_flag_lto_report_get;
*swig_x_flag_lto_report_set = *gccc::cl_optimization_x_flag_lto_report_set;
*swig_x_flag_ltrans_get = *gccc::cl_optimization_x_flag_ltrans_get;
*swig_x_flag_ltrans_set = *gccc::cl_optimization_x_flag_ltrans_set;
*swig_x_flag_errno_math_get = *gccc::cl_optimization_x_flag_errno_math_get;
*swig_x_flag_errno_math_set = *gccc::cl_optimization_x_flag_errno_math_set;
*swig_x_flag_merge_constants_get = *gccc::cl_optimization_x_flag_merge_constants_get;
*swig_x_flag_merge_constants_set = *gccc::cl_optimization_x_flag_merge_constants_set;
*swig_x_flag_modulo_sched_get = *gccc::cl_optimization_x_flag_modulo_sched_get;
*swig_x_flag_modulo_sched_set = *gccc::cl_optimization_x_flag_modulo_sched_set;
*swig_x_flag_move_loop_invariants_get = *gccc::cl_optimization_x_flag_move_loop_invariants_get;
*swig_x_flag_move_loop_invariants_set = *gccc::cl_optimization_x_flag_move_loop_invariants_set;
*swig_x_flag_non_call_exceptions_get = *gccc::cl_optimization_x_flag_non_call_exceptions_get;
*swig_x_flag_non_call_exceptions_set = *gccc::cl_optimization_x_flag_non_call_exceptions_set;
*swig_x_flag_nothrow_opt_get = *gccc::cl_optimization_x_flag_nothrow_opt_get;
*swig_x_flag_nothrow_opt_set = *gccc::cl_optimization_x_flag_nothrow_opt_set;
*swig_x_flag_omit_frame_pointer_get = *gccc::cl_optimization_x_flag_omit_frame_pointer_get;
*swig_x_flag_omit_frame_pointer_set = *gccc::cl_optimization_x_flag_omit_frame_pointer_set;
*swig_x_flag_regmove_get = *gccc::cl_optimization_x_flag_regmove_get;
*swig_x_flag_regmove_set = *gccc::cl_optimization_x_flag_regmove_set;
*swig_x_flag_optimize_sibling_calls_get = *gccc::cl_optimization_x_flag_optimize_sibling_calls_get;
*swig_x_flag_optimize_sibling_calls_set = *gccc::cl_optimization_x_flag_optimize_sibling_calls_set;
*swig_x_flag_pack_struct_get = *gccc::cl_optimization_x_flag_pack_struct_get;
*swig_x_flag_pack_struct_set = *gccc::cl_optimization_x_flag_pack_struct_set;
*swig_x_flag_peel_loops_get = *gccc::cl_optimization_x_flag_peel_loops_get;
*swig_x_flag_peel_loops_set = *gccc::cl_optimization_x_flag_peel_loops_set;
*swig_x_flag_no_peephole_get = *gccc::cl_optimization_x_flag_no_peephole_get;
*swig_x_flag_no_peephole_set = *gccc::cl_optimization_x_flag_no_peephole_set;
*swig_x_flag_peephole2_get = *gccc::cl_optimization_x_flag_peephole2_get;
*swig_x_flag_peephole2_set = *gccc::cl_optimization_x_flag_peephole2_set;
*swig_x_flag_predictive_commoning_get = *gccc::cl_optimization_x_flag_predictive_commoning_get;
*swig_x_flag_predictive_commoning_set = *gccc::cl_optimization_x_flag_predictive_commoning_set;
*swig_x_flag_prefetch_loop_arrays_get = *gccc::cl_optimization_x_flag_prefetch_loop_arrays_get;
*swig_x_flag_prefetch_loop_arrays_set = *gccc::cl_optimization_x_flag_prefetch_loop_arrays_set;
*swig_x_flag_pcc_struct_return_get = *gccc::cl_optimization_x_flag_pcc_struct_return_get;
*swig_x_flag_pcc_struct_return_set = *gccc::cl_optimization_x_flag_pcc_struct_return_set;
*swig_x_flag_rename_registers_get = *gccc::cl_optimization_x_flag_rename_registers_get;
*swig_x_flag_rename_registers_set = *gccc::cl_optimization_x_flag_rename_registers_set;
*swig_x_flag_reorder_blocks_get = *gccc::cl_optimization_x_flag_reorder_blocks_get;
*swig_x_flag_reorder_blocks_set = *gccc::cl_optimization_x_flag_reorder_blocks_set;
*swig_x_flag_reorder_blocks_and_partition_get = *gccc::cl_optimization_x_flag_reorder_blocks_and_partition_get;
*swig_x_flag_reorder_blocks_and_partition_set = *gccc::cl_optimization_x_flag_reorder_blocks_and_partition_set;
*swig_x_flag_reorder_functions_get = *gccc::cl_optimization_x_flag_reorder_functions_get;
*swig_x_flag_reorder_functions_set = *gccc::cl_optimization_x_flag_reorder_functions_set;
*swig_x_flag_rerun_cse_after_loop_get = *gccc::cl_optimization_x_flag_rerun_cse_after_loop_get;
*swig_x_flag_rerun_cse_after_loop_set = *gccc::cl_optimization_x_flag_rerun_cse_after_loop_set;
*swig_x_flag_resched_modulo_sched_get = *gccc::cl_optimization_x_flag_resched_modulo_sched_get;
*swig_x_flag_resched_modulo_sched_set = *gccc::cl_optimization_x_flag_resched_modulo_sched_set;
*swig_x_flag_rounding_math_get = *gccc::cl_optimization_x_flag_rounding_math_get;
*swig_x_flag_rounding_math_set = *gccc::cl_optimization_x_flag_rounding_math_set;
*swig_x_flag_rtti_get = *gccc::cl_optimization_x_flag_rtti_get;
*swig_x_flag_rtti_set = *gccc::cl_optimization_x_flag_rtti_set;
*swig_x_flag_sched_critical_path_heuristic_get = *gccc::cl_optimization_x_flag_sched_critical_path_heuristic_get;
*swig_x_flag_sched_critical_path_heuristic_set = *gccc::cl_optimization_x_flag_sched_critical_path_heuristic_set;
*swig_x_flag_sched_dep_count_heuristic_get = *gccc::cl_optimization_x_flag_sched_dep_count_heuristic_get;
*swig_x_flag_sched_dep_count_heuristic_set = *gccc::cl_optimization_x_flag_sched_dep_count_heuristic_set;
*swig_x_flag_sched_group_heuristic_get = *gccc::cl_optimization_x_flag_sched_group_heuristic_get;
*swig_x_flag_sched_group_heuristic_set = *gccc::cl_optimization_x_flag_sched_group_heuristic_set;
*swig_x_flag_schedule_interblock_get = *gccc::cl_optimization_x_flag_schedule_interblock_get;
*swig_x_flag_schedule_interblock_set = *gccc::cl_optimization_x_flag_schedule_interblock_set;
*swig_x_flag_sched_last_insn_heuristic_get = *gccc::cl_optimization_x_flag_sched_last_insn_heuristic_get;
*swig_x_flag_sched_last_insn_heuristic_set = *gccc::cl_optimization_x_flag_sched_last_insn_heuristic_set;
*swig_x_flag_sched_pressure_get = *gccc::cl_optimization_x_flag_sched_pressure_get;
*swig_x_flag_sched_pressure_set = *gccc::cl_optimization_x_flag_sched_pressure_set;
*swig_x_flag_sched_rank_heuristic_get = *gccc::cl_optimization_x_flag_sched_rank_heuristic_get;
*swig_x_flag_sched_rank_heuristic_set = *gccc::cl_optimization_x_flag_sched_rank_heuristic_set;
*swig_x_flag_schedule_speculative_get = *gccc::cl_optimization_x_flag_schedule_speculative_get;
*swig_x_flag_schedule_speculative_set = *gccc::cl_optimization_x_flag_schedule_speculative_set;
*swig_x_flag_sched_spec_insn_heuristic_get = *gccc::cl_optimization_x_flag_sched_spec_insn_heuristic_get;
*swig_x_flag_sched_spec_insn_heuristic_set = *gccc::cl_optimization_x_flag_sched_spec_insn_heuristic_set;
*swig_x_flag_schedule_speculative_load_get = *gccc::cl_optimization_x_flag_schedule_speculative_load_get;
*swig_x_flag_schedule_speculative_load_set = *gccc::cl_optimization_x_flag_schedule_speculative_load_set;
*swig_x_flag_schedule_speculative_load_dangerous_get = *gccc::cl_optimization_x_flag_schedule_speculative_load_dangerous_get;
*swig_x_flag_schedule_speculative_load_dangerous_set = *gccc::cl_optimization_x_flag_schedule_speculative_load_dangerous_set;
*swig_x_flag_sched2_use_superblocks_get = *gccc::cl_optimization_x_flag_sched2_use_superblocks_get;
*swig_x_flag_sched2_use_superblocks_set = *gccc::cl_optimization_x_flag_sched2_use_superblocks_set;
*swig_x_flag_schedule_insns_get = *gccc::cl_optimization_x_flag_schedule_insns_get;
*swig_x_flag_schedule_insns_set = *gccc::cl_optimization_x_flag_schedule_insns_set;
*swig_x_flag_schedule_insns_after_reload_get = *gccc::cl_optimization_x_flag_schedule_insns_after_reload_get;
*swig_x_flag_schedule_insns_after_reload_set = *gccc::cl_optimization_x_flag_schedule_insns_after_reload_set;
*swig_x_flag_section_anchors_get = *gccc::cl_optimization_x_flag_section_anchors_get;
*swig_x_flag_section_anchors_set = *gccc::cl_optimization_x_flag_section_anchors_set;
*swig_x_flag_sel_sched_pipelining_get = *gccc::cl_optimization_x_flag_sel_sched_pipelining_get;
*swig_x_flag_sel_sched_pipelining_set = *gccc::cl_optimization_x_flag_sel_sched_pipelining_set;
*swig_x_flag_sel_sched_pipelining_outer_loops_get = *gccc::cl_optimization_x_flag_sel_sched_pipelining_outer_loops_get;
*swig_x_flag_sel_sched_pipelining_outer_loops_set = *gccc::cl_optimization_x_flag_sel_sched_pipelining_outer_loops_set;
*swig_x_flag_sel_sched_reschedule_pipelined_get = *gccc::cl_optimization_x_flag_sel_sched_reschedule_pipelined_get;
*swig_x_flag_sel_sched_reschedule_pipelined_set = *gccc::cl_optimization_x_flag_sel_sched_reschedule_pipelined_set;
*swig_x_flag_selective_scheduling_get = *gccc::cl_optimization_x_flag_selective_scheduling_get;
*swig_x_flag_selective_scheduling_set = *gccc::cl_optimization_x_flag_selective_scheduling_set;
*swig_x_flag_selective_scheduling2_get = *gccc::cl_optimization_x_flag_selective_scheduling2_get;
*swig_x_flag_selective_scheduling2_set = *gccc::cl_optimization_x_flag_selective_scheduling2_set;
*swig_x_flag_short_double_get = *gccc::cl_optimization_x_flag_short_double_get;
*swig_x_flag_short_double_set = *gccc::cl_optimization_x_flag_short_double_set;
*swig_x_flag_short_enums_get = *gccc::cl_optimization_x_flag_short_enums_get;
*swig_x_flag_short_enums_set = *gccc::cl_optimization_x_flag_short_enums_set;
*swig_x_flag_short_wchar_get = *gccc::cl_optimization_x_flag_short_wchar_get;
*swig_x_flag_short_wchar_set = *gccc::cl_optimization_x_flag_short_wchar_set;
*swig_x_flag_signaling_nans_get = *gccc::cl_optimization_x_flag_signaling_nans_get;
*swig_x_flag_signaling_nans_set = *gccc::cl_optimization_x_flag_signaling_nans_set;
*swig_x_flag_signed_zeros_get = *gccc::cl_optimization_x_flag_signed_zeros_get;
*swig_x_flag_signed_zeros_set = *gccc::cl_optimization_x_flag_signed_zeros_set;
*swig_x_flag_single_precision_constant_get = *gccc::cl_optimization_x_flag_single_precision_constant_get;
*swig_x_flag_single_precision_constant_set = *gccc::cl_optimization_x_flag_single_precision_constant_set;
*swig_x_flag_split_ivs_in_unroller_get = *gccc::cl_optimization_x_flag_split_ivs_in_unroller_get;
*swig_x_flag_split_ivs_in_unroller_set = *gccc::cl_optimization_x_flag_split_ivs_in_unroller_set;
*swig_x_flag_split_wide_types_get = *gccc::cl_optimization_x_flag_split_wide_types_get;
*swig_x_flag_split_wide_types_set = *gccc::cl_optimization_x_flag_split_wide_types_set;
*swig_x_flag_strict_aliasing_get = *gccc::cl_optimization_x_flag_strict_aliasing_get;
*swig_x_flag_strict_aliasing_set = *gccc::cl_optimization_x_flag_strict_aliasing_set;
*swig_x_flag_strict_enums_get = *gccc::cl_optimization_x_flag_strict_enums_get;
*swig_x_flag_strict_enums_set = *gccc::cl_optimization_x_flag_strict_enums_set;
*swig_x_flag_thread_jumps_get = *gccc::cl_optimization_x_flag_thread_jumps_get;
*swig_x_flag_thread_jumps_set = *gccc::cl_optimization_x_flag_thread_jumps_set;
*swig_x_flag_threadsafe_statics_get = *gccc::cl_optimization_x_flag_threadsafe_statics_get;
*swig_x_flag_threadsafe_statics_set = *gccc::cl_optimization_x_flag_threadsafe_statics_set;
*swig_x_flag_toplevel_reorder_get = *gccc::cl_optimization_x_flag_toplevel_reorder_get;
*swig_x_flag_toplevel_reorder_set = *gccc::cl_optimization_x_flag_toplevel_reorder_set;
*swig_x_flag_trapping_math_get = *gccc::cl_optimization_x_flag_trapping_math_get;
*swig_x_flag_trapping_math_set = *gccc::cl_optimization_x_flag_trapping_math_set;
*swig_x_flag_trapv_get = *gccc::cl_optimization_x_flag_trapv_get;
*swig_x_flag_trapv_set = *gccc::cl_optimization_x_flag_trapv_set;
*swig_x_flag_tree_bit_ccp_get = *gccc::cl_optimization_x_flag_tree_bit_ccp_get;
*swig_x_flag_tree_bit_ccp_set = *gccc::cl_optimization_x_flag_tree_bit_ccp_set;
*swig_x_flag_tree_builtin_call_dce_get = *gccc::cl_optimization_x_flag_tree_builtin_call_dce_get;
*swig_x_flag_tree_builtin_call_dce_set = *gccc::cl_optimization_x_flag_tree_builtin_call_dce_set;
*swig_x_flag_tree_ccp_get = *gccc::cl_optimization_x_flag_tree_ccp_get;
*swig_x_flag_tree_ccp_set = *gccc::cl_optimization_x_flag_tree_ccp_set;
*swig_x_flag_tree_ch_get = *gccc::cl_optimization_x_flag_tree_ch_get;
*swig_x_flag_tree_ch_set = *gccc::cl_optimization_x_flag_tree_ch_set;
*swig_x_flag_tree_copy_prop_get = *gccc::cl_optimization_x_flag_tree_copy_prop_get;
*swig_x_flag_tree_copy_prop_set = *gccc::cl_optimization_x_flag_tree_copy_prop_set;
*swig_x_flag_tree_copyrename_get = *gccc::cl_optimization_x_flag_tree_copyrename_get;
*swig_x_flag_tree_copyrename_set = *gccc::cl_optimization_x_flag_tree_copyrename_set;
*swig_x_flag_tree_cselim_get = *gccc::cl_optimization_x_flag_tree_cselim_get;
*swig_x_flag_tree_cselim_set = *gccc::cl_optimization_x_flag_tree_cselim_set;
*swig_x_flag_tree_dce_get = *gccc::cl_optimization_x_flag_tree_dce_get;
*swig_x_flag_tree_dce_set = *gccc::cl_optimization_x_flag_tree_dce_set;
*swig_x_flag_tree_dom_get = *gccc::cl_optimization_x_flag_tree_dom_get;
*swig_x_flag_tree_dom_set = *gccc::cl_optimization_x_flag_tree_dom_set;
*swig_x_flag_tree_dse_get = *gccc::cl_optimization_x_flag_tree_dse_get;
*swig_x_flag_tree_dse_set = *gccc::cl_optimization_x_flag_tree_dse_set;
*swig_x_flag_tree_forwprop_get = *gccc::cl_optimization_x_flag_tree_forwprop_get;
*swig_x_flag_tree_forwprop_set = *gccc::cl_optimization_x_flag_tree_forwprop_set;
*swig_x_flag_tree_fre_get = *gccc::cl_optimization_x_flag_tree_fre_get;
*swig_x_flag_tree_fre_set = *gccc::cl_optimization_x_flag_tree_fre_set;
*swig_x_flag_tree_loop_distribute_patterns_get = *gccc::cl_optimization_x_flag_tree_loop_distribute_patterns_get;
*swig_x_flag_tree_loop_distribute_patterns_set = *gccc::cl_optimization_x_flag_tree_loop_distribute_patterns_set;
*swig_x_flag_tree_loop_distribution_get = *gccc::cl_optimization_x_flag_tree_loop_distribution_get;
*swig_x_flag_tree_loop_distribution_set = *gccc::cl_optimization_x_flag_tree_loop_distribution_set;
*swig_x_flag_tree_loop_if_convert_get = *gccc::cl_optimization_x_flag_tree_loop_if_convert_get;
*swig_x_flag_tree_loop_if_convert_set = *gccc::cl_optimization_x_flag_tree_loop_if_convert_set;
*swig_x_flag_tree_loop_if_convert_stores_get = *gccc::cl_optimization_x_flag_tree_loop_if_convert_stores_get;
*swig_x_flag_tree_loop_if_convert_stores_set = *gccc::cl_optimization_x_flag_tree_loop_if_convert_stores_set;
*swig_x_flag_tree_loop_im_get = *gccc::cl_optimization_x_flag_tree_loop_im_get;
*swig_x_flag_tree_loop_im_set = *gccc::cl_optimization_x_flag_tree_loop_im_set;
*swig_x_flag_tree_loop_ivcanon_get = *gccc::cl_optimization_x_flag_tree_loop_ivcanon_get;
*swig_x_flag_tree_loop_ivcanon_set = *gccc::cl_optimization_x_flag_tree_loop_ivcanon_set;
*swig_x_flag_tree_loop_optimize_get = *gccc::cl_optimization_x_flag_tree_loop_optimize_get;
*swig_x_flag_tree_loop_optimize_set = *gccc::cl_optimization_x_flag_tree_loop_optimize_set;
*swig_x_flag_tree_live_range_split_get = *gccc::cl_optimization_x_flag_tree_live_range_split_get;
*swig_x_flag_tree_live_range_split_set = *gccc::cl_optimization_x_flag_tree_live_range_split_set;
*swig_x_flag_tree_phiprop_get = *gccc::cl_optimization_x_flag_tree_phiprop_get;
*swig_x_flag_tree_phiprop_set = *gccc::cl_optimization_x_flag_tree_phiprop_set;
*swig_x_flag_tree_pre_get = *gccc::cl_optimization_x_flag_tree_pre_get;
*swig_x_flag_tree_pre_set = *gccc::cl_optimization_x_flag_tree_pre_set;
*swig_x_flag_tree_pta_get = *gccc::cl_optimization_x_flag_tree_pta_get;
*swig_x_flag_tree_pta_set = *gccc::cl_optimization_x_flag_tree_pta_set;
*swig_x_flag_tree_reassoc_get = *gccc::cl_optimization_x_flag_tree_reassoc_get;
*swig_x_flag_tree_reassoc_set = *gccc::cl_optimization_x_flag_tree_reassoc_set;
*swig_x_flag_tree_scev_cprop_get = *gccc::cl_optimization_x_flag_tree_scev_cprop_get;
*swig_x_flag_tree_scev_cprop_set = *gccc::cl_optimization_x_flag_tree_scev_cprop_set;
*swig_x_flag_tree_sink_get = *gccc::cl_optimization_x_flag_tree_sink_get;
*swig_x_flag_tree_sink_set = *gccc::cl_optimization_x_flag_tree_sink_set;
*swig_x_flag_tree_slp_vectorize_get = *gccc::cl_optimization_x_flag_tree_slp_vectorize_get;
*swig_x_flag_tree_slp_vectorize_set = *gccc::cl_optimization_x_flag_tree_slp_vectorize_set;
*swig_x_flag_tree_sra_get = *gccc::cl_optimization_x_flag_tree_sra_get;
*swig_x_flag_tree_sra_set = *gccc::cl_optimization_x_flag_tree_sra_set;
*swig_x_flag_tree_switch_conversion_get = *gccc::cl_optimization_x_flag_tree_switch_conversion_get;
*swig_x_flag_tree_switch_conversion_set = *gccc::cl_optimization_x_flag_tree_switch_conversion_set;
*swig_x_flag_tree_ter_get = *gccc::cl_optimization_x_flag_tree_ter_get;
*swig_x_flag_tree_ter_set = *gccc::cl_optimization_x_flag_tree_ter_set;
*swig_x_flag_tree_vect_loop_version_get = *gccc::cl_optimization_x_flag_tree_vect_loop_version_get;
*swig_x_flag_tree_vect_loop_version_set = *gccc::cl_optimization_x_flag_tree_vect_loop_version_set;
*swig_x_flag_tree_vectorize_get = *gccc::cl_optimization_x_flag_tree_vectorize_get;
*swig_x_flag_tree_vectorize_set = *gccc::cl_optimization_x_flag_tree_vectorize_set;
*swig_x_flag_tree_vrp_get = *gccc::cl_optimization_x_flag_tree_vrp_get;
*swig_x_flag_tree_vrp_set = *gccc::cl_optimization_x_flag_tree_vrp_set;
*swig_x_flag_unit_at_a_time_get = *gccc::cl_optimization_x_flag_unit_at_a_time_get;
*swig_x_flag_unit_at_a_time_set = *gccc::cl_optimization_x_flag_unit_at_a_time_set;
*swig_x_flag_unroll_all_loops_get = *gccc::cl_optimization_x_flag_unroll_all_loops_get;
*swig_x_flag_unroll_all_loops_set = *gccc::cl_optimization_x_flag_unroll_all_loops_set;
*swig_x_flag_unroll_loops_get = *gccc::cl_optimization_x_flag_unroll_loops_get;
*swig_x_flag_unroll_loops_set = *gccc::cl_optimization_x_flag_unroll_loops_set;
*swig_x_flag_unsafe_loop_optimizations_get = *gccc::cl_optimization_x_flag_unsafe_loop_optimizations_get;
*swig_x_flag_unsafe_loop_optimizations_set = *gccc::cl_optimization_x_flag_unsafe_loop_optimizations_set;
*swig_x_flag_unsafe_math_optimizations_get = *gccc::cl_optimization_x_flag_unsafe_math_optimizations_get;
*swig_x_flag_unsafe_math_optimizations_set = *gccc::cl_optimization_x_flag_unsafe_math_optimizations_set;
*swig_x_flag_unswitch_loops_get = *gccc::cl_optimization_x_flag_unswitch_loops_get;
*swig_x_flag_unswitch_loops_set = *gccc::cl_optimization_x_flag_unswitch_loops_set;
*swig_x_flag_unwind_tables_get = *gccc::cl_optimization_x_flag_unwind_tables_get;
*swig_x_flag_unwind_tables_set = *gccc::cl_optimization_x_flag_unwind_tables_set;
*swig_x_flag_var_tracking_get = *gccc::cl_optimization_x_flag_var_tracking_get;
*swig_x_flag_var_tracking_set = *gccc::cl_optimization_x_flag_var_tracking_set;
*swig_x_flag_var_tracking_assignments_get = *gccc::cl_optimization_x_flag_var_tracking_assignments_get;
*swig_x_flag_var_tracking_assignments_set = *gccc::cl_optimization_x_flag_var_tracking_assignments_set;
*swig_x_flag_var_tracking_assignments_toggle_get = *gccc::cl_optimization_x_flag_var_tracking_assignments_toggle_get;
*swig_x_flag_var_tracking_assignments_toggle_set = *gccc::cl_optimization_x_flag_var_tracking_assignments_toggle_set;
*swig_x_flag_var_tracking_uninit_get = *gccc::cl_optimization_x_flag_var_tracking_uninit_get;
*swig_x_flag_var_tracking_uninit_set = *gccc::cl_optimization_x_flag_var_tracking_uninit_set;
*swig_x_flag_variable_expansion_in_unroller_get = *gccc::cl_optimization_x_flag_variable_expansion_in_unroller_get;
*swig_x_flag_variable_expansion_in_unroller_set = *gccc::cl_optimization_x_flag_variable_expansion_in_unroller_set;
*swig_x_flag_vect_cost_model_get = *gccc::cl_optimization_x_flag_vect_cost_model_get;
*swig_x_flag_vect_cost_model_set = *gccc::cl_optimization_x_flag_vect_cost_model_set;
*swig_x_flag_value_profile_transformations_get = *gccc::cl_optimization_x_flag_value_profile_transformations_get;
*swig_x_flag_value_profile_transformations_set = *gccc::cl_optimization_x_flag_value_profile_transformations_set;
*swig_x_flag_web_get = *gccc::cl_optimization_x_flag_web_get;
*swig_x_flag_web_set = *gccc::cl_optimization_x_flag_web_set;
*swig_x_flag_whole_program_get = *gccc::cl_optimization_x_flag_whole_program_get;
*swig_x_flag_whole_program_set = *gccc::cl_optimization_x_flag_whole_program_set;
*swig_x_flag_wpa_get = *gccc::cl_optimization_x_flag_wpa_get;
*swig_x_flag_wpa_set = *gccc::cl_optimization_x_flag_wpa_set;
*swig_x_flag_wrapv_get = *gccc::cl_optimization_x_flag_wrapv_get;
*swig_x_flag_wrapv_set = *gccc::cl_optimization_x_flag_wrapv_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cl_optimization(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cl_optimization($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cl_target_option ##############

package gcc::cl_target_option;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_ix86_isa_flags_explicit_get = *gccc::cl_target_option_ix86_isa_flags_explicit_get;
*swig_ix86_isa_flags_explicit_set = *gccc::cl_target_option_ix86_isa_flags_explicit_set;
*swig_ix86_target_flags_explicit_get = *gccc::cl_target_option_ix86_target_flags_explicit_get;
*swig_ix86_target_flags_explicit_set = *gccc::cl_target_option_ix86_target_flags_explicit_set;
*swig_x_target_flags_get = *gccc::cl_target_option_x_target_flags_get;
*swig_x_target_flags_set = *gccc::cl_target_option_x_target_flags_set;
*swig_x_ix86_isa_flags_get = *gccc::cl_target_option_x_ix86_isa_flags_get;
*swig_x_ix86_isa_flags_set = *gccc::cl_target_option_x_ix86_isa_flags_set;
*swig_arch_get = *gccc::cl_target_option_arch_get;
*swig_arch_set = *gccc::cl_target_option_arch_set;
*swig_arch_specified_get = *gccc::cl_target_option_arch_specified_get;
*swig_arch_specified_set = *gccc::cl_target_option_arch_specified_set;
*swig_branch_cost_get = *gccc::cl_target_option_branch_cost_get;
*swig_branch_cost_set = *gccc::cl_target_option_branch_cost_set;
*swig_fpmath_get = *gccc::cl_target_option_fpmath_get;
*swig_fpmath_set = *gccc::cl_target_option_fpmath_set;
*swig_schedule_get = *gccc::cl_target_option_schedule_get;
*swig_schedule_set = *gccc::cl_target_option_schedule_set;
*swig_tune_get = *gccc::cl_target_option_tune_get;
*swig_tune_set = *gccc::cl_target_option_tune_set;
*swig_tune_defaulted_get = *gccc::cl_target_option_tune_defaulted_get;
*swig_tune_defaulted_set = *gccc::cl_target_option_tune_defaulted_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cl_target_option(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cl_target_option($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::target_flag_state ##############

package gcc::target_flag_state;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_align_loops_log_get = *gccc::target_flag_state_x_align_loops_log_get;
*swig_x_align_loops_log_set = *gccc::target_flag_state_x_align_loops_log_set;
*swig_x_align_loops_max_skip_get = *gccc::target_flag_state_x_align_loops_max_skip_get;
*swig_x_align_loops_max_skip_set = *gccc::target_flag_state_x_align_loops_max_skip_set;
*swig_x_align_jumps_log_get = *gccc::target_flag_state_x_align_jumps_log_get;
*swig_x_align_jumps_log_set = *gccc::target_flag_state_x_align_jumps_log_set;
*swig_x_align_jumps_max_skip_get = *gccc::target_flag_state_x_align_jumps_max_skip_get;
*swig_x_align_jumps_max_skip_set = *gccc::target_flag_state_x_align_jumps_max_skip_set;
*swig_x_align_labels_log_get = *gccc::target_flag_state_x_align_labels_log_get;
*swig_x_align_labels_log_set = *gccc::target_flag_state_x_align_labels_log_set;
*swig_x_align_labels_max_skip_get = *gccc::target_flag_state_x_align_labels_max_skip_get;
*swig_x_align_labels_max_skip_set = *gccc::target_flag_state_x_align_labels_max_skip_set;
*swig_x_align_functions_log_get = *gccc::target_flag_state_x_align_functions_log_get;
*swig_x_align_functions_log_set = *gccc::target_flag_state_x_align_functions_log_set;
*swig_x_flag_excess_precision_get = *gccc::target_flag_state_x_flag_excess_precision_get;
*swig_x_flag_excess_precision_set = *gccc::target_flag_state_x_flag_excess_precision_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_target_flag_state(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_target_flag_state($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::alias_pair ##############

package gcc::alias_pair;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_decl_get = *gccc::alias_pair_decl_get;
*swig_decl_set = *gccc::alias_pair_decl_set;
*swig_target_get = *gccc::alias_pair_target_get;
*swig_target_set = *gccc::alias_pair_target_set;
*swig_emitted_diags_get = *gccc::alias_pair_emitted_diags_get;
*swig_emitted_diags_set = *gccc::alias_pair_emitted_diags_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_alias_pair(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_alias_pair($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_alias_pair_base ##############

package gcc::VEC_alias_pair_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_alias_pair_base_num_get;
*swig_num_set = *gccc::VEC_alias_pair_base_num_set;
*swig_alloc_get = *gccc::VEC_alias_pair_base_alloc_get;
*swig_alloc_set = *gccc::VEC_alias_pair_base_alloc_set;
*swig_vec_get = *gccc::VEC_alias_pair_base_vec_get;
*swig_vec_set = *gccc::VEC_alias_pair_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_alias_pair_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_alias_pair_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_alias_pair_none ##############

package gcc::VEC_alias_pair_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_alias_pair_none_base_get;
*swig_base_set = *gccc::VEC_alias_pair_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_alias_pair_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_alias_pair_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_alias_pair_gc ##############

package gcc::VEC_alias_pair_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_alias_pair_gc_base_get;
*swig_base_set = *gccc::VEC_alias_pair_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_alias_pair_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_alias_pair_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_base ##############

package gcc::tree_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_code_get = *gccc::tree_base_code_get;
*swig_code_set = *gccc::tree_base_code_set;
*swig_side_effects_flag_get = *gccc::tree_base_side_effects_flag_get;
*swig_side_effects_flag_set = *gccc::tree_base_side_effects_flag_set;
*swig_constant_flag_get = *gccc::tree_base_constant_flag_get;
*swig_constant_flag_set = *gccc::tree_base_constant_flag_set;
*swig_addressable_flag_get = *gccc::tree_base_addressable_flag_get;
*swig_addressable_flag_set = *gccc::tree_base_addressable_flag_set;
*swig_volatile_flag_get = *gccc::tree_base_volatile_flag_get;
*swig_volatile_flag_set = *gccc::tree_base_volatile_flag_set;
*swig_readonly_flag_get = *gccc::tree_base_readonly_flag_get;
*swig_readonly_flag_set = *gccc::tree_base_readonly_flag_set;
*swig_unsigned_flag_get = *gccc::tree_base_unsigned_flag_get;
*swig_unsigned_flag_set = *gccc::tree_base_unsigned_flag_set;
*swig_asm_written_flag_get = *gccc::tree_base_asm_written_flag_get;
*swig_asm_written_flag_set = *gccc::tree_base_asm_written_flag_set;
*swig_nowarning_flag_get = *gccc::tree_base_nowarning_flag_get;
*swig_nowarning_flag_set = *gccc::tree_base_nowarning_flag_set;
*swig_used_flag_get = *gccc::tree_base_used_flag_get;
*swig_used_flag_set = *gccc::tree_base_used_flag_set;
*swig_nothrow_flag_get = *gccc::tree_base_nothrow_flag_get;
*swig_nothrow_flag_set = *gccc::tree_base_nothrow_flag_set;
*swig_static_flag_get = *gccc::tree_base_static_flag_get;
*swig_static_flag_set = *gccc::tree_base_static_flag_set;
*swig_public_flag_get = *gccc::tree_base_public_flag_get;
*swig_public_flag_set = *gccc::tree_base_public_flag_set;
*swig_private_flag_get = *gccc::tree_base_private_flag_get;
*swig_private_flag_set = *gccc::tree_base_private_flag_set;
*swig_protected_flag_get = *gccc::tree_base_protected_flag_get;
*swig_protected_flag_set = *gccc::tree_base_protected_flag_set;
*swig_deprecated_flag_get = *gccc::tree_base_deprecated_flag_get;
*swig_deprecated_flag_set = *gccc::tree_base_deprecated_flag_set;
*swig_saturating_flag_get = *gccc::tree_base_saturating_flag_get;
*swig_saturating_flag_set = *gccc::tree_base_saturating_flag_set;
*swig_default_def_flag_get = *gccc::tree_base_default_def_flag_get;
*swig_default_def_flag_set = *gccc::tree_base_default_def_flag_set;
*swig_lang_flag_0_get = *gccc::tree_base_lang_flag_0_get;
*swig_lang_flag_0_set = *gccc::tree_base_lang_flag_0_set;
*swig_lang_flag_1_get = *gccc::tree_base_lang_flag_1_get;
*swig_lang_flag_1_set = *gccc::tree_base_lang_flag_1_set;
*swig_lang_flag_2_get = *gccc::tree_base_lang_flag_2_get;
*swig_lang_flag_2_set = *gccc::tree_base_lang_flag_2_set;
*swig_lang_flag_3_get = *gccc::tree_base_lang_flag_3_get;
*swig_lang_flag_3_set = *gccc::tree_base_lang_flag_3_set;
*swig_lang_flag_4_get = *gccc::tree_base_lang_flag_4_get;
*swig_lang_flag_4_set = *gccc::tree_base_lang_flag_4_set;
*swig_lang_flag_5_get = *gccc::tree_base_lang_flag_5_get;
*swig_lang_flag_5_set = *gccc::tree_base_lang_flag_5_set;
*swig_lang_flag_6_get = *gccc::tree_base_lang_flag_6_get;
*swig_lang_flag_6_set = *gccc::tree_base_lang_flag_6_set;
*swig_visited_get = *gccc::tree_base_visited_get;
*swig_visited_set = *gccc::tree_base_visited_set;
*swig_packed_flag_get = *gccc::tree_base_packed_flag_get;
*swig_packed_flag_set = *gccc::tree_base_packed_flag_set;
*swig_user_align_get = *gccc::tree_base_user_align_get;
*swig_user_align_set = *gccc::tree_base_user_align_set;
*swig_nameless_flag_get = *gccc::tree_base_nameless_flag_get;
*swig_nameless_flag_set = *gccc::tree_base_nameless_flag_set;
*swig_spare_get = *gccc::tree_base_spare_get;
*swig_spare_set = *gccc::tree_base_spare_set;
*swig_address_space_get = *gccc::tree_base_address_space_get;
*swig_address_space_set = *gccc::tree_base_address_space_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_common ##############

package gcc::tree_common;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::tree_common_base_get;
*swig_base_set = *gccc::tree_common_base_set;
*swig_chain_get = *gccc::tree_common_chain_get;
*swig_chain_set = *gccc::tree_common_chain_set;
*swig_type_get = *gccc::tree_common_type_get;
*swig_type_set = *gccc::tree_common_type_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_common(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_common($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_int_cst ##############

package gcc::tree_int_cst;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_int_cst_common_get;
*swig_common_set = *gccc::tree_int_cst_common_set;
*swig_int_cst_get = *gccc::tree_int_cst_int_cst_get;
*swig_int_cst_set = *gccc::tree_int_cst_int_cst_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_int_cst(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_int_cst($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_real_cst ##############

package gcc::tree_real_cst;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_real_cst_common_get;
*swig_common_set = *gccc::tree_real_cst_common_set;
*swig_real_cst_ptr_get = *gccc::tree_real_cst_real_cst_ptr_get;
*swig_real_cst_ptr_set = *gccc::tree_real_cst_real_cst_ptr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_real_cst(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_real_cst($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_fixed_cst ##############

package gcc::tree_fixed_cst;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_fixed_cst_common_get;
*swig_common_set = *gccc::tree_fixed_cst_common_set;
*swig_fixed_cst_ptr_get = *gccc::tree_fixed_cst_fixed_cst_ptr_get;
*swig_fixed_cst_ptr_set = *gccc::tree_fixed_cst_fixed_cst_ptr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_fixed_cst(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_fixed_cst($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_string ##############

package gcc::tree_string;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_string_common_get;
*swig_common_set = *gccc::tree_string_common_set;
*swig_length_get = *gccc::tree_string_length_get;
*swig_length_set = *gccc::tree_string_length_set;
*swig_str_get = *gccc::tree_string_str_get;
*swig_str_set = *gccc::tree_string_str_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_string(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_string($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_complex ##############

package gcc::tree_complex;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_complex_common_get;
*swig_common_set = *gccc::tree_complex_common_set;
*swig_real_get = *gccc::tree_complex_real_get;
*swig_real_set = *gccc::tree_complex_real_set;
*swig_imag_get = *gccc::tree_complex_imag_get;
*swig_imag_set = *gccc::tree_complex_imag_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_complex(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_complex($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_vector ##############

package gcc::tree_vector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_vector_common_get;
*swig_common_set = *gccc::tree_vector_common_set;
*swig_elements_get = *gccc::tree_vector_elements_get;
*swig_elements_set = *gccc::tree_vector_elements_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_vector(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_vector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::_obstack_chunk ##############

package gcc::_obstack_chunk;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_limit_get = *gccc::_obstack_chunk_limit_get;
*swig_limit_set = *gccc::_obstack_chunk_limit_set;
*swig_prev_get = *gccc::_obstack_chunk_prev_get;
*swig_prev_set = *gccc::_obstack_chunk_prev_set;
*swig_contents_get = *gccc::_obstack_chunk_contents_get;
*swig_contents_set = *gccc::_obstack_chunk_contents_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new__obstack_chunk(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete__obstack_chunk($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::obstack ##############

package gcc::obstack;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_chunk_size_get = *gccc::obstack_chunk_size_get;
*swig_chunk_size_set = *gccc::obstack_chunk_size_set;
*swig_chunk_get = *gccc::obstack_chunk_get;
*swig_chunk_set = *gccc::obstack_chunk_set;
*swig_object_base_get = *gccc::obstack_object_base_get;
*swig_object_base_set = *gccc::obstack_object_base_set;
*swig_next_free_get = *gccc::obstack_next_free_get;
*swig_next_free_set = *gccc::obstack_next_free_set;
*swig_chunk_limit_get = *gccc::obstack_chunk_limit_get;
*swig_chunk_limit_set = *gccc::obstack_chunk_limit_set;
*swig_temp_get = *gccc::obstack_temp_get;
*swig_temp_set = *gccc::obstack_temp_set;
*swig_alignment_mask_get = *gccc::obstack_alignment_mask_get;
*swig_alignment_mask_set = *gccc::obstack_alignment_mask_set;
*swig_chunkfun_get = *gccc::obstack_chunkfun_get;
*swig_chunkfun_set = *gccc::obstack_chunkfun_set;
*swig_freefun_get = *gccc::obstack_freefun_get;
*swig_freefun_set = *gccc::obstack_freefun_set;
*swig_extra_arg_get = *gccc::obstack_extra_arg_get;
*swig_extra_arg_set = *gccc::obstack_extra_arg_set;
*swig_use_extra_arg_get = *gccc::obstack_use_extra_arg_get;
*swig_use_extra_arg_set = *gccc::obstack_use_extra_arg_set;
*swig_maybe_empty_object_get = *gccc::obstack_maybe_empty_object_get;
*swig_maybe_empty_object_set = *gccc::obstack_maybe_empty_object_set;
*swig_alloc_failed_get = *gccc::obstack_alloc_failed_get;
*swig_alloc_failed_set = *gccc::obstack_alloc_failed_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_obstack(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_obstack($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ht_identifier ##############

package gcc::ht_identifier;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_str_get = *gccc::ht_identifier_str_get;
*swig_str_set = *gccc::ht_identifier_str_set;
*swig_len_get = *gccc::ht_identifier_len_get;
*swig_len_set = *gccc::ht_identifier_len_set;
*swig_hash_value_get = *gccc::ht_identifier_hash_value_get;
*swig_hash_value_set = *gccc::ht_identifier_hash_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ht_identifier(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ht_identifier($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ht ##############

package gcc::ht;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_stack_get = *gccc::ht_stack_get;
*swig_stack_set = *gccc::ht_stack_set;
*swig_entries_get = *gccc::ht_entries_get;
*swig_entries_set = *gccc::ht_entries_set;
*swig_alloc_node_get = *gccc::ht_alloc_node_get;
*swig_alloc_node_set = *gccc::ht_alloc_node_set;
*swig_alloc_subobject_get = *gccc::ht_alloc_subobject_get;
*swig_alloc_subobject_set = *gccc::ht_alloc_subobject_set;
*swig_nslots_get = *gccc::ht_nslots_get;
*swig_nslots_set = *gccc::ht_nslots_set;
*swig_nelements_get = *gccc::ht_nelements_get;
*swig_nelements_set = *gccc::ht_nelements_set;
*swig_pfile_get = *gccc::ht_pfile_get;
*swig_pfile_set = *gccc::ht_pfile_set;
*swig_searches_get = *gccc::ht_searches_get;
*swig_searches_set = *gccc::ht_searches_set;
*swig_collisions_get = *gccc::ht_collisions_get;
*swig_collisions_set = *gccc::ht_collisions_set;
*swig_entries_owned_get = *gccc::ht_entries_owned_get;
*swig_entries_owned_set = *gccc::ht_entries_owned_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ht(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ht($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_identifier ##############

package gcc::tree_identifier;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_identifier_common_get;
*swig_common_set = *gccc::tree_identifier_common_set;
*swig_id_get = *gccc::tree_identifier_id_get;
*swig_id_set = *gccc::tree_identifier_id_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_identifier(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_identifier($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_list ##############

package gcc::tree_list;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_list_common_get;
*swig_common_set = *gccc::tree_list_common_set;
*swig_purpose_get = *gccc::tree_list_purpose_get;
*swig_purpose_set = *gccc::tree_list_purpose_set;
*swig_value_get = *gccc::tree_list_value_get;
*swig_value_set = *gccc::tree_list_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_list(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_list($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_vec ##############

package gcc::tree_vec;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_vec_common_get;
*swig_common_set = *gccc::tree_vec_common_set;
*swig_length_get = *gccc::tree_vec_length_get;
*swig_length_set = *gccc::tree_vec_length_set;
*swig_a_get = *gccc::tree_vec_a_get;
*swig_a_set = *gccc::tree_vec_a_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_vec(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_vec($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::constructor_elt ##############

package gcc::constructor_elt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_index_get = *gccc::constructor_elt_index_get;
*swig_index_set = *gccc::constructor_elt_index_set;
*swig_value_get = *gccc::constructor_elt_value_get;
*swig_value_set = *gccc::constructor_elt_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_constructor_elt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_constructor_elt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_constructor_elt_base ##############

package gcc::VEC_constructor_elt_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_constructor_elt_base_num_get;
*swig_num_set = *gccc::VEC_constructor_elt_base_num_set;
*swig_alloc_get = *gccc::VEC_constructor_elt_base_alloc_get;
*swig_alloc_set = *gccc::VEC_constructor_elt_base_alloc_set;
*swig_vec_get = *gccc::VEC_constructor_elt_base_vec_get;
*swig_vec_set = *gccc::VEC_constructor_elt_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_constructor_elt_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_constructor_elt_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_constructor_elt_none ##############

package gcc::VEC_constructor_elt_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_constructor_elt_none_base_get;
*swig_base_set = *gccc::VEC_constructor_elt_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_constructor_elt_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_constructor_elt_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_constructor_elt_gc ##############

package gcc::VEC_constructor_elt_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_constructor_elt_gc_base_get;
*swig_base_set = *gccc::VEC_constructor_elt_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_constructor_elt_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_constructor_elt_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_constructor ##############

package gcc::tree_constructor;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_constructor_common_get;
*swig_common_set = *gccc::tree_constructor_common_set;
*swig_elts_get = *gccc::tree_constructor_elts_get;
*swig_elts_set = *gccc::tree_constructor_elts_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_constructor(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_constructor($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_exp ##############

package gcc::tree_exp;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_exp_common_get;
*swig_common_set = *gccc::tree_exp_common_set;
*swig_locus_get = *gccc::tree_exp_locus_get;
*swig_locus_set = *gccc::tree_exp_locus_set;
*swig_block_get = *gccc::tree_exp_block_get;
*swig_block_set = *gccc::tree_exp_block_set;
*swig_operands_get = *gccc::tree_exp_operands_get;
*swig_operands_set = *gccc::tree_exp_operands_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_exp(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_exp($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ssa_use_operand_t ##############

package gcc::ssa_use_operand_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_prev_get = *gccc::ssa_use_operand_t_prev_get;
*swig_prev_set = *gccc::ssa_use_operand_t_prev_set;
*swig_next_get = *gccc::ssa_use_operand_t_next_get;
*swig_next_set = *gccc::ssa_use_operand_t_next_set;
*swig_use_get = *gccc::ssa_use_operand_t_use_get;
*swig_use_set = *gccc::ssa_use_operand_t_use_set;
*swig_loc_get = *gccc::ssa_use_operand_t_loc_get;
*swig_loc_set = *gccc::ssa_use_operand_t_loc_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ssa_use_operand_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ssa_use_operand_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ssa_use_operand_t_loc ##############

package gcc::ssa_use_operand_t_loc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_stmt_get = *gccc::ssa_use_operand_t_loc_stmt_get;
*swig_stmt_set = *gccc::ssa_use_operand_t_loc_stmt_set;
*swig_ssa_name_get = *gccc::ssa_use_operand_t_loc_ssa_name_get;
*swig_ssa_name_set = *gccc::ssa_use_operand_t_loc_ssa_name_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ssa_use_operand_t_loc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ssa_use_operand_t_loc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_ssa_name ##############

package gcc::tree_ssa_name;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_ssa_name_common_get;
*swig_common_set = *gccc::tree_ssa_name_common_set;
*swig_var_get = *gccc::tree_ssa_name_var_get;
*swig_var_set = *gccc::tree_ssa_name_var_set;
*swig_def_stmt_get = *gccc::tree_ssa_name_def_stmt_get;
*swig_def_stmt_set = *gccc::tree_ssa_name_def_stmt_set;
*swig_version_get = *gccc::tree_ssa_name_version_get;
*swig_version_set = *gccc::tree_ssa_name_version_set;
*swig_ptr_info_get = *gccc::tree_ssa_name_ptr_info_get;
*swig_ptr_info_set = *gccc::tree_ssa_name_ptr_info_set;
*swig_imm_uses_get = *gccc::tree_ssa_name_imm_uses_get;
*swig_imm_uses_set = *gccc::tree_ssa_name_imm_uses_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_ssa_name(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_ssa_name($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::phi_arg_d ##############

package gcc::phi_arg_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_imm_use_get = *gccc::phi_arg_d_imm_use_get;
*swig_imm_use_set = *gccc::phi_arg_d_imm_use_set;
*swig_def_get = *gccc::phi_arg_d_def_get;
*swig_def_set = *gccc::phi_arg_d_def_set;
*swig_locus_get = *gccc::phi_arg_d_locus_get;
*swig_locus_set = *gccc::phi_arg_d_locus_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_phi_arg_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_phi_arg_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_omp_clause ##############

package gcc::tree_omp_clause;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_omp_clause_common_get;
*swig_common_set = *gccc::tree_omp_clause_common_set;
*swig_locus_get = *gccc::tree_omp_clause_locus_get;
*swig_locus_set = *gccc::tree_omp_clause_locus_set;
*swig_code_get = *gccc::tree_omp_clause_code_get;
*swig_code_set = *gccc::tree_omp_clause_code_set;
*swig_gimple_reduction_init_get = *gccc::tree_omp_clause_gimple_reduction_init_get;
*swig_gimple_reduction_init_set = *gccc::tree_omp_clause_gimple_reduction_init_set;
*swig_gimple_reduction_merge_get = *gccc::tree_omp_clause_gimple_reduction_merge_get;
*swig_gimple_reduction_merge_set = *gccc::tree_omp_clause_gimple_reduction_merge_set;
*swig_ops_get = *gccc::tree_omp_clause_ops_get;
*swig_ops_set = *gccc::tree_omp_clause_ops_set;
*swig_subcode_get = *gccc::tree_omp_clause_subcode_get;
*swig_subcode_set = *gccc::tree_omp_clause_subcode_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_omp_clause(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_omp_clause($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_omp_clause_subcode ##############

package gcc::tree_omp_clause_subcode;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_default_kind_get = *gccc::tree_omp_clause_subcode_default_kind_get;
*swig_default_kind_set = *gccc::tree_omp_clause_subcode_default_kind_set;
*swig_schedule_kind_get = *gccc::tree_omp_clause_subcode_schedule_kind_get;
*swig_schedule_kind_set = *gccc::tree_omp_clause_subcode_schedule_kind_set;
*swig_reduction_code_get = *gccc::tree_omp_clause_subcode_reduction_code_get;
*swig_reduction_code_set = *gccc::tree_omp_clause_subcode_reduction_code_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_omp_clause_subcode(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_omp_clause_subcode($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_block ##############

package gcc::tree_block;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_block_common_get;
*swig_common_set = *gccc::tree_block_common_set;
*swig_abstract_flag_get = *gccc::tree_block_abstract_flag_get;
*swig_abstract_flag_set = *gccc::tree_block_abstract_flag_set;
*swig_block_num_get = *gccc::tree_block_block_num_get;
*swig_block_num_set = *gccc::tree_block_block_num_set;
*swig_locus_get = *gccc::tree_block_locus_get;
*swig_locus_set = *gccc::tree_block_locus_set;
*swig_vars_get = *gccc::tree_block_vars_get;
*swig_vars_set = *gccc::tree_block_vars_set;
*swig_nonlocalized_vars_get = *gccc::tree_block_nonlocalized_vars_get;
*swig_nonlocalized_vars_set = *gccc::tree_block_nonlocalized_vars_set;
*swig_subblocks_get = *gccc::tree_block_subblocks_get;
*swig_subblocks_set = *gccc::tree_block_subblocks_set;
*swig_supercontext_get = *gccc::tree_block_supercontext_get;
*swig_supercontext_set = *gccc::tree_block_supercontext_set;
*swig_abstract_origin_get = *gccc::tree_block_abstract_origin_get;
*swig_abstract_origin_set = *gccc::tree_block_abstract_origin_set;
*swig_fragment_origin_get = *gccc::tree_block_fragment_origin_get;
*swig_fragment_origin_set = *gccc::tree_block_fragment_origin_set;
*swig_fragment_chain_get = *gccc::tree_block_fragment_chain_get;
*swig_fragment_chain_set = *gccc::tree_block_fragment_chain_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_block(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_block($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_type ##############

package gcc::tree_type;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_type_common_get;
*swig_common_set = *gccc::tree_type_common_set;
*swig_values_get = *gccc::tree_type_values_get;
*swig_values_set = *gccc::tree_type_values_set;
*swig_size_get = *gccc::tree_type_size_get;
*swig_size_set = *gccc::tree_type_size_set;
*swig_size_unit_get = *gccc::tree_type_size_unit_get;
*swig_size_unit_set = *gccc::tree_type_size_unit_set;
*swig_attributes_get = *gccc::tree_type_attributes_get;
*swig_attributes_set = *gccc::tree_type_attributes_set;
*swig_uid_get = *gccc::tree_type_uid_get;
*swig_uid_set = *gccc::tree_type_uid_set;
*swig_precision_get = *gccc::tree_type_precision_get;
*swig_precision_set = *gccc::tree_type_precision_set;
*swig_no_force_blk_flag_get = *gccc::tree_type_no_force_blk_flag_get;
*swig_no_force_blk_flag_set = *gccc::tree_type_no_force_blk_flag_set;
*swig_needs_constructing_flag_get = *gccc::tree_type_needs_constructing_flag_get;
*swig_needs_constructing_flag_set = *gccc::tree_type_needs_constructing_flag_set;
*swig_transparent_aggr_flag_get = *gccc::tree_type_transparent_aggr_flag_get;
*swig_transparent_aggr_flag_set = *gccc::tree_type_transparent_aggr_flag_set;
*swig_restrict_flag_get = *gccc::tree_type_restrict_flag_get;
*swig_restrict_flag_set = *gccc::tree_type_restrict_flag_set;
*swig_contains_placeholder_bits_get = *gccc::tree_type_contains_placeholder_bits_get;
*swig_contains_placeholder_bits_set = *gccc::tree_type_contains_placeholder_bits_set;
*swig_mode_get = *gccc::tree_type_mode_get;
*swig_mode_set = *gccc::tree_type_mode_set;
*swig_string_flag_get = *gccc::tree_type_string_flag_get;
*swig_string_flag_set = *gccc::tree_type_string_flag_set;
*swig_lang_flag_0_get = *gccc::tree_type_lang_flag_0_get;
*swig_lang_flag_0_set = *gccc::tree_type_lang_flag_0_set;
*swig_lang_flag_1_get = *gccc::tree_type_lang_flag_1_get;
*swig_lang_flag_1_set = *gccc::tree_type_lang_flag_1_set;
*swig_lang_flag_2_get = *gccc::tree_type_lang_flag_2_get;
*swig_lang_flag_2_set = *gccc::tree_type_lang_flag_2_set;
*swig_lang_flag_3_get = *gccc::tree_type_lang_flag_3_get;
*swig_lang_flag_3_set = *gccc::tree_type_lang_flag_3_set;
*swig_lang_flag_4_get = *gccc::tree_type_lang_flag_4_get;
*swig_lang_flag_4_set = *gccc::tree_type_lang_flag_4_set;
*swig_lang_flag_5_get = *gccc::tree_type_lang_flag_5_get;
*swig_lang_flag_5_set = *gccc::tree_type_lang_flag_5_set;
*swig_lang_flag_6_get = *gccc::tree_type_lang_flag_6_get;
*swig_lang_flag_6_set = *gccc::tree_type_lang_flag_6_set;
*swig_align_get = *gccc::tree_type_align_get;
*swig_align_set = *gccc::tree_type_align_set;
*swig_alias_set_get = *gccc::tree_type_alias_set_get;
*swig_alias_set_set = *gccc::tree_type_alias_set_set;
*swig_pointer_to_get = *gccc::tree_type_pointer_to_get;
*swig_pointer_to_set = *gccc::tree_type_pointer_to_set;
*swig_reference_to_get = *gccc::tree_type_reference_to_get;
*swig_reference_to_set = *gccc::tree_type_reference_to_set;
*swig_name_get = *gccc::tree_type_name_get;
*swig_name_set = *gccc::tree_type_name_set;
*swig_minval_get = *gccc::tree_type_minval_get;
*swig_minval_set = *gccc::tree_type_minval_set;
*swig_maxval_get = *gccc::tree_type_maxval_get;
*swig_maxval_set = *gccc::tree_type_maxval_set;
*swig_next_variant_get = *gccc::tree_type_next_variant_get;
*swig_next_variant_set = *gccc::tree_type_next_variant_set;
*swig_main_variant_get = *gccc::tree_type_main_variant_get;
*swig_main_variant_set = *gccc::tree_type_main_variant_set;
*swig_binfo_get = *gccc::tree_type_binfo_get;
*swig_binfo_set = *gccc::tree_type_binfo_set;
*swig_context_get = *gccc::tree_type_context_get;
*swig_context_set = *gccc::tree_type_context_set;
*swig_canonical_get = *gccc::tree_type_canonical_get;
*swig_canonical_set = *gccc::tree_type_canonical_set;
*swig_lang_specific_get = *gccc::tree_type_lang_specific_get;
*swig_lang_specific_set = *gccc::tree_type_lang_specific_set;
*swig_symtab_get = *gccc::tree_type_symtab_get;
*swig_symtab_set = *gccc::tree_type_symtab_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_type(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_type($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_type_symtab ##############

package gcc::tree_type_symtab;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_address_get = *gccc::tree_type_symtab_address_get;
*swig_address_set = *gccc::tree_type_symtab_address_set;
*swig_pointer_get = *gccc::tree_type_symtab_pointer_get;
*swig_pointer_set = *gccc::tree_type_symtab_pointer_set;
*swig_die_get = *gccc::tree_type_symtab_die_get;
*swig_die_set = *gccc::tree_type_symtab_die_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_type_symtab(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_type_symtab($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_binfo ##############

package gcc::tree_binfo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_binfo_common_get;
*swig_common_set = *gccc::tree_binfo_common_set;
*swig_offset_get = *gccc::tree_binfo_offset_get;
*swig_offset_set = *gccc::tree_binfo_offset_set;
*swig_vtable_get = *gccc::tree_binfo_vtable_get;
*swig_vtable_set = *gccc::tree_binfo_vtable_set;
*swig_virtuals_get = *gccc::tree_binfo_virtuals_get;
*swig_virtuals_set = *gccc::tree_binfo_virtuals_set;
*swig_vptr_field_get = *gccc::tree_binfo_vptr_field_get;
*swig_vptr_field_set = *gccc::tree_binfo_vptr_field_set;
*swig_base_accesses_get = *gccc::tree_binfo_base_accesses_get;
*swig_base_accesses_set = *gccc::tree_binfo_base_accesses_set;
*swig_inheritance_get = *gccc::tree_binfo_inheritance_get;
*swig_inheritance_set = *gccc::tree_binfo_inheritance_set;
*swig_vtt_subvtt_get = *gccc::tree_binfo_vtt_subvtt_get;
*swig_vtt_subvtt_set = *gccc::tree_binfo_vtt_subvtt_set;
*swig_vtt_vptr_get = *gccc::tree_binfo_vtt_vptr_get;
*swig_vtt_vptr_set = *gccc::tree_binfo_vtt_vptr_set;
*swig_base_binfos_get = *gccc::tree_binfo_base_binfos_get;
*swig_base_binfos_set = *gccc::tree_binfo_base_binfos_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_binfo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_binfo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_decl_minimal ##############

package gcc::tree_decl_minimal;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_decl_minimal_common_get;
*swig_common_set = *gccc::tree_decl_minimal_common_set;
*swig_locus_get = *gccc::tree_decl_minimal_locus_get;
*swig_locus_set = *gccc::tree_decl_minimal_locus_set;
*swig_uid_get = *gccc::tree_decl_minimal_uid_get;
*swig_uid_set = *gccc::tree_decl_minimal_uid_set;
*swig_name_get = *gccc::tree_decl_minimal_name_get;
*swig_name_set = *gccc::tree_decl_minimal_name_set;
*swig_context_get = *gccc::tree_decl_minimal_context_get;
*swig_context_set = *gccc::tree_decl_minimal_context_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_decl_minimal(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_decl_minimal($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_decl_common ##############

package gcc::tree_decl_common;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_decl_common_common_get;
*swig_common_set = *gccc::tree_decl_common_common_set;
*swig_size_get = *gccc::tree_decl_common_size_get;
*swig_size_set = *gccc::tree_decl_common_size_set;
*swig_mode_get = *gccc::tree_decl_common_mode_get;
*swig_mode_set = *gccc::tree_decl_common_mode_set;
*swig_nonlocal_flag_get = *gccc::tree_decl_common_nonlocal_flag_get;
*swig_nonlocal_flag_set = *gccc::tree_decl_common_nonlocal_flag_set;
*swig_virtual_flag_get = *gccc::tree_decl_common_virtual_flag_get;
*swig_virtual_flag_set = *gccc::tree_decl_common_virtual_flag_set;
*swig_ignored_flag_get = *gccc::tree_decl_common_ignored_flag_get;
*swig_ignored_flag_set = *gccc::tree_decl_common_ignored_flag_set;
*swig_abstract_flag_get = *gccc::tree_decl_common_abstract_flag_get;
*swig_abstract_flag_set = *gccc::tree_decl_common_abstract_flag_set;
*swig_artificial_flag_get = *gccc::tree_decl_common_artificial_flag_get;
*swig_artificial_flag_set = *gccc::tree_decl_common_artificial_flag_set;
*swig_preserve_flag_get = *gccc::tree_decl_common_preserve_flag_get;
*swig_preserve_flag_set = *gccc::tree_decl_common_preserve_flag_set;
*swig_debug_expr_is_from_get = *gccc::tree_decl_common_debug_expr_is_from_get;
*swig_debug_expr_is_from_set = *gccc::tree_decl_common_debug_expr_is_from_set;
*swig_lang_flag_0_get = *gccc::tree_decl_common_lang_flag_0_get;
*swig_lang_flag_0_set = *gccc::tree_decl_common_lang_flag_0_set;
*swig_lang_flag_1_get = *gccc::tree_decl_common_lang_flag_1_get;
*swig_lang_flag_1_set = *gccc::tree_decl_common_lang_flag_1_set;
*swig_lang_flag_2_get = *gccc::tree_decl_common_lang_flag_2_get;
*swig_lang_flag_2_set = *gccc::tree_decl_common_lang_flag_2_set;
*swig_lang_flag_3_get = *gccc::tree_decl_common_lang_flag_3_get;
*swig_lang_flag_3_set = *gccc::tree_decl_common_lang_flag_3_set;
*swig_lang_flag_4_get = *gccc::tree_decl_common_lang_flag_4_get;
*swig_lang_flag_4_set = *gccc::tree_decl_common_lang_flag_4_set;
*swig_lang_flag_5_get = *gccc::tree_decl_common_lang_flag_5_get;
*swig_lang_flag_5_set = *gccc::tree_decl_common_lang_flag_5_set;
*swig_lang_flag_6_get = *gccc::tree_decl_common_lang_flag_6_get;
*swig_lang_flag_6_set = *gccc::tree_decl_common_lang_flag_6_set;
*swig_lang_flag_7_get = *gccc::tree_decl_common_lang_flag_7_get;
*swig_lang_flag_7_set = *gccc::tree_decl_common_lang_flag_7_set;
*swig_lang_flag_8_get = *gccc::tree_decl_common_lang_flag_8_get;
*swig_lang_flag_8_set = *gccc::tree_decl_common_lang_flag_8_set;
*swig_decl_flag_0_get = *gccc::tree_decl_common_decl_flag_0_get;
*swig_decl_flag_0_set = *gccc::tree_decl_common_decl_flag_0_set;
*swig_decl_flag_1_get = *gccc::tree_decl_common_decl_flag_1_get;
*swig_decl_flag_1_set = *gccc::tree_decl_common_decl_flag_1_set;
*swig_decl_flag_2_get = *gccc::tree_decl_common_decl_flag_2_get;
*swig_decl_flag_2_set = *gccc::tree_decl_common_decl_flag_2_set;
*swig_gimple_reg_flag_get = *gccc::tree_decl_common_gimple_reg_flag_get;
*swig_gimple_reg_flag_set = *gccc::tree_decl_common_gimple_reg_flag_set;
*swig_decl_by_reference_flag_get = *gccc::tree_decl_common_decl_by_reference_flag_get;
*swig_decl_by_reference_flag_set = *gccc::tree_decl_common_decl_by_reference_flag_set;
*swig_decl_restricted_flag_get = *gccc::tree_decl_common_decl_restricted_flag_get;
*swig_decl_restricted_flag_set = *gccc::tree_decl_common_decl_restricted_flag_set;
*swig_decl_read_flag_get = *gccc::tree_decl_common_decl_read_flag_get;
*swig_decl_read_flag_set = *gccc::tree_decl_common_decl_read_flag_set;
*swig_decl_nonshareable_flag_get = *gccc::tree_decl_common_decl_nonshareable_flag_get;
*swig_decl_nonshareable_flag_set = *gccc::tree_decl_common_decl_nonshareable_flag_set;
*swig_off_align_get = *gccc::tree_decl_common_off_align_get;
*swig_off_align_set = *gccc::tree_decl_common_off_align_set;
*swig_align_get = *gccc::tree_decl_common_align_get;
*swig_align_set = *gccc::tree_decl_common_align_set;
*swig_pt_uid_get = *gccc::tree_decl_common_pt_uid_get;
*swig_pt_uid_set = *gccc::tree_decl_common_pt_uid_set;
*swig_size_unit_get = *gccc::tree_decl_common_size_unit_get;
*swig_size_unit_set = *gccc::tree_decl_common_size_unit_set;
*swig_initial_get = *gccc::tree_decl_common_initial_get;
*swig_initial_set = *gccc::tree_decl_common_initial_set;
*swig_attributes_get = *gccc::tree_decl_common_attributes_get;
*swig_attributes_set = *gccc::tree_decl_common_attributes_set;
*swig_abstract_origin_get = *gccc::tree_decl_common_abstract_origin_get;
*swig_abstract_origin_set = *gccc::tree_decl_common_abstract_origin_set;
*swig_lang_specific_get = *gccc::tree_decl_common_lang_specific_get;
*swig_lang_specific_set = *gccc::tree_decl_common_lang_specific_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_decl_common(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_decl_common($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_decl_with_rtl ##############

package gcc::tree_decl_with_rtl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_decl_with_rtl_common_get;
*swig_common_set = *gccc::tree_decl_with_rtl_common_set;
*swig_rtl_get = *gccc::tree_decl_with_rtl_rtl_get;
*swig_rtl_set = *gccc::tree_decl_with_rtl_rtl_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_decl_with_rtl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_decl_with_rtl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_field_decl ##############

package gcc::tree_field_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_field_decl_common_get;
*swig_common_set = *gccc::tree_field_decl_common_set;
*swig_offset_get = *gccc::tree_field_decl_offset_get;
*swig_offset_set = *gccc::tree_field_decl_offset_set;
*swig_bit_field_type_get = *gccc::tree_field_decl_bit_field_type_get;
*swig_bit_field_type_set = *gccc::tree_field_decl_bit_field_type_set;
*swig_qualifier_get = *gccc::tree_field_decl_qualifier_get;
*swig_qualifier_set = *gccc::tree_field_decl_qualifier_set;
*swig_bit_offset_get = *gccc::tree_field_decl_bit_offset_get;
*swig_bit_offset_set = *gccc::tree_field_decl_bit_offset_set;
*swig_fcontext_get = *gccc::tree_field_decl_fcontext_get;
*swig_fcontext_set = *gccc::tree_field_decl_fcontext_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_field_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_field_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_label_decl ##############

package gcc::tree_label_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_label_decl_common_get;
*swig_common_set = *gccc::tree_label_decl_common_set;
*swig_label_decl_uid_get = *gccc::tree_label_decl_label_decl_uid_get;
*swig_label_decl_uid_set = *gccc::tree_label_decl_label_decl_uid_set;
*swig_eh_landing_pad_nr_get = *gccc::tree_label_decl_eh_landing_pad_nr_get;
*swig_eh_landing_pad_nr_set = *gccc::tree_label_decl_eh_landing_pad_nr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_label_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_label_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_result_decl ##############

package gcc::tree_result_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_result_decl_common_get;
*swig_common_set = *gccc::tree_result_decl_common_set;
*swig_ann_get = *gccc::tree_result_decl_ann_get;
*swig_ann_set = *gccc::tree_result_decl_ann_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_result_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_result_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_const_decl ##############

package gcc::tree_const_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_const_decl_common_get;
*swig_common_set = *gccc::tree_const_decl_common_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_const_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_const_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_parm_decl ##############

package gcc::tree_parm_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_parm_decl_common_get;
*swig_common_set = *gccc::tree_parm_decl_common_set;
*swig_incoming_rtl_get = *gccc::tree_parm_decl_incoming_rtl_get;
*swig_incoming_rtl_set = *gccc::tree_parm_decl_incoming_rtl_set;
*swig_ann_get = *gccc::tree_parm_decl_ann_get;
*swig_ann_set = *gccc::tree_parm_decl_ann_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_parm_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_parm_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_decl_with_vis ##############

package gcc::tree_decl_with_vis;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_decl_with_vis_common_get;
*swig_common_set = *gccc::tree_decl_with_vis_common_set;
*swig_assembler_name_get = *gccc::tree_decl_with_vis_assembler_name_get;
*swig_assembler_name_set = *gccc::tree_decl_with_vis_assembler_name_set;
*swig_section_name_get = *gccc::tree_decl_with_vis_section_name_get;
*swig_section_name_set = *gccc::tree_decl_with_vis_section_name_set;
*swig_comdat_group_get = *gccc::tree_decl_with_vis_comdat_group_get;
*swig_comdat_group_set = *gccc::tree_decl_with_vis_comdat_group_set;
*swig_defer_output_get = *gccc::tree_decl_with_vis_defer_output_get;
*swig_defer_output_set = *gccc::tree_decl_with_vis_defer_output_set;
*swig_hard_register_get = *gccc::tree_decl_with_vis_hard_register_get;
*swig_hard_register_set = *gccc::tree_decl_with_vis_hard_register_set;
*swig_thread_local_get = *gccc::tree_decl_with_vis_thread_local_get;
*swig_thread_local_set = *gccc::tree_decl_with_vis_thread_local_set;
*swig_common_flag_get = *gccc::tree_decl_with_vis_common_flag_get;
*swig_common_flag_set = *gccc::tree_decl_with_vis_common_flag_set;
*swig_in_text_section_get = *gccc::tree_decl_with_vis_in_text_section_get;
*swig_in_text_section_set = *gccc::tree_decl_with_vis_in_text_section_set;
*swig_in_constant_pool_get = *gccc::tree_decl_with_vis_in_constant_pool_get;
*swig_in_constant_pool_set = *gccc::tree_decl_with_vis_in_constant_pool_set;
*swig_dllimport_flag_get = *gccc::tree_decl_with_vis_dllimport_flag_get;
*swig_dllimport_flag_set = *gccc::tree_decl_with_vis_dllimport_flag_set;
*swig_weak_flag_get = *gccc::tree_decl_with_vis_weak_flag_get;
*swig_weak_flag_set = *gccc::tree_decl_with_vis_weak_flag_set;
*swig_seen_in_bind_expr_get = *gccc::tree_decl_with_vis_seen_in_bind_expr_get;
*swig_seen_in_bind_expr_set = *gccc::tree_decl_with_vis_seen_in_bind_expr_set;
*swig_comdat_flag_get = *gccc::tree_decl_with_vis_comdat_flag_get;
*swig_comdat_flag_set = *gccc::tree_decl_with_vis_comdat_flag_set;
*swig_visibility_get = *gccc::tree_decl_with_vis_visibility_get;
*swig_visibility_set = *gccc::tree_decl_with_vis_visibility_set;
*swig_visibility_specified_get = *gccc::tree_decl_with_vis_visibility_specified_get;
*swig_visibility_specified_set = *gccc::tree_decl_with_vis_visibility_specified_set;
*swig_tls_model_get = *gccc::tree_decl_with_vis_tls_model_get;
*swig_tls_model_set = *gccc::tree_decl_with_vis_tls_model_set;
*swig_init_priority_p_get = *gccc::tree_decl_with_vis_init_priority_p_get;
*swig_init_priority_p_set = *gccc::tree_decl_with_vis_init_priority_p_set;
*swig_shadowed_for_var_p_get = *gccc::tree_decl_with_vis_shadowed_for_var_p_get;
*swig_shadowed_for_var_p_set = *gccc::tree_decl_with_vis_shadowed_for_var_p_set;
*swig_implicit_section_name_p_get = *gccc::tree_decl_with_vis_implicit_section_name_p_get;
*swig_implicit_section_name_p_set = *gccc::tree_decl_with_vis_implicit_section_name_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_decl_with_vis(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_decl_with_vis($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_var_decl ##############

package gcc::tree_var_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_var_decl_common_get;
*swig_common_set = *gccc::tree_var_decl_common_set;
*swig_ann_get = *gccc::tree_var_decl_ann_get;
*swig_ann_set = *gccc::tree_var_decl_ann_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_var_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_var_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_decl_non_common ##############

package gcc::tree_decl_non_common;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_decl_non_common_common_get;
*swig_common_set = *gccc::tree_decl_non_common_common_set;
*swig_saved_tree_get = *gccc::tree_decl_non_common_saved_tree_get;
*swig_saved_tree_set = *gccc::tree_decl_non_common_saved_tree_set;
*swig_arguments_get = *gccc::tree_decl_non_common_arguments_get;
*swig_arguments_set = *gccc::tree_decl_non_common_arguments_set;
*swig_result_get = *gccc::tree_decl_non_common_result_get;
*swig_result_set = *gccc::tree_decl_non_common_result_set;
*swig_vindex_get = *gccc::tree_decl_non_common_vindex_get;
*swig_vindex_set = *gccc::tree_decl_non_common_vindex_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_decl_non_common(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_decl_non_common($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_function_decl ##############

package gcc::tree_function_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_function_decl_common_get;
*swig_common_set = *gccc::tree_function_decl_common_set;
*swig_f_get = *gccc::tree_function_decl_f_get;
*swig_f_set = *gccc::tree_function_decl_f_set;
*swig_personality_get = *gccc::tree_function_decl_personality_get;
*swig_personality_set = *gccc::tree_function_decl_personality_set;
*swig_function_specific_target_get = *gccc::tree_function_decl_function_specific_target_get;
*swig_function_specific_target_set = *gccc::tree_function_decl_function_specific_target_set;
*swig_function_specific_optimization_get = *gccc::tree_function_decl_function_specific_optimization_get;
*swig_function_specific_optimization_set = *gccc::tree_function_decl_function_specific_optimization_set;
*swig_function_code_get = *gccc::tree_function_decl_function_code_get;
*swig_function_code_set = *gccc::tree_function_decl_function_code_set;
*swig_built_in_class_get = *gccc::tree_function_decl_built_in_class_get;
*swig_built_in_class_set = *gccc::tree_function_decl_built_in_class_set;
*swig_static_ctor_flag_get = *gccc::tree_function_decl_static_ctor_flag_get;
*swig_static_ctor_flag_set = *gccc::tree_function_decl_static_ctor_flag_set;
*swig_static_dtor_flag_get = *gccc::tree_function_decl_static_dtor_flag_get;
*swig_static_dtor_flag_set = *gccc::tree_function_decl_static_dtor_flag_set;
*swig_uninlinable_get = *gccc::tree_function_decl_uninlinable_get;
*swig_uninlinable_set = *gccc::tree_function_decl_uninlinable_set;
*swig_possibly_inlined_get = *gccc::tree_function_decl_possibly_inlined_get;
*swig_possibly_inlined_set = *gccc::tree_function_decl_possibly_inlined_set;
*swig_novops_flag_get = *gccc::tree_function_decl_novops_flag_get;
*swig_novops_flag_set = *gccc::tree_function_decl_novops_flag_set;
*swig_returns_twice_flag_get = *gccc::tree_function_decl_returns_twice_flag_get;
*swig_returns_twice_flag_set = *gccc::tree_function_decl_returns_twice_flag_set;
*swig_malloc_flag_get = *gccc::tree_function_decl_malloc_flag_get;
*swig_malloc_flag_set = *gccc::tree_function_decl_malloc_flag_set;
*swig_operator_new_flag_get = *gccc::tree_function_decl_operator_new_flag_get;
*swig_operator_new_flag_set = *gccc::tree_function_decl_operator_new_flag_set;
*swig_declared_inline_flag_get = *gccc::tree_function_decl_declared_inline_flag_get;
*swig_declared_inline_flag_set = *gccc::tree_function_decl_declared_inline_flag_set;
*swig_regdecl_flag_get = *gccc::tree_function_decl_regdecl_flag_get;
*swig_regdecl_flag_set = *gccc::tree_function_decl_regdecl_flag_set;
*swig_no_inline_warning_flag_get = *gccc::tree_function_decl_no_inline_warning_flag_get;
*swig_no_inline_warning_flag_set = *gccc::tree_function_decl_no_inline_warning_flag_set;
*swig_no_instrument_function_entry_exit_get = *gccc::tree_function_decl_no_instrument_function_entry_exit_get;
*swig_no_instrument_function_entry_exit_set = *gccc::tree_function_decl_no_instrument_function_entry_exit_set;
*swig_no_limit_stack_get = *gccc::tree_function_decl_no_limit_stack_get;
*swig_no_limit_stack_set = *gccc::tree_function_decl_no_limit_stack_set;
*swig_disregard_inline_limits_get = *gccc::tree_function_decl_disregard_inline_limits_get;
*swig_disregard_inline_limits_set = *gccc::tree_function_decl_disregard_inline_limits_set;
*swig_pure_flag_get = *gccc::tree_function_decl_pure_flag_get;
*swig_pure_flag_set = *gccc::tree_function_decl_pure_flag_set;
*swig_looping_const_or_pure_flag_get = *gccc::tree_function_decl_looping_const_or_pure_flag_get;
*swig_looping_const_or_pure_flag_set = *gccc::tree_function_decl_looping_const_or_pure_flag_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_function_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_function_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_translation_unit_decl ##############

package gcc::tree_translation_unit_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_translation_unit_decl_common_get;
*swig_common_set = *gccc::tree_translation_unit_decl_common_set;
*swig_language_get = *gccc::tree_translation_unit_decl_language_get;
*swig_language_set = *gccc::tree_translation_unit_decl_language_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_translation_unit_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_translation_unit_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_type_decl ##############

package gcc::tree_type_decl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_type_decl_common_get;
*swig_common_set = *gccc::tree_type_decl_common_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_type_decl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_type_decl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_statement_list_node ##############

package gcc::tree_statement_list_node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_prev_get = *gccc::tree_statement_list_node_prev_get;
*swig_prev_set = *gccc::tree_statement_list_node_prev_set;
*swig_next_get = *gccc::tree_statement_list_node_next_get;
*swig_next_set = *gccc::tree_statement_list_node_next_set;
*swig_stmt_get = *gccc::tree_statement_list_node_stmt_get;
*swig_stmt_set = *gccc::tree_statement_list_node_stmt_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_statement_list_node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_statement_list_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_statement_list ##############

package gcc::tree_statement_list;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_statement_list_common_get;
*swig_common_set = *gccc::tree_statement_list_common_set;
*swig_head_get = *gccc::tree_statement_list_head_get;
*swig_head_set = *gccc::tree_statement_list_head_set;
*swig_tail_get = *gccc::tree_statement_list_tail_get;
*swig_tail_set = *gccc::tree_statement_list_tail_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_statement_list(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_statement_list($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_optimization_option ##############

package gcc::tree_optimization_option;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_optimization_option_common_get;
*swig_common_set = *gccc::tree_optimization_option_common_set;
*swig_opts_get = *gccc::tree_optimization_option_opts_get;
*swig_opts_set = *gccc::tree_optimization_option_opts_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_optimization_option(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_optimization_option($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_target_option ##############

package gcc::tree_target_option;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_target_option_common_get;
*swig_common_set = *gccc::tree_target_option_common_set;
*swig_opts_get = *gccc::tree_target_option_opts_get;
*swig_opts_set = *gccc::tree_target_option_opts_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_target_option(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_target_option($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_node ##############

package gcc::tree_node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::tree_node_base_get;
*swig_base_set = *gccc::tree_node_base_set;
*swig_common_get = *gccc::tree_node_common_get;
*swig_common_set = *gccc::tree_node_common_set;
*swig_int_cst_get = *gccc::tree_node_int_cst_get;
*swig_int_cst_set = *gccc::tree_node_int_cst_set;
*swig_real_cst_get = *gccc::tree_node_real_cst_get;
*swig_real_cst_set = *gccc::tree_node_real_cst_set;
*swig_fixed_cst_get = *gccc::tree_node_fixed_cst_get;
*swig_fixed_cst_set = *gccc::tree_node_fixed_cst_set;
*swig_vector_get = *gccc::tree_node_vector_get;
*swig_vector_set = *gccc::tree_node_vector_set;
*swig_string_get = *gccc::tree_node_string_get;
*swig_string_set = *gccc::tree_node_string_set;
*swig_identifier_get = *gccc::tree_node_identifier_get;
*swig_identifier_set = *gccc::tree_node_identifier_set;
*swig_decl_minimal_get = *gccc::tree_node_decl_minimal_get;
*swig_decl_minimal_set = *gccc::tree_node_decl_minimal_set;
*swig_decl_common_get = *gccc::tree_node_decl_common_get;
*swig_decl_common_set = *gccc::tree_node_decl_common_set;
*swig_decl_with_rtl_get = *gccc::tree_node_decl_with_rtl_get;
*swig_decl_with_rtl_set = *gccc::tree_node_decl_with_rtl_set;
*swig_decl_non_common_get = *gccc::tree_node_decl_non_common_get;
*swig_decl_non_common_set = *gccc::tree_node_decl_non_common_set;
*swig_parm_decl_get = *gccc::tree_node_parm_decl_get;
*swig_parm_decl_set = *gccc::tree_node_parm_decl_set;
*swig_decl_with_vis_get = *gccc::tree_node_decl_with_vis_get;
*swig_decl_with_vis_set = *gccc::tree_node_decl_with_vis_set;
*swig_var_decl_get = *gccc::tree_node_var_decl_get;
*swig_var_decl_set = *gccc::tree_node_var_decl_set;
*swig_field_decl_get = *gccc::tree_node_field_decl_get;
*swig_field_decl_set = *gccc::tree_node_field_decl_set;
*swig_label_decl_get = *gccc::tree_node_label_decl_get;
*swig_label_decl_set = *gccc::tree_node_label_decl_set;
*swig_result_decl_get = *gccc::tree_node_result_decl_get;
*swig_result_decl_set = *gccc::tree_node_result_decl_set;
*swig_const_decl_get = *gccc::tree_node_const_decl_get;
*swig_const_decl_set = *gccc::tree_node_const_decl_set;
*swig_type_decl_get = *gccc::tree_node_type_decl_get;
*swig_type_decl_set = *gccc::tree_node_type_decl_set;
*swig_function_decl_get = *gccc::tree_node_function_decl_get;
*swig_function_decl_set = *gccc::tree_node_function_decl_set;
*swig_translation_unit_decl_get = *gccc::tree_node_translation_unit_decl_get;
*swig_translation_unit_decl_set = *gccc::tree_node_translation_unit_decl_set;
*swig_type_get = *gccc::tree_node_type_get;
*swig_type_set = *gccc::tree_node_type_set;
*swig_list_get = *gccc::tree_node_list_get;
*swig_list_set = *gccc::tree_node_list_set;
*swig_vec_get = *gccc::tree_node_vec_get;
*swig_vec_set = *gccc::tree_node_vec_set;
*swig_exp_get = *gccc::tree_node_exp_get;
*swig_exp_set = *gccc::tree_node_exp_set;
*swig_ssa_name_get = *gccc::tree_node_ssa_name_get;
*swig_ssa_name_set = *gccc::tree_node_ssa_name_set;
*swig_block_get = *gccc::tree_node_block_get;
*swig_block_set = *gccc::tree_node_block_set;
*swig_binfo_get = *gccc::tree_node_binfo_get;
*swig_binfo_set = *gccc::tree_node_binfo_set;
*swig_stmt_list_get = *gccc::tree_node_stmt_list_get;
*swig_stmt_list_set = *gccc::tree_node_stmt_list_set;
*swig_constructor_get = *gccc::tree_node_constructor_get;
*swig_constructor_set = *gccc::tree_node_constructor_set;
*swig_omp_clause_get = *gccc::tree_node_omp_clause_get;
*swig_omp_clause_set = *gccc::tree_node_omp_clause_set;
*swig_optimization_get = *gccc::tree_node_optimization_get;
*swig_optimization_set = *gccc::tree_node_optimization_set;
*swig_target_option_get = *gccc::tree_node_target_option_get;
*swig_target_option_set = *gccc::tree_node_target_option_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::attribute_spec ##############

package gcc::attribute_spec;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *gccc::attribute_spec_name_get;
*swig_name_set = *gccc::attribute_spec_name_set;
*swig_min_length_get = *gccc::attribute_spec_min_length_get;
*swig_min_length_set = *gccc::attribute_spec_min_length_set;
*swig_max_length_get = *gccc::attribute_spec_max_length_get;
*swig_max_length_set = *gccc::attribute_spec_max_length_set;
*swig_decl_required_get = *gccc::attribute_spec_decl_required_get;
*swig_decl_required_set = *gccc::attribute_spec_decl_required_set;
*swig_type_required_get = *gccc::attribute_spec_type_required_get;
*swig_type_required_set = *gccc::attribute_spec_type_required_set;
*swig_function_type_required_get = *gccc::attribute_spec_function_type_required_get;
*swig_function_type_required_set = *gccc::attribute_spec_function_type_required_set;
*swig_handler_get = *gccc::attribute_spec_handler_get;
*swig_handler_set = *gccc::attribute_spec_handler_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_attribute_spec(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_attribute_spec($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::record_layout_info_s ##############

package gcc::record_layout_info_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_t_get = *gccc::record_layout_info_s_t_get;
*swig_t_set = *gccc::record_layout_info_s_t_set;
*swig_offset_get = *gccc::record_layout_info_s_offset_get;
*swig_offset_set = *gccc::record_layout_info_s_offset_set;
*swig_offset_align_get = *gccc::record_layout_info_s_offset_align_get;
*swig_offset_align_set = *gccc::record_layout_info_s_offset_align_set;
*swig_bitpos_get = *gccc::record_layout_info_s_bitpos_get;
*swig_bitpos_set = *gccc::record_layout_info_s_bitpos_set;
*swig_record_align_get = *gccc::record_layout_info_s_record_align_get;
*swig_record_align_set = *gccc::record_layout_info_s_record_align_set;
*swig_unpacked_align_get = *gccc::record_layout_info_s_unpacked_align_get;
*swig_unpacked_align_set = *gccc::record_layout_info_s_unpacked_align_set;
*swig_prev_field_get = *gccc::record_layout_info_s_prev_field_get;
*swig_prev_field_set = *gccc::record_layout_info_s_prev_field_set;
*swig_pending_statics_get = *gccc::record_layout_info_s_pending_statics_get;
*swig_pending_statics_set = *gccc::record_layout_info_s_pending_statics_set;
*swig_remaining_in_alignment_get = *gccc::record_layout_info_s_remaining_in_alignment_get;
*swig_remaining_in_alignment_set = *gccc::record_layout_info_s_remaining_in_alignment_set;
*swig_packed_maybe_necessary_get = *gccc::record_layout_info_s_packed_maybe_necessary_get;
*swig_packed_maybe_necessary_set = *gccc::record_layout_info_s_packed_maybe_necessary_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_record_layout_info_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_record_layout_info_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::function_args_iterator ##############

package gcc::function_args_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::function_args_iterator_next_get;
*swig_next_set = *gccc::function_args_iterator_next_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_function_args_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_function_args_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_map_base ##############

package gcc::tree_map_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_from_get = *gccc::tree_map_base_from_get;
*swig_from_set = *gccc::tree_map_base_from_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_map_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_map_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_map ##############

package gcc::tree_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::tree_map_base_get;
*swig_base_set = *gccc::tree_map_base_set;
*swig_hash_get = *gccc::tree_map_hash_get;
*swig_hash_set = *gccc::tree_map_hash_set;
*swig_to_get = *gccc::tree_map_to_get;
*swig_to_set = *gccc::tree_map_to_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_decl_map ##############

package gcc::tree_decl_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::tree_decl_map_base_get;
*swig_base_set = *gccc::tree_decl_map_base_set;
*swig_to_get = *gccc::tree_decl_map_to_get;
*swig_to_set = *gccc::tree_decl_map_to_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_decl_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_decl_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_int_map ##############

package gcc::tree_int_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::tree_int_map_base_get;
*swig_base_set = *gccc::tree_int_map_base_set;
*swig_to_get = *gccc::tree_int_map_to_get;
*swig_to_set = *gccc::tree_int_map_to_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_int_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_int_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_priority_map ##############

package gcc::tree_priority_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::tree_priority_map_base_get;
*swig_base_set = *gccc::tree_priority_map_base_set;
*swig_init_get = *gccc::tree_priority_map_init_get;
*swig_init_set = *gccc::tree_priority_map_init_set;
*swig_fini_get = *gccc::tree_priority_map_fini_get;
*swig_fini_set = *gccc::tree_priority_map_fini_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_priority_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_priority_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::call_expr_arg_iterator ##############

package gcc::call_expr_arg_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_t_get = *gccc::call_expr_arg_iterator_t_get;
*swig_t_set = *gccc::call_expr_arg_iterator_t_set;
*swig_n_get = *gccc::call_expr_arg_iterator_n_get;
*swig_n_set = *gccc::call_expr_arg_iterator_n_set;
*swig_i_get = *gccc::call_expr_arg_iterator_i_get;
*swig_i_set = *gccc::call_expr_arg_iterator_i_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_call_expr_arg_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_call_expr_arg_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::const_call_expr_arg_iterator ##############

package gcc::const_call_expr_arg_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_t_get = *gccc::const_call_expr_arg_iterator_t_get;
*swig_t_set = *gccc::const_call_expr_arg_iterator_t_set;
*swig_n_get = *gccc::const_call_expr_arg_iterator_n_get;
*swig_n_set = *gccc::const_call_expr_arg_iterator_n_set;
*swig_i_get = *gccc::const_call_expr_arg_iterator_i_get;
*swig_i_set = *gccc::const_call_expr_arg_iterator_i_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_const_call_expr_arg_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_const_call_expr_arg_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::configure_default_options_t ##############

package gcc::configure_default_options_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *gccc::configure_default_options_t_name_get;
*swig_name_set = *gccc::configure_default_options_t_name_set;
*swig_value_get = *gccc::configure_default_options_t_value_get;
*swig_value_set = *gccc::configure_default_options_t_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_configure_default_options_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_configure_default_options_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ggc_root_tab ##############

package gcc::ggc_root_tab;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::ggc_root_tab_base_get;
*swig_base_set = *gccc::ggc_root_tab_base_set;
*swig_nelt_get = *gccc::ggc_root_tab_nelt_get;
*swig_nelt_set = *gccc::ggc_root_tab_nelt_set;
*swig_stride_get = *gccc::ggc_root_tab_stride_get;
*swig_stride_set = *gccc::ggc_root_tab_stride_set;
*swig_cb_get = *gccc::ggc_root_tab_cb_get;
*swig_cb_set = *gccc::ggc_root_tab_cb_set;
*swig_pchw_get = *gccc::ggc_root_tab_pchw_get;
*swig_pchw_set = *gccc::ggc_root_tab_pchw_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ggc_root_tab(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ggc_root_tab($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ggc_cache_tab ##############

package gcc::ggc_cache_tab;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::ggc_cache_tab_base_get;
*swig_base_set = *gccc::ggc_cache_tab_base_set;
*swig_nelt_get = *gccc::ggc_cache_tab_nelt_get;
*swig_nelt_set = *gccc::ggc_cache_tab_nelt_set;
*swig_stride_get = *gccc::ggc_cache_tab_stride_get;
*swig_stride_set = *gccc::ggc_cache_tab_stride_set;
*swig_cb_get = *gccc::ggc_cache_tab_cb_get;
*swig_cb_set = *gccc::ggc_cache_tab_cb_set;
*swig_pchw_get = *gccc::ggc_cache_tab_pchw_get;
*swig_pchw_set = *gccc::ggc_cache_tab_pchw_set;
*swig_marked_p_get = *gccc::ggc_cache_tab_marked_p_get;
*swig_marked_p_set = *gccc::ggc_cache_tab_marked_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ggc_cache_tab(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ggc_cache_tab($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_char_base ##############

package gcc::VEC_char_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_char_base_num_get;
*swig_num_set = *gccc::VEC_char_base_num_set;
*swig_alloc_get = *gccc::VEC_char_base_alloc_get;
*swig_alloc_set = *gccc::VEC_char_base_alloc_set;
*swig_vec_get = *gccc::VEC_char_base_vec_get;
*swig_vec_set = *gccc::VEC_char_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_char_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_char_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_char_none ##############

package gcc::VEC_char_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_char_none_base_get;
*swig_base_set = *gccc::VEC_char_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_char_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_char_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_char_heap ##############

package gcc::VEC_char_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_char_heap_base_get;
*swig_base_set = *gccc::VEC_char_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_char_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_char_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_uchar_base ##############

package gcc::VEC_uchar_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_uchar_base_num_get;
*swig_num_set = *gccc::VEC_uchar_base_num_set;
*swig_alloc_get = *gccc::VEC_uchar_base_alloc_get;
*swig_alloc_set = *gccc::VEC_uchar_base_alloc_set;
*swig_vec_get = *gccc::VEC_uchar_base_vec_get;
*swig_vec_set = *gccc::VEC_uchar_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_uchar_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_uchar_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_uchar_none ##############

package gcc::VEC_uchar_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_uchar_none_base_get;
*swig_base_set = *gccc::VEC_uchar_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_uchar_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_uchar_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_uchar_heap ##############

package gcc::VEC_uchar_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_uchar_heap_base_get;
*swig_base_set = *gccc::VEC_uchar_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_uchar_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_uchar_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_uchar_gc ##############

package gcc::VEC_uchar_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_uchar_gc_base_get;
*swig_base_set = *gccc::VEC_uchar_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_uchar_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_uchar_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_int_base ##############

package gcc::VEC_int_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_int_base_num_get;
*swig_num_set = *gccc::VEC_int_base_num_set;
*swig_alloc_get = *gccc::VEC_int_base_alloc_get;
*swig_alloc_set = *gccc::VEC_int_base_alloc_set;
*swig_vec_get = *gccc::VEC_int_base_vec_get;
*swig_vec_set = *gccc::VEC_int_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_int_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_int_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_int_none ##############

package gcc::VEC_int_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_int_none_base_get;
*swig_base_set = *gccc::VEC_int_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_int_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_int_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_int_heap ##############

package gcc::VEC_int_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_int_heap_base_get;
*swig_base_set = *gccc::VEC_int_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_int_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_int_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_unsigned_base ##############

package gcc::VEC_unsigned_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_unsigned_base_num_get;
*swig_num_set = *gccc::VEC_unsigned_base_num_set;
*swig_alloc_get = *gccc::VEC_unsigned_base_alloc_get;
*swig_alloc_set = *gccc::VEC_unsigned_base_alloc_set;
*swig_vec_get = *gccc::VEC_unsigned_base_vec_get;
*swig_vec_set = *gccc::VEC_unsigned_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_unsigned_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_unsigned_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_unsigned_none ##############

package gcc::VEC_unsigned_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_unsigned_none_base_get;
*swig_base_set = *gccc::VEC_unsigned_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_unsigned_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_unsigned_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_unsigned_heap ##############

package gcc::VEC_unsigned_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_unsigned_heap_base_get;
*swig_base_set = *gccc::VEC_unsigned_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_unsigned_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_unsigned_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::stringop_strategy_t ##############

package gcc::stringop_strategy_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_max_get = *gccc::stringop_strategy_t_max_get;
*swig_max_set = *gccc::stringop_strategy_t_max_set;
*swig_alg_get = *gccc::stringop_strategy_t_alg_get;
*swig_alg_set = *gccc::stringop_strategy_t_alg_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_stringop_strategy_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_stringop_strategy_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::stringop_algs ##############

package gcc::stringop_algs;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_unknown_size_get = *gccc::stringop_algs_unknown_size_get;
*swig_unknown_size_set = *gccc::stringop_algs_unknown_size_set;
*swig_size_get = *gccc::stringop_algs_size_get;
*swig_size_set = *gccc::stringop_algs_size_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_stringop_algs(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_stringop_algs($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::processor_costs ##############

package gcc::processor_costs;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_add_get = *gccc::processor_costs_add_get;
*swig_add_set = *gccc::processor_costs_add_set;
*swig_lea_get = *gccc::processor_costs_lea_get;
*swig_lea_set = *gccc::processor_costs_lea_set;
*swig_shift_var_get = *gccc::processor_costs_shift_var_get;
*swig_shift_var_set = *gccc::processor_costs_shift_var_set;
*swig_shift_const_get = *gccc::processor_costs_shift_const_get;
*swig_shift_const_set = *gccc::processor_costs_shift_const_set;
*swig_mult_init_get = *gccc::processor_costs_mult_init_get;
*swig_mult_init_set = *gccc::processor_costs_mult_init_set;
*swig_mult_bit_get = *gccc::processor_costs_mult_bit_get;
*swig_mult_bit_set = *gccc::processor_costs_mult_bit_set;
*swig_divide_get = *gccc::processor_costs_divide_get;
*swig_divide_set = *gccc::processor_costs_divide_set;
*swig_movsx_get = *gccc::processor_costs_movsx_get;
*swig_movsx_set = *gccc::processor_costs_movsx_set;
*swig_movzx_get = *gccc::processor_costs_movzx_get;
*swig_movzx_set = *gccc::processor_costs_movzx_set;
*swig_large_insn_get = *gccc::processor_costs_large_insn_get;
*swig_large_insn_set = *gccc::processor_costs_large_insn_set;
*swig_move_ratio_get = *gccc::processor_costs_move_ratio_get;
*swig_move_ratio_set = *gccc::processor_costs_move_ratio_set;
*swig_movzbl_load_get = *gccc::processor_costs_movzbl_load_get;
*swig_movzbl_load_set = *gccc::processor_costs_movzbl_load_set;
*swig_int_load_get = *gccc::processor_costs_int_load_get;
*swig_int_load_set = *gccc::processor_costs_int_load_set;
*swig_int_store_get = *gccc::processor_costs_int_store_get;
*swig_int_store_set = *gccc::processor_costs_int_store_set;
*swig_fp_move_get = *gccc::processor_costs_fp_move_get;
*swig_fp_move_set = *gccc::processor_costs_fp_move_set;
*swig_fp_load_get = *gccc::processor_costs_fp_load_get;
*swig_fp_load_set = *gccc::processor_costs_fp_load_set;
*swig_fp_store_get = *gccc::processor_costs_fp_store_get;
*swig_fp_store_set = *gccc::processor_costs_fp_store_set;
*swig_mmx_move_get = *gccc::processor_costs_mmx_move_get;
*swig_mmx_move_set = *gccc::processor_costs_mmx_move_set;
*swig_mmx_load_get = *gccc::processor_costs_mmx_load_get;
*swig_mmx_load_set = *gccc::processor_costs_mmx_load_set;
*swig_mmx_store_get = *gccc::processor_costs_mmx_store_get;
*swig_mmx_store_set = *gccc::processor_costs_mmx_store_set;
*swig_sse_move_get = *gccc::processor_costs_sse_move_get;
*swig_sse_move_set = *gccc::processor_costs_sse_move_set;
*swig_sse_load_get = *gccc::processor_costs_sse_load_get;
*swig_sse_load_set = *gccc::processor_costs_sse_load_set;
*swig_sse_store_get = *gccc::processor_costs_sse_store_get;
*swig_sse_store_set = *gccc::processor_costs_sse_store_set;
*swig_mmxsse_to_integer_get = *gccc::processor_costs_mmxsse_to_integer_get;
*swig_mmxsse_to_integer_set = *gccc::processor_costs_mmxsse_to_integer_set;
*swig_l1_cache_size_get = *gccc::processor_costs_l1_cache_size_get;
*swig_l1_cache_size_set = *gccc::processor_costs_l1_cache_size_set;
*swig_l2_cache_size_get = *gccc::processor_costs_l2_cache_size_get;
*swig_l2_cache_size_set = *gccc::processor_costs_l2_cache_size_set;
*swig_prefetch_block_get = *gccc::processor_costs_prefetch_block_get;
*swig_prefetch_block_set = *gccc::processor_costs_prefetch_block_set;
*swig_simultaneous_prefetches_get = *gccc::processor_costs_simultaneous_prefetches_get;
*swig_simultaneous_prefetches_set = *gccc::processor_costs_simultaneous_prefetches_set;
*swig_branch_cost_get = *gccc::processor_costs_branch_cost_get;
*swig_branch_cost_set = *gccc::processor_costs_branch_cost_set;
*swig_fadd_get = *gccc::processor_costs_fadd_get;
*swig_fadd_set = *gccc::processor_costs_fadd_set;
*swig_fmul_get = *gccc::processor_costs_fmul_get;
*swig_fmul_set = *gccc::processor_costs_fmul_set;
*swig_fdiv_get = *gccc::processor_costs_fdiv_get;
*swig_fdiv_set = *gccc::processor_costs_fdiv_set;
*swig_fabs_get = *gccc::processor_costs_fabs_get;
*swig_fabs_set = *gccc::processor_costs_fabs_set;
*swig_fchs_get = *gccc::processor_costs_fchs_get;
*swig_fchs_set = *gccc::processor_costs_fchs_set;
*swig_fsqrt_get = *gccc::processor_costs_fsqrt_get;
*swig_fsqrt_set = *gccc::processor_costs_fsqrt_set;
*swig_memcpy_get = *gccc::processor_costs_memcpy_get;
*swig_memcpy_set = *gccc::processor_costs_memcpy_set;
*swig_memset_get = *gccc::processor_costs_memset_get;
*swig_memset_set = *gccc::processor_costs_memset_set;
*swig_scalar_stmt_cost_get = *gccc::processor_costs_scalar_stmt_cost_get;
*swig_scalar_stmt_cost_set = *gccc::processor_costs_scalar_stmt_cost_set;
*swig_scalar_load_cost_get = *gccc::processor_costs_scalar_load_cost_get;
*swig_scalar_load_cost_set = *gccc::processor_costs_scalar_load_cost_set;
*swig_scalar_store_cost_get = *gccc::processor_costs_scalar_store_cost_get;
*swig_scalar_store_cost_set = *gccc::processor_costs_scalar_store_cost_set;
*swig_vec_stmt_cost_get = *gccc::processor_costs_vec_stmt_cost_get;
*swig_vec_stmt_cost_set = *gccc::processor_costs_vec_stmt_cost_set;
*swig_vec_to_scalar_cost_get = *gccc::processor_costs_vec_to_scalar_cost_get;
*swig_vec_to_scalar_cost_set = *gccc::processor_costs_vec_to_scalar_cost_set;
*swig_scalar_to_vec_cost_get = *gccc::processor_costs_scalar_to_vec_cost_get;
*swig_scalar_to_vec_cost_set = *gccc::processor_costs_scalar_to_vec_cost_set;
*swig_vec_align_load_cost_get = *gccc::processor_costs_vec_align_load_cost_get;
*swig_vec_align_load_cost_set = *gccc::processor_costs_vec_align_load_cost_set;
*swig_vec_unalign_load_cost_get = *gccc::processor_costs_vec_unalign_load_cost_get;
*swig_vec_unalign_load_cost_set = *gccc::processor_costs_vec_unalign_load_cost_set;
*swig_vec_store_cost_get = *gccc::processor_costs_vec_store_cost_get;
*swig_vec_store_cost_set = *gccc::processor_costs_vec_store_cost_set;
*swig_cond_taken_branch_cost_get = *gccc::processor_costs_cond_taken_branch_cost_get;
*swig_cond_taken_branch_cost_set = *gccc::processor_costs_cond_taken_branch_cost_set;
*swig_cond_not_taken_branch_cost_get = *gccc::processor_costs_cond_not_taken_branch_cost_get;
*swig_cond_not_taken_branch_cost_set = *gccc::processor_costs_cond_not_taken_branch_cost_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_processor_costs(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_processor_costs($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::CUMULATIVE_ARGS ##############

package gcc::CUMULATIVE_ARGS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_words_get = *gccc::CUMULATIVE_ARGS_words_get;
*swig_words_set = *gccc::CUMULATIVE_ARGS_words_set;
*swig_nregs_get = *gccc::CUMULATIVE_ARGS_nregs_get;
*swig_nregs_set = *gccc::CUMULATIVE_ARGS_nregs_set;
*swig_regno_get = *gccc::CUMULATIVE_ARGS_regno_get;
*swig_regno_set = *gccc::CUMULATIVE_ARGS_regno_set;
*swig_fastcall_get = *gccc::CUMULATIVE_ARGS_fastcall_get;
*swig_fastcall_set = *gccc::CUMULATIVE_ARGS_fastcall_set;
*swig_sse_words_get = *gccc::CUMULATIVE_ARGS_sse_words_get;
*swig_sse_words_set = *gccc::CUMULATIVE_ARGS_sse_words_set;
*swig_sse_nregs_get = *gccc::CUMULATIVE_ARGS_sse_nregs_get;
*swig_sse_nregs_set = *gccc::CUMULATIVE_ARGS_sse_nregs_set;
*swig_warn_avx_get = *gccc::CUMULATIVE_ARGS_warn_avx_get;
*swig_warn_avx_set = *gccc::CUMULATIVE_ARGS_warn_avx_set;
*swig_warn_sse_get = *gccc::CUMULATIVE_ARGS_warn_sse_get;
*swig_warn_sse_set = *gccc::CUMULATIVE_ARGS_warn_sse_set;
*swig_warn_mmx_get = *gccc::CUMULATIVE_ARGS_warn_mmx_get;
*swig_warn_mmx_set = *gccc::CUMULATIVE_ARGS_warn_mmx_set;
*swig_sse_regno_get = *gccc::CUMULATIVE_ARGS_sse_regno_get;
*swig_sse_regno_set = *gccc::CUMULATIVE_ARGS_sse_regno_set;
*swig_mmx_words_get = *gccc::CUMULATIVE_ARGS_mmx_words_get;
*swig_mmx_words_set = *gccc::CUMULATIVE_ARGS_mmx_words_set;
*swig_mmx_nregs_get = *gccc::CUMULATIVE_ARGS_mmx_nregs_get;
*swig_mmx_nregs_set = *gccc::CUMULATIVE_ARGS_mmx_nregs_set;
*swig_mmx_regno_get = *gccc::CUMULATIVE_ARGS_mmx_regno_get;
*swig_mmx_regno_set = *gccc::CUMULATIVE_ARGS_mmx_regno_set;
*swig_maybe_vaarg_get = *gccc::CUMULATIVE_ARGS_maybe_vaarg_get;
*swig_maybe_vaarg_set = *gccc::CUMULATIVE_ARGS_maybe_vaarg_set;
*swig_caller_get = *gccc::CUMULATIVE_ARGS_caller_get;
*swig_caller_set = *gccc::CUMULATIVE_ARGS_caller_set;
*swig_float_in_sse_get = *gccc::CUMULATIVE_ARGS_float_in_sse_get;
*swig_float_in_sse_set = *gccc::CUMULATIVE_ARGS_float_in_sse_set;
*swig_call_abi_get = *gccc::CUMULATIVE_ARGS_call_abi_get;
*swig_call_abi_set = *gccc::CUMULATIVE_ARGS_call_abi_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_CUMULATIVE_ARGS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_CUMULATIVE_ARGS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::machine_frame_state ##############

package gcc::machine_frame_state;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_cfa_reg_get = *gccc::machine_frame_state_cfa_reg_get;
*swig_cfa_reg_set = *gccc::machine_frame_state_cfa_reg_set;
*swig_cfa_offset_get = *gccc::machine_frame_state_cfa_offset_get;
*swig_cfa_offset_set = *gccc::machine_frame_state_cfa_offset_set;
*swig_sp_offset_get = *gccc::machine_frame_state_sp_offset_get;
*swig_sp_offset_set = *gccc::machine_frame_state_sp_offset_set;
*swig_fp_offset_get = *gccc::machine_frame_state_fp_offset_get;
*swig_fp_offset_set = *gccc::machine_frame_state_fp_offset_set;
*swig_red_zone_offset_get = *gccc::machine_frame_state_red_zone_offset_get;
*swig_red_zone_offset_set = *gccc::machine_frame_state_red_zone_offset_set;
*swig_sp_valid_get = *gccc::machine_frame_state_sp_valid_get;
*swig_sp_valid_set = *gccc::machine_frame_state_sp_valid_set;
*swig_fp_valid_get = *gccc::machine_frame_state_fp_valid_get;
*swig_fp_valid_set = *gccc::machine_frame_state_fp_valid_set;
*swig_drap_valid_get = *gccc::machine_frame_state_drap_valid_get;
*swig_drap_valid_set = *gccc::machine_frame_state_drap_valid_set;
*swig_realigned_get = *gccc::machine_frame_state_realigned_get;
*swig_realigned_set = *gccc::machine_frame_state_realigned_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_machine_frame_state(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_machine_frame_state($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::machine_function ##############

package gcc::machine_function;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_stack_locals_get = *gccc::machine_function_stack_locals_get;
*swig_stack_locals_set = *gccc::machine_function_stack_locals_set;
*swig_some_ld_name_get = *gccc::machine_function_some_ld_name_get;
*swig_some_ld_name_set = *gccc::machine_function_some_ld_name_set;
*swig_varargs_gpr_size_get = *gccc::machine_function_varargs_gpr_size_get;
*swig_varargs_gpr_size_set = *gccc::machine_function_varargs_gpr_size_set;
*swig_varargs_fpr_size_get = *gccc::machine_function_varargs_fpr_size_get;
*swig_varargs_fpr_size_set = *gccc::machine_function_varargs_fpr_size_set;
*swig_optimize_mode_switching_get = *gccc::machine_function_optimize_mode_switching_get;
*swig_optimize_mode_switching_set = *gccc::machine_function_optimize_mode_switching_set;
*swig_use_fast_prologue_epilogue_nregs_get = *gccc::machine_function_use_fast_prologue_epilogue_nregs_get;
*swig_use_fast_prologue_epilogue_nregs_set = *gccc::machine_function_use_fast_prologue_epilogue_nregs_set;
*swig_split_stack_varargs_pointer_get = *gccc::machine_function_split_stack_varargs_pointer_get;
*swig_split_stack_varargs_pointer_set = *gccc::machine_function_split_stack_varargs_pointer_set;
*swig_call_abi_get = *gccc::machine_function_call_abi_get;
*swig_call_abi_set = *gccc::machine_function_call_abi_set;
*swig_accesses_prev_frame_get = *gccc::machine_function_accesses_prev_frame_get;
*swig_accesses_prev_frame_set = *gccc::machine_function_accesses_prev_frame_set;
*swig_needs_cld_get = *gccc::machine_function_needs_cld_get;
*swig_needs_cld_set = *gccc::machine_function_needs_cld_set;
*swig_use_fast_prologue_epilogue_get = *gccc::machine_function_use_fast_prologue_epilogue_get;
*swig_use_fast_prologue_epilogue_set = *gccc::machine_function_use_fast_prologue_epilogue_set;
*swig_tls_descriptor_call_expanded_p_get = *gccc::machine_function_tls_descriptor_call_expanded_p_get;
*swig_tls_descriptor_call_expanded_p_set = *gccc::machine_function_tls_descriptor_call_expanded_p_set;
*swig_static_chain_on_stack_get = *gccc::machine_function_static_chain_on_stack_get;
*swig_static_chain_on_stack_set = *gccc::machine_function_static_chain_on_stack_set;
*swig_caller_pass_avx256_p_get = *gccc::machine_function_caller_pass_avx256_p_get;
*swig_caller_pass_avx256_p_set = *gccc::machine_function_caller_pass_avx256_p_set;
*swig_caller_return_avx256_p_get = *gccc::machine_function_caller_return_avx256_p_get;
*swig_caller_return_avx256_p_set = *gccc::machine_function_caller_return_avx256_p_set;
*swig_callee_pass_avx256_p_get = *gccc::machine_function_callee_pass_avx256_p_get;
*swig_callee_pass_avx256_p_set = *gccc::machine_function_callee_pass_avx256_p_set;
*swig_callee_return_avx256_p_get = *gccc::machine_function_callee_return_avx256_p_get;
*swig_callee_return_avx256_p_set = *gccc::machine_function_callee_return_avx256_p_set;
*swig_rescan_vzeroupper_p_get = *gccc::machine_function_rescan_vzeroupper_p_get;
*swig_rescan_vzeroupper_p_set = *gccc::machine_function_rescan_vzeroupper_p_set;
*swig_fs_get = *gccc::machine_function_fs_get;
*swig_fs_set = *gccc::machine_function_fs_set;
*swig_seh_get = *gccc::machine_function_seh_get;
*swig_seh_set = *gccc::machine_function_seh_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_machine_function(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_machine_function($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::hard_reg_set_iterator ##############

package gcc::hard_reg_set_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_pelt_get = *gccc::hard_reg_set_iterator_pelt_get;
*swig_pelt_set = *gccc::hard_reg_set_iterator_pelt_set;
*swig_length_get = *gccc::hard_reg_set_iterator_length_get;
*swig_length_set = *gccc::hard_reg_set_iterator_length_set;
*swig_word_no_get = *gccc::hard_reg_set_iterator_word_no_get;
*swig_word_no_set = *gccc::hard_reg_set_iterator_word_no_set;
*swig_bits_get = *gccc::hard_reg_set_iterator_bits_get;
*swig_bits_set = *gccc::hard_reg_set_iterator_bits_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_hard_reg_set_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_hard_reg_set_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::target_hard_regs ##############

package gcc::target_hard_regs;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_fixed_regs_get = *gccc::target_hard_regs_x_fixed_regs_get;
*swig_x_fixed_regs_set = *gccc::target_hard_regs_x_fixed_regs_set;
*swig_x_fixed_reg_set_get = *gccc::target_hard_regs_x_fixed_reg_set_get;
*swig_x_fixed_reg_set_set = *gccc::target_hard_regs_x_fixed_reg_set_set;
*swig_x_call_used_regs_get = *gccc::target_hard_regs_x_call_used_regs_get;
*swig_x_call_used_regs_set = *gccc::target_hard_regs_x_call_used_regs_set;
*swig_x_call_really_used_regs_get = *gccc::target_hard_regs_x_call_really_used_regs_get;
*swig_x_call_really_used_regs_set = *gccc::target_hard_regs_x_call_really_used_regs_set;
*swig_x_call_used_reg_set_get = *gccc::target_hard_regs_x_call_used_reg_set_get;
*swig_x_call_used_reg_set_set = *gccc::target_hard_regs_x_call_used_reg_set_set;
*swig_x_call_fixed_reg_set_get = *gccc::target_hard_regs_x_call_fixed_reg_set_get;
*swig_x_call_fixed_reg_set_set = *gccc::target_hard_regs_x_call_fixed_reg_set_set;
*swig_x_regs_invalidated_by_call_get = *gccc::target_hard_regs_x_regs_invalidated_by_call_get;
*swig_x_regs_invalidated_by_call_set = *gccc::target_hard_regs_x_regs_invalidated_by_call_set;
*swig_x_no_caller_save_reg_set_get = *gccc::target_hard_regs_x_no_caller_save_reg_set_get;
*swig_x_no_caller_save_reg_set_set = *gccc::target_hard_regs_x_no_caller_save_reg_set_set;
*swig_x_reg_alloc_order_get = *gccc::target_hard_regs_x_reg_alloc_order_get;
*swig_x_reg_alloc_order_set = *gccc::target_hard_regs_x_reg_alloc_order_set;
*swig_x_inv_reg_alloc_order_get = *gccc::target_hard_regs_x_inv_reg_alloc_order_get;
*swig_x_inv_reg_alloc_order_set = *gccc::target_hard_regs_x_inv_reg_alloc_order_set;
*swig_x_reg_class_contents_get = *gccc::target_hard_regs_x_reg_class_contents_get;
*swig_x_reg_class_contents_set = *gccc::target_hard_regs_x_reg_class_contents_set;
*swig_x_class_only_fixed_regs_get = *gccc::target_hard_regs_x_class_only_fixed_regs_get;
*swig_x_class_only_fixed_regs_set = *gccc::target_hard_regs_x_class_only_fixed_regs_set;
*swig_x_reg_class_size_get = *gccc::target_hard_regs_x_reg_class_size_get;
*swig_x_reg_class_size_set = *gccc::target_hard_regs_x_reg_class_size_set;
*swig_x_reg_class_subclasses_get = *gccc::target_hard_regs_x_reg_class_subclasses_get;
*swig_x_reg_class_subclasses_set = *gccc::target_hard_regs_x_reg_class_subclasses_set;
*swig_x_reg_class_subunion_get = *gccc::target_hard_regs_x_reg_class_subunion_get;
*swig_x_reg_class_subunion_set = *gccc::target_hard_regs_x_reg_class_subunion_set;
*swig_x_reg_class_superunion_get = *gccc::target_hard_regs_x_reg_class_superunion_get;
*swig_x_reg_class_superunion_set = *gccc::target_hard_regs_x_reg_class_superunion_set;
*swig_x_reg_names_get = *gccc::target_hard_regs_x_reg_names_get;
*swig_x_reg_names_set = *gccc::target_hard_regs_x_reg_names_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_target_hard_regs(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_target_hard_regs($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::sequence_stack ##############

package gcc::sequence_stack;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_first_get = *gccc::sequence_stack_first_get;
*swig_first_set = *gccc::sequence_stack_first_set;
*swig_last_get = *gccc::sequence_stack_last_get;
*swig_last_set = *gccc::sequence_stack_last_set;
*swig_next_get = *gccc::sequence_stack_next_get;
*swig_next_set = *gccc::sequence_stack_next_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_sequence_stack(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_sequence_stack($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::emit_status ##############

package gcc::emit_status;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_reg_rtx_no_get = *gccc::emit_status_x_reg_rtx_no_get;
*swig_x_reg_rtx_no_set = *gccc::emit_status_x_reg_rtx_no_set;
*swig_x_first_label_num_get = *gccc::emit_status_x_first_label_num_get;
*swig_x_first_label_num_set = *gccc::emit_status_x_first_label_num_set;
*swig_x_first_insn_get = *gccc::emit_status_x_first_insn_get;
*swig_x_first_insn_set = *gccc::emit_status_x_first_insn_set;
*swig_x_last_insn_get = *gccc::emit_status_x_last_insn_get;
*swig_x_last_insn_set = *gccc::emit_status_x_last_insn_set;
*swig_sequence_stack_get = *gccc::emit_status_sequence_stack_get;
*swig_sequence_stack_set = *gccc::emit_status_sequence_stack_set;
*swig_x_cur_insn_uid_get = *gccc::emit_status_x_cur_insn_uid_get;
*swig_x_cur_insn_uid_set = *gccc::emit_status_x_cur_insn_uid_set;
*swig_x_cur_debug_insn_uid_get = *gccc::emit_status_x_cur_debug_insn_uid_get;
*swig_x_cur_debug_insn_uid_set = *gccc::emit_status_x_cur_debug_insn_uid_set;
*swig_x_last_location_get = *gccc::emit_status_x_last_location_get;
*swig_x_last_location_set = *gccc::emit_status_x_last_location_set;
*swig_regno_pointer_align_length_get = *gccc::emit_status_regno_pointer_align_length_get;
*swig_regno_pointer_align_length_set = *gccc::emit_status_regno_pointer_align_length_set;
*swig_regno_pointer_align_get = *gccc::emit_status_regno_pointer_align_get;
*swig_regno_pointer_align_set = *gccc::emit_status_regno_pointer_align_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_emit_status(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_emit_status($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::expr_status ##############

package gcc::expr_status;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_pending_stack_adjust_get = *gccc::expr_status_x_pending_stack_adjust_get;
*swig_x_pending_stack_adjust_set = *gccc::expr_status_x_pending_stack_adjust_set;
*swig_x_inhibit_defer_pop_get = *gccc::expr_status_x_inhibit_defer_pop_get;
*swig_x_inhibit_defer_pop_set = *gccc::expr_status_x_inhibit_defer_pop_set;
*swig_x_stack_pointer_delta_get = *gccc::expr_status_x_stack_pointer_delta_get;
*swig_x_stack_pointer_delta_set = *gccc::expr_status_x_stack_pointer_delta_set;
*swig_x_saveregs_value_get = *gccc::expr_status_x_saveregs_value_get;
*swig_x_saveregs_value_set = *gccc::expr_status_x_saveregs_value_set;
*swig_x_apply_args_value_get = *gccc::expr_status_x_apply_args_value_get;
*swig_x_apply_args_value_set = *gccc::expr_status_x_apply_args_value_set;
*swig_x_forced_labels_get = *gccc::expr_status_x_forced_labels_get;
*swig_x_forced_labels_set = *gccc::expr_status_x_forced_labels_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_expr_status(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_expr_status($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_call_site_record_base ##############

package gcc::VEC_call_site_record_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_call_site_record_base_num_get;
*swig_num_set = *gccc::VEC_call_site_record_base_num_set;
*swig_alloc_get = *gccc::VEC_call_site_record_base_alloc_get;
*swig_alloc_set = *gccc::VEC_call_site_record_base_alloc_set;
*swig_vec_get = *gccc::VEC_call_site_record_base_vec_get;
*swig_vec_set = *gccc::VEC_call_site_record_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_call_site_record_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_call_site_record_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_call_site_record_none ##############

package gcc::VEC_call_site_record_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_call_site_record_none_base_get;
*swig_base_set = *gccc::VEC_call_site_record_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_call_site_record_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_call_site_record_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_call_site_record_gc ##############

package gcc::VEC_call_site_record_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_call_site_record_gc_base_get;
*swig_base_set = *gccc::VEC_call_site_record_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_call_site_record_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_call_site_record_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::rtl_eh ##############

package gcc::rtl_eh;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_ehr_stackadj_get = *gccc::rtl_eh_ehr_stackadj_get;
*swig_ehr_stackadj_set = *gccc::rtl_eh_ehr_stackadj_set;
*swig_ehr_handler_get = *gccc::rtl_eh_ehr_handler_get;
*swig_ehr_handler_set = *gccc::rtl_eh_ehr_handler_set;
*swig_ehr_label_get = *gccc::rtl_eh_ehr_label_get;
*swig_ehr_label_set = *gccc::rtl_eh_ehr_label_set;
*swig_sjlj_fc_get = *gccc::rtl_eh_sjlj_fc_get;
*swig_sjlj_fc_set = *gccc::rtl_eh_sjlj_fc_set;
*swig_sjlj_exit_after_get = *gccc::rtl_eh_sjlj_exit_after_get;
*swig_sjlj_exit_after_set = *gccc::rtl_eh_sjlj_exit_after_set;
*swig_action_record_data_get = *gccc::rtl_eh_action_record_data_get;
*swig_action_record_data_set = *gccc::rtl_eh_action_record_data_set;
*swig_call_site_record_get = *gccc::rtl_eh_call_site_record_get;
*swig_call_site_record_set = *gccc::rtl_eh_call_site_record_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_rtl_eh(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_rtl_eh($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_temp_slot_p_base ##############

package gcc::VEC_temp_slot_p_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_temp_slot_p_base_num_get;
*swig_num_set = *gccc::VEC_temp_slot_p_base_num_set;
*swig_alloc_get = *gccc::VEC_temp_slot_p_base_alloc_get;
*swig_alloc_set = *gccc::VEC_temp_slot_p_base_alloc_set;
*swig_vec_get = *gccc::VEC_temp_slot_p_base_vec_get;
*swig_vec_set = *gccc::VEC_temp_slot_p_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_temp_slot_p_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_temp_slot_p_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_temp_slot_p_none ##############

package gcc::VEC_temp_slot_p_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_temp_slot_p_none_base_get;
*swig_base_set = *gccc::VEC_temp_slot_p_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_temp_slot_p_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_temp_slot_p_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_temp_slot_p_gc ##############

package gcc::VEC_temp_slot_p_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_temp_slot_p_gc_base_get;
*swig_base_set = *gccc::VEC_temp_slot_p_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_temp_slot_p_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_temp_slot_p_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_opt_pass_base ##############

package gcc::VEC_ipa_opt_pass_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_ipa_opt_pass_base_num_get;
*swig_num_set = *gccc::VEC_ipa_opt_pass_base_num_set;
*swig_alloc_get = *gccc::VEC_ipa_opt_pass_base_alloc_get;
*swig_alloc_set = *gccc::VEC_ipa_opt_pass_base_alloc_set;
*swig_vec_get = *gccc::VEC_ipa_opt_pass_base_vec_get;
*swig_vec_set = *gccc::VEC_ipa_opt_pass_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_opt_pass_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_opt_pass_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_opt_pass_none ##############

package gcc::VEC_ipa_opt_pass_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_opt_pass_none_base_get;
*swig_base_set = *gccc::VEC_ipa_opt_pass_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_opt_pass_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_opt_pass_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_opt_pass_heap ##############

package gcc::VEC_ipa_opt_pass_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_opt_pass_heap_base_get;
*swig_base_set = *gccc::VEC_ipa_opt_pass_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_opt_pass_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_opt_pass_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::varasm_status ##############

package gcc::varasm_status;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_pool_get = *gccc::varasm_status_pool_get;
*swig_pool_set = *gccc::varasm_status_pool_set;
*swig_deferred_constants_get = *gccc::varasm_status_deferred_constants_get;
*swig_deferred_constants_set = *gccc::varasm_status_deferred_constants_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_varasm_status(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_varasm_status($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::incoming_args ##############

package gcc::incoming_args;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_pops_args_get = *gccc::incoming_args_pops_args_get;
*swig_pops_args_set = *gccc::incoming_args_pops_args_set;
*swig_size_get = *gccc::incoming_args_size_get;
*swig_size_set = *gccc::incoming_args_size_set;
*swig_pretend_args_size_get = *gccc::incoming_args_pretend_args_size_get;
*swig_pretend_args_size_set = *gccc::incoming_args_pretend_args_size_set;
*swig_arg_offset_rtx_get = *gccc::incoming_args_arg_offset_rtx_get;
*swig_arg_offset_rtx_set = *gccc::incoming_args_arg_offset_rtx_set;
*swig_info_get = *gccc::incoming_args_info_get;
*swig_info_set = *gccc::incoming_args_info_set;
*swig_internal_arg_pointer_get = *gccc::incoming_args_internal_arg_pointer_get;
*swig_internal_arg_pointer_set = *gccc::incoming_args_internal_arg_pointer_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_incoming_args(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_incoming_args($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::function_subsections ##############

package gcc::function_subsections;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_hot_section_label_get = *gccc::function_subsections_hot_section_label_get;
*swig_hot_section_label_set = *gccc::function_subsections_hot_section_label_set;
*swig_cold_section_label_get = *gccc::function_subsections_cold_section_label_get;
*swig_cold_section_label_set = *gccc::function_subsections_cold_section_label_set;
*swig_hot_section_end_label_get = *gccc::function_subsections_hot_section_end_label_get;
*swig_hot_section_end_label_set = *gccc::function_subsections_hot_section_end_label_set;
*swig_cold_section_end_label_get = *gccc::function_subsections_cold_section_end_label_get;
*swig_cold_section_end_label_set = *gccc::function_subsections_cold_section_end_label_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_function_subsections(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_function_subsections($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::frame_space ##############

package gcc::frame_space;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::frame_space_next_get;
*swig_next_set = *gccc::frame_space_next_set;
*swig_start_get = *gccc::frame_space_start_get;
*swig_start_set = *gccc::frame_space_start_set;
*swig_length_get = *gccc::frame_space_length_get;
*swig_length_set = *gccc::frame_space_length_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_frame_space(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_frame_space($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::rtl_data ##############

package gcc::rtl_data;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_expr_get = *gccc::rtl_data_expr_get;
*swig_expr_set = *gccc::rtl_data_expr_set;
*swig_emit_get = *gccc::rtl_data_emit_get;
*swig_emit_set = *gccc::rtl_data_emit_set;
*swig_varasm_get = *gccc::rtl_data_varasm_get;
*swig_varasm_set = *gccc::rtl_data_varasm_set;
*swig_args_get = *gccc::rtl_data_args_get;
*swig_args_set = *gccc::rtl_data_args_set;
*swig_subsections_get = *gccc::rtl_data_subsections_get;
*swig_subsections_set = *gccc::rtl_data_subsections_set;
*swig_eh_get = *gccc::rtl_data_eh_get;
*swig_eh_set = *gccc::rtl_data_eh_set;
*swig_outgoing_args_size_get = *gccc::rtl_data_outgoing_args_size_get;
*swig_outgoing_args_size_set = *gccc::rtl_data_outgoing_args_size_set;
*swig_return_rtx_get = *gccc::rtl_data_return_rtx_get;
*swig_return_rtx_set = *gccc::rtl_data_return_rtx_set;
*swig_hard_reg_initial_vals_get = *gccc::rtl_data_hard_reg_initial_vals_get;
*swig_hard_reg_initial_vals_set = *gccc::rtl_data_hard_reg_initial_vals_set;
*swig_stack_protect_guard_get = *gccc::rtl_data_stack_protect_guard_get;
*swig_stack_protect_guard_set = *gccc::rtl_data_stack_protect_guard_set;
*swig_x_nonlocal_goto_handler_labels_get = *gccc::rtl_data_x_nonlocal_goto_handler_labels_get;
*swig_x_nonlocal_goto_handler_labels_set = *gccc::rtl_data_x_nonlocal_goto_handler_labels_set;
*swig_x_return_label_get = *gccc::rtl_data_x_return_label_get;
*swig_x_return_label_set = *gccc::rtl_data_x_return_label_set;
*swig_x_naked_return_label_get = *gccc::rtl_data_x_naked_return_label_get;
*swig_x_naked_return_label_set = *gccc::rtl_data_x_naked_return_label_set;
*swig_x_stack_slot_list_get = *gccc::rtl_data_x_stack_slot_list_get;
*swig_x_stack_slot_list_set = *gccc::rtl_data_x_stack_slot_list_set;
*swig_frame_space_list_get = *gccc::rtl_data_frame_space_list_get;
*swig_frame_space_list_set = *gccc::rtl_data_frame_space_list_set;
*swig_x_stack_check_probe_note_get = *gccc::rtl_data_x_stack_check_probe_note_get;
*swig_x_stack_check_probe_note_set = *gccc::rtl_data_x_stack_check_probe_note_set;
*swig_x_arg_pointer_save_area_get = *gccc::rtl_data_x_arg_pointer_save_area_get;
*swig_x_arg_pointer_save_area_set = *gccc::rtl_data_x_arg_pointer_save_area_set;
*swig_drap_reg_get = *gccc::rtl_data_drap_reg_get;
*swig_drap_reg_set = *gccc::rtl_data_drap_reg_set;
*swig_x_frame_offset_get = *gccc::rtl_data_x_frame_offset_get;
*swig_x_frame_offset_set = *gccc::rtl_data_x_frame_offset_set;
*swig_x_parm_birth_insn_get = *gccc::rtl_data_x_parm_birth_insn_get;
*swig_x_parm_birth_insn_set = *gccc::rtl_data_x_parm_birth_insn_set;
*swig_x_used_temp_slots_get = *gccc::rtl_data_x_used_temp_slots_get;
*swig_x_used_temp_slots_set = *gccc::rtl_data_x_used_temp_slots_set;
*swig_x_avail_temp_slots_get = *gccc::rtl_data_x_avail_temp_slots_get;
*swig_x_avail_temp_slots_set = *gccc::rtl_data_x_avail_temp_slots_set;
*swig_x_temp_slot_level_get = *gccc::rtl_data_x_temp_slot_level_get;
*swig_x_temp_slot_level_set = *gccc::rtl_data_x_temp_slot_level_set;
*swig_stack_alignment_needed_get = *gccc::rtl_data_stack_alignment_needed_get;
*swig_stack_alignment_needed_set = *gccc::rtl_data_stack_alignment_needed_set;
*swig_preferred_stack_boundary_get = *gccc::rtl_data_preferred_stack_boundary_get;
*swig_preferred_stack_boundary_set = *gccc::rtl_data_preferred_stack_boundary_set;
*swig_parm_stack_boundary_get = *gccc::rtl_data_parm_stack_boundary_get;
*swig_parm_stack_boundary_set = *gccc::rtl_data_parm_stack_boundary_set;
*swig_max_used_stack_slot_alignment_get = *gccc::rtl_data_max_used_stack_slot_alignment_get;
*swig_max_used_stack_slot_alignment_set = *gccc::rtl_data_max_used_stack_slot_alignment_set;
*swig_stack_alignment_estimated_get = *gccc::rtl_data_stack_alignment_estimated_get;
*swig_stack_alignment_estimated_set = *gccc::rtl_data_stack_alignment_estimated_set;
*swig_epilogue_delay_list_get = *gccc::rtl_data_epilogue_delay_list_get;
*swig_epilogue_delay_list_set = *gccc::rtl_data_epilogue_delay_list_set;
*swig_accesses_prior_frames_get = *gccc::rtl_data_accesses_prior_frames_get;
*swig_accesses_prior_frames_set = *gccc::rtl_data_accesses_prior_frames_set;
*swig_calls_eh_return_get = *gccc::rtl_data_calls_eh_return_get;
*swig_calls_eh_return_set = *gccc::rtl_data_calls_eh_return_set;
*swig_saves_all_registers_get = *gccc::rtl_data_saves_all_registers_get;
*swig_saves_all_registers_set = *gccc::rtl_data_saves_all_registers_set;
*swig_has_nonlocal_goto_get = *gccc::rtl_data_has_nonlocal_goto_get;
*swig_has_nonlocal_goto_set = *gccc::rtl_data_has_nonlocal_goto_set;
*swig_has_asm_statement_get = *gccc::rtl_data_has_asm_statement_get;
*swig_has_asm_statement_set = *gccc::rtl_data_has_asm_statement_set;
*swig_all_throwers_are_sibcalls_get = *gccc::rtl_data_all_throwers_are_sibcalls_get;
*swig_all_throwers_are_sibcalls_set = *gccc::rtl_data_all_throwers_are_sibcalls_set;
*swig_limit_stack_get = *gccc::rtl_data_limit_stack_get;
*swig_limit_stack_set = *gccc::rtl_data_limit_stack_set;
*swig_profile_get = *gccc::rtl_data_profile_get;
*swig_profile_set = *gccc::rtl_data_profile_set;
*swig_uses_const_pool_get = *gccc::rtl_data_uses_const_pool_get;
*swig_uses_const_pool_set = *gccc::rtl_data_uses_const_pool_set;
*swig_uses_pic_offset_table_get = *gccc::rtl_data_uses_pic_offset_table_get;
*swig_uses_pic_offset_table_set = *gccc::rtl_data_uses_pic_offset_table_set;
*swig_uses_eh_lsda_get = *gccc::rtl_data_uses_eh_lsda_get;
*swig_uses_eh_lsda_set = *gccc::rtl_data_uses_eh_lsda_set;
*swig_tail_call_emit_get = *gccc::rtl_data_tail_call_emit_get;
*swig_tail_call_emit_set = *gccc::rtl_data_tail_call_emit_set;
*swig_arg_pointer_save_area_init_get = *gccc::rtl_data_arg_pointer_save_area_init_get;
*swig_arg_pointer_save_area_init_set = *gccc::rtl_data_arg_pointer_save_area_init_set;
*swig_frame_pointer_needed_get = *gccc::rtl_data_frame_pointer_needed_get;
*swig_frame_pointer_needed_set = *gccc::rtl_data_frame_pointer_needed_set;
*swig_maybe_hot_insn_p_get = *gccc::rtl_data_maybe_hot_insn_p_get;
*swig_maybe_hot_insn_p_set = *gccc::rtl_data_maybe_hot_insn_p_set;
*swig_stack_realign_needed_get = *gccc::rtl_data_stack_realign_needed_get;
*swig_stack_realign_needed_set = *gccc::rtl_data_stack_realign_needed_set;
*swig_stack_realign_tried_get = *gccc::rtl_data_stack_realign_tried_get;
*swig_stack_realign_tried_set = *gccc::rtl_data_stack_realign_tried_set;
*swig_need_drap_get = *gccc::rtl_data_need_drap_get;
*swig_need_drap_set = *gccc::rtl_data_need_drap_set;
*swig_stack_realign_processed_get = *gccc::rtl_data_stack_realign_processed_get;
*swig_stack_realign_processed_set = *gccc::rtl_data_stack_realign_processed_set;
*swig_stack_realign_finalized_get = *gccc::rtl_data_stack_realign_finalized_get;
*swig_stack_realign_finalized_set = *gccc::rtl_data_stack_realign_finalized_set;
*swig_dbr_scheduled_p_get = *gccc::rtl_data_dbr_scheduled_p_get;
*swig_dbr_scheduled_p_set = *gccc::rtl_data_dbr_scheduled_p_set;
*swig_nothrow_get = *gccc::rtl_data_nothrow_get;
*swig_nothrow_set = *gccc::rtl_data_nothrow_set;
*swig_asm_clobbers_get = *gccc::rtl_data_asm_clobbers_get;
*swig_asm_clobbers_set = *gccc::rtl_data_asm_clobbers_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_rtl_data(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_rtl_data($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::stack_usage ##############

package gcc::stack_usage;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_static_stack_size_get = *gccc::stack_usage_static_stack_size_get;
*swig_static_stack_size_set = *gccc::stack_usage_static_stack_size_set;
*swig_dynamic_stack_size_get = *gccc::stack_usage_dynamic_stack_size_get;
*swig_dynamic_stack_size_set = *gccc::stack_usage_dynamic_stack_size_set;
*swig_pushed_stack_size_get = *gccc::stack_usage_pushed_stack_size_get;
*swig_pushed_stack_size_set = *gccc::stack_usage_pushed_stack_size_set;
*swig_dynamic_alloc_count_get = *gccc::stack_usage_dynamic_alloc_count_get;
*swig_dynamic_alloc_count_set = *gccc::stack_usage_dynamic_alloc_count_set;
*swig_has_unbounded_dynamic_stack_size_get = *gccc::stack_usage_has_unbounded_dynamic_stack_size_get;
*swig_has_unbounded_dynamic_stack_size_set = *gccc::stack_usage_has_unbounded_dynamic_stack_size_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_stack_usage(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_stack_usage($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::function ##############

package gcc::function;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_eh_get = *gccc::function_eh_get;
*swig_eh_set = *gccc::function_eh_set;
*swig_cfg_get = *gccc::function_cfg_get;
*swig_cfg_set = *gccc::function_cfg_set;
*swig_gimple_body_get = *gccc::function_gimple_body_get;
*swig_gimple_body_set = *gccc::function_gimple_body_set;
*swig_gimple_df_get = *gccc::function_gimple_df_get;
*swig_gimple_df_set = *gccc::function_gimple_df_set;
*swig_x_current_loops_get = *gccc::function_x_current_loops_get;
*swig_x_current_loops_set = *gccc::function_x_current_loops_set;
*swig_su_get = *gccc::function_su_get;
*swig_su_set = *gccc::function_su_set;
*swig_value_histograms_get = *gccc::function_value_histograms_get;
*swig_value_histograms_set = *gccc::function_value_histograms_set;
*swig_decl_get = *gccc::function_decl_get;
*swig_decl_set = *gccc::function_decl_set;
*swig_static_chain_decl_get = *gccc::function_static_chain_decl_get;
*swig_static_chain_decl_set = *gccc::function_static_chain_decl_set;
*swig_nonlocal_goto_save_area_get = *gccc::function_nonlocal_goto_save_area_get;
*swig_nonlocal_goto_save_area_set = *gccc::function_nonlocal_goto_save_area_set;
*swig_local_decls_get = *gccc::function_local_decls_get;
*swig_local_decls_set = *gccc::function_local_decls_set;
*swig_machine_get = *gccc::function_machine_get;
*swig_machine_set = *gccc::function_machine_set;
*swig_language_get = *gccc::function_language_get;
*swig_language_set = *gccc::function_language_set;
*swig_used_types_hash_get = *gccc::function_used_types_hash_get;
*swig_used_types_hash_set = *gccc::function_used_types_hash_set;
*swig_last_stmt_uid_get = *gccc::function_last_stmt_uid_get;
*swig_last_stmt_uid_set = *gccc::function_last_stmt_uid_set;
*swig_funcdef_no_get = *gccc::function_funcdef_no_get;
*swig_funcdef_no_set = *gccc::function_funcdef_no_set;
*swig_function_start_locus_get = *gccc::function_function_start_locus_get;
*swig_function_start_locus_set = *gccc::function_function_start_locus_set;
*swig_function_end_locus_get = *gccc::function_function_end_locus_get;
*swig_function_end_locus_set = *gccc::function_function_end_locus_set;
*swig_curr_properties_get = *gccc::function_curr_properties_get;
*swig_curr_properties_set = *gccc::function_curr_properties_set;
*swig_last_verified_get = *gccc::function_last_verified_get;
*swig_last_verified_set = *gccc::function_last_verified_set;
*swig_cannot_be_copied_reason_get = *gccc::function_cannot_be_copied_reason_get;
*swig_cannot_be_copied_reason_set = *gccc::function_cannot_be_copied_reason_set;
*swig_va_list_gpr_size_get = *gccc::function_va_list_gpr_size_get;
*swig_va_list_gpr_size_set = *gccc::function_va_list_gpr_size_set;
*swig_va_list_fpr_size_get = *gccc::function_va_list_fpr_size_get;
*swig_va_list_fpr_size_set = *gccc::function_va_list_fpr_size_set;
*swig_calls_setjmp_get = *gccc::function_calls_setjmp_get;
*swig_calls_setjmp_set = *gccc::function_calls_setjmp_set;
*swig_calls_alloca_get = *gccc::function_calls_alloca_get;
*swig_calls_alloca_set = *gccc::function_calls_alloca_set;
*swig_has_nonlocal_label_get = *gccc::function_has_nonlocal_label_get;
*swig_has_nonlocal_label_set = *gccc::function_has_nonlocal_label_set;
*swig_cannot_be_copied_set_get = *gccc::function_cannot_be_copied_set_get;
*swig_cannot_be_copied_set_set = *gccc::function_cannot_be_copied_set_set;
*swig_stdarg_get = *gccc::function_stdarg_get;
*swig_stdarg_set = *gccc::function_stdarg_set;
*swig_dont_save_pending_sizes_p_get = *gccc::function_dont_save_pending_sizes_p_get;
*swig_dont_save_pending_sizes_p_set = *gccc::function_dont_save_pending_sizes_p_set;
*swig_after_inlining_get = *gccc::function_after_inlining_get;
*swig_after_inlining_set = *gccc::function_after_inlining_set;
*swig_always_inline_functions_inlined_get = *gccc::function_always_inline_functions_inlined_get;
*swig_always_inline_functions_inlined_set = *gccc::function_always_inline_functions_inlined_set;
*swig_can_throw_non_call_exceptions_get = *gccc::function_can_throw_non_call_exceptions_get;
*swig_can_throw_non_call_exceptions_set = *gccc::function_can_throw_non_call_exceptions_set;
*swig_returns_struct_get = *gccc::function_returns_struct_get;
*swig_returns_struct_set = *gccc::function_returns_struct_set;
*swig_returns_pcc_struct_get = *gccc::function_returns_pcc_struct_get;
*swig_returns_pcc_struct_set = *gccc::function_returns_pcc_struct_set;
*swig_after_tree_profile_get = *gccc::function_after_tree_profile_get;
*swig_after_tree_profile_set = *gccc::function_after_tree_profile_set;
*swig_has_local_explicit_reg_vars_get = *gccc::function_has_local_explicit_reg_vars_get;
*swig_has_local_explicit_reg_vars_set = *gccc::function_has_local_explicit_reg_vars_set;
*swig_is_thunk_get = *gccc::function_is_thunk_get;
*swig_is_thunk_set = *gccc::function_is_thunk_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_function(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_function($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::types_used_by_vars_entry ##############

package gcc::types_used_by_vars_entry;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *gccc::types_used_by_vars_entry_type_get;
*swig_type_set = *gccc::types_used_by_vars_entry_type_set;
*swig_var_decl_get = *gccc::types_used_by_vars_entry_var_decl_get;
*swig_var_decl_set = *gccc::types_used_by_vars_entry_var_decl_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_types_used_by_vars_entry(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_types_used_by_vars_entry($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::splay_tree_node_s ##############

package gcc::splay_tree_node_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_key_get = *gccc::splay_tree_node_s_key_get;
*swig_key_set = *gccc::splay_tree_node_s_key_set;
*swig_value_get = *gccc::splay_tree_node_s_value_get;
*swig_value_set = *gccc::splay_tree_node_s_value_set;
*swig_left_get = *gccc::splay_tree_node_s_left_get;
*swig_left_set = *gccc::splay_tree_node_s_left_set;
*swig_right_get = *gccc::splay_tree_node_s_right_get;
*swig_right_set = *gccc::splay_tree_node_s_right_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_splay_tree_node_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_splay_tree_node_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::splay_tree_s ##############

package gcc::splay_tree_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_root_get = *gccc::splay_tree_s_root_get;
*swig_root_set = *gccc::splay_tree_s_root_set;
*swig_comp_get = *gccc::splay_tree_s_comp_get;
*swig_comp_set = *gccc::splay_tree_s_comp_set;
*swig_delete_key_get = *gccc::splay_tree_s_delete_key_get;
*swig_delete_key_set = *gccc::splay_tree_s_delete_key_set;
*swig_delete_value_get = *gccc::splay_tree_s_delete_value_get;
*swig_delete_value_set = *gccc::splay_tree_s_delete_value_set;
*swig_allocate_get = *gccc::splay_tree_s_allocate_get;
*swig_allocate_set = *gccc::splay_tree_s_allocate_set;
*swig_deallocate_get = *gccc::splay_tree_s_deallocate_get;
*swig_deallocate_set = *gccc::splay_tree_s_deallocate_set;
*swig_allocate_data_get = *gccc::splay_tree_s_allocate_data_get;
*swig_allocate_data_set = *gccc::splay_tree_s_allocate_data_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_splay_tree_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_splay_tree_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_string ##############

package gcc::cpp_string;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_len_get = *gccc::cpp_string_len_get;
*swig_len_set = *gccc::cpp_string_len_set;
*swig_text_get = *gccc::cpp_string_text_get;
*swig_text_set = *gccc::cpp_string_text_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_string(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_string($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_macro_arg ##############

package gcc::cpp_macro_arg;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_arg_no_get = *gccc::cpp_macro_arg_arg_no_get;
*swig_arg_no_set = *gccc::cpp_macro_arg_arg_no_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_macro_arg(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_macro_arg($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_identifier ##############

package gcc::cpp_identifier;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_node_get = *gccc::cpp_identifier_node_get;
*swig_node_set = *gccc::cpp_identifier_node_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_identifier(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_identifier($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_token ##############

package gcc::cpp_token;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_src_loc_get = *gccc::cpp_token_src_loc_get;
*swig_src_loc_set = *gccc::cpp_token_src_loc_set;
*swig_type_get = *gccc::cpp_token_type_get;
*swig_type_set = *gccc::cpp_token_type_set;
*swig_flags_get = *gccc::cpp_token_flags_get;
*swig_flags_set = *gccc::cpp_token_flags_set;
*swig_val_get = *gccc::cpp_token_val_get;
*swig_val_set = *gccc::cpp_token_val_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_token(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_token($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_token_val ##############

package gcc::cpp_token_val;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_node_get = *gccc::cpp_token_val_node_get;
*swig_node_set = *gccc::cpp_token_val_node_set;
*swig_source_get = *gccc::cpp_token_val_source_get;
*swig_source_set = *gccc::cpp_token_val_source_set;
*swig_str_get = *gccc::cpp_token_val_str_get;
*swig_str_set = *gccc::cpp_token_val_str_set;
*swig_macro_arg_get = *gccc::cpp_token_val_macro_arg_get;
*swig_macro_arg_set = *gccc::cpp_token_val_macro_arg_set;
*swig_token_no_get = *gccc::cpp_token_val_token_no_get;
*swig_token_no_set = *gccc::cpp_token_val_token_no_set;
*swig_pragma_get = *gccc::cpp_token_val_pragma_get;
*swig_pragma_set = *gccc::cpp_token_val_pragma_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_token_val(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_token_val($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_options ##############

package gcc::cpp_options;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_tabstop_get = *gccc::cpp_options_tabstop_get;
*swig_tabstop_set = *gccc::cpp_options_tabstop_set;
*swig_lang_get = *gccc::cpp_options_lang_get;
*swig_lang_set = *gccc::cpp_options_lang_set;
*swig_cplusplus_get = *gccc::cpp_options_cplusplus_get;
*swig_cplusplus_set = *gccc::cpp_options_cplusplus_set;
*swig_cplusplus_comments_get = *gccc::cpp_options_cplusplus_comments_get;
*swig_cplusplus_comments_set = *gccc::cpp_options_cplusplus_comments_set;
*swig_objc_get = *gccc::cpp_options_objc_get;
*swig_objc_set = *gccc::cpp_options_objc_set;
*swig_discard_comments_get = *gccc::cpp_options_discard_comments_get;
*swig_discard_comments_set = *gccc::cpp_options_discard_comments_set;
*swig_discard_comments_in_macro_exp_get = *gccc::cpp_options_discard_comments_in_macro_exp_get;
*swig_discard_comments_in_macro_exp_set = *gccc::cpp_options_discard_comments_in_macro_exp_set;
*swig_trigraphs_get = *gccc::cpp_options_trigraphs_get;
*swig_trigraphs_set = *gccc::cpp_options_trigraphs_set;
*swig_digraphs_get = *gccc::cpp_options_digraphs_get;
*swig_digraphs_set = *gccc::cpp_options_digraphs_set;
*swig_extended_numbers_get = *gccc::cpp_options_extended_numbers_get;
*swig_extended_numbers_set = *gccc::cpp_options_extended_numbers_set;
*swig_uliterals_get = *gccc::cpp_options_uliterals_get;
*swig_uliterals_set = *gccc::cpp_options_uliterals_set;
*swig_print_include_names_get = *gccc::cpp_options_print_include_names_get;
*swig_print_include_names_set = *gccc::cpp_options_print_include_names_set;
*swig_cpp_warn_deprecated_get = *gccc::cpp_options_cpp_warn_deprecated_get;
*swig_cpp_warn_deprecated_set = *gccc::cpp_options_cpp_warn_deprecated_set;
*swig_warn_comments_get = *gccc::cpp_options_warn_comments_get;
*swig_warn_comments_set = *gccc::cpp_options_warn_comments_set;
*swig_warn_missing_include_dirs_get = *gccc::cpp_options_warn_missing_include_dirs_get;
*swig_warn_missing_include_dirs_set = *gccc::cpp_options_warn_missing_include_dirs_set;
*swig_warn_trigraphs_get = *gccc::cpp_options_warn_trigraphs_get;
*swig_warn_trigraphs_set = *gccc::cpp_options_warn_trigraphs_set;
*swig_warn_multichar_get = *gccc::cpp_options_warn_multichar_get;
*swig_warn_multichar_set = *gccc::cpp_options_warn_multichar_set;
*swig_cpp_warn_traditional_get = *gccc::cpp_options_cpp_warn_traditional_get;
*swig_cpp_warn_traditional_set = *gccc::cpp_options_cpp_warn_traditional_set;
*swig_cpp_warn_long_long_get = *gccc::cpp_options_cpp_warn_long_long_get;
*swig_cpp_warn_long_long_set = *gccc::cpp_options_cpp_warn_long_long_set;
*swig_warn_endif_labels_get = *gccc::cpp_options_warn_endif_labels_get;
*swig_warn_endif_labels_set = *gccc::cpp_options_warn_endif_labels_set;
*swig_warn_num_sign_change_get = *gccc::cpp_options_warn_num_sign_change_get;
*swig_warn_num_sign_change_set = *gccc::cpp_options_warn_num_sign_change_set;
*swig_warn_variadic_macros_get = *gccc::cpp_options_warn_variadic_macros_get;
*swig_warn_variadic_macros_set = *gccc::cpp_options_warn_variadic_macros_set;
*swig_warn_builtin_macro_redefined_get = *gccc::cpp_options_warn_builtin_macro_redefined_get;
*swig_warn_builtin_macro_redefined_set = *gccc::cpp_options_warn_builtin_macro_redefined_set;
*swig_remap_get = *gccc::cpp_options_remap_get;
*swig_remap_set = *gccc::cpp_options_remap_set;
*swig_dollars_in_ident_get = *gccc::cpp_options_dollars_in_ident_get;
*swig_dollars_in_ident_set = *gccc::cpp_options_dollars_in_ident_set;
*swig_extended_identifiers_get = *gccc::cpp_options_extended_identifiers_get;
*swig_extended_identifiers_set = *gccc::cpp_options_extended_identifiers_set;
*swig_warn_dollars_get = *gccc::cpp_options_warn_dollars_get;
*swig_warn_dollars_set = *gccc::cpp_options_warn_dollars_set;
*swig_warn_undef_get = *gccc::cpp_options_warn_undef_get;
*swig_warn_undef_set = *gccc::cpp_options_warn_undef_set;
*swig_warn_unused_macros_get = *gccc::cpp_options_warn_unused_macros_get;
*swig_warn_unused_macros_set = *gccc::cpp_options_warn_unused_macros_set;
*swig_c99_get = *gccc::cpp_options_c99_get;
*swig_c99_set = *gccc::cpp_options_c99_set;
*swig_std_get = *gccc::cpp_options_std_get;
*swig_std_set = *gccc::cpp_options_std_set;
*swig_cpp_pedantic_get = *gccc::cpp_options_cpp_pedantic_get;
*swig_cpp_pedantic_set = *gccc::cpp_options_cpp_pedantic_set;
*swig_preprocessed_get = *gccc::cpp_options_preprocessed_get;
*swig_preprocessed_set = *gccc::cpp_options_preprocessed_set;
*swig_operator_names_get = *gccc::cpp_options_operator_names_get;
*swig_operator_names_set = *gccc::cpp_options_operator_names_set;
*swig_warn_cxx_operator_names_get = *gccc::cpp_options_warn_cxx_operator_names_get;
*swig_warn_cxx_operator_names_set = *gccc::cpp_options_warn_cxx_operator_names_set;
*swig_traditional_get = *gccc::cpp_options_traditional_get;
*swig_traditional_set = *gccc::cpp_options_traditional_set;
*swig_narrow_charset_get = *gccc::cpp_options_narrow_charset_get;
*swig_narrow_charset_set = *gccc::cpp_options_narrow_charset_set;
*swig_wide_charset_get = *gccc::cpp_options_wide_charset_get;
*swig_wide_charset_set = *gccc::cpp_options_wide_charset_set;
*swig_input_charset_get = *gccc::cpp_options_input_charset_get;
*swig_input_charset_set = *gccc::cpp_options_input_charset_set;
*swig_warn_normalize_get = *gccc::cpp_options_warn_normalize_get;
*swig_warn_normalize_set = *gccc::cpp_options_warn_normalize_set;
*swig_warn_invalid_pch_get = *gccc::cpp_options_warn_invalid_pch_get;
*swig_warn_invalid_pch_set = *gccc::cpp_options_warn_invalid_pch_set;
*swig_restore_pch_deps_get = *gccc::cpp_options_restore_pch_deps_get;
*swig_restore_pch_deps_set = *gccc::cpp_options_restore_pch_deps_set;
*swig_precision_get = *gccc::cpp_options_precision_get;
*swig_precision_set = *gccc::cpp_options_precision_set;
*swig_char_precision_get = *gccc::cpp_options_char_precision_get;
*swig_char_precision_set = *gccc::cpp_options_char_precision_set;
*swig_int_precision_get = *gccc::cpp_options_int_precision_get;
*swig_int_precision_set = *gccc::cpp_options_int_precision_set;
*swig_wchar_precision_get = *gccc::cpp_options_wchar_precision_get;
*swig_wchar_precision_set = *gccc::cpp_options_wchar_precision_set;
*swig_unsigned_char_get = *gccc::cpp_options_unsigned_char_get;
*swig_unsigned_char_set = *gccc::cpp_options_unsigned_char_set;
*swig_unsigned_wchar_get = *gccc::cpp_options_unsigned_wchar_get;
*swig_unsigned_wchar_set = *gccc::cpp_options_unsigned_wchar_set;
*swig_bytes_big_endian_get = *gccc::cpp_options_bytes_big_endian_get;
*swig_bytes_big_endian_set = *gccc::cpp_options_bytes_big_endian_set;
*swig_stdc_0_in_system_headers_get = *gccc::cpp_options_stdc_0_in_system_headers_get;
*swig_stdc_0_in_system_headers_set = *gccc::cpp_options_stdc_0_in_system_headers_set;
*swig_directives_only_get = *gccc::cpp_options_directives_only_get;
*swig_directives_only_set = *gccc::cpp_options_directives_only_set;
*swig_deps_get = *gccc::cpp_options_deps_get;
*swig_deps_set = *gccc::cpp_options_deps_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_options(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_options($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_options_deps ##############

package gcc::cpp_options_deps;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_style_get = *gccc::cpp_options_deps_style_get;
*swig_style_set = *gccc::cpp_options_deps_style_set;
*swig_missing_files_get = *gccc::cpp_options_deps_missing_files_get;
*swig_missing_files_set = *gccc::cpp_options_deps_missing_files_set;
*swig_phony_targets_get = *gccc::cpp_options_deps_phony_targets_get;
*swig_phony_targets_set = *gccc::cpp_options_deps_phony_targets_set;
*swig_ignore_main_file_get = *gccc::cpp_options_deps_ignore_main_file_get;
*swig_ignore_main_file_set = *gccc::cpp_options_deps_ignore_main_file_set;
*swig_need_preprocessor_output_get = *gccc::cpp_options_deps_need_preprocessor_output_get;
*swig_need_preprocessor_output_set = *gccc::cpp_options_deps_need_preprocessor_output_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_options_deps(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_options_deps($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_callbacks ##############

package gcc::cpp_callbacks;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_line_change_get = *gccc::cpp_callbacks_line_change_get;
*swig_line_change_set = *gccc::cpp_callbacks_line_change_set;
*swig_file_change_get = *gccc::cpp_callbacks_file_change_get;
*swig_file_change_set = *gccc::cpp_callbacks_file_change_set;
*swig_dir_change_get = *gccc::cpp_callbacks_dir_change_get;
*swig_dir_change_set = *gccc::cpp_callbacks_dir_change_set;
*swig_include_get = *gccc::cpp_callbacks_include_get;
*swig_include_set = *gccc::cpp_callbacks_include_set;
*swig_define_get = *gccc::cpp_callbacks_define_get;
*swig_define_set = *gccc::cpp_callbacks_define_set;
*swig_undef_get = *gccc::cpp_callbacks_undef_get;
*swig_undef_set = *gccc::cpp_callbacks_undef_set;
*swig_ident_get = *gccc::cpp_callbacks_ident_get;
*swig_ident_set = *gccc::cpp_callbacks_ident_set;
*swig_def_pragma_get = *gccc::cpp_callbacks_def_pragma_get;
*swig_def_pragma_set = *gccc::cpp_callbacks_def_pragma_set;
*swig_valid_pch_get = *gccc::cpp_callbacks_valid_pch_get;
*swig_valid_pch_set = *gccc::cpp_callbacks_valid_pch_set;
*swig_read_pch_get = *gccc::cpp_callbacks_read_pch_get;
*swig_read_pch_set = *gccc::cpp_callbacks_read_pch_set;
*swig_missing_header_get = *gccc::cpp_callbacks_missing_header_get;
*swig_missing_header_set = *gccc::cpp_callbacks_missing_header_set;
*swig_macro_to_expand_get = *gccc::cpp_callbacks_macro_to_expand_get;
*swig_macro_to_expand_set = *gccc::cpp_callbacks_macro_to_expand_set;
*swig_error_get = *gccc::cpp_callbacks_error_get;
*swig_error_set = *gccc::cpp_callbacks_error_set;
*swig_used_define_get = *gccc::cpp_callbacks_used_define_get;
*swig_used_define_set = *gccc::cpp_callbacks_used_define_set;
*swig_used_undef_get = *gccc::cpp_callbacks_used_undef_get;
*swig_used_undef_set = *gccc::cpp_callbacks_used_undef_set;
*swig_before_define_get = *gccc::cpp_callbacks_before_define_get;
*swig_before_define_set = *gccc::cpp_callbacks_before_define_set;
*swig_used_get = *gccc::cpp_callbacks_used_get;
*swig_used_set = *gccc::cpp_callbacks_used_set;
*swig_user_builtin_macro_get = *gccc::cpp_callbacks_user_builtin_macro_get;
*swig_user_builtin_macro_set = *gccc::cpp_callbacks_user_builtin_macro_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_callbacks(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_callbacks($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_dir ##############

package gcc::cpp_dir;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::cpp_dir_next_get;
*swig_next_set = *gccc::cpp_dir_next_set;
*swig_name_get = *gccc::cpp_dir_name_get;
*swig_name_set = *gccc::cpp_dir_name_set;
*swig_len_get = *gccc::cpp_dir_len_get;
*swig_len_set = *gccc::cpp_dir_len_set;
*swig_sysp_get = *gccc::cpp_dir_sysp_get;
*swig_sysp_set = *gccc::cpp_dir_sysp_set;
*swig_user_supplied_p_get = *gccc::cpp_dir_user_supplied_p_get;
*swig_user_supplied_p_set = *gccc::cpp_dir_user_supplied_p_set;
*swig_canonical_name_get = *gccc::cpp_dir_canonical_name_get;
*swig_canonical_name_set = *gccc::cpp_dir_canonical_name_set;
*swig_name_map_get = *gccc::cpp_dir_name_map_get;
*swig_name_map_set = *gccc::cpp_dir_name_map_set;
*swig_construct_get = *gccc::cpp_dir_construct_get;
*swig_construct_set = *gccc::cpp_dir_construct_set;
*swig_ino_get = *gccc::cpp_dir_ino_get;
*swig_ino_set = *gccc::cpp_dir_ino_set;
*swig_dev_get = *gccc::cpp_dir_dev_get;
*swig_dev_set = *gccc::cpp_dir_dev_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_dir(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_dir($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::_cpp_hashnode_value ##############

package gcc::_cpp_hashnode_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_macro_get = *gccc::_cpp_hashnode_value_macro_get;
*swig_macro_set = *gccc::_cpp_hashnode_value_macro_set;
*swig_answers_get = *gccc::_cpp_hashnode_value_answers_get;
*swig_answers_set = *gccc::_cpp_hashnode_value_answers_set;
*swig_builtin_get = *gccc::_cpp_hashnode_value_builtin_get;
*swig_builtin_set = *gccc::_cpp_hashnode_value_builtin_set;
*swig_arg_index_get = *gccc::_cpp_hashnode_value_arg_index_get;
*swig_arg_index_set = *gccc::_cpp_hashnode_value_arg_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new__cpp_hashnode_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete__cpp_hashnode_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_hashnode ##############

package gcc::cpp_hashnode;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_ident_get = *gccc::cpp_hashnode_ident_get;
*swig_ident_set = *gccc::cpp_hashnode_ident_set;
*swig_is_directive_get = *gccc::cpp_hashnode_is_directive_get;
*swig_is_directive_set = *gccc::cpp_hashnode_is_directive_set;
*swig_directive_index_get = *gccc::cpp_hashnode_directive_index_get;
*swig_directive_index_set = *gccc::cpp_hashnode_directive_index_set;
*swig_rid_code_get = *gccc::cpp_hashnode_rid_code_get;
*swig_rid_code_set = *gccc::cpp_hashnode_rid_code_set;
*swig_type_get = *gccc::cpp_hashnode_type_get;
*swig_type_set = *gccc::cpp_hashnode_type_set;
*swig_flags_get = *gccc::cpp_hashnode_flags_get;
*swig_flags_set = *gccc::cpp_hashnode_flags_set;
*swig_value_get = *gccc::cpp_hashnode_value_get;
*swig_value_set = *gccc::cpp_hashnode_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_hashnode(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_hashnode($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_num ##############

package gcc::cpp_num;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_high_get = *gccc::cpp_num_high_get;
*swig_high_set = *gccc::cpp_num_high_set;
*swig_low_get = *gccc::cpp_num_low_get;
*swig_low_set = *gccc::cpp_num_low_set;
*swig_unsignedp_get = *gccc::cpp_num_unsignedp_get;
*swig_unsignedp_set = *gccc::cpp_num_unsignedp_set;
*swig_overflow_get = *gccc::cpp_num_overflow_get;
*swig_overflow_set = *gccc::cpp_num_overflow_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_num(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_num($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_comment ##############

package gcc::cpp_comment;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_comment_get = *gccc::cpp_comment_comment_get;
*swig_comment_set = *gccc::cpp_comment_comment_set;
*swig_sloc_get = *gccc::cpp_comment_sloc_get;
*swig_sloc_set = *gccc::cpp_comment_sloc_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_comment(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_comment($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cpp_comment_table ##############

package gcc::cpp_comment_table;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_entries_get = *gccc::cpp_comment_table_entries_get;
*swig_entries_set = *gccc::cpp_comment_table_entries_set;
*swig_count_get = *gccc::cpp_comment_table_count_get;
*swig_count_set = *gccc::cpp_comment_table_count_set;
*swig_allocated_get = *gccc::cpp_comment_table_allocated_get;
*swig_allocated_set = *gccc::cpp_comment_table_allocated_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cpp_comment_table(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cpp_comment_table($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::c_common_identifier ##############

package gcc::c_common_identifier;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::c_common_identifier_common_get;
*swig_common_set = *gccc::c_common_identifier_common_set;
*swig_node_get = *gccc::c_common_identifier_node_get;
*swig_node_set = *gccc::c_common_identifier_node_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_c_common_identifier(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_c_common_identifier($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::c_common_resword ##############

package gcc::c_common_resword;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_word_get = *gccc::c_common_resword_word_get;
*swig_word_set = *gccc::c_common_resword_word_set;
*swig_rid_get = *gccc::c_common_resword_rid_get;
*swig_rid_set = *gccc::c_common_resword_rid_set;
*swig_disable_get = *gccc::c_common_resword_disable_get;
*swig_disable_set = *gccc::c_common_resword_disable_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_c_common_resword(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_c_common_resword($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::sorted_fields_type ##############

package gcc::sorted_fields_type;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_len_get = *gccc::sorted_fields_type_len_get;
*swig_len_set = *gccc::sorted_fields_type_len_set;
*swig_elts_get = *gccc::sorted_fields_type_elts_get;
*swig_elts_set = *gccc::sorted_fields_type_elts_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_sorted_fields_type(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_sorted_fields_type($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::stmt_tree_s ##############

package gcc::stmt_tree_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_cur_stmt_list_get = *gccc::stmt_tree_s_x_cur_stmt_list_get;
*swig_x_cur_stmt_list_set = *gccc::stmt_tree_s_x_cur_stmt_list_set;
*swig_stmts_are_full_exprs_p_get = *gccc::stmt_tree_s_stmts_are_full_exprs_p_get;
*swig_stmts_are_full_exprs_p_set = *gccc::stmt_tree_s_stmts_are_full_exprs_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_stmt_tree_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_stmt_tree_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::c_language_function ##############

package gcc::c_language_function;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_stmt_tree_get = *gccc::c_language_function_x_stmt_tree_get;
*swig_x_stmt_tree_set = *gccc::c_language_function_x_stmt_tree_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_c_language_function(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_c_language_function($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::visibility_flags ##############

package gcc::visibility_flags;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_inpragma_get = *gccc::visibility_flags_inpragma_get;
*swig_inpragma_set = *gccc::visibility_flags_inpragma_set;
*swig_inlines_hidden_get = *gccc::visibility_flags_inlines_hidden_get;
*swig_inlines_hidden_set = *gccc::visibility_flags_inlines_hidden_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_visibility_flags(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_visibility_flags($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::c_fileinfo ##############

package gcc::c_fileinfo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_time_get = *gccc::c_fileinfo_time_get;
*swig_time_set = *gccc::c_fileinfo_time_set;
*swig_interface_only_get = *gccc::c_fileinfo_interface_only_get;
*swig_interface_only_set = *gccc::c_fileinfo_interface_only_set;
*swig_interface_unknown_get = *gccc::c_fileinfo_interface_unknown_get;
*swig_interface_unknown_set = *gccc::c_fileinfo_interface_unknown_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_c_fileinfo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_c_fileinfo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::text_info ##############

package gcc::text_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_format_spec_get = *gccc::text_info_format_spec_get;
*swig_format_spec_set = *gccc::text_info_format_spec_set;
*swig_args_ptr_get = *gccc::text_info_args_ptr_get;
*swig_args_ptr_set = *gccc::text_info_args_ptr_set;
*swig_err_no_get = *gccc::text_info_err_no_get;
*swig_err_no_set = *gccc::text_info_err_no_set;
*swig_locus_get = *gccc::text_info_locus_get;
*swig_locus_set = *gccc::text_info_locus_set;
*swig_x_data_get = *gccc::text_info_x_data_get;
*swig_x_data_set = *gccc::text_info_x_data_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_text_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_text_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::chunk_info ##############

package gcc::chunk_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_prev_get = *gccc::chunk_info_prev_get;
*swig_prev_set = *gccc::chunk_info_prev_set;
*swig_args_get = *gccc::chunk_info_args_get;
*swig_args_set = *gccc::chunk_info_args_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_chunk_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_chunk_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::output_buffer ##############

package gcc::output_buffer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_formatted_obstack_get = *gccc::output_buffer_formatted_obstack_get;
*swig_formatted_obstack_set = *gccc::output_buffer_formatted_obstack_set;
*swig_chunk_obstack_get = *gccc::output_buffer_chunk_obstack_get;
*swig_chunk_obstack_set = *gccc::output_buffer_chunk_obstack_set;
*swig_obstack_get = *gccc::output_buffer_obstack_get;
*swig_obstack_set = *gccc::output_buffer_obstack_set;
*swig_cur_chunk_array_get = *gccc::output_buffer_cur_chunk_array_get;
*swig_cur_chunk_array_set = *gccc::output_buffer_cur_chunk_array_set;
*swig_stream_get = *gccc::output_buffer_stream_get;
*swig_stream_set = *gccc::output_buffer_stream_set;
*swig_line_length_get = *gccc::output_buffer_line_length_get;
*swig_line_length_set = *gccc::output_buffer_line_length_set;
*swig_digit_buffer_get = *gccc::output_buffer_digit_buffer_get;
*swig_digit_buffer_set = *gccc::output_buffer_digit_buffer_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_output_buffer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_output_buffer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::pp_wrapping_mode_t ##############

package gcc::pp_wrapping_mode_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_rule_get = *gccc::pp_wrapping_mode_t_rule_get;
*swig_rule_set = *gccc::pp_wrapping_mode_t_rule_set;
*swig_line_cutoff_get = *gccc::pp_wrapping_mode_t_line_cutoff_get;
*swig_line_cutoff_set = *gccc::pp_wrapping_mode_t_line_cutoff_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_pp_wrapping_mode_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_pp_wrapping_mode_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::pretty_print_info ##############

package gcc::pretty_print_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_buffer_get = *gccc::pretty_print_info_buffer_get;
*swig_buffer_set = *gccc::pretty_print_info_buffer_set;
*swig_prefix_get = *gccc::pretty_print_info_prefix_get;
*swig_prefix_set = *gccc::pretty_print_info_prefix_set;
*swig_padding_get = *gccc::pretty_print_info_padding_get;
*swig_padding_set = *gccc::pretty_print_info_padding_set;
*swig_maximum_length_get = *gccc::pretty_print_info_maximum_length_get;
*swig_maximum_length_set = *gccc::pretty_print_info_maximum_length_set;
*swig_indent_skip_get = *gccc::pretty_print_info_indent_skip_get;
*swig_indent_skip_set = *gccc::pretty_print_info_indent_skip_set;
*swig_wrapping_get = *gccc::pretty_print_info_wrapping_get;
*swig_wrapping_set = *gccc::pretty_print_info_wrapping_set;
*swig_format_decoder_get = *gccc::pretty_print_info_format_decoder_get;
*swig_format_decoder_set = *gccc::pretty_print_info_format_decoder_set;
*swig_emitted_prefix_get = *gccc::pretty_print_info_emitted_prefix_get;
*swig_emitted_prefix_set = *gccc::pretty_print_info_emitted_prefix_set;
*swig_need_newline_get = *gccc::pretty_print_info_need_newline_get;
*swig_need_newline_set = *gccc::pretty_print_info_need_newline_set;
*swig_translate_identifiers_get = *gccc::pretty_print_info_translate_identifiers_get;
*swig_translate_identifiers_set = *gccc::pretty_print_info_translate_identifiers_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_pretty_print_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_pretty_print_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::diagnostic_info ##############

package gcc::diagnostic_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_message_get = *gccc::diagnostic_info_message_get;
*swig_message_set = *gccc::diagnostic_info_message_set;
*swig_location_get = *gccc::diagnostic_info_location_get;
*swig_location_set = *gccc::diagnostic_info_location_set;
*swig_override_column_get = *gccc::diagnostic_info_override_column_get;
*swig_override_column_set = *gccc::diagnostic_info_override_column_set;
*swig_x_data_get = *gccc::diagnostic_info_x_data_get;
*swig_x_data_set = *gccc::diagnostic_info_x_data_set;
*swig_kind_get = *gccc::diagnostic_info_kind_get;
*swig_kind_set = *gccc::diagnostic_info_kind_set;
*swig_option_index_get = *gccc::diagnostic_info_option_index_get;
*swig_option_index_set = *gccc::diagnostic_info_option_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_diagnostic_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_diagnostic_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::diagnostic_classification_change_t ##############

package gcc::diagnostic_classification_change_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_location_get = *gccc::diagnostic_classification_change_t_location_get;
*swig_location_set = *gccc::diagnostic_classification_change_t_location_set;
*swig_option_get = *gccc::diagnostic_classification_change_t_option_get;
*swig_option_set = *gccc::diagnostic_classification_change_t_option_set;
*swig_kind_get = *gccc::diagnostic_classification_change_t_kind_get;
*swig_kind_set = *gccc::diagnostic_classification_change_t_kind_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_diagnostic_classification_change_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_diagnostic_classification_change_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::diagnostic_context ##############

package gcc::diagnostic_context;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_printer_get = *gccc::diagnostic_context_printer_get;
*swig_printer_set = *gccc::diagnostic_context_printer_set;
*swig_diagnostic_count_get = *gccc::diagnostic_context_diagnostic_count_get;
*swig_diagnostic_count_set = *gccc::diagnostic_context_diagnostic_count_set;
*swig_some_warnings_are_errors_get = *gccc::diagnostic_context_some_warnings_are_errors_get;
*swig_some_warnings_are_errors_set = *gccc::diagnostic_context_some_warnings_are_errors_set;
*swig_warning_as_error_requested_get = *gccc::diagnostic_context_warning_as_error_requested_get;
*swig_warning_as_error_requested_set = *gccc::diagnostic_context_warning_as_error_requested_set;
*swig_n_opts_get = *gccc::diagnostic_context_n_opts_get;
*swig_n_opts_set = *gccc::diagnostic_context_n_opts_set;
*swig_classify_diagnostic_get = *gccc::diagnostic_context_classify_diagnostic_get;
*swig_classify_diagnostic_set = *gccc::diagnostic_context_classify_diagnostic_set;
*swig_classification_history_get = *gccc::diagnostic_context_classification_history_get;
*swig_classification_history_set = *gccc::diagnostic_context_classification_history_set;
*swig_n_classification_history_get = *gccc::diagnostic_context_n_classification_history_get;
*swig_n_classification_history_set = *gccc::diagnostic_context_n_classification_history_set;
*swig_push_list_get = *gccc::diagnostic_context_push_list_get;
*swig_push_list_set = *gccc::diagnostic_context_push_list_set;
*swig_n_push_get = *gccc::diagnostic_context_n_push_get;
*swig_n_push_set = *gccc::diagnostic_context_n_push_set;
*swig_show_option_requested_get = *gccc::diagnostic_context_show_option_requested_get;
*swig_show_option_requested_set = *gccc::diagnostic_context_show_option_requested_set;
*swig_abort_on_error_get = *gccc::diagnostic_context_abort_on_error_get;
*swig_abort_on_error_set = *gccc::diagnostic_context_abort_on_error_set;
*swig_show_column_get = *gccc::diagnostic_context_show_column_get;
*swig_show_column_set = *gccc::diagnostic_context_show_column_set;
*swig_pedantic_errors_get = *gccc::diagnostic_context_pedantic_errors_get;
*swig_pedantic_errors_set = *gccc::diagnostic_context_pedantic_errors_set;
*swig_permissive_get = *gccc::diagnostic_context_permissive_get;
*swig_permissive_set = *gccc::diagnostic_context_permissive_set;
*swig_opt_permissive_get = *gccc::diagnostic_context_opt_permissive_get;
*swig_opt_permissive_set = *gccc::diagnostic_context_opt_permissive_set;
*swig_fatal_errors_get = *gccc::diagnostic_context_fatal_errors_get;
*swig_fatal_errors_set = *gccc::diagnostic_context_fatal_errors_set;
*swig_dc_inhibit_warnings_get = *gccc::diagnostic_context_dc_inhibit_warnings_get;
*swig_dc_inhibit_warnings_set = *gccc::diagnostic_context_dc_inhibit_warnings_set;
*swig_dc_warn_system_headers_get = *gccc::diagnostic_context_dc_warn_system_headers_get;
*swig_dc_warn_system_headers_set = *gccc::diagnostic_context_dc_warn_system_headers_set;
*swig_max_errors_get = *gccc::diagnostic_context_max_errors_get;
*swig_max_errors_set = *gccc::diagnostic_context_max_errors_set;
*swig_begin_diagnostic_get = *gccc::diagnostic_context_begin_diagnostic_get;
*swig_begin_diagnostic_set = *gccc::diagnostic_context_begin_diagnostic_set;
*swig_end_diagnostic_get = *gccc::diagnostic_context_end_diagnostic_get;
*swig_end_diagnostic_set = *gccc::diagnostic_context_end_diagnostic_set;
*swig_internal_error_get = *gccc::diagnostic_context_internal_error_get;
*swig_internal_error_set = *gccc::diagnostic_context_internal_error_set;
*swig_option_enabled_get = *gccc::diagnostic_context_option_enabled_get;
*swig_option_enabled_set = *gccc::diagnostic_context_option_enabled_set;
*swig_option_state_get = *gccc::diagnostic_context_option_state_get;
*swig_option_state_set = *gccc::diagnostic_context_option_state_set;
*swig_option_name_get = *gccc::diagnostic_context_option_name_get;
*swig_option_name_set = *gccc::diagnostic_context_option_name_set;
*swig_x_data_get = *gccc::diagnostic_context_x_data_get;
*swig_x_data_set = *gccc::diagnostic_context_x_data_set;
*swig_last_module_get = *gccc::diagnostic_context_last_module_get;
*swig_last_module_set = *gccc::diagnostic_context_last_module_set;
*swig_lock_get = *gccc::diagnostic_context_lock_get;
*swig_lock_set = *gccc::diagnostic_context_lock_set;
*swig_inhibit_notes_p_get = *gccc::diagnostic_context_inhibit_notes_p_get;
*swig_inhibit_notes_p_set = *gccc::diagnostic_context_inhibit_notes_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_diagnostic_context(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_diagnostic_context($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::binding_entry_s ##############

package gcc::binding_entry_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_chain_get = *gccc::binding_entry_s_chain_get;
*swig_chain_set = *gccc::binding_entry_s_chain_set;
*swig_name_get = *gccc::binding_entry_s_name_get;
*swig_name_set = *gccc::binding_entry_s_name_set;
*swig_type_get = *gccc::binding_entry_s_type_get;
*swig_type_set = *gccc::binding_entry_s_type_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_binding_entry_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_binding_entry_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cxx_binding ##############

package gcc::cxx_binding;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_previous_get = *gccc::cxx_binding_previous_get;
*swig_previous_set = *gccc::cxx_binding_previous_set;
*swig_value_get = *gccc::cxx_binding_value_get;
*swig_value_set = *gccc::cxx_binding_value_set;
*swig_type_get = *gccc::cxx_binding_type_get;
*swig_type_set = *gccc::cxx_binding_type_set;
*swig_scope_get = *gccc::cxx_binding_scope_get;
*swig_scope_set = *gccc::cxx_binding_scope_set;
*swig_value_is_inherited_get = *gccc::cxx_binding_value_is_inherited_get;
*swig_value_is_inherited_set = *gccc::cxx_binding_value_is_inherited_set;
*swig_is_local_get = *gccc::cxx_binding_is_local_get;
*swig_is_local_set = *gccc::cxx_binding_is_local_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cxx_binding(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cxx_binding($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cxx_saved_binding ##############

package gcc::cxx_saved_binding;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_identifier_get = *gccc::cxx_saved_binding_identifier_get;
*swig_identifier_set = *gccc::cxx_saved_binding_identifier_set;
*swig_binding_get = *gccc::cxx_saved_binding_binding_get;
*swig_binding_set = *gccc::cxx_saved_binding_binding_set;
*swig_real_type_value_get = *gccc::cxx_saved_binding_real_type_value_get;
*swig_real_type_value_set = *gccc::cxx_saved_binding_real_type_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cxx_saved_binding(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cxx_saved_binding($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cxx_saved_binding_base ##############

package gcc::VEC_cxx_saved_binding_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_cxx_saved_binding_base_num_get;
*swig_num_set = *gccc::VEC_cxx_saved_binding_base_num_set;
*swig_alloc_get = *gccc::VEC_cxx_saved_binding_base_alloc_get;
*swig_alloc_set = *gccc::VEC_cxx_saved_binding_base_alloc_set;
*swig_vec_get = *gccc::VEC_cxx_saved_binding_base_vec_get;
*swig_vec_set = *gccc::VEC_cxx_saved_binding_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cxx_saved_binding_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cxx_saved_binding_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cxx_saved_binding_none ##############

package gcc::VEC_cxx_saved_binding_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cxx_saved_binding_none_base_get;
*swig_base_set = *gccc::VEC_cxx_saved_binding_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cxx_saved_binding_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cxx_saved_binding_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cxx_saved_binding_gc ##############

package gcc::VEC_cxx_saved_binding_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cxx_saved_binding_gc_base_get;
*swig_base_set = *gccc::VEC_cxx_saved_binding_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cxx_saved_binding_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cxx_saved_binding_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_class_binding ##############

package gcc::cp_class_binding;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::cp_class_binding_base_get;
*swig_base_set = *gccc::cp_class_binding_base_set;
*swig_identifier_get = *gccc::cp_class_binding_identifier_get;
*swig_identifier_set = *gccc::cp_class_binding_identifier_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_class_binding(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_class_binding($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cp_class_binding_base ##############

package gcc::VEC_cp_class_binding_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_cp_class_binding_base_num_get;
*swig_num_set = *gccc::VEC_cp_class_binding_base_num_set;
*swig_alloc_get = *gccc::VEC_cp_class_binding_base_alloc_get;
*swig_alloc_set = *gccc::VEC_cp_class_binding_base_alloc_set;
*swig_vec_get = *gccc::VEC_cp_class_binding_base_vec_get;
*swig_vec_set = *gccc::VEC_cp_class_binding_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cp_class_binding_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cp_class_binding_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cp_class_binding_none ##############

package gcc::VEC_cp_class_binding_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cp_class_binding_none_base_get;
*swig_base_set = *gccc::VEC_cp_class_binding_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cp_class_binding_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cp_class_binding_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cp_class_binding_gc ##############

package gcc::VEC_cp_class_binding_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cp_class_binding_gc_base_get;
*swig_base_set = *gccc::VEC_cp_class_binding_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cp_class_binding_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cp_class_binding_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_label_binding ##############

package gcc::cp_label_binding;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_label_get = *gccc::cp_label_binding_label_get;
*swig_label_set = *gccc::cp_label_binding_label_set;
*swig_prev_value_get = *gccc::cp_label_binding_prev_value_get;
*swig_prev_value_set = *gccc::cp_label_binding_prev_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_label_binding(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_label_binding($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cp_label_binding_base ##############

package gcc::VEC_cp_label_binding_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_cp_label_binding_base_num_get;
*swig_num_set = *gccc::VEC_cp_label_binding_base_num_set;
*swig_alloc_get = *gccc::VEC_cp_label_binding_base_alloc_get;
*swig_alloc_set = *gccc::VEC_cp_label_binding_base_alloc_set;
*swig_vec_get = *gccc::VEC_cp_label_binding_base_vec_get;
*swig_vec_set = *gccc::VEC_cp_label_binding_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cp_label_binding_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cp_label_binding_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cp_label_binding_none ##############

package gcc::VEC_cp_label_binding_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cp_label_binding_none_base_get;
*swig_base_set = *gccc::VEC_cp_label_binding_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cp_label_binding_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cp_label_binding_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cp_label_binding_gc ##############

package gcc::VEC_cp_label_binding_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cp_label_binding_gc_base_get;
*swig_base_set = *gccc::VEC_cp_label_binding_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cp_label_binding_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cp_label_binding_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_binding_level ##############

package gcc::cp_binding_level;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_names_get = *gccc::cp_binding_level_names_get;
*swig_names_set = *gccc::cp_binding_level_names_set;
*swig_names_size_get = *gccc::cp_binding_level_names_size_get;
*swig_names_size_set = *gccc::cp_binding_level_names_size_set;
*swig_namespaces_get = *gccc::cp_binding_level_namespaces_get;
*swig_namespaces_set = *gccc::cp_binding_level_namespaces_set;
*swig_static_decls_get = *gccc::cp_binding_level_static_decls_get;
*swig_static_decls_set = *gccc::cp_binding_level_static_decls_set;
*swig_usings_get = *gccc::cp_binding_level_usings_get;
*swig_usings_set = *gccc::cp_binding_level_usings_set;
*swig_using_directives_get = *gccc::cp_binding_level_using_directives_get;
*swig_using_directives_set = *gccc::cp_binding_level_using_directives_set;
*swig_class_shadowed_get = *gccc::cp_binding_level_class_shadowed_get;
*swig_class_shadowed_set = *gccc::cp_binding_level_class_shadowed_set;
*swig_type_shadowed_get = *gccc::cp_binding_level_type_shadowed_get;
*swig_type_shadowed_set = *gccc::cp_binding_level_type_shadowed_set;
*swig_shadowed_labels_get = *gccc::cp_binding_level_shadowed_labels_get;
*swig_shadowed_labels_set = *gccc::cp_binding_level_shadowed_labels_set;
*swig_blocks_get = *gccc::cp_binding_level_blocks_get;
*swig_blocks_set = *gccc::cp_binding_level_blocks_set;
*swig_this_entity_get = *gccc::cp_binding_level_this_entity_get;
*swig_this_entity_set = *gccc::cp_binding_level_this_entity_set;
*swig_level_chain_get = *gccc::cp_binding_level_level_chain_get;
*swig_level_chain_set = *gccc::cp_binding_level_level_chain_set;
*swig_dead_vars_from_for_get = *gccc::cp_binding_level_dead_vars_from_for_get;
*swig_dead_vars_from_for_set = *gccc::cp_binding_level_dead_vars_from_for_set;
*swig_statement_list_get = *gccc::cp_binding_level_statement_list_get;
*swig_statement_list_set = *gccc::cp_binding_level_statement_list_set;
*swig_binding_depth_get = *gccc::cp_binding_level_binding_depth_get;
*swig_binding_depth_set = *gccc::cp_binding_level_binding_depth_set;
*swig_kind_get = *gccc::cp_binding_level_kind_get;
*swig_kind_set = *gccc::cp_binding_level_kind_set;
*swig_explicit_spec_p_get = *gccc::cp_binding_level_explicit_spec_p_get;
*swig_explicit_spec_p_set = *gccc::cp_binding_level_explicit_spec_p_set;
*swig_keep_get = *gccc::cp_binding_level_keep_get;
*swig_keep_set = *gccc::cp_binding_level_keep_set;
*swig_more_cleanups_ok_get = *gccc::cp_binding_level_more_cleanups_ok_get;
*swig_more_cleanups_ok_set = *gccc::cp_binding_level_more_cleanups_ok_set;
*swig_have_cleanups_get = *gccc::cp_binding_level_have_cleanups_get;
*swig_have_cleanups_set = *gccc::cp_binding_level_have_cleanups_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_binding_level(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_binding_level($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_identifier ##############

package gcc::lang_identifier;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_c_common_get = *gccc::lang_identifier_c_common_get;
*swig_c_common_set = *gccc::lang_identifier_c_common_set;
*swig_namespace_bindings_get = *gccc::lang_identifier_namespace_bindings_get;
*swig_namespace_bindings_set = *gccc::lang_identifier_namespace_bindings_set;
*swig_bindings_get = *gccc::lang_identifier_bindings_get;
*swig_bindings_set = *gccc::lang_identifier_bindings_set;
*swig_class_template_info_get = *gccc::lang_identifier_class_template_info_get;
*swig_class_template_info_set = *gccc::lang_identifier_class_template_info_set;
*swig_label_value_get = *gccc::lang_identifier_label_value_get;
*swig_label_value_set = *gccc::lang_identifier_label_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_identifier(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_identifier($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::template_parm_index_s ##############

package gcc::template_parm_index_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::template_parm_index_s_common_get;
*swig_common_set = *gccc::template_parm_index_s_common_set;
*swig_index_get = *gccc::template_parm_index_s_index_get;
*swig_index_set = *gccc::template_parm_index_s_index_set;
*swig_level_get = *gccc::template_parm_index_s_level_get;
*swig_level_set = *gccc::template_parm_index_s_level_set;
*swig_orig_level_get = *gccc::template_parm_index_s_orig_level_get;
*swig_orig_level_set = *gccc::template_parm_index_s_orig_level_set;
*swig_num_siblings_get = *gccc::template_parm_index_s_num_siblings_get;
*swig_num_siblings_set = *gccc::template_parm_index_s_num_siblings_set;
*swig_decl_get = *gccc::template_parm_index_s_decl_get;
*swig_decl_set = *gccc::template_parm_index_s_decl_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_template_parm_index_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_template_parm_index_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ptrmem_cst ##############

package gcc::ptrmem_cst;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::ptrmem_cst_common_get;
*swig_common_set = *gccc::ptrmem_cst_common_set;
*swig_member_get = *gccc::ptrmem_cst_member_get;
*swig_member_set = *gccc::ptrmem_cst_member_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ptrmem_cst(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ptrmem_cst($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_overload ##############

package gcc::tree_overload;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_overload_common_get;
*swig_common_set = *gccc::tree_overload_common_set;
*swig_function_get = *gccc::tree_overload_function_get;
*swig_function_set = *gccc::tree_overload_function_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_overload(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_overload($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_baselink ##############

package gcc::tree_baselink;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_baselink_common_get;
*swig_common_set = *gccc::tree_baselink_common_set;
*swig_binfo_get = *gccc::tree_baselink_binfo_get;
*swig_binfo_set = *gccc::tree_baselink_binfo_set;
*swig_functions_get = *gccc::tree_baselink_functions_get;
*swig_functions_set = *gccc::tree_baselink_functions_set;
*swig_access_binfo_get = *gccc::tree_baselink_access_binfo_get;
*swig_access_binfo_set = *gccc::tree_baselink_access_binfo_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_baselink(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_baselink($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_default_arg ##############

package gcc::tree_default_arg;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_default_arg_common_get;
*swig_common_set = *gccc::tree_default_arg_common_set;
*swig_tokens_get = *gccc::tree_default_arg_tokens_get;
*swig_tokens_set = *gccc::tree_default_arg_tokens_set;
*swig_instantiations_get = *gccc::tree_default_arg_instantiations_get;
*swig_instantiations_set = *gccc::tree_default_arg_instantiations_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_default_arg(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_default_arg($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_static_assert ##############

package gcc::tree_static_assert;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_static_assert_common_get;
*swig_common_set = *gccc::tree_static_assert_common_set;
*swig_condition_get = *gccc::tree_static_assert_condition_get;
*swig_condition_set = *gccc::tree_static_assert_condition_set;
*swig_message_get = *gccc::tree_static_assert_message_get;
*swig_message_set = *gccc::tree_static_assert_message_set;
*swig_location_get = *gccc::tree_static_assert_location_get;
*swig_location_set = *gccc::tree_static_assert_location_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_static_assert(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_static_assert($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_argument_pack_select ##############

package gcc::tree_argument_pack_select;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_argument_pack_select_common_get;
*swig_common_set = *gccc::tree_argument_pack_select_common_set;
*swig_argument_pack_get = *gccc::tree_argument_pack_select_argument_pack_get;
*swig_argument_pack_set = *gccc::tree_argument_pack_select_argument_pack_set;
*swig_index_get = *gccc::tree_argument_pack_select_index_get;
*swig_index_set = *gccc::tree_argument_pack_select_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_argument_pack_select(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_argument_pack_select($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_trait_expr ##############

package gcc::tree_trait_expr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_trait_expr_common_get;
*swig_common_set = *gccc::tree_trait_expr_common_set;
*swig_type1_get = *gccc::tree_trait_expr_type1_get;
*swig_type1_set = *gccc::tree_trait_expr_type1_set;
*swig_type2_get = *gccc::tree_trait_expr_type2_get;
*swig_type2_set = *gccc::tree_trait_expr_type2_set;
*swig_kind_get = *gccc::tree_trait_expr_kind_get;
*swig_kind_set = *gccc::tree_trait_expr_kind_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_trait_expr(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_trait_expr($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_lambda_expr ##############

package gcc::tree_lambda_expr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_lambda_expr_common_get;
*swig_common_set = *gccc::tree_lambda_expr_common_set;
*swig_locus_get = *gccc::tree_lambda_expr_locus_get;
*swig_locus_set = *gccc::tree_lambda_expr_locus_set;
*swig_default_capture_mode_get = *gccc::tree_lambda_expr_default_capture_mode_get;
*swig_default_capture_mode_set = *gccc::tree_lambda_expr_default_capture_mode_set;
*swig_capture_list_get = *gccc::tree_lambda_expr_capture_list_get;
*swig_capture_list_set = *gccc::tree_lambda_expr_capture_list_set;
*swig_this_capture_get = *gccc::tree_lambda_expr_this_capture_get;
*swig_this_capture_set = *gccc::tree_lambda_expr_this_capture_set;
*swig_return_type_get = *gccc::tree_lambda_expr_return_type_get;
*swig_return_type_set = *gccc::tree_lambda_expr_return_type_set;
*swig_extra_scope_get = *gccc::tree_lambda_expr_extra_scope_get;
*swig_extra_scope_set = *gccc::tree_lambda_expr_extra_scope_set;
*swig_discriminator_get = *gccc::tree_lambda_expr_discriminator_get;
*swig_discriminator_set = *gccc::tree_lambda_expr_discriminator_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_lambda_expr(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_lambda_expr($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::qualified_typedef_usage_s ##############

package gcc::qualified_typedef_usage_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_typedef_decl_get = *gccc::qualified_typedef_usage_s_typedef_decl_get;
*swig_typedef_decl_set = *gccc::qualified_typedef_usage_s_typedef_decl_set;
*swig_context_get = *gccc::qualified_typedef_usage_s_context_get;
*swig_context_set = *gccc::qualified_typedef_usage_s_context_set;
*swig_locus_get = *gccc::qualified_typedef_usage_s_locus_get;
*swig_locus_set = *gccc::qualified_typedef_usage_s_locus_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_qualified_typedef_usage_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_qualified_typedef_usage_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_qualified_typedef_usage_t_base ##############

package gcc::VEC_qualified_typedef_usage_t_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_qualified_typedef_usage_t_base_num_get;
*swig_num_set = *gccc::VEC_qualified_typedef_usage_t_base_num_set;
*swig_alloc_get = *gccc::VEC_qualified_typedef_usage_t_base_alloc_get;
*swig_alloc_set = *gccc::VEC_qualified_typedef_usage_t_base_alloc_set;
*swig_vec_get = *gccc::VEC_qualified_typedef_usage_t_base_vec_get;
*swig_vec_set = *gccc::VEC_qualified_typedef_usage_t_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_qualified_typedef_usage_t_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_qualified_typedef_usage_t_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_qualified_typedef_usage_t_none ##############

package gcc::VEC_qualified_typedef_usage_t_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_qualified_typedef_usage_t_none_base_get;
*swig_base_set = *gccc::VEC_qualified_typedef_usage_t_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_qualified_typedef_usage_t_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_qualified_typedef_usage_t_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_qualified_typedef_usage_t_gc ##############

package gcc::VEC_qualified_typedef_usage_t_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_qualified_typedef_usage_t_gc_base_get;
*swig_base_set = *gccc::VEC_qualified_typedef_usage_t_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_qualified_typedef_usage_t_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_qualified_typedef_usage_t_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_template_info ##############

package gcc::tree_template_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_common_get = *gccc::tree_template_info_common_get;
*swig_common_set = *gccc::tree_template_info_common_set;
*swig_typedefs_needing_access_checking_get = *gccc::tree_template_info_typedefs_needing_access_checking_get;
*swig_typedefs_needing_access_checking_set = *gccc::tree_template_info_typedefs_needing_access_checking_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_template_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_template_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_tree_node ##############

package gcc::lang_tree_node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_generic_get = *gccc::lang_tree_node_generic_get;
*swig_generic_set = *gccc::lang_tree_node_generic_set;
*swig_tpi_get = *gccc::lang_tree_node_tpi_get;
*swig_tpi_set = *gccc::lang_tree_node_tpi_set;
*swig_ptrmem_get = *gccc::lang_tree_node_ptrmem_get;
*swig_ptrmem_set = *gccc::lang_tree_node_ptrmem_set;
*swig_overload_get = *gccc::lang_tree_node_overload_get;
*swig_overload_set = *gccc::lang_tree_node_overload_set;
*swig_baselink_get = *gccc::lang_tree_node_baselink_get;
*swig_baselink_set = *gccc::lang_tree_node_baselink_set;
*swig_default_arg_get = *gccc::lang_tree_node_default_arg_get;
*swig_default_arg_set = *gccc::lang_tree_node_default_arg_set;
*swig_identifier_get = *gccc::lang_tree_node_identifier_get;
*swig_identifier_set = *gccc::lang_tree_node_identifier_set;
*swig_static_assertion_get = *gccc::lang_tree_node_static_assertion_get;
*swig_static_assertion_set = *gccc::lang_tree_node_static_assertion_set;
*swig_argument_pack_select_get = *gccc::lang_tree_node_argument_pack_select_get;
*swig_argument_pack_select_set = *gccc::lang_tree_node_argument_pack_select_set;
*swig_trait_expression_get = *gccc::lang_tree_node_trait_expression_get;
*swig_trait_expression_set = *gccc::lang_tree_node_trait_expression_set;
*swig_lambda_expression_get = *gccc::lang_tree_node_lambda_expression_get;
*swig_lambda_expression_set = *gccc::lang_tree_node_lambda_expression_set;
*swig_template_info_get = *gccc::lang_tree_node_template_info_get;
*swig_template_info_set = *gccc::lang_tree_node_template_info_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_tree_node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_tree_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::saved_scope ##############

package gcc::saved_scope;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_old_bindings_get = *gccc::saved_scope_old_bindings_get;
*swig_old_bindings_set = *gccc::saved_scope_old_bindings_set;
*swig_old_namespace_get = *gccc::saved_scope_old_namespace_get;
*swig_old_namespace_set = *gccc::saved_scope_old_namespace_set;
*swig_decl_ns_list_get = *gccc::saved_scope_decl_ns_list_get;
*swig_decl_ns_list_set = *gccc::saved_scope_decl_ns_list_set;
*swig_class_name_get = *gccc::saved_scope_class_name_get;
*swig_class_name_set = *gccc::saved_scope_class_name_set;
*swig_class_type_get = *gccc::saved_scope_class_type_get;
*swig_class_type_set = *gccc::saved_scope_class_type_set;
*swig_access_specifier_get = *gccc::saved_scope_access_specifier_get;
*swig_access_specifier_set = *gccc::saved_scope_access_specifier_set;
*swig_function_decl_get = *gccc::saved_scope_function_decl_get;
*swig_function_decl_set = *gccc::saved_scope_function_decl_set;
*swig_lang_base_get = *gccc::saved_scope_lang_base_get;
*swig_lang_base_set = *gccc::saved_scope_lang_base_set;
*swig_lang_name_get = *gccc::saved_scope_lang_name_get;
*swig_lang_name_set = *gccc::saved_scope_lang_name_set;
*swig_template_parms_get = *gccc::saved_scope_template_parms_get;
*swig_template_parms_set = *gccc::saved_scope_template_parms_set;
*swig_x_previous_class_level_get = *gccc::saved_scope_x_previous_class_level_get;
*swig_x_previous_class_level_set = *gccc::saved_scope_x_previous_class_level_set;
*swig_x_saved_tree_get = *gccc::saved_scope_x_saved_tree_get;
*swig_x_saved_tree_set = *gccc::saved_scope_x_saved_tree_set;
*swig_x_processing_template_decl_get = *gccc::saved_scope_x_processing_template_decl_get;
*swig_x_processing_template_decl_set = *gccc::saved_scope_x_processing_template_decl_set;
*swig_x_processing_specialization_get = *gccc::saved_scope_x_processing_specialization_get;
*swig_x_processing_specialization_set = *gccc::saved_scope_x_processing_specialization_set;
*swig_x_processing_explicit_instantiation_get = *gccc::saved_scope_x_processing_explicit_instantiation_get;
*swig_x_processing_explicit_instantiation_set = *gccc::saved_scope_x_processing_explicit_instantiation_set;
*swig_need_pop_function_context_get = *gccc::saved_scope_need_pop_function_context_get;
*swig_need_pop_function_context_set = *gccc::saved_scope_need_pop_function_context_set;
*swig_unevaluated_operand_get = *gccc::saved_scope_unevaluated_operand_get;
*swig_unevaluated_operand_set = *gccc::saved_scope_unevaluated_operand_set;
*swig_inhibit_evaluation_warnings_get = *gccc::saved_scope_inhibit_evaluation_warnings_get;
*swig_inhibit_evaluation_warnings_set = *gccc::saved_scope_inhibit_evaluation_warnings_set;
*swig_x_stmt_tree_get = *gccc::saved_scope_x_stmt_tree_get;
*swig_x_stmt_tree_set = *gccc::saved_scope_x_stmt_tree_set;
*swig_class_bindings_get = *gccc::saved_scope_class_bindings_get;
*swig_class_bindings_set = *gccc::saved_scope_class_bindings_set;
*swig_bindings_get = *gccc::saved_scope_bindings_get;
*swig_bindings_set = *gccc::saved_scope_bindings_set;
*swig_prev_get = *gccc::saved_scope_prev_get;
*swig_prev_set = *gccc::saved_scope_prev_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_saved_scope(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_saved_scope($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cxx_int_tree_map ##############

package gcc::cxx_int_tree_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_uid_get = *gccc::cxx_int_tree_map_uid_get;
*swig_uid_set = *gccc::cxx_int_tree_map_uid_set;
*swig_to_get = *gccc::cxx_int_tree_map_to_get;
*swig_to_set = *gccc::cxx_int_tree_map_to_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cxx_int_tree_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cxx_int_tree_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::language_function ##############

package gcc::language_function;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::language_function_base_get;
*swig_base_set = *gccc::language_function_base_set;
*swig_x_cdtor_label_get = *gccc::language_function_x_cdtor_label_get;
*swig_x_cdtor_label_set = *gccc::language_function_x_cdtor_label_set;
*swig_x_current_class_ptr_get = *gccc::language_function_x_current_class_ptr_get;
*swig_x_current_class_ptr_set = *gccc::language_function_x_current_class_ptr_set;
*swig_x_current_class_ref_get = *gccc::language_function_x_current_class_ref_get;
*swig_x_current_class_ref_set = *gccc::language_function_x_current_class_ref_set;
*swig_x_eh_spec_block_get = *gccc::language_function_x_eh_spec_block_get;
*swig_x_eh_spec_block_set = *gccc::language_function_x_eh_spec_block_set;
*swig_x_in_charge_parm_get = *gccc::language_function_x_in_charge_parm_get;
*swig_x_in_charge_parm_set = *gccc::language_function_x_in_charge_parm_set;
*swig_x_vtt_parm_get = *gccc::language_function_x_vtt_parm_get;
*swig_x_vtt_parm_set = *gccc::language_function_x_vtt_parm_set;
*swig_x_return_value_get = *gccc::language_function_x_return_value_get;
*swig_x_return_value_set = *gccc::language_function_x_return_value_set;
*swig_returns_value_get = *gccc::language_function_returns_value_get;
*swig_returns_value_set = *gccc::language_function_returns_value_set;
*swig_returns_null_get = *gccc::language_function_returns_null_get;
*swig_returns_null_set = *gccc::language_function_returns_null_set;
*swig_returns_abnormally_get = *gccc::language_function_returns_abnormally_get;
*swig_returns_abnormally_set = *gccc::language_function_returns_abnormally_set;
*swig_in_function_try_handler_get = *gccc::language_function_in_function_try_handler_get;
*swig_in_function_try_handler_set = *gccc::language_function_in_function_try_handler_set;
*swig_in_base_initializer_get = *gccc::language_function_in_base_initializer_get;
*swig_in_base_initializer_set = *gccc::language_function_in_base_initializer_set;
*swig_can_throw_get = *gccc::language_function_can_throw_get;
*swig_can_throw_set = *gccc::language_function_can_throw_set;
*swig_x_named_labels_get = *gccc::language_function_x_named_labels_get;
*swig_x_named_labels_set = *gccc::language_function_x_named_labels_set;
*swig_bindings_get = *gccc::language_function_bindings_get;
*swig_bindings_set = *gccc::language_function_bindings_set;
*swig_x_local_names_get = *gccc::language_function_x_local_names_get;
*swig_x_local_names_set = *gccc::language_function_x_local_names_set;
*swig_extern_decl_map_get = *gccc::language_function_extern_decl_map_get;
*swig_extern_decl_map_set = *gccc::language_function_extern_decl_map_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_language_function(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_language_function($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_pair_s ##############

package gcc::tree_pair_s;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_purpose_get = *gccc::tree_pair_s_purpose_get;
*swig_purpose_set = *gccc::tree_pair_s_purpose_set;
*swig_value_get = *gccc::tree_pair_s_value_get;
*swig_value_set = *gccc::tree_pair_s_value_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_pair_s(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_pair_s($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_pair_s_base ##############

package gcc::VEC_tree_pair_s_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_tree_pair_s_base_num_get;
*swig_num_set = *gccc::VEC_tree_pair_s_base_num_set;
*swig_alloc_get = *gccc::VEC_tree_pair_s_base_alloc_get;
*swig_alloc_set = *gccc::VEC_tree_pair_s_base_alloc_set;
*swig_vec_get = *gccc::VEC_tree_pair_s_base_vec_get;
*swig_vec_set = *gccc::VEC_tree_pair_s_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_pair_s_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_pair_s_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_pair_s_none ##############

package gcc::VEC_tree_pair_s_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_tree_pair_s_none_base_get;
*swig_base_set = *gccc::VEC_tree_pair_s_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_pair_s_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_pair_s_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_tree_pair_s_gc ##############

package gcc::VEC_tree_pair_s_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_tree_pair_s_gc_base_get;
*swig_base_set = *gccc::VEC_tree_pair_s_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_tree_pair_s_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_tree_pair_s_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_type_header ##############

package gcc::lang_type_header;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_is_lang_type_class_get = *gccc::lang_type_header_is_lang_type_class_get;
*swig_is_lang_type_class_set = *gccc::lang_type_header_is_lang_type_class_set;
*swig_has_type_conversion_get = *gccc::lang_type_header_has_type_conversion_get;
*swig_has_type_conversion_set = *gccc::lang_type_header_has_type_conversion_set;
*swig_has_copy_ctor_get = *gccc::lang_type_header_has_copy_ctor_get;
*swig_has_copy_ctor_set = *gccc::lang_type_header_has_copy_ctor_set;
*swig_has_default_ctor_get = *gccc::lang_type_header_has_default_ctor_get;
*swig_has_default_ctor_set = *gccc::lang_type_header_has_default_ctor_set;
*swig_const_needs_init_get = *gccc::lang_type_header_const_needs_init_get;
*swig_const_needs_init_set = *gccc::lang_type_header_const_needs_init_set;
*swig_ref_needs_init_get = *gccc::lang_type_header_ref_needs_init_get;
*swig_ref_needs_init_set = *gccc::lang_type_header_ref_needs_init_set;
*swig_has_const_copy_assign_get = *gccc::lang_type_header_has_const_copy_assign_get;
*swig_has_const_copy_assign_set = *gccc::lang_type_header_has_const_copy_assign_set;
*swig_spare_get = *gccc::lang_type_header_spare_get;
*swig_spare_set = *gccc::lang_type_header_spare_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_type_header(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_type_header($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_type_class ##############

package gcc::lang_type_class;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_h_get = *gccc::lang_type_class_h_get;
*swig_h_set = *gccc::lang_type_class_h_set;
*swig_align_get = *gccc::lang_type_class_align_get;
*swig_align_set = *gccc::lang_type_class_align_set;
*swig_has_mutable_get = *gccc::lang_type_class_has_mutable_get;
*swig_has_mutable_set = *gccc::lang_type_class_has_mutable_set;
*swig_com_interface_get = *gccc::lang_type_class_com_interface_get;
*swig_com_interface_set = *gccc::lang_type_class_com_interface_set;
*swig_non_pod_class_get = *gccc::lang_type_class_non_pod_class_get;
*swig_non_pod_class_set = *gccc::lang_type_class_non_pod_class_set;
*swig_nearly_empty_p_get = *gccc::lang_type_class_nearly_empty_p_get;
*swig_nearly_empty_p_set = *gccc::lang_type_class_nearly_empty_p_set;
*swig_user_align_get = *gccc::lang_type_class_user_align_get;
*swig_user_align_set = *gccc::lang_type_class_user_align_set;
*swig_has_copy_assign_get = *gccc::lang_type_class_has_copy_assign_get;
*swig_has_copy_assign_set = *gccc::lang_type_class_has_copy_assign_set;
*swig_has_new_get = *gccc::lang_type_class_has_new_get;
*swig_has_new_set = *gccc::lang_type_class_has_new_set;
*swig_has_array_new_get = *gccc::lang_type_class_has_array_new_get;
*swig_has_array_new_set = *gccc::lang_type_class_has_array_new_set;
*swig_gets_delete_get = *gccc::lang_type_class_gets_delete_get;
*swig_gets_delete_set = *gccc::lang_type_class_gets_delete_set;
*swig_interface_only_get = *gccc::lang_type_class_interface_only_get;
*swig_interface_only_set = *gccc::lang_type_class_interface_only_set;
*swig_interface_unknown_get = *gccc::lang_type_class_interface_unknown_get;
*swig_interface_unknown_set = *gccc::lang_type_class_interface_unknown_set;
*swig_contains_empty_class_p_get = *gccc::lang_type_class_contains_empty_class_p_get;
*swig_contains_empty_class_p_set = *gccc::lang_type_class_contains_empty_class_p_set;
*swig_anon_aggr_get = *gccc::lang_type_class_anon_aggr_get;
*swig_anon_aggr_set = *gccc::lang_type_class_anon_aggr_set;
*swig_non_zero_init_get = *gccc::lang_type_class_non_zero_init_get;
*swig_non_zero_init_set = *gccc::lang_type_class_non_zero_init_set;
*swig_empty_p_get = *gccc::lang_type_class_empty_p_get;
*swig_empty_p_set = *gccc::lang_type_class_empty_p_set;
*swig_vec_new_uses_cookie_get = *gccc::lang_type_class_vec_new_uses_cookie_get;
*swig_vec_new_uses_cookie_set = *gccc::lang_type_class_vec_new_uses_cookie_set;
*swig_declared_class_get = *gccc::lang_type_class_declared_class_get;
*swig_declared_class_set = *gccc::lang_type_class_declared_class_set;
*swig_diamond_shaped_get = *gccc::lang_type_class_diamond_shaped_get;
*swig_diamond_shaped_set = *gccc::lang_type_class_diamond_shaped_set;
*swig_repeated_base_get = *gccc::lang_type_class_repeated_base_get;
*swig_repeated_base_set = *gccc::lang_type_class_repeated_base_set;
*swig_being_defined_get = *gccc::lang_type_class_being_defined_get;
*swig_being_defined_set = *gccc::lang_type_class_being_defined_set;
*swig_java_interface_get = *gccc::lang_type_class_java_interface_get;
*swig_java_interface_set = *gccc::lang_type_class_java_interface_set;
*swig_debug_requested_get = *gccc::lang_type_class_debug_requested_get;
*swig_debug_requested_set = *gccc::lang_type_class_debug_requested_set;
*swig_fields_readonly_get = *gccc::lang_type_class_fields_readonly_get;
*swig_fields_readonly_set = *gccc::lang_type_class_fields_readonly_set;
*swig_use_template_get = *gccc::lang_type_class_use_template_get;
*swig_use_template_set = *gccc::lang_type_class_use_template_set;
*swig_ptrmemfunc_flag_get = *gccc::lang_type_class_ptrmemfunc_flag_get;
*swig_ptrmemfunc_flag_set = *gccc::lang_type_class_ptrmemfunc_flag_set;
*swig_was_anonymous_get = *gccc::lang_type_class_was_anonymous_get;
*swig_was_anonymous_set = *gccc::lang_type_class_was_anonymous_set;
*swig_lazy_default_ctor_get = *gccc::lang_type_class_lazy_default_ctor_get;
*swig_lazy_default_ctor_set = *gccc::lang_type_class_lazy_default_ctor_set;
*swig_lazy_copy_ctor_get = *gccc::lang_type_class_lazy_copy_ctor_get;
*swig_lazy_copy_ctor_set = *gccc::lang_type_class_lazy_copy_ctor_set;
*swig_lazy_copy_assign_get = *gccc::lang_type_class_lazy_copy_assign_get;
*swig_lazy_copy_assign_set = *gccc::lang_type_class_lazy_copy_assign_set;
*swig_lazy_destructor_get = *gccc::lang_type_class_lazy_destructor_get;
*swig_lazy_destructor_set = *gccc::lang_type_class_lazy_destructor_set;
*swig_has_const_copy_ctor_get = *gccc::lang_type_class_has_const_copy_ctor_get;
*swig_has_const_copy_ctor_set = *gccc::lang_type_class_has_const_copy_ctor_set;
*swig_has_complex_copy_ctor_get = *gccc::lang_type_class_has_complex_copy_ctor_get;
*swig_has_complex_copy_ctor_set = *gccc::lang_type_class_has_complex_copy_ctor_set;
*swig_has_complex_copy_assign_get = *gccc::lang_type_class_has_complex_copy_assign_get;
*swig_has_complex_copy_assign_set = *gccc::lang_type_class_has_complex_copy_assign_set;
*swig_non_aggregate_get = *gccc::lang_type_class_non_aggregate_get;
*swig_non_aggregate_set = *gccc::lang_type_class_non_aggregate_set;
*swig_has_complex_dflt_get = *gccc::lang_type_class_has_complex_dflt_get;
*swig_has_complex_dflt_set = *gccc::lang_type_class_has_complex_dflt_set;
*swig_has_list_ctor_get = *gccc::lang_type_class_has_list_ctor_get;
*swig_has_list_ctor_set = *gccc::lang_type_class_has_list_ctor_set;
*swig_non_std_layout_get = *gccc::lang_type_class_non_std_layout_get;
*swig_non_std_layout_set = *gccc::lang_type_class_non_std_layout_set;
*swig_is_literal_get = *gccc::lang_type_class_is_literal_get;
*swig_is_literal_set = *gccc::lang_type_class_is_literal_set;
*swig_lazy_move_ctor_get = *gccc::lang_type_class_lazy_move_ctor_get;
*swig_lazy_move_ctor_set = *gccc::lang_type_class_lazy_move_ctor_set;
*swig_lazy_move_assign_get = *gccc::lang_type_class_lazy_move_assign_get;
*swig_lazy_move_assign_set = *gccc::lang_type_class_lazy_move_assign_set;
*swig_has_complex_move_ctor_get = *gccc::lang_type_class_has_complex_move_ctor_get;
*swig_has_complex_move_ctor_set = *gccc::lang_type_class_has_complex_move_ctor_set;
*swig_has_complex_move_assign_get = *gccc::lang_type_class_has_complex_move_assign_get;
*swig_has_complex_move_assign_set = *gccc::lang_type_class_has_complex_move_assign_set;
*swig_has_constexpr_ctor_get = *gccc::lang_type_class_has_constexpr_ctor_get;
*swig_has_constexpr_ctor_set = *gccc::lang_type_class_has_constexpr_ctor_set;
*swig_dummy_get = *gccc::lang_type_class_dummy_get;
*swig_dummy_set = *gccc::lang_type_class_dummy_set;
*swig_primary_base_get = *gccc::lang_type_class_primary_base_get;
*swig_primary_base_set = *gccc::lang_type_class_primary_base_set;
*swig_vcall_indices_get = *gccc::lang_type_class_vcall_indices_get;
*swig_vcall_indices_set = *gccc::lang_type_class_vcall_indices_set;
*swig_vtables_get = *gccc::lang_type_class_vtables_get;
*swig_vtables_set = *gccc::lang_type_class_vtables_set;
*swig_typeinfo_var_get = *gccc::lang_type_class_typeinfo_var_get;
*swig_typeinfo_var_set = *gccc::lang_type_class_typeinfo_var_set;
*swig_vbases_get = *gccc::lang_type_class_vbases_get;
*swig_vbases_set = *gccc::lang_type_class_vbases_set;
*swig_nested_udts_get = *gccc::lang_type_class_nested_udts_get;
*swig_nested_udts_set = *gccc::lang_type_class_nested_udts_set;
*swig_as_base_get = *gccc::lang_type_class_as_base_get;
*swig_as_base_set = *gccc::lang_type_class_as_base_set;
*swig_pure_virtuals_get = *gccc::lang_type_class_pure_virtuals_get;
*swig_pure_virtuals_set = *gccc::lang_type_class_pure_virtuals_set;
*swig_friend_classes_get = *gccc::lang_type_class_friend_classes_get;
*swig_friend_classes_set = *gccc::lang_type_class_friend_classes_set;
*swig_methods_get = *gccc::lang_type_class_methods_get;
*swig_methods_set = *gccc::lang_type_class_methods_set;
*swig_key_method_get = *gccc::lang_type_class_key_method_get;
*swig_key_method_set = *gccc::lang_type_class_key_method_set;
*swig_decl_list_get = *gccc::lang_type_class_decl_list_get;
*swig_decl_list_set = *gccc::lang_type_class_decl_list_set;
*swig_template_info_get = *gccc::lang_type_class_template_info_get;
*swig_template_info_set = *gccc::lang_type_class_template_info_set;
*swig_befriending_classes_get = *gccc::lang_type_class_befriending_classes_get;
*swig_befriending_classes_set = *gccc::lang_type_class_befriending_classes_set;
*swig_objc_info_get = *gccc::lang_type_class_objc_info_get;
*swig_objc_info_set = *gccc::lang_type_class_objc_info_set;
*swig_sorted_fields_get = *gccc::lang_type_class_sorted_fields_get;
*swig_sorted_fields_set = *gccc::lang_type_class_sorted_fields_set;
*swig_lambda_expr_get = *gccc::lang_type_class_lambda_expr_get;
*swig_lambda_expr_set = *gccc::lang_type_class_lambda_expr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_type_class(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_type_class($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_type_ptrmem ##############

package gcc::lang_type_ptrmem;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_h_get = *gccc::lang_type_ptrmem_h_get;
*swig_h_set = *gccc::lang_type_ptrmem_h_set;
*swig_record_get = *gccc::lang_type_ptrmem_record_get;
*swig_record_set = *gccc::lang_type_ptrmem_record_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_type_ptrmem(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_type_ptrmem($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_type_t ##############

package gcc::lang_type_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_u_get = *gccc::lang_type_t_u_get;
*swig_u_set = *gccc::lang_type_t_u_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_type_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_type_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_type_t_u ##############

package gcc::lang_type_t_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_h_get = *gccc::lang_type_t_u_h_get;
*swig_h_set = *gccc::lang_type_t_u_h_set;
*swig_c_get = *gccc::lang_type_t_u_c_get;
*swig_c_set = *gccc::lang_type_t_u_c_set;
*swig_ptrmem_get = *gccc::lang_type_t_u_ptrmem_get;
*swig_ptrmem_set = *gccc::lang_type_t_u_ptrmem_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_type_t_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_type_t_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_base ##############

package gcc::lang_decl_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_selector_get = *gccc::lang_decl_base_selector_get;
*swig_selector_set = *gccc::lang_decl_base_selector_set;
*swig_language_get = *gccc::lang_decl_base_language_get;
*swig_language_set = *gccc::lang_decl_base_language_set;
*swig_use_template_get = *gccc::lang_decl_base_use_template_get;
*swig_use_template_set = *gccc::lang_decl_base_use_template_set;
*swig_not_really_extern_get = *gccc::lang_decl_base_not_really_extern_get;
*swig_not_really_extern_set = *gccc::lang_decl_base_not_really_extern_set;
*swig_initialized_in_class_get = *gccc::lang_decl_base_initialized_in_class_get;
*swig_initialized_in_class_set = *gccc::lang_decl_base_initialized_in_class_set;
*swig_repo_available_p_get = *gccc::lang_decl_base_repo_available_p_get;
*swig_repo_available_p_set = *gccc::lang_decl_base_repo_available_p_set;
*swig_threadprivate_or_deleted_p_get = *gccc::lang_decl_base_threadprivate_or_deleted_p_get;
*swig_threadprivate_or_deleted_p_set = *gccc::lang_decl_base_threadprivate_or_deleted_p_set;
*swig_anticipated_p_get = *gccc::lang_decl_base_anticipated_p_get;
*swig_anticipated_p_set = *gccc::lang_decl_base_anticipated_p_set;
*swig_friend_attr_get = *gccc::lang_decl_base_friend_attr_get;
*swig_friend_attr_set = *gccc::lang_decl_base_friend_attr_set;
*swig_template_conv_p_get = *gccc::lang_decl_base_template_conv_p_get;
*swig_template_conv_p_set = *gccc::lang_decl_base_template_conv_p_set;
*swig_odr_used_get = *gccc::lang_decl_base_odr_used_get;
*swig_odr_used_set = *gccc::lang_decl_base_odr_used_set;
*swig_u2sel_get = *gccc::lang_decl_base_u2sel_get;
*swig_u2sel_set = *gccc::lang_decl_base_u2sel_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_min ##############

package gcc::lang_decl_min;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::lang_decl_min_base_get;
*swig_base_set = *gccc::lang_decl_min_base_set;
*swig_template_info_get = *gccc::lang_decl_min_template_info_get;
*swig_template_info_set = *gccc::lang_decl_min_template_info_set;
*swig_u2_get = *gccc::lang_decl_min_u2_get;
*swig_u2_set = *gccc::lang_decl_min_u2_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_min(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_min($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_min_u2 ##############

package gcc::lang_decl_min_u2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_access_get = *gccc::lang_decl_min_u2_access_get;
*swig_access_set = *gccc::lang_decl_min_u2_access_set;
*swig_discriminator_get = *gccc::lang_decl_min_u2_discriminator_get;
*swig_discriminator_set = *gccc::lang_decl_min_u2_discriminator_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_min_u2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_min_u2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_fn ##############

package gcc::lang_decl_fn;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_min_get = *gccc::lang_decl_fn_min_get;
*swig_min_set = *gccc::lang_decl_fn_min_set;
*swig_operator_code_get = *gccc::lang_decl_fn_operator_code_get;
*swig_operator_code_set = *gccc::lang_decl_fn_operator_code_set;
*swig_global_ctor_p_get = *gccc::lang_decl_fn_global_ctor_p_get;
*swig_global_ctor_p_set = *gccc::lang_decl_fn_global_ctor_p_set;
*swig_global_dtor_p_get = *gccc::lang_decl_fn_global_dtor_p_get;
*swig_global_dtor_p_set = *gccc::lang_decl_fn_global_dtor_p_set;
*swig_constructor_attr_get = *gccc::lang_decl_fn_constructor_attr_get;
*swig_constructor_attr_set = *gccc::lang_decl_fn_constructor_attr_set;
*swig_destructor_attr_get = *gccc::lang_decl_fn_destructor_attr_get;
*swig_destructor_attr_set = *gccc::lang_decl_fn_destructor_attr_set;
*swig_assignment_operator_p_get = *gccc::lang_decl_fn_assignment_operator_p_get;
*swig_assignment_operator_p_set = *gccc::lang_decl_fn_assignment_operator_p_set;
*swig_static_function_get = *gccc::lang_decl_fn_static_function_get;
*swig_static_function_set = *gccc::lang_decl_fn_static_function_set;
*swig_pure_virtual_get = *gccc::lang_decl_fn_pure_virtual_get;
*swig_pure_virtual_set = *gccc::lang_decl_fn_pure_virtual_set;
*swig_defaulted_p_get = *gccc::lang_decl_fn_defaulted_p_get;
*swig_defaulted_p_set = *gccc::lang_decl_fn_defaulted_p_set;
*swig_has_in_charge_parm_p_get = *gccc::lang_decl_fn_has_in_charge_parm_p_get;
*swig_has_in_charge_parm_p_set = *gccc::lang_decl_fn_has_in_charge_parm_p_set;
*swig_has_vtt_parm_p_get = *gccc::lang_decl_fn_has_vtt_parm_p_get;
*swig_has_vtt_parm_p_set = *gccc::lang_decl_fn_has_vtt_parm_p_set;
*swig_pending_inline_p_get = *gccc::lang_decl_fn_pending_inline_p_get;
*swig_pending_inline_p_set = *gccc::lang_decl_fn_pending_inline_p_set;
*swig_nonconverting_get = *gccc::lang_decl_fn_nonconverting_get;
*swig_nonconverting_set = *gccc::lang_decl_fn_nonconverting_set;
*swig_thunk_p_get = *gccc::lang_decl_fn_thunk_p_get;
*swig_thunk_p_set = *gccc::lang_decl_fn_thunk_p_set;
*swig_this_thunk_p_get = *gccc::lang_decl_fn_this_thunk_p_get;
*swig_this_thunk_p_set = *gccc::lang_decl_fn_this_thunk_p_set;
*swig_hidden_friend_p_get = *gccc::lang_decl_fn_hidden_friend_p_get;
*swig_hidden_friend_p_set = *gccc::lang_decl_fn_hidden_friend_p_set;
*swig_befriending_classes_get = *gccc::lang_decl_fn_befriending_classes_get;
*swig_befriending_classes_set = *gccc::lang_decl_fn_befriending_classes_set;
*swig_context_get = *gccc::lang_decl_fn_context_get;
*swig_context_set = *gccc::lang_decl_fn_context_set;
*swig_u5_get = *gccc::lang_decl_fn_u5_get;
*swig_u5_set = *gccc::lang_decl_fn_u5_set;
*swig_u_get = *gccc::lang_decl_fn_u_get;
*swig_u_set = *gccc::lang_decl_fn_u_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_fn(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_fn($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_fn_u ##############

package gcc::lang_decl_fn_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_pending_inline_info_get = *gccc::lang_decl_fn_u_pending_inline_info_get;
*swig_pending_inline_info_set = *gccc::lang_decl_fn_u_pending_inline_info_set;
*swig_saved_language_function_get = *gccc::lang_decl_fn_u_saved_language_function_get;
*swig_saved_language_function_set = *gccc::lang_decl_fn_u_saved_language_function_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_fn_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_fn_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_fn_u5 ##############

package gcc::lang_decl_fn_u5;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_cloned_function_get = *gccc::lang_decl_fn_u5_cloned_function_get;
*swig_cloned_function_set = *gccc::lang_decl_fn_u5_cloned_function_set;
*swig_fixed_offset_get = *gccc::lang_decl_fn_u5_fixed_offset_get;
*swig_fixed_offset_set = *gccc::lang_decl_fn_u5_fixed_offset_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_fn_u5(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_fn_u5($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_ns ##############

package gcc::lang_decl_ns;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::lang_decl_ns_base_get;
*swig_base_set = *gccc::lang_decl_ns_base_set;
*swig_level_get = *gccc::lang_decl_ns_level_get;
*swig_level_set = *gccc::lang_decl_ns_level_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_ns(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_ns($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_parm ##############

package gcc::lang_decl_parm;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::lang_decl_parm_base_get;
*swig_base_set = *gccc::lang_decl_parm_base_set;
*swig_level_get = *gccc::lang_decl_parm_level_get;
*swig_level_set = *gccc::lang_decl_parm_level_set;
*swig_index_get = *gccc::lang_decl_parm_index_get;
*swig_index_set = *gccc::lang_decl_parm_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_parm(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_parm($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_t ##############

package gcc::lang_decl_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_u_get = *gccc::lang_decl_t_u_get;
*swig_u_set = *gccc::lang_decl_t_u_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::lang_decl_t_u ##############

package gcc::lang_decl_t_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::lang_decl_t_u_base_get;
*swig_base_set = *gccc::lang_decl_t_u_base_set;
*swig_min_get = *gccc::lang_decl_t_u_min_get;
*swig_min_set = *gccc::lang_decl_t_u_min_set;
*swig_fn_get = *gccc::lang_decl_t_u_fn_get;
*swig_fn_set = *gccc::lang_decl_t_u_fn_set;
*swig_ns_get = *gccc::lang_decl_t_u_ns_get;
*swig_ns_set = *gccc::lang_decl_t_u_ns_set;
*swig_parm_get = *gccc::lang_decl_t_u_parm_get;
*swig_parm_set = *gccc::lang_decl_t_u_parm_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_lang_decl_t_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_lang_decl_t_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::aggr_init_expr_arg_iterator ##############

package gcc::aggr_init_expr_arg_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_t_get = *gccc::aggr_init_expr_arg_iterator_t_get;
*swig_t_set = *gccc::aggr_init_expr_arg_iterator_t_set;
*swig_n_get = *gccc::aggr_init_expr_arg_iterator_n_get;
*swig_n_set = *gccc::aggr_init_expr_arg_iterator_n_set;
*swig_i_get = *gccc::aggr_init_expr_arg_iterator_i_get;
*swig_i_set = *gccc::aggr_init_expr_arg_iterator_i_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_aggr_init_expr_arg_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_aggr_init_expr_arg_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::operator_name_info_t ##############

package gcc::operator_name_info_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_identifier_get = *gccc::operator_name_info_t_identifier_get;
*swig_identifier_set = *gccc::operator_name_info_t_identifier_set;
*swig_name_get = *gccc::operator_name_info_t_name_get;
*swig_name_set = *gccc::operator_name_info_t_name_set;
*swig_mangled_name_get = *gccc::operator_name_info_t_mangled_name_get;
*swig_mangled_name_set = *gccc::operator_name_info_t_mangled_name_set;
*swig_arity_get = *gccc::operator_name_info_t_arity_get;
*swig_arity_set = *gccc::operator_name_info_t_arity_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_operator_name_info_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_operator_name_info_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_decl_specifier_seq ##############

package gcc::cp_decl_specifier_seq;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_specs_get = *gccc::cp_decl_specifier_seq_specs_get;
*swig_specs_set = *gccc::cp_decl_specifier_seq_specs_set;
*swig_type_location_get = *gccc::cp_decl_specifier_seq_type_location_get;
*swig_type_location_set = *gccc::cp_decl_specifier_seq_type_location_set;
*swig_type_get = *gccc::cp_decl_specifier_seq_type_get;
*swig_type_set = *gccc::cp_decl_specifier_seq_type_set;
*swig_attributes_get = *gccc::cp_decl_specifier_seq_attributes_get;
*swig_attributes_set = *gccc::cp_decl_specifier_seq_attributes_set;
*swig_redefined_builtin_type_get = *gccc::cp_decl_specifier_seq_redefined_builtin_type_get;
*swig_redefined_builtin_type_set = *gccc::cp_decl_specifier_seq_redefined_builtin_type_set;
*swig_storage_class_get = *gccc::cp_decl_specifier_seq_storage_class_get;
*swig_storage_class_set = *gccc::cp_decl_specifier_seq_storage_class_set;
*swig_user_defined_type_p_get = *gccc::cp_decl_specifier_seq_user_defined_type_p_get;
*swig_user_defined_type_p_set = *gccc::cp_decl_specifier_seq_user_defined_type_p_set;
*swig_multiple_types_p_get = *gccc::cp_decl_specifier_seq_multiple_types_p_get;
*swig_multiple_types_p_set = *gccc::cp_decl_specifier_seq_multiple_types_p_set;
*swig_conflicting_specifiers_p_get = *gccc::cp_decl_specifier_seq_conflicting_specifiers_p_get;
*swig_conflicting_specifiers_p_set = *gccc::cp_decl_specifier_seq_conflicting_specifiers_p_set;
*swig_any_specifiers_p_get = *gccc::cp_decl_specifier_seq_any_specifiers_p_get;
*swig_any_specifiers_p_set = *gccc::cp_decl_specifier_seq_any_specifiers_p_set;
*swig_any_type_specifiers_p_get = *gccc::cp_decl_specifier_seq_any_type_specifiers_p_get;
*swig_any_type_specifiers_p_set = *gccc::cp_decl_specifier_seq_any_type_specifiers_p_set;
*swig_explicit_int_p_get = *gccc::cp_decl_specifier_seq_explicit_int_p_get;
*swig_explicit_int_p_set = *gccc::cp_decl_specifier_seq_explicit_int_p_set;
*swig_explicit_int128_p_get = *gccc::cp_decl_specifier_seq_explicit_int128_p_get;
*swig_explicit_int128_p_set = *gccc::cp_decl_specifier_seq_explicit_int128_p_set;
*swig_explicit_char_p_get = *gccc::cp_decl_specifier_seq_explicit_char_p_get;
*swig_explicit_char_p_set = *gccc::cp_decl_specifier_seq_explicit_char_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_decl_specifier_seq(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_decl_specifier_seq($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_parameter_declarator ##############

package gcc::cp_parameter_declarator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::cp_parameter_declarator_next_get;
*swig_next_set = *gccc::cp_parameter_declarator_next_set;
*swig_decl_specifiers_get = *gccc::cp_parameter_declarator_decl_specifiers_get;
*swig_decl_specifiers_set = *gccc::cp_parameter_declarator_decl_specifiers_set;
*swig_declarator_get = *gccc::cp_parameter_declarator_declarator_get;
*swig_declarator_set = *gccc::cp_parameter_declarator_declarator_set;
*swig_default_argument_get = *gccc::cp_parameter_declarator_default_argument_get;
*swig_default_argument_set = *gccc::cp_parameter_declarator_default_argument_set;
*swig_ellipsis_p_get = *gccc::cp_parameter_declarator_ellipsis_p_get;
*swig_ellipsis_p_set = *gccc::cp_parameter_declarator_ellipsis_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_parameter_declarator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_parameter_declarator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator ##############

package gcc::cp_declarator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_kind_get = *gccc::cp_declarator_kind_get;
*swig_kind_set = *gccc::cp_declarator_kind_set;
*swig_parameter_pack_p_get = *gccc::cp_declarator_parameter_pack_p_get;
*swig_parameter_pack_p_set = *gccc::cp_declarator_parameter_pack_p_set;
*swig_id_loc_get = *gccc::cp_declarator_id_loc_get;
*swig_id_loc_set = *gccc::cp_declarator_id_loc_set;
*swig_attributes_get = *gccc::cp_declarator_attributes_get;
*swig_attributes_set = *gccc::cp_declarator_attributes_set;
*swig_declarator_get = *gccc::cp_declarator_declarator_get;
*swig_declarator_set = *gccc::cp_declarator_declarator_set;
*swig_u_get = *gccc::cp_declarator_u_get;
*swig_u_set = *gccc::cp_declarator_u_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator_u ##############

package gcc::cp_declarator_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_id_get = *gccc::cp_declarator_u_id_get;
*swig_id_set = *gccc::cp_declarator_u_id_set;
*swig_function_get = *gccc::cp_declarator_u_function_get;
*swig_function_set = *gccc::cp_declarator_u_function_set;
*swig_array_get = *gccc::cp_declarator_u_array_get;
*swig_array_set = *gccc::cp_declarator_u_array_set;
*swig_pointer_get = *gccc::cp_declarator_u_pointer_get;
*swig_pointer_set = *gccc::cp_declarator_u_pointer_set;
*swig_reference_get = *gccc::cp_declarator_u_reference_get;
*swig_reference_set = *gccc::cp_declarator_u_reference_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator_u_reference ##############

package gcc::cp_declarator_u_reference;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_qualifiers_get = *gccc::cp_declarator_u_reference_qualifiers_get;
*swig_qualifiers_set = *gccc::cp_declarator_u_reference_qualifiers_set;
*swig_rvalue_ref_get = *gccc::cp_declarator_u_reference_rvalue_ref_get;
*swig_rvalue_ref_set = *gccc::cp_declarator_u_reference_rvalue_ref_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator_u_reference(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator_u_reference($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator_u_pointer ##############

package gcc::cp_declarator_u_pointer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_qualifiers_get = *gccc::cp_declarator_u_pointer_qualifiers_get;
*swig_qualifiers_set = *gccc::cp_declarator_u_pointer_qualifiers_set;
*swig_class_type_get = *gccc::cp_declarator_u_pointer_class_type_get;
*swig_class_type_set = *gccc::cp_declarator_u_pointer_class_type_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator_u_pointer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator_u_pointer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator_u_array ##############

package gcc::cp_declarator_u_array;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_bounds_get = *gccc::cp_declarator_u_array_bounds_get;
*swig_bounds_set = *gccc::cp_declarator_u_array_bounds_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator_u_array(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator_u_array($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator_u_function ##############

package gcc::cp_declarator_u_function;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_parameters_get = *gccc::cp_declarator_u_function_parameters_get;
*swig_parameters_set = *gccc::cp_declarator_u_function_parameters_set;
*swig_qualifiers_get = *gccc::cp_declarator_u_function_qualifiers_get;
*swig_qualifiers_set = *gccc::cp_declarator_u_function_qualifiers_set;
*swig_exception_specification_get = *gccc::cp_declarator_u_function_exception_specification_get;
*swig_exception_specification_set = *gccc::cp_declarator_u_function_exception_specification_set;
*swig_late_return_type_get = *gccc::cp_declarator_u_function_late_return_type_get;
*swig_late_return_type_set = *gccc::cp_declarator_u_function_late_return_type_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator_u_function(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator_u_function($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cp_declarator_u_id ##############

package gcc::cp_declarator_u_id;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_qualifying_scope_get = *gccc::cp_declarator_u_id_qualifying_scope_get;
*swig_qualifying_scope_set = *gccc::cp_declarator_u_id_qualifying_scope_set;
*swig_unqualified_name_get = *gccc::cp_declarator_u_id_unqualified_name_get;
*swig_unqualified_name_set = *gccc::cp_declarator_u_id_unqualified_name_set;
*swig_sfk_get = *gccc::cp_declarator_u_id_sfk_get;
*swig_sfk_set = *gccc::cp_declarator_u_id_sfk_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cp_declarator_u_id(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cp_declarator_u_id($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tinst_level ##############

package gcc::tinst_level;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::tinst_level_next_get;
*swig_next_set = *gccc::tinst_level_next_set;
*swig_decl_get = *gccc::tinst_level_decl_get;
*swig_decl_set = *gccc::tinst_level_decl_set;
*swig_locus_get = *gccc::tinst_level_locus_get;
*swig_locus_set = *gccc::tinst_level_locus_set;
*swig_in_system_header_p_get = *gccc::tinst_level_in_system_header_p_get;
*swig_in_system_header_p_set = *gccc::tinst_level_in_system_header_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tinst_level(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tinst_level($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::deferred_access_check ##############

package gcc::deferred_access_check;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_binfo_get = *gccc::deferred_access_check_binfo_get;
*swig_binfo_set = *gccc::deferred_access_check_binfo_set;
*swig_decl_get = *gccc::deferred_access_check_decl_get;
*swig_decl_set = *gccc::deferred_access_check_decl_set;
*swig_diag_decl_get = *gccc::deferred_access_check_diag_decl_get;
*swig_diag_decl_set = *gccc::deferred_access_check_diag_decl_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_deferred_access_check(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_deferred_access_check($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_deferred_access_check_base ##############

package gcc::VEC_deferred_access_check_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_deferred_access_check_base_num_get;
*swig_num_set = *gccc::VEC_deferred_access_check_base_num_set;
*swig_alloc_get = *gccc::VEC_deferred_access_check_base_alloc_get;
*swig_alloc_set = *gccc::VEC_deferred_access_check_base_alloc_set;
*swig_vec_get = *gccc::VEC_deferred_access_check_base_vec_get;
*swig_vec_set = *gccc::VEC_deferred_access_check_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_deferred_access_check_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_deferred_access_check_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_deferred_access_check_none ##############

package gcc::VEC_deferred_access_check_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_deferred_access_check_none_base_get;
*swig_base_set = *gccc::VEC_deferred_access_check_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_deferred_access_check_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_deferred_access_check_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_deferred_access_check_gc ##############

package gcc::VEC_deferred_access_check_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_deferred_access_check_gc_base_get;
*swig_base_set = *gccc::VEC_deferred_access_check_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_deferred_access_check_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_deferred_access_check_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::edge_def ##############

package gcc::edge_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_src_get = *gccc::edge_def_src_get;
*swig_src_set = *gccc::edge_def_src_set;
*swig_dest_get = *gccc::edge_def_dest_get;
*swig_dest_set = *gccc::edge_def_dest_set;
*swig_aux_get = *gccc::edge_def_aux_get;
*swig_aux_set = *gccc::edge_def_aux_set;
*swig_goto_block_get = *gccc::edge_def_goto_block_get;
*swig_goto_block_set = *gccc::edge_def_goto_block_set;
*swig_goto_locus_get = *gccc::edge_def_goto_locus_get;
*swig_goto_locus_set = *gccc::edge_def_goto_locus_set;
*swig_dest_idx_get = *gccc::edge_def_dest_idx_get;
*swig_dest_idx_set = *gccc::edge_def_dest_idx_set;
*swig_flags_get = *gccc::edge_def_flags_get;
*swig_flags_set = *gccc::edge_def_flags_set;
*swig_probability_get = *gccc::edge_def_probability_get;
*swig_probability_set = *gccc::edge_def_probability_set;
*swig_count_get = *gccc::edge_def_count_get;
*swig_count_set = *gccc::edge_def_count_set;
*swig_insns_get = *gccc::edge_def_insns_get;
*swig_insns_set = *gccc::edge_def_insns_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_edge_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_edge_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::edge_def_insns ##############

package gcc::edge_def_insns;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_g_get = *gccc::edge_def_insns_g_get;
*swig_g_set = *gccc::edge_def_insns_g_set;
*swig_r_get = *gccc::edge_def_insns_r_get;
*swig_r_set = *gccc::edge_def_insns_r_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_edge_def_insns(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_edge_def_insns($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_base ##############

package gcc::VEC_edge_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_edge_base_num_get;
*swig_num_set = *gccc::VEC_edge_base_num_set;
*swig_alloc_get = *gccc::VEC_edge_base_alloc_get;
*swig_alloc_set = *gccc::VEC_edge_base_alloc_set;
*swig_vec_get = *gccc::VEC_edge_base_vec_get;
*swig_vec_set = *gccc::VEC_edge_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_none ##############

package gcc::VEC_edge_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_edge_none_base_get;
*swig_base_set = *gccc::VEC_edge_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_gc ##############

package gcc::VEC_edge_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_edge_gc_base_get;
*swig_base_set = *gccc::VEC_edge_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_heap ##############

package gcc::VEC_edge_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_edge_heap_base_get;
*swig_base_set = *gccc::VEC_edge_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::basic_block_def ##############

package gcc::basic_block_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_preds_get = *gccc::basic_block_def_preds_get;
*swig_preds_set = *gccc::basic_block_def_preds_set;
*swig_succs_get = *gccc::basic_block_def_succs_get;
*swig_succs_set = *gccc::basic_block_def_succs_set;
*swig_aux_get = *gccc::basic_block_def_aux_get;
*swig_aux_set = *gccc::basic_block_def_aux_set;
*swig_loop_father_get = *gccc::basic_block_def_loop_father_get;
*swig_loop_father_set = *gccc::basic_block_def_loop_father_set;
*swig_dom_get = *gccc::basic_block_def_dom_get;
*swig_dom_set = *gccc::basic_block_def_dom_set;
*swig_prev_bb_get = *gccc::basic_block_def_prev_bb_get;
*swig_prev_bb_set = *gccc::basic_block_def_prev_bb_set;
*swig_next_bb_get = *gccc::basic_block_def_next_bb_get;
*swig_next_bb_set = *gccc::basic_block_def_next_bb_set;
*swig_count_get = *gccc::basic_block_def_count_get;
*swig_count_set = *gccc::basic_block_def_count_set;
*swig_index_get = *gccc::basic_block_def_index_get;
*swig_index_set = *gccc::basic_block_def_index_set;
*swig_loop_depth_get = *gccc::basic_block_def_loop_depth_get;
*swig_loop_depth_set = *gccc::basic_block_def_loop_depth_set;
*swig_frequency_get = *gccc::basic_block_def_frequency_get;
*swig_frequency_set = *gccc::basic_block_def_frequency_set;
*swig_discriminator_get = *gccc::basic_block_def_discriminator_get;
*swig_discriminator_set = *gccc::basic_block_def_discriminator_set;
*swig_flags_get = *gccc::basic_block_def_flags_get;
*swig_flags_set = *gccc::basic_block_def_flags_set;
*swig_il_get = *gccc::basic_block_def_il_get;
*swig_il_set = *gccc::basic_block_def_il_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_basic_block_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_basic_block_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::basic_block_def_il ##############

package gcc::basic_block_def_il;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gimple_get = *gccc::basic_block_def_il_gimple_get;
*swig_gimple_set = *gccc::basic_block_def_il_gimple_set;
*swig_rtl_get = *gccc::basic_block_def_il_rtl_get;
*swig_rtl_set = *gccc::basic_block_def_il_rtl_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_basic_block_def_il(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_basic_block_def_il($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::rtl_bb_info ##############

package gcc::rtl_bb_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_head__get = *gccc::rtl_bb_info_head__get;
*swig_head__set = *gccc::rtl_bb_info_head__set;
*swig_end__get = *gccc::rtl_bb_info_end__get;
*swig_end__set = *gccc::rtl_bb_info_end__set;
*swig_header_get = *gccc::rtl_bb_info_header_get;
*swig_header_set = *gccc::rtl_bb_info_header_set;
*swig_footer_get = *gccc::rtl_bb_info_footer_get;
*swig_footer_set = *gccc::rtl_bb_info_footer_set;
*swig_visited_get = *gccc::rtl_bb_info_visited_get;
*swig_visited_set = *gccc::rtl_bb_info_visited_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_rtl_bb_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_rtl_bb_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_bb_info ##############

package gcc::gimple_bb_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_seq_get = *gccc::gimple_bb_info_seq_get;
*swig_seq_set = *gccc::gimple_bb_info_seq_set;
*swig_phi_nodes_get = *gccc::gimple_bb_info_phi_nodes_get;
*swig_phi_nodes_set = *gccc::gimple_bb_info_phi_nodes_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_bb_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_bb_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_basic_block_base ##############

package gcc::VEC_basic_block_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_basic_block_base_num_get;
*swig_num_set = *gccc::VEC_basic_block_base_num_set;
*swig_alloc_get = *gccc::VEC_basic_block_base_alloc_get;
*swig_alloc_set = *gccc::VEC_basic_block_base_alloc_set;
*swig_vec_get = *gccc::VEC_basic_block_base_vec_get;
*swig_vec_set = *gccc::VEC_basic_block_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_basic_block_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_basic_block_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_basic_block_none ##############

package gcc::VEC_basic_block_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_basic_block_none_base_get;
*swig_base_set = *gccc::VEC_basic_block_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_basic_block_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_basic_block_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_basic_block_gc ##############

package gcc::VEC_basic_block_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_basic_block_gc_base_get;
*swig_base_set = *gccc::VEC_basic_block_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_basic_block_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_basic_block_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_basic_block_heap ##############

package gcc::VEC_basic_block_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_basic_block_heap_base_get;
*swig_base_set = *gccc::VEC_basic_block_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_basic_block_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_basic_block_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::control_flow_graph ##############

package gcc::control_flow_graph;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_x_entry_block_ptr_get = *gccc::control_flow_graph_x_entry_block_ptr_get;
*swig_x_entry_block_ptr_set = *gccc::control_flow_graph_x_entry_block_ptr_set;
*swig_x_exit_block_ptr_get = *gccc::control_flow_graph_x_exit_block_ptr_get;
*swig_x_exit_block_ptr_set = *gccc::control_flow_graph_x_exit_block_ptr_set;
*swig_x_basic_block_info_get = *gccc::control_flow_graph_x_basic_block_info_get;
*swig_x_basic_block_info_set = *gccc::control_flow_graph_x_basic_block_info_set;
*swig_x_n_basic_blocks_get = *gccc::control_flow_graph_x_n_basic_blocks_get;
*swig_x_n_basic_blocks_set = *gccc::control_flow_graph_x_n_basic_blocks_set;
*swig_x_n_edges_get = *gccc::control_flow_graph_x_n_edges_get;
*swig_x_n_edges_set = *gccc::control_flow_graph_x_n_edges_set;
*swig_x_last_basic_block_get = *gccc::control_flow_graph_x_last_basic_block_get;
*swig_x_last_basic_block_set = *gccc::control_flow_graph_x_last_basic_block_set;
*swig_last_label_uid_get = *gccc::control_flow_graph_last_label_uid_get;
*swig_last_label_uid_set = *gccc::control_flow_graph_last_label_uid_set;
*swig_x_label_to_block_map_get = *gccc::control_flow_graph_x_label_to_block_map_get;
*swig_x_label_to_block_map_set = *gccc::control_flow_graph_x_label_to_block_map_set;
*swig_x_profile_status_get = *gccc::control_flow_graph_x_profile_status_get;
*swig_x_profile_status_set = *gccc::control_flow_graph_x_profile_status_set;
*swig_x_dom_computed_get = *gccc::control_flow_graph_x_dom_computed_get;
*swig_x_dom_computed_set = *gccc::control_flow_graph_x_dom_computed_set;
*swig_x_n_bbs_in_dom_tree_get = *gccc::control_flow_graph_x_n_bbs_in_dom_tree_get;
*swig_x_n_bbs_in_dom_tree_set = *gccc::control_flow_graph_x_n_bbs_in_dom_tree_set;
*swig_max_jumptable_ents_get = *gccc::control_flow_graph_max_jumptable_ents_get;
*swig_max_jumptable_ents_set = *gccc::control_flow_graph_max_jumptable_ents_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_control_flow_graph(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_control_flow_graph($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ce_if_block_t ##############

package gcc::ce_if_block_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_test_bb_get = *gccc::ce_if_block_t_test_bb_get;
*swig_test_bb_set = *gccc::ce_if_block_t_test_bb_set;
*swig_then_bb_get = *gccc::ce_if_block_t_then_bb_get;
*swig_then_bb_set = *gccc::ce_if_block_t_then_bb_set;
*swig_else_bb_get = *gccc::ce_if_block_t_else_bb_get;
*swig_else_bb_set = *gccc::ce_if_block_t_else_bb_set;
*swig_join_bb_get = *gccc::ce_if_block_t_join_bb_get;
*swig_join_bb_set = *gccc::ce_if_block_t_join_bb_set;
*swig_last_test_bb_get = *gccc::ce_if_block_t_last_test_bb_get;
*swig_last_test_bb_set = *gccc::ce_if_block_t_last_test_bb_set;
*swig_num_multiple_test_blocks_get = *gccc::ce_if_block_t_num_multiple_test_blocks_get;
*swig_num_multiple_test_blocks_set = *gccc::ce_if_block_t_num_multiple_test_blocks_set;
*swig_num_and_and_blocks_get = *gccc::ce_if_block_t_num_and_and_blocks_get;
*swig_num_and_and_blocks_set = *gccc::ce_if_block_t_num_and_and_blocks_set;
*swig_num_or_or_blocks_get = *gccc::ce_if_block_t_num_or_or_blocks_get;
*swig_num_or_or_blocks_set = *gccc::ce_if_block_t_num_or_or_blocks_set;
*swig_num_multiple_test_insns_get = *gccc::ce_if_block_t_num_multiple_test_insns_get;
*swig_num_multiple_test_insns_set = *gccc::ce_if_block_t_num_multiple_test_insns_set;
*swig_and_and_p_get = *gccc::ce_if_block_t_and_and_p_get;
*swig_and_and_p_set = *gccc::ce_if_block_t_and_and_p_set;
*swig_num_then_insns_get = *gccc::ce_if_block_t_num_then_insns_get;
*swig_num_then_insns_set = *gccc::ce_if_block_t_num_then_insns_set;
*swig_num_else_insns_get = *gccc::ce_if_block_t_num_else_insns_get;
*swig_num_else_insns_set = *gccc::ce_if_block_t_num_else_insns_set;
*swig_pass_get = *gccc::ce_if_block_t_pass_get;
*swig_pass_set = *gccc::ce_if_block_t_pass_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ce_if_block_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ce_if_block_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::edge_list ##############

package gcc::edge_list;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_blocks_get = *gccc::edge_list_num_blocks_get;
*swig_num_blocks_set = *gccc::edge_list_num_blocks_set;
*swig_num_edges_get = *gccc::edge_list_num_edges_get;
*swig_num_edges_set = *gccc::edge_list_num_edges_set;
*swig_index_to_edge_get = *gccc::edge_list_index_to_edge_get;
*swig_index_to_edge_set = *gccc::edge_list_index_to_edge_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_edge_list(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_edge_list($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::edge_iterator ##############

package gcc::edge_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_index_get = *gccc::edge_iterator_index_get;
*swig_index_set = *gccc::edge_iterator_index_set;
*swig_container_get = *gccc::edge_iterator_container_get;
*swig_container_set = *gccc::edge_iterator_container_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_edge_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_edge_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cfg_hooks ##############

package gcc::cfg_hooks;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *gccc::cfg_hooks_name_get;
*swig_name_set = *gccc::cfg_hooks_name_set;
*swig_verify_flow_info_get = *gccc::cfg_hooks_verify_flow_info_get;
*swig_verify_flow_info_set = *gccc::cfg_hooks_verify_flow_info_set;
*swig_dump_bb_get = *gccc::cfg_hooks_dump_bb_get;
*swig_dump_bb_set = *gccc::cfg_hooks_dump_bb_set;
*swig_create_basic_block_get = *gccc::cfg_hooks_create_basic_block_get;
*swig_create_basic_block_set = *gccc::cfg_hooks_create_basic_block_set;
*swig_redirect_edge_and_branch_get = *gccc::cfg_hooks_redirect_edge_and_branch_get;
*swig_redirect_edge_and_branch_set = *gccc::cfg_hooks_redirect_edge_and_branch_set;
*swig_redirect_edge_and_branch_force_get = *gccc::cfg_hooks_redirect_edge_and_branch_force_get;
*swig_redirect_edge_and_branch_force_set = *gccc::cfg_hooks_redirect_edge_and_branch_force_set;
*swig_can_remove_branch_p_get = *gccc::cfg_hooks_can_remove_branch_p_get;
*swig_can_remove_branch_p_set = *gccc::cfg_hooks_can_remove_branch_p_set;
*swig_delete_basic_block_get = *gccc::cfg_hooks_delete_basic_block_get;
*swig_delete_basic_block_set = *gccc::cfg_hooks_delete_basic_block_set;
*swig_split_block_get = *gccc::cfg_hooks_split_block_get;
*swig_split_block_set = *gccc::cfg_hooks_split_block_set;
*swig_move_block_after_get = *gccc::cfg_hooks_move_block_after_get;
*swig_move_block_after_set = *gccc::cfg_hooks_move_block_after_set;
*swig_can_merge_blocks_p_get = *gccc::cfg_hooks_can_merge_blocks_p_get;
*swig_can_merge_blocks_p_set = *gccc::cfg_hooks_can_merge_blocks_p_set;
*swig_merge_blocks_get = *gccc::cfg_hooks_merge_blocks_get;
*swig_merge_blocks_set = *gccc::cfg_hooks_merge_blocks_set;
*swig_predict_edge_get = *gccc::cfg_hooks_predict_edge_get;
*swig_predict_edge_set = *gccc::cfg_hooks_predict_edge_set;
*swig_predicted_by_p_get = *gccc::cfg_hooks_predicted_by_p_get;
*swig_predicted_by_p_set = *gccc::cfg_hooks_predicted_by_p_set;
*swig_can_duplicate_block_p_get = *gccc::cfg_hooks_can_duplicate_block_p_get;
*swig_can_duplicate_block_p_set = *gccc::cfg_hooks_can_duplicate_block_p_set;
*swig_duplicate_block_get = *gccc::cfg_hooks_duplicate_block_get;
*swig_duplicate_block_set = *gccc::cfg_hooks_duplicate_block_set;
*swig_split_edge_get = *gccc::cfg_hooks_split_edge_get;
*swig_split_edge_set = *gccc::cfg_hooks_split_edge_set;
*swig_make_forwarder_block_get = *gccc::cfg_hooks_make_forwarder_block_get;
*swig_make_forwarder_block_set = *gccc::cfg_hooks_make_forwarder_block_set;
*swig_tidy_fallthru_edge_get = *gccc::cfg_hooks_tidy_fallthru_edge_get;
*swig_tidy_fallthru_edge_set = *gccc::cfg_hooks_tidy_fallthru_edge_set;
*swig_block_ends_with_call_p_get = *gccc::cfg_hooks_block_ends_with_call_p_get;
*swig_block_ends_with_call_p_set = *gccc::cfg_hooks_block_ends_with_call_p_set;
*swig_block_ends_with_condjump_p_get = *gccc::cfg_hooks_block_ends_with_condjump_p_get;
*swig_block_ends_with_condjump_p_set = *gccc::cfg_hooks_block_ends_with_condjump_p_set;
*swig_flow_call_edges_add_get = *gccc::cfg_hooks_flow_call_edges_add_get;
*swig_flow_call_edges_add_set = *gccc::cfg_hooks_flow_call_edges_add_set;
*swig_execute_on_growing_pred_get = *gccc::cfg_hooks_execute_on_growing_pred_get;
*swig_execute_on_growing_pred_set = *gccc::cfg_hooks_execute_on_growing_pred_set;
*swig_execute_on_shrinking_pred_get = *gccc::cfg_hooks_execute_on_shrinking_pred_get;
*swig_execute_on_shrinking_pred_set = *gccc::cfg_hooks_execute_on_shrinking_pred_set;
*swig_cfg_hook_duplicate_loop_to_header_edge_get = *gccc::cfg_hooks_cfg_hook_duplicate_loop_to_header_edge_get;
*swig_cfg_hook_duplicate_loop_to_header_edge_set = *gccc::cfg_hooks_cfg_hook_duplicate_loop_to_header_edge_set;
*swig_lv_add_condition_to_bb_get = *gccc::cfg_hooks_lv_add_condition_to_bb_get;
*swig_lv_add_condition_to_bb_set = *gccc::cfg_hooks_lv_add_condition_to_bb_set;
*swig_lv_adjust_loop_header_phi_get = *gccc::cfg_hooks_lv_adjust_loop_header_phi_get;
*swig_lv_adjust_loop_header_phi_set = *gccc::cfg_hooks_lv_adjust_loop_header_phi_set;
*swig_extract_cond_bb_edges_get = *gccc::cfg_hooks_extract_cond_bb_edges_get;
*swig_extract_cond_bb_edges_set = *gccc::cfg_hooks_extract_cond_bb_edges_set;
*swig_flush_pending_stmts_get = *gccc::cfg_hooks_flush_pending_stmts_get;
*swig_flush_pending_stmts_set = *gccc::cfg_hooks_flush_pending_stmts_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cfg_hooks(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cfg_hooks($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::bitmap_obstack ##############

package gcc::bitmap_obstack;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_elements_get = *gccc::bitmap_obstack_elements_get;
*swig_elements_set = *gccc::bitmap_obstack_elements_set;
*swig_heads_get = *gccc::bitmap_obstack_heads_get;
*swig_heads_set = *gccc::bitmap_obstack_heads_set;
*swig_obstack_get = *gccc::bitmap_obstack_obstack_get;
*swig_obstack_set = *gccc::bitmap_obstack_obstack_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_bitmap_obstack(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_bitmap_obstack($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::bitmap_element ##############

package gcc::bitmap_element;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::bitmap_element_next_get;
*swig_next_set = *gccc::bitmap_element_next_set;
*swig_prev_get = *gccc::bitmap_element_prev_get;
*swig_prev_set = *gccc::bitmap_element_prev_set;
*swig_indx_get = *gccc::bitmap_element_indx_get;
*swig_indx_set = *gccc::bitmap_element_indx_set;
*swig_bits_get = *gccc::bitmap_element_bits_get;
*swig_bits_set = *gccc::bitmap_element_bits_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_bitmap_element(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_bitmap_element($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::bitmap_head ##############

package gcc::bitmap_head;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_first_get = *gccc::bitmap_head_first_get;
*swig_first_set = *gccc::bitmap_head_first_set;
*swig_current_get = *gccc::bitmap_head_current_get;
*swig_current_set = *gccc::bitmap_head_current_set;
*swig_indx_get = *gccc::bitmap_head_indx_get;
*swig_indx_set = *gccc::bitmap_head_indx_set;
*swig_obstack_get = *gccc::bitmap_head_obstack_get;
*swig_obstack_set = *gccc::bitmap_head_obstack_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_bitmap_head(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_bitmap_head($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::bitmap_iterator ##############

package gcc::bitmap_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_elt1_get = *gccc::bitmap_iterator_elt1_get;
*swig_elt1_set = *gccc::bitmap_iterator_elt1_set;
*swig_elt2_get = *gccc::bitmap_iterator_elt2_get;
*swig_elt2_set = *gccc::bitmap_iterator_elt2_set;
*swig_word_no_get = *gccc::bitmap_iterator_word_no_get;
*swig_word_no_set = *gccc::bitmap_iterator_word_no_set;
*swig_bits_get = *gccc::bitmap_iterator_bits_get;
*swig_bits_set = *gccc::bitmap_iterator_bits_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_bitmap_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_bitmap_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::simple_bitmap_def ##############

package gcc::simple_bitmap_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_popcount_get = *gccc::simple_bitmap_def_popcount_get;
*swig_popcount_set = *gccc::simple_bitmap_def_popcount_set;
*swig_n_bits_get = *gccc::simple_bitmap_def_n_bits_get;
*swig_n_bits_set = *gccc::simple_bitmap_def_n_bits_set;
*swig_size_get = *gccc::simple_bitmap_def_size_get;
*swig_size_set = *gccc::simple_bitmap_def_size_set;
*swig_elms_get = *gccc::simple_bitmap_def_elms_get;
*swig_elms_set = *gccc::simple_bitmap_def_elms_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_simple_bitmap_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_simple_bitmap_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::sbitmap_iterator ##############

package gcc::sbitmap_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_ptr_get = *gccc::sbitmap_iterator_ptr_get;
*swig_ptr_set = *gccc::sbitmap_iterator_ptr_set;
*swig_size_get = *gccc::sbitmap_iterator_size_get;
*swig_size_set = *gccc::sbitmap_iterator_size_set;
*swig_word_num_get = *gccc::sbitmap_iterator_word_num_get;
*swig_word_num_set = *gccc::sbitmap_iterator_word_num_set;
*swig_bit_num_get = *gccc::sbitmap_iterator_bit_num_get;
*swig_bit_num_set = *gccc::sbitmap_iterator_bit_num_set;
*swig_word_get = *gccc::sbitmap_iterator_word_get;
*swig_word_set = *gccc::sbitmap_iterator_word_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_sbitmap_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_sbitmap_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::def_optype_d ##############

package gcc::def_optype_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::def_optype_d_next_get;
*swig_next_set = *gccc::def_optype_d_next_set;
*swig_def_ptr_get = *gccc::def_optype_d_def_ptr_get;
*swig_def_ptr_set = *gccc::def_optype_d_def_ptr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_def_optype_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_def_optype_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::use_optype_d ##############

package gcc::use_optype_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::use_optype_d_next_get;
*swig_next_set = *gccc::use_optype_d_next_set;
*swig_use_ptr_get = *gccc::use_optype_d_use_ptr_get;
*swig_use_ptr_set = *gccc::use_optype_d_use_ptr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_use_optype_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_use_optype_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ssa_operand_memory_d ##############

package gcc::ssa_operand_memory_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::ssa_operand_memory_d_next_get;
*swig_next_set = *gccc::ssa_operand_memory_d_next_set;
*swig_mem_get = *gccc::ssa_operand_memory_d_mem_get;
*swig_mem_set = *gccc::ssa_operand_memory_d_mem_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ssa_operand_memory_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ssa_operand_memory_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ssa_operands ##############

package gcc::ssa_operands;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_operand_memory_get = *gccc::ssa_operands_operand_memory_get;
*swig_operand_memory_set = *gccc::ssa_operands_operand_memory_set;
*swig_operand_memory_index_get = *gccc::ssa_operands_operand_memory_index_get;
*swig_operand_memory_index_set = *gccc::ssa_operands_operand_memory_index_set;
*swig_ssa_operand_mem_size_get = *gccc::ssa_operands_ssa_operand_mem_size_get;
*swig_ssa_operand_mem_size_set = *gccc::ssa_operands_ssa_operand_mem_size_set;
*swig_ops_active_get = *gccc::ssa_operands_ops_active_get;
*swig_ops_active_set = *gccc::ssa_operands_ops_active_set;
*swig_free_defs_get = *gccc::ssa_operands_free_defs_get;
*swig_free_defs_set = *gccc::ssa_operands_free_defs_set;
*swig_free_uses_get = *gccc::ssa_operands_free_uses_get;
*swig_free_uses_set = *gccc::ssa_operands_free_uses_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ssa_operands(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ssa_operands($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ssa_op_iter ##############

package gcc::ssa_op_iter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_done_get = *gccc::ssa_op_iter_done_get;
*swig_done_set = *gccc::ssa_op_iter_done_set;
*swig_iter_type_get = *gccc::ssa_op_iter_iter_type_get;
*swig_iter_type_set = *gccc::ssa_op_iter_iter_type_set;
*swig_defs_get = *gccc::ssa_op_iter_defs_get;
*swig_defs_set = *gccc::ssa_op_iter_defs_set;
*swig_uses_get = *gccc::ssa_op_iter_uses_get;
*swig_uses_set = *gccc::ssa_op_iter_uses_set;
*swig_phi_i_get = *gccc::ssa_op_iter_phi_i_get;
*swig_phi_i_set = *gccc::ssa_op_iter_phi_i_set;
*swig_num_phi_get = *gccc::ssa_op_iter_num_phi_get;
*swig_num_phi_set = *gccc::ssa_op_iter_num_phi_set;
*swig_phi_stmt_get = *gccc::ssa_op_iter_phi_stmt_get;
*swig_phi_stmt_set = *gccc::ssa_op_iter_phi_stmt_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ssa_op_iter(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ssa_op_iter($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::pt_solution ##############

package gcc::pt_solution;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_anything_get = *gccc::pt_solution_anything_get;
*swig_anything_set = *gccc::pt_solution_anything_set;
*swig_nonlocal_get = *gccc::pt_solution_nonlocal_get;
*swig_nonlocal_set = *gccc::pt_solution_nonlocal_set;
*swig_escaped_get = *gccc::pt_solution_escaped_get;
*swig_escaped_set = *gccc::pt_solution_escaped_set;
*swig_ipa_escaped_get = *gccc::pt_solution_ipa_escaped_get;
*swig_ipa_escaped_set = *gccc::pt_solution_ipa_escaped_set;
*swig_null_get = *gccc::pt_solution_null_get;
*swig_null_set = *gccc::pt_solution_null_set;
*swig_vars_contains_global_get = *gccc::pt_solution_vars_contains_global_get;
*swig_vars_contains_global_set = *gccc::pt_solution_vars_contains_global_set;
*swig_vars_contains_restrict_get = *gccc::pt_solution_vars_contains_restrict_get;
*swig_vars_contains_restrict_set = *gccc::pt_solution_vars_contains_restrict_set;
*swig_vars_get = *gccc::pt_solution_vars_get;
*swig_vars_set = *gccc::pt_solution_vars_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_pt_solution(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_pt_solution($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ao_ref ##############

package gcc::ao_ref;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_ref_get = *gccc::ao_ref_ref_get;
*swig_ref_set = *gccc::ao_ref_ref_set;
*swig_base_get = *gccc::ao_ref_base_get;
*swig_base_set = *gccc::ao_ref_base_set;
*swig_offset_get = *gccc::ao_ref_offset_get;
*swig_offset_set = *gccc::ao_ref_offset_set;
*swig_size_get = *gccc::ao_ref_size_get;
*swig_size_set = *gccc::ao_ref_size_set;
*swig_max_size_get = *gccc::ao_ref_max_size_get;
*swig_max_size_set = *gccc::ao_ref_max_size_set;
*swig_ref_alias_set_get = *gccc::ao_ref_ref_alias_set_get;
*swig_ref_alias_set_set = *gccc::ao_ref_ref_alias_set_set;
*swig_base_alias_set_get = *gccc::ao_ref_base_alias_set_get;
*swig_base_alias_set_set = *gccc::ao_ref_base_alias_set_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ao_ref(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ao_ref($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_vec_base ##############

package gcc::VEC_gimple_vec_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_gimple_vec_base_num_get;
*swig_num_set = *gccc::VEC_gimple_vec_base_num_set;
*swig_alloc_get = *gccc::VEC_gimple_vec_base_alloc_get;
*swig_alloc_set = *gccc::VEC_gimple_vec_base_alloc_set;
*swig_vec_get = *gccc::VEC_gimple_vec_base_vec_get;
*swig_vec_set = *gccc::VEC_gimple_vec_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_vec_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_vec_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_vec_none ##############

package gcc::VEC_gimple_vec_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_vec_none_base_get;
*swig_base_set = *gccc::VEC_gimple_vec_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_vec_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_vec_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_gimple_vec_heap ##############

package gcc::VEC_gimple_vec_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_gimple_vec_heap_base_get;
*swig_base_set = *gccc::VEC_gimple_vec_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_gimple_vec_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_gimple_vec_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_seq_node_d ##############

package gcc::gimple_seq_node_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_stmt_get = *gccc::gimple_seq_node_d_stmt_get;
*swig_stmt_set = *gccc::gimple_seq_node_d_stmt_set;
*swig_prev_get = *gccc::gimple_seq_node_d_prev_get;
*swig_prev_set = *gccc::gimple_seq_node_d_prev_set;
*swig_next_get = *gccc::gimple_seq_node_d_next_get;
*swig_next_set = *gccc::gimple_seq_node_d_next_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_seq_node_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_seq_node_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_seq_d ##############

package gcc::gimple_seq_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_first_get = *gccc::gimple_seq_d_first_get;
*swig_first_set = *gccc::gimple_seq_d_first_set;
*swig_last_get = *gccc::gimple_seq_d_last_get;
*swig_last_set = *gccc::gimple_seq_d_last_set;
*swig_next_free_get = *gccc::gimple_seq_d_next_free_get;
*swig_next_free_set = *gccc::gimple_seq_d_next_free_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_seq_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_seq_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_stmt_iterator ##############

package gcc::gimple_stmt_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_ptr_get = *gccc::gimple_stmt_iterator_ptr_get;
*swig_ptr_set = *gccc::gimple_stmt_iterator_ptr_set;
*swig_seq_get = *gccc::gimple_stmt_iterator_seq_get;
*swig_seq_set = *gccc::gimple_stmt_iterator_seq_set;
*swig_bb_get = *gccc::gimple_stmt_iterator_bb_get;
*swig_bb_set = *gccc::gimple_stmt_iterator_bb_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_stmt_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_stmt_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_base ##############

package gcc::gimple_statement_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_code_get = *gccc::gimple_statement_base_code_get;
*swig_code_set = *gccc::gimple_statement_base_code_set;
*swig_no_warning_get = *gccc::gimple_statement_base_no_warning_get;
*swig_no_warning_set = *gccc::gimple_statement_base_no_warning_set;
*swig_visited_get = *gccc::gimple_statement_base_visited_get;
*swig_visited_set = *gccc::gimple_statement_base_visited_set;
*swig_nontemporal_move_get = *gccc::gimple_statement_base_nontemporal_move_get;
*swig_nontemporal_move_set = *gccc::gimple_statement_base_nontemporal_move_set;
*swig_plf_get = *gccc::gimple_statement_base_plf_get;
*swig_plf_set = *gccc::gimple_statement_base_plf_set;
*swig_modified_get = *gccc::gimple_statement_base_modified_get;
*swig_modified_set = *gccc::gimple_statement_base_modified_set;
*swig_has_volatile_ops_get = *gccc::gimple_statement_base_has_volatile_ops_get;
*swig_has_volatile_ops_set = *gccc::gimple_statement_base_has_volatile_ops_set;
*swig_pad_get = *gccc::gimple_statement_base_pad_get;
*swig_pad_set = *gccc::gimple_statement_base_pad_set;
*swig_subcode_get = *gccc::gimple_statement_base_subcode_get;
*swig_subcode_set = *gccc::gimple_statement_base_subcode_set;
*swig_uid_get = *gccc::gimple_statement_base_uid_get;
*swig_uid_set = *gccc::gimple_statement_base_uid_set;
*swig_location_get = *gccc::gimple_statement_base_location_get;
*swig_location_set = *gccc::gimple_statement_base_location_set;
*swig_num_ops_get = *gccc::gimple_statement_base_num_ops_get;
*swig_num_ops_set = *gccc::gimple_statement_base_num_ops_set;
*swig_bb_get = *gccc::gimple_statement_base_bb_get;
*swig_bb_set = *gccc::gimple_statement_base_bb_set;
*swig_block_get = *gccc::gimple_statement_base_block_get;
*swig_block_set = *gccc::gimple_statement_base_block_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_with_ops_base ##############

package gcc::gimple_statement_with_ops_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_with_ops_base_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_with_ops_base_gsbase_set;
*swig_def_ops_get = *gccc::gimple_statement_with_ops_base_def_ops_get;
*swig_def_ops_set = *gccc::gimple_statement_with_ops_base_def_ops_set;
*swig_use_ops_get = *gccc::gimple_statement_with_ops_base_use_ops_get;
*swig_use_ops_set = *gccc::gimple_statement_with_ops_base_use_ops_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_with_ops_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_with_ops_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_with_ops ##############

package gcc::gimple_statement_with_ops;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_opbase_get = *gccc::gimple_statement_with_ops_opbase_get;
*swig_opbase_set = *gccc::gimple_statement_with_ops_opbase_set;
*swig_op_get = *gccc::gimple_statement_with_ops_op_get;
*swig_op_set = *gccc::gimple_statement_with_ops_op_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_with_ops(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_with_ops($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_with_memory_ops_base ##############

package gcc::gimple_statement_with_memory_ops_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_opbase_get = *gccc::gimple_statement_with_memory_ops_base_opbase_get;
*swig_opbase_set = *gccc::gimple_statement_with_memory_ops_base_opbase_set;
*swig_vdef_get = *gccc::gimple_statement_with_memory_ops_base_vdef_get;
*swig_vdef_set = *gccc::gimple_statement_with_memory_ops_base_vdef_set;
*swig_vuse_get = *gccc::gimple_statement_with_memory_ops_base_vuse_get;
*swig_vuse_set = *gccc::gimple_statement_with_memory_ops_base_vuse_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_with_memory_ops_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_with_memory_ops_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_with_memory_ops ##############

package gcc::gimple_statement_with_memory_ops;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_membase_get = *gccc::gimple_statement_with_memory_ops_membase_get;
*swig_membase_set = *gccc::gimple_statement_with_memory_ops_membase_set;
*swig_op_get = *gccc::gimple_statement_with_memory_ops_op_get;
*swig_op_set = *gccc::gimple_statement_with_memory_ops_op_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_with_memory_ops(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_with_memory_ops($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_call ##############

package gcc::gimple_statement_call;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_membase_get = *gccc::gimple_statement_call_membase_get;
*swig_membase_set = *gccc::gimple_statement_call_membase_set;
*swig_call_used_get = *gccc::gimple_statement_call_call_used_get;
*swig_call_used_set = *gccc::gimple_statement_call_call_used_set;
*swig_call_clobbered_get = *gccc::gimple_statement_call_call_clobbered_get;
*swig_call_clobbered_set = *gccc::gimple_statement_call_call_clobbered_set;
*swig_op_get = *gccc::gimple_statement_call_op_get;
*swig_op_set = *gccc::gimple_statement_call_op_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_call(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_call($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp ##############

package gcc::gimple_statement_omp;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_omp_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_omp_gsbase_set;
*swig_body_get = *gccc::gimple_statement_omp_body_get;
*swig_body_set = *gccc::gimple_statement_omp_body_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_bind ##############

package gcc::gimple_statement_bind;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_bind_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_bind_gsbase_set;
*swig_vars_get = *gccc::gimple_statement_bind_vars_get;
*swig_vars_set = *gccc::gimple_statement_bind_vars_set;
*swig_block_get = *gccc::gimple_statement_bind_block_get;
*swig_block_set = *gccc::gimple_statement_bind_block_set;
*swig_body_get = *gccc::gimple_statement_bind_body_get;
*swig_body_set = *gccc::gimple_statement_bind_body_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_bind(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_bind($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_catch ##############

package gcc::gimple_statement_catch;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_catch_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_catch_gsbase_set;
*swig_types_get = *gccc::gimple_statement_catch_types_get;
*swig_types_set = *gccc::gimple_statement_catch_types_set;
*swig_handler_get = *gccc::gimple_statement_catch_handler_get;
*swig_handler_set = *gccc::gimple_statement_catch_handler_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_catch(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_catch($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_eh_filter ##############

package gcc::gimple_statement_eh_filter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_eh_filter_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_eh_filter_gsbase_set;
*swig_types_get = *gccc::gimple_statement_eh_filter_types_get;
*swig_types_set = *gccc::gimple_statement_eh_filter_types_set;
*swig_failure_get = *gccc::gimple_statement_eh_filter_failure_get;
*swig_failure_set = *gccc::gimple_statement_eh_filter_failure_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_eh_filter(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_eh_filter($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_eh_mnt ##############

package gcc::gimple_statement_eh_mnt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_eh_mnt_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_eh_mnt_gsbase_set;
*swig_fndecl_get = *gccc::gimple_statement_eh_mnt_fndecl_get;
*swig_fndecl_set = *gccc::gimple_statement_eh_mnt_fndecl_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_eh_mnt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_eh_mnt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_phi ##############

package gcc::gimple_statement_phi;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_phi_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_phi_gsbase_set;
*swig_capacity_get = *gccc::gimple_statement_phi_capacity_get;
*swig_capacity_set = *gccc::gimple_statement_phi_capacity_set;
*swig_nargs_get = *gccc::gimple_statement_phi_nargs_get;
*swig_nargs_set = *gccc::gimple_statement_phi_nargs_set;
*swig_result_get = *gccc::gimple_statement_phi_result_get;
*swig_result_set = *gccc::gimple_statement_phi_result_set;
*swig_args_get = *gccc::gimple_statement_phi_args_get;
*swig_args_set = *gccc::gimple_statement_phi_args_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_phi(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_phi($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_eh_ctrl ##############

package gcc::gimple_statement_eh_ctrl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_eh_ctrl_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_eh_ctrl_gsbase_set;
*swig_region_get = *gccc::gimple_statement_eh_ctrl_region_get;
*swig_region_set = *gccc::gimple_statement_eh_ctrl_region_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_eh_ctrl(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_eh_ctrl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_try ##############

package gcc::gimple_statement_try;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_try_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_try_gsbase_set;
*swig_eval_get = *gccc::gimple_statement_try_eval_get;
*swig_eval_set = *gccc::gimple_statement_try_eval_set;
*swig_cleanup_get = *gccc::gimple_statement_try_cleanup_get;
*swig_cleanup_set = *gccc::gimple_statement_try_cleanup_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_try(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_try($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_wce ##############

package gcc::gimple_statement_wce;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_wce_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_wce_gsbase_set;
*swig_cleanup_get = *gccc::gimple_statement_wce_cleanup_get;
*swig_cleanup_set = *gccc::gimple_statement_wce_cleanup_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_wce(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_wce($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_asm ##############

package gcc::gimple_statement_asm;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_membase_get = *gccc::gimple_statement_asm_membase_get;
*swig_membase_set = *gccc::gimple_statement_asm_membase_set;
*swig_string_get = *gccc::gimple_statement_asm_string_get;
*swig_string_set = *gccc::gimple_statement_asm_string_set;
*swig_ni_get = *gccc::gimple_statement_asm_ni_get;
*swig_ni_set = *gccc::gimple_statement_asm_ni_set;
*swig_no_get = *gccc::gimple_statement_asm_no_get;
*swig_no_set = *gccc::gimple_statement_asm_no_set;
*swig_nc_get = *gccc::gimple_statement_asm_nc_get;
*swig_nc_set = *gccc::gimple_statement_asm_nc_set;
*swig_nl_get = *gccc::gimple_statement_asm_nl_get;
*swig_nl_set = *gccc::gimple_statement_asm_nl_set;
*swig_op_get = *gccc::gimple_statement_asm_op_get;
*swig_op_set = *gccc::gimple_statement_asm_op_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_asm(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_asm($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_critical ##############

package gcc::gimple_statement_omp_critical;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_omp_get = *gccc::gimple_statement_omp_critical_omp_get;
*swig_omp_set = *gccc::gimple_statement_omp_critical_omp_set;
*swig_name_get = *gccc::gimple_statement_omp_critical_name_get;
*swig_name_set = *gccc::gimple_statement_omp_critical_name_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_critical(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_critical($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_omp_for_iter ##############

package gcc::gimple_omp_for_iter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_cond_get = *gccc::gimple_omp_for_iter_cond_get;
*swig_cond_set = *gccc::gimple_omp_for_iter_cond_set;
*swig_index_get = *gccc::gimple_omp_for_iter_index_get;
*swig_index_set = *gccc::gimple_omp_for_iter_index_set;
*swig_initial_get = *gccc::gimple_omp_for_iter_initial_get;
*swig_initial_set = *gccc::gimple_omp_for_iter_initial_set;
*swig_final_get = *gccc::gimple_omp_for_iter_final_get;
*swig_final_set = *gccc::gimple_omp_for_iter_final_set;
*swig_incr_get = *gccc::gimple_omp_for_iter_incr_get;
*swig_incr_set = *gccc::gimple_omp_for_iter_incr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_omp_for_iter(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_omp_for_iter($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_for ##############

package gcc::gimple_statement_omp_for;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_omp_get = *gccc::gimple_statement_omp_for_omp_get;
*swig_omp_set = *gccc::gimple_statement_omp_for_omp_set;
*swig_clauses_get = *gccc::gimple_statement_omp_for_clauses_get;
*swig_clauses_set = *gccc::gimple_statement_omp_for_clauses_set;
*swig_collapse_get = *gccc::gimple_statement_omp_for_collapse_get;
*swig_collapse_set = *gccc::gimple_statement_omp_for_collapse_set;
*swig_iter_get = *gccc::gimple_statement_omp_for_iter_get;
*swig_iter_set = *gccc::gimple_statement_omp_for_iter_set;
*swig_pre_body_get = *gccc::gimple_statement_omp_for_pre_body_get;
*swig_pre_body_set = *gccc::gimple_statement_omp_for_pre_body_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_for(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_for($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_parallel ##############

package gcc::gimple_statement_omp_parallel;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_omp_get = *gccc::gimple_statement_omp_parallel_omp_get;
*swig_omp_set = *gccc::gimple_statement_omp_parallel_omp_set;
*swig_clauses_get = *gccc::gimple_statement_omp_parallel_clauses_get;
*swig_clauses_set = *gccc::gimple_statement_omp_parallel_clauses_set;
*swig_child_fn_get = *gccc::gimple_statement_omp_parallel_child_fn_get;
*swig_child_fn_set = *gccc::gimple_statement_omp_parallel_child_fn_set;
*swig_data_arg_get = *gccc::gimple_statement_omp_parallel_data_arg_get;
*swig_data_arg_set = *gccc::gimple_statement_omp_parallel_data_arg_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_parallel(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_parallel($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_task ##############

package gcc::gimple_statement_omp_task;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_par_get = *gccc::gimple_statement_omp_task_par_get;
*swig_par_set = *gccc::gimple_statement_omp_task_par_set;
*swig_copy_fn_get = *gccc::gimple_statement_omp_task_copy_fn_get;
*swig_copy_fn_set = *gccc::gimple_statement_omp_task_copy_fn_set;
*swig_arg_size_get = *gccc::gimple_statement_omp_task_arg_size_get;
*swig_arg_size_set = *gccc::gimple_statement_omp_task_arg_size_set;
*swig_arg_align_get = *gccc::gimple_statement_omp_task_arg_align_get;
*swig_arg_align_set = *gccc::gimple_statement_omp_task_arg_align_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_task(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_task($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_sections ##############

package gcc::gimple_statement_omp_sections;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_omp_get = *gccc::gimple_statement_omp_sections_omp_get;
*swig_omp_set = *gccc::gimple_statement_omp_sections_omp_set;
*swig_clauses_get = *gccc::gimple_statement_omp_sections_clauses_get;
*swig_clauses_set = *gccc::gimple_statement_omp_sections_clauses_set;
*swig_control_get = *gccc::gimple_statement_omp_sections_control_get;
*swig_control_set = *gccc::gimple_statement_omp_sections_control_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_sections(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_sections($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_continue ##############

package gcc::gimple_statement_omp_continue;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_omp_continue_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_omp_continue_gsbase_set;
*swig_control_def_get = *gccc::gimple_statement_omp_continue_control_def_get;
*swig_control_def_set = *gccc::gimple_statement_omp_continue_control_def_set;
*swig_control_use_get = *gccc::gimple_statement_omp_continue_control_use_get;
*swig_control_use_set = *gccc::gimple_statement_omp_continue_control_use_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_continue(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_continue($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_single ##############

package gcc::gimple_statement_omp_single;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_omp_get = *gccc::gimple_statement_omp_single_omp_get;
*swig_omp_set = *gccc::gimple_statement_omp_single_omp_set;
*swig_clauses_get = *gccc::gimple_statement_omp_single_clauses_get;
*swig_clauses_set = *gccc::gimple_statement_omp_single_clauses_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_single(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_single($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_atomic_load ##############

package gcc::gimple_statement_omp_atomic_load;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_omp_atomic_load_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_omp_atomic_load_gsbase_set;
*swig_rhs_get = *gccc::gimple_statement_omp_atomic_load_rhs_get;
*swig_rhs_set = *gccc::gimple_statement_omp_atomic_load_rhs_set;
*swig_lhs_get = *gccc::gimple_statement_omp_atomic_load_lhs_get;
*swig_lhs_set = *gccc::gimple_statement_omp_atomic_load_lhs_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_atomic_load(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_atomic_load($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_omp_atomic_store ##############

package gcc::gimple_statement_omp_atomic_store;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_omp_atomic_store_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_omp_atomic_store_gsbase_set;
*swig_val_get = *gccc::gimple_statement_omp_atomic_store_val_get;
*swig_val_set = *gccc::gimple_statement_omp_atomic_store_val_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_omp_atomic_store(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_omp_atomic_store($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_statement_d ##############

package gcc::gimple_statement_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsbase_get = *gccc::gimple_statement_d_gsbase_get;
*swig_gsbase_set = *gccc::gimple_statement_d_gsbase_set;
*swig_gsops_get = *gccc::gimple_statement_d_gsops_get;
*swig_gsops_set = *gccc::gimple_statement_d_gsops_set;
*swig_gsmembase_get = *gccc::gimple_statement_d_gsmembase_get;
*swig_gsmembase_set = *gccc::gimple_statement_d_gsmembase_set;
*swig_gsmem_get = *gccc::gimple_statement_d_gsmem_get;
*swig_gsmem_set = *gccc::gimple_statement_d_gsmem_set;
*swig_gimple_call_get = *gccc::gimple_statement_d_gimple_call_get;
*swig_gimple_call_set = *gccc::gimple_statement_d_gimple_call_set;
*swig_omp_get = *gccc::gimple_statement_d_omp_get;
*swig_omp_set = *gccc::gimple_statement_d_omp_set;
*swig_gimple_bind_get = *gccc::gimple_statement_d_gimple_bind_get;
*swig_gimple_bind_set = *gccc::gimple_statement_d_gimple_bind_set;
*swig_gimple_catch_get = *gccc::gimple_statement_d_gimple_catch_get;
*swig_gimple_catch_set = *gccc::gimple_statement_d_gimple_catch_set;
*swig_gimple_eh_filter_get = *gccc::gimple_statement_d_gimple_eh_filter_get;
*swig_gimple_eh_filter_set = *gccc::gimple_statement_d_gimple_eh_filter_set;
*swig_gimple_eh_mnt_get = *gccc::gimple_statement_d_gimple_eh_mnt_get;
*swig_gimple_eh_mnt_set = *gccc::gimple_statement_d_gimple_eh_mnt_set;
*swig_gimple_phi_get = *gccc::gimple_statement_d_gimple_phi_get;
*swig_gimple_phi_set = *gccc::gimple_statement_d_gimple_phi_set;
*swig_gimple_eh_ctrl_get = *gccc::gimple_statement_d_gimple_eh_ctrl_get;
*swig_gimple_eh_ctrl_set = *gccc::gimple_statement_d_gimple_eh_ctrl_set;
*swig_gimple_try_get = *gccc::gimple_statement_d_gimple_try_get;
*swig_gimple_try_set = *gccc::gimple_statement_d_gimple_try_set;
*swig_gimple_wce_get = *gccc::gimple_statement_d_gimple_wce_get;
*swig_gimple_wce_set = *gccc::gimple_statement_d_gimple_wce_set;
*swig_gimple_asm_get = *gccc::gimple_statement_d_gimple_asm_get;
*swig_gimple_asm_set = *gccc::gimple_statement_d_gimple_asm_set;
*swig_gimple_omp_critical_get = *gccc::gimple_statement_d_gimple_omp_critical_get;
*swig_gimple_omp_critical_set = *gccc::gimple_statement_d_gimple_omp_critical_set;
*swig_gimple_omp_for_get = *gccc::gimple_statement_d_gimple_omp_for_get;
*swig_gimple_omp_for_set = *gccc::gimple_statement_d_gimple_omp_for_set;
*swig_gimple_omp_parallel_get = *gccc::gimple_statement_d_gimple_omp_parallel_get;
*swig_gimple_omp_parallel_set = *gccc::gimple_statement_d_gimple_omp_parallel_set;
*swig_gimple_omp_task_get = *gccc::gimple_statement_d_gimple_omp_task_get;
*swig_gimple_omp_task_set = *gccc::gimple_statement_d_gimple_omp_task_set;
*swig_gimple_omp_sections_get = *gccc::gimple_statement_d_gimple_omp_sections_get;
*swig_gimple_omp_sections_set = *gccc::gimple_statement_d_gimple_omp_sections_set;
*swig_gimple_omp_single_get = *gccc::gimple_statement_d_gimple_omp_single_get;
*swig_gimple_omp_single_set = *gccc::gimple_statement_d_gimple_omp_single_set;
*swig_gimple_omp_continue_get = *gccc::gimple_statement_d_gimple_omp_continue_get;
*swig_gimple_omp_continue_set = *gccc::gimple_statement_d_gimple_omp_continue_set;
*swig_gimple_omp_atomic_load_get = *gccc::gimple_statement_d_gimple_omp_atomic_load_get;
*swig_gimple_omp_atomic_load_set = *gccc::gimple_statement_d_gimple_omp_atomic_load_set;
*swig_gimple_omp_atomic_store_get = *gccc::gimple_statement_d_gimple_omp_atomic_store_get;
*swig_gimple_omp_atomic_store_set = *gccc::gimple_statement_d_gimple_omp_atomic_store_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_statement_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_statement_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimplify_ctx ##############

package gcc::gimplify_ctx;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_prev_context_get = *gccc::gimplify_ctx_prev_context_get;
*swig_prev_context_set = *gccc::gimplify_ctx_prev_context_set;
*swig_bind_expr_stack_get = *gccc::gimplify_ctx_bind_expr_stack_get;
*swig_bind_expr_stack_set = *gccc::gimplify_ctx_bind_expr_stack_set;
*swig_temps_get = *gccc::gimplify_ctx_temps_get;
*swig_temps_set = *gccc::gimplify_ctx_temps_set;
*swig_conditional_cleanups_get = *gccc::gimplify_ctx_conditional_cleanups_get;
*swig_conditional_cleanups_set = *gccc::gimplify_ctx_conditional_cleanups_set;
*swig_exit_label_get = *gccc::gimplify_ctx_exit_label_get;
*swig_exit_label_set = *gccc::gimplify_ctx_exit_label_set;
*swig_return_temp_get = *gccc::gimplify_ctx_return_temp_get;
*swig_return_temp_set = *gccc::gimplify_ctx_return_temp_set;
*swig_case_labels_get = *gccc::gimplify_ctx_case_labels_get;
*swig_case_labels_set = *gccc::gimplify_ctx_case_labels_set;
*swig_temp_htab_get = *gccc::gimplify_ctx_temp_htab_get;
*swig_temp_htab_set = *gccc::gimplify_ctx_temp_htab_set;
*swig_conditions_get = *gccc::gimplify_ctx_conditions_get;
*swig_conditions_set = *gccc::gimplify_ctx_conditions_set;
*swig_save_stack_get = *gccc::gimplify_ctx_save_stack_get;
*swig_save_stack_set = *gccc::gimplify_ctx_save_stack_set;
*swig_into_ssa_get = *gccc::gimplify_ctx_into_ssa_get;
*swig_into_ssa_set = *gccc::gimplify_ctx_into_ssa_set;
*swig_allow_rhs_cond_expr_get = *gccc::gimplify_ctx_allow_rhs_cond_expr_get;
*swig_allow_rhs_cond_expr_set = *gccc::gimplify_ctx_allow_rhs_cond_expr_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimplify_ctx(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimplify_ctx($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::walk_stmt_info ##############

package gcc::walk_stmt_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_gsi_get = *gccc::walk_stmt_info_gsi_get;
*swig_gsi_set = *gccc::walk_stmt_info_gsi_set;
*swig_info_get = *gccc::walk_stmt_info_info_get;
*swig_info_set = *gccc::walk_stmt_info_info_set;
*swig_pset_get = *gccc::walk_stmt_info_pset_get;
*swig_pset_set = *gccc::walk_stmt_info_pset_set;
*swig_val_only_get = *gccc::walk_stmt_info_val_only_get;
*swig_val_only_set = *gccc::walk_stmt_info_val_only_set;
*swig_is_lhs_get = *gccc::walk_stmt_info_is_lhs_get;
*swig_is_lhs_set = *gccc::walk_stmt_info_is_lhs_set;
*swig_changed_get = *gccc::walk_stmt_info_changed_get;
*swig_changed_set = *gccc::walk_stmt_info_changed_set;
*swig_want_locations_get = *gccc::walk_stmt_info_want_locations_get;
*swig_want_locations_set = *gccc::walk_stmt_info_want_locations_set;
*swig_callback_result_get = *gccc::walk_stmt_info_callback_result_get;
*swig_callback_result_set = *gccc::walk_stmt_info_callback_result_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_walk_stmt_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_walk_stmt_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ld_plugin_input_file ##############

package gcc::ld_plugin_input_file;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *gccc::ld_plugin_input_file_name_get;
*swig_name_set = *gccc::ld_plugin_input_file_name_set;
*swig_fd_get = *gccc::ld_plugin_input_file_fd_get;
*swig_fd_set = *gccc::ld_plugin_input_file_fd_set;
*swig_offset_get = *gccc::ld_plugin_input_file_offset_get;
*swig_offset_set = *gccc::ld_plugin_input_file_offset_set;
*swig_filesize_get = *gccc::ld_plugin_input_file_filesize_get;
*swig_filesize_set = *gccc::ld_plugin_input_file_filesize_set;
*swig_handle_get = *gccc::ld_plugin_input_file_handle_get;
*swig_handle_set = *gccc::ld_plugin_input_file_handle_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ld_plugin_input_file(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ld_plugin_input_file($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ld_plugin_symbol ##############

package gcc::ld_plugin_symbol;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *gccc::ld_plugin_symbol_name_get;
*swig_name_set = *gccc::ld_plugin_symbol_name_set;
*swig_version_get = *gccc::ld_plugin_symbol_version_get;
*swig_version_set = *gccc::ld_plugin_symbol_version_set;
*swig_def_get = *gccc::ld_plugin_symbol_def_get;
*swig_def_set = *gccc::ld_plugin_symbol_def_set;
*swig_visibility_get = *gccc::ld_plugin_symbol_visibility_get;
*swig_visibility_set = *gccc::ld_plugin_symbol_visibility_set;
*swig_size_get = *gccc::ld_plugin_symbol_size_get;
*swig_size_set = *gccc::ld_plugin_symbol_size_set;
*swig_comdat_key_get = *gccc::ld_plugin_symbol_comdat_key_get;
*swig_comdat_key_set = *gccc::ld_plugin_symbol_comdat_key_set;
*swig_resolution_get = *gccc::ld_plugin_symbol_resolution_get;
*swig_resolution_set = *gccc::ld_plugin_symbol_resolution_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ld_plugin_symbol(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ld_plugin_symbol($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ld_plugin_tv ##############

package gcc::ld_plugin_tv;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_tv_tag_get = *gccc::ld_plugin_tv_tv_tag_get;
*swig_tv_tag_set = *gccc::ld_plugin_tv_tv_tag_set;
*swig_tv_u_get = *gccc::ld_plugin_tv_tv_u_get;
*swig_tv_u_set = *gccc::ld_plugin_tv_tv_u_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ld_plugin_tv(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ld_plugin_tv($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ld_plugin_tv_tv_u ##############

package gcc::ld_plugin_tv_tv_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_tv_val_get = *gccc::ld_plugin_tv_tv_u_tv_val_get;
*swig_tv_val_set = *gccc::ld_plugin_tv_tv_u_tv_val_set;
*swig_tv_string_get = *gccc::ld_plugin_tv_tv_u_tv_string_get;
*swig_tv_string_set = *gccc::ld_plugin_tv_tv_u_tv_string_set;
*swig_tv_register_claim_file_get = *gccc::ld_plugin_tv_tv_u_tv_register_claim_file_get;
*swig_tv_register_claim_file_set = *gccc::ld_plugin_tv_tv_u_tv_register_claim_file_set;
*swig_tv_register_all_symbols_read_get = *gccc::ld_plugin_tv_tv_u_tv_register_all_symbols_read_get;
*swig_tv_register_all_symbols_read_set = *gccc::ld_plugin_tv_tv_u_tv_register_all_symbols_read_set;
*swig_tv_register_cleanup_get = *gccc::ld_plugin_tv_tv_u_tv_register_cleanup_get;
*swig_tv_register_cleanup_set = *gccc::ld_plugin_tv_tv_u_tv_register_cleanup_set;
*swig_tv_add_symbols_get = *gccc::ld_plugin_tv_tv_u_tv_add_symbols_get;
*swig_tv_add_symbols_set = *gccc::ld_plugin_tv_tv_u_tv_add_symbols_set;
*swig_tv_get_symbols_get = *gccc::ld_plugin_tv_tv_u_tv_get_symbols_get;
*swig_tv_get_symbols_set = *gccc::ld_plugin_tv_tv_u_tv_get_symbols_set;
*swig_tv_add_input_file_get = *gccc::ld_plugin_tv_tv_u_tv_add_input_file_get;
*swig_tv_add_input_file_set = *gccc::ld_plugin_tv_tv_u_tv_add_input_file_set;
*swig_tv_message_get = *gccc::ld_plugin_tv_tv_u_tv_message_get;
*swig_tv_message_set = *gccc::ld_plugin_tv_tv_u_tv_message_set;
*swig_tv_get_input_file_get = *gccc::ld_plugin_tv_tv_u_tv_get_input_file_get;
*swig_tv_get_input_file_set = *gccc::ld_plugin_tv_tv_u_tv_get_input_file_set;
*swig_tv_release_input_file_get = *gccc::ld_plugin_tv_tv_u_tv_release_input_file_get;
*swig_tv_release_input_file_set = *gccc::ld_plugin_tv_tv_u_tv_release_input_file_set;
*swig_tv_add_input_library_get = *gccc::ld_plugin_tv_tv_u_tv_add_input_library_get;
*swig_tv_add_input_library_set = *gccc::ld_plugin_tv_tv_u_tv_add_input_library_set;
*swig_tv_set_extra_library_path_get = *gccc::ld_plugin_tv_tv_u_tv_set_extra_library_path_get;
*swig_tv_set_extra_library_path_set = *gccc::ld_plugin_tv_tv_u_tv_set_extra_library_path_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ld_plugin_tv_tv_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ld_plugin_tv_tv_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ipa_ref_ptr_u ##############

package gcc::ipa_ref_ptr_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_cgraph_node_get = *gccc::ipa_ref_ptr_u_cgraph_node_get;
*swig_cgraph_node_set = *gccc::ipa_ref_ptr_u_cgraph_node_set;
*swig_varpool_node_get = *gccc::ipa_ref_ptr_u_varpool_node_get;
*swig_varpool_node_set = *gccc::ipa_ref_ptr_u_varpool_node_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ipa_ref_ptr_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ipa_ref_ptr_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ipa_ref ##############

package gcc::ipa_ref;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_refering_get = *gccc::ipa_ref_refering_get;
*swig_refering_set = *gccc::ipa_ref_refering_set;
*swig_refered_get = *gccc::ipa_ref_refered_get;
*swig_refered_set = *gccc::ipa_ref_refered_set;
*swig_stmt_get = *gccc::ipa_ref_stmt_get;
*swig_stmt_set = *gccc::ipa_ref_stmt_set;
*swig_refered_index_get = *gccc::ipa_ref_refered_index_get;
*swig_refered_index_set = *gccc::ipa_ref_refered_index_set;
*swig_refering_type_get = *gccc::ipa_ref_refering_type_get;
*swig_refering_type_set = *gccc::ipa_ref_refering_type_set;
*swig_refered_type_get = *gccc::ipa_ref_refered_type_get;
*swig_refered_type_set = *gccc::ipa_ref_refered_type_set;
*swig_use_get = *gccc::ipa_ref_use_get;
*swig_use_set = *gccc::ipa_ref_use_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ipa_ref(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ipa_ref($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_ref_t_base ##############

package gcc::VEC_ipa_ref_t_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_ipa_ref_t_base_num_get;
*swig_num_set = *gccc::VEC_ipa_ref_t_base_num_set;
*swig_alloc_get = *gccc::VEC_ipa_ref_t_base_alloc_get;
*swig_alloc_set = *gccc::VEC_ipa_ref_t_base_alloc_set;
*swig_vec_get = *gccc::VEC_ipa_ref_t_base_vec_get;
*swig_vec_set = *gccc::VEC_ipa_ref_t_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_ref_t_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_ref_t_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_ref_t_none ##############

package gcc::VEC_ipa_ref_t_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_ref_t_none_base_get;
*swig_base_set = *gccc::VEC_ipa_ref_t_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_ref_t_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_ref_t_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_ref_t_gc ##############

package gcc::VEC_ipa_ref_t_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_ref_t_gc_base_get;
*swig_base_set = *gccc::VEC_ipa_ref_t_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_ref_t_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_ref_t_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_ref_ptr_base ##############

package gcc::VEC_ipa_ref_ptr_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_ipa_ref_ptr_base_num_get;
*swig_num_set = *gccc::VEC_ipa_ref_ptr_base_num_set;
*swig_alloc_get = *gccc::VEC_ipa_ref_ptr_base_alloc_get;
*swig_alloc_set = *gccc::VEC_ipa_ref_ptr_base_alloc_set;
*swig_vec_get = *gccc::VEC_ipa_ref_ptr_base_vec_get;
*swig_vec_set = *gccc::VEC_ipa_ref_ptr_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_ref_ptr_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_ref_ptr_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_ref_ptr_none ##############

package gcc::VEC_ipa_ref_ptr_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_ref_ptr_none_base_get;
*swig_base_set = *gccc::VEC_ipa_ref_ptr_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_ref_ptr_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_ref_ptr_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_ref_ptr_heap ##############

package gcc::VEC_ipa_ref_ptr_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_ref_ptr_heap_base_get;
*swig_base_set = *gccc::VEC_ipa_ref_ptr_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_ref_ptr_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_ref_ptr_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ipa_ref_list ##############

package gcc::ipa_ref_list;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_references_get = *gccc::ipa_ref_list_references_get;
*swig_references_set = *gccc::ipa_ref_list_references_set;
*swig_refering_get = *gccc::ipa_ref_list_refering_get;
*swig_refering_set = *gccc::ipa_ref_list_refering_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ipa_ref_list(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ipa_ref_list($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::inline_summary ##############

package gcc::inline_summary;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_estimated_self_stack_size_get = *gccc::inline_summary_estimated_self_stack_size_get;
*swig_estimated_self_stack_size_set = *gccc::inline_summary_estimated_self_stack_size_set;
*swig_self_size_get = *gccc::inline_summary_self_size_get;
*swig_self_size_set = *gccc::inline_summary_self_size_set;
*swig_size_inlining_benefit_get = *gccc::inline_summary_size_inlining_benefit_get;
*swig_size_inlining_benefit_set = *gccc::inline_summary_size_inlining_benefit_set;
*swig_self_time_get = *gccc::inline_summary_self_time_get;
*swig_self_time_set = *gccc::inline_summary_self_time_set;
*swig_time_inlining_benefit_get = *gccc::inline_summary_time_inlining_benefit_get;
*swig_time_inlining_benefit_set = *gccc::inline_summary_time_inlining_benefit_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_inline_summary(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_inline_summary($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_thunk_info ##############

package gcc::cgraph_thunk_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_fixed_offset_get = *gccc::cgraph_thunk_info_fixed_offset_get;
*swig_fixed_offset_set = *gccc::cgraph_thunk_info_fixed_offset_set;
*swig_virtual_value_get = *gccc::cgraph_thunk_info_virtual_value_get;
*swig_virtual_value_set = *gccc::cgraph_thunk_info_virtual_value_set;
*swig_alias_get = *gccc::cgraph_thunk_info_alias_get;
*swig_alias_set = *gccc::cgraph_thunk_info_alias_set;
*swig_this_adjusting_get = *gccc::cgraph_thunk_info_this_adjusting_get;
*swig_this_adjusting_set = *gccc::cgraph_thunk_info_this_adjusting_set;
*swig_virtual_offset_p_get = *gccc::cgraph_thunk_info_virtual_offset_p_get;
*swig_virtual_offset_p_set = *gccc::cgraph_thunk_info_virtual_offset_p_set;
*swig_thunk_p_get = *gccc::cgraph_thunk_info_thunk_p_get;
*swig_thunk_p_set = *gccc::cgraph_thunk_info_thunk_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_thunk_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_thunk_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_local_info ##############

package gcc::cgraph_local_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_lto_file_data_get = *gccc::cgraph_local_info_lto_file_data_get;
*swig_lto_file_data_set = *gccc::cgraph_local_info_lto_file_data_set;
*swig_inline_summary_get = *gccc::cgraph_local_info_inline_summary_get;
*swig_inline_summary_set = *gccc::cgraph_local_info_inline_summary_set;
*swig_local_get = *gccc::cgraph_local_info_local_get;
*swig_local_set = *gccc::cgraph_local_info_local_set;
*swig_externally_visible_get = *gccc::cgraph_local_info_externally_visible_get;
*swig_externally_visible_set = *gccc::cgraph_local_info_externally_visible_set;
*swig_finalized_get = *gccc::cgraph_local_info_finalized_get;
*swig_finalized_set = *gccc::cgraph_local_info_finalized_set;
*swig_inlinable_get = *gccc::cgraph_local_info_inlinable_get;
*swig_inlinable_set = *gccc::cgraph_local_info_inlinable_set;
*swig_versionable_get = *gccc::cgraph_local_info_versionable_get;
*swig_versionable_set = *gccc::cgraph_local_info_versionable_set;
*swig_can_change_signature_get = *gccc::cgraph_local_info_can_change_signature_get;
*swig_can_change_signature_set = *gccc::cgraph_local_info_can_change_signature_set;
*swig_disregard_inline_limits_get = *gccc::cgraph_local_info_disregard_inline_limits_get;
*swig_disregard_inline_limits_set = *gccc::cgraph_local_info_disregard_inline_limits_set;
*swig_redefined_extern_inline_get = *gccc::cgraph_local_info_redefined_extern_inline_get;
*swig_redefined_extern_inline_set = *gccc::cgraph_local_info_redefined_extern_inline_set;
*swig_vtable_method_get = *gccc::cgraph_local_info_vtable_method_get;
*swig_vtable_method_set = *gccc::cgraph_local_info_vtable_method_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_local_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_local_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_global_info ##############

package gcc::cgraph_global_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_estimated_stack_size_get = *gccc::cgraph_global_info_estimated_stack_size_get;
*swig_estimated_stack_size_set = *gccc::cgraph_global_info_estimated_stack_size_set;
*swig_stack_frame_offset_get = *gccc::cgraph_global_info_stack_frame_offset_get;
*swig_stack_frame_offset_set = *gccc::cgraph_global_info_stack_frame_offset_set;
*swig_inlined_to_get = *gccc::cgraph_global_info_inlined_to_get;
*swig_inlined_to_set = *gccc::cgraph_global_info_inlined_to_set;
*swig_time_get = *gccc::cgraph_global_info_time_get;
*swig_time_set = *gccc::cgraph_global_info_time_set;
*swig_size_get = *gccc::cgraph_global_info_size_get;
*swig_size_set = *gccc::cgraph_global_info_size_set;
*swig_estimated_growth_get = *gccc::cgraph_global_info_estimated_growth_get;
*swig_estimated_growth_set = *gccc::cgraph_global_info_estimated_growth_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_global_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_global_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_rtl_info ##############

package gcc::cgraph_rtl_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_preferred_incoming_stack_boundary_get = *gccc::cgraph_rtl_info_preferred_incoming_stack_boundary_get;
*swig_preferred_incoming_stack_boundary_set = *gccc::cgraph_rtl_info_preferred_incoming_stack_boundary_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_rtl_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_rtl_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ipa_replace_map ##############

package gcc::ipa_replace_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_old_tree_get = *gccc::ipa_replace_map_old_tree_get;
*swig_old_tree_set = *gccc::ipa_replace_map_old_tree_set;
*swig_new_tree_get = *gccc::ipa_replace_map_new_tree_get;
*swig_new_tree_set = *gccc::ipa_replace_map_new_tree_set;
*swig_parm_num_get = *gccc::ipa_replace_map_parm_num_get;
*swig_parm_num_set = *gccc::ipa_replace_map_parm_num_set;
*swig_replace_p_get = *gccc::ipa_replace_map_replace_p_get;
*swig_replace_p_set = *gccc::ipa_replace_map_replace_p_set;
*swig_ref_p_get = *gccc::ipa_replace_map_ref_p_get;
*swig_ref_p_set = *gccc::ipa_replace_map_ref_p_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ipa_replace_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ipa_replace_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_replace_map_p_base ##############

package gcc::VEC_ipa_replace_map_p_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_ipa_replace_map_p_base_num_get;
*swig_num_set = *gccc::VEC_ipa_replace_map_p_base_num_set;
*swig_alloc_get = *gccc::VEC_ipa_replace_map_p_base_alloc_get;
*swig_alloc_set = *gccc::VEC_ipa_replace_map_p_base_alloc_set;
*swig_vec_get = *gccc::VEC_ipa_replace_map_p_base_vec_get;
*swig_vec_set = *gccc::VEC_ipa_replace_map_p_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_replace_map_p_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_replace_map_p_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_replace_map_p_none ##############

package gcc::VEC_ipa_replace_map_p_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_replace_map_p_none_base_get;
*swig_base_set = *gccc::VEC_ipa_replace_map_p_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_replace_map_p_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_replace_map_p_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_ipa_replace_map_p_gc ##############

package gcc::VEC_ipa_replace_map_p_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_ipa_replace_map_p_gc_base_get;
*swig_base_set = *gccc::VEC_ipa_replace_map_p_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_ipa_replace_map_p_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_ipa_replace_map_p_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_clone_info ##############

package gcc::cgraph_clone_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_tree_map_get = *gccc::cgraph_clone_info_tree_map_get;
*swig_tree_map_set = *gccc::cgraph_clone_info_tree_map_set;
*swig_args_to_skip_get = *gccc::cgraph_clone_info_args_to_skip_get;
*swig_args_to_skip_set = *gccc::cgraph_clone_info_args_to_skip_set;
*swig_combined_args_to_skip_get = *gccc::cgraph_clone_info_combined_args_to_skip_get;
*swig_combined_args_to_skip_set = *gccc::cgraph_clone_info_combined_args_to_skip_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_clone_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_clone_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_node ##############

package gcc::cgraph_node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_decl_get = *gccc::cgraph_node_decl_get;
*swig_decl_set = *gccc::cgraph_node_decl_set;
*swig_callees_get = *gccc::cgraph_node_callees_get;
*swig_callees_set = *gccc::cgraph_node_callees_set;
*swig_callers_get = *gccc::cgraph_node_callers_get;
*swig_callers_set = *gccc::cgraph_node_callers_set;
*swig_next_get = *gccc::cgraph_node_next_get;
*swig_next_set = *gccc::cgraph_node_next_set;
*swig_previous_get = *gccc::cgraph_node_previous_get;
*swig_previous_set = *gccc::cgraph_node_previous_set;
*swig_indirect_calls_get = *gccc::cgraph_node_indirect_calls_get;
*swig_indirect_calls_set = *gccc::cgraph_node_indirect_calls_set;
*swig_origin_get = *gccc::cgraph_node_origin_get;
*swig_origin_set = *gccc::cgraph_node_origin_set;
*swig_nested_get = *gccc::cgraph_node_nested_get;
*swig_nested_set = *gccc::cgraph_node_nested_set;
*swig_next_nested_get = *gccc::cgraph_node_next_nested_get;
*swig_next_nested_set = *gccc::cgraph_node_next_nested_set;
*swig_next_needed_get = *gccc::cgraph_node_next_needed_get;
*swig_next_needed_set = *gccc::cgraph_node_next_needed_set;
*swig_next_sibling_clone_get = *gccc::cgraph_node_next_sibling_clone_get;
*swig_next_sibling_clone_set = *gccc::cgraph_node_next_sibling_clone_set;
*swig_prev_sibling_clone_get = *gccc::cgraph_node_prev_sibling_clone_get;
*swig_prev_sibling_clone_set = *gccc::cgraph_node_prev_sibling_clone_set;
*swig_clones_get = *gccc::cgraph_node_clones_get;
*swig_clones_set = *gccc::cgraph_node_clones_set;
*swig_clone_of_get = *gccc::cgraph_node_clone_of_get;
*swig_clone_of_set = *gccc::cgraph_node_clone_of_set;
*swig_same_body_get = *gccc::cgraph_node_same_body_get;
*swig_same_body_set = *gccc::cgraph_node_same_body_set;
*swig_same_comdat_group_get = *gccc::cgraph_node_same_comdat_group_get;
*swig_same_comdat_group_set = *gccc::cgraph_node_same_comdat_group_set;
*swig_call_site_hash_get = *gccc::cgraph_node_call_site_hash_get;
*swig_call_site_hash_set = *gccc::cgraph_node_call_site_hash_set;
*swig_former_clone_of_get = *gccc::cgraph_node_former_clone_of_get;
*swig_former_clone_of_set = *gccc::cgraph_node_former_clone_of_set;
*swig_aux_get = *gccc::cgraph_node_aux_get;
*swig_aux_set = *gccc::cgraph_node_aux_set;
*swig_ipa_transforms_to_apply_get = *gccc::cgraph_node_ipa_transforms_to_apply_get;
*swig_ipa_transforms_to_apply_set = *gccc::cgraph_node_ipa_transforms_to_apply_set;
*swig_ref_list_get = *gccc::cgraph_node_ref_list_get;
*swig_ref_list_set = *gccc::cgraph_node_ref_list_set;
*swig_local_get = *gccc::cgraph_node_local_get;
*swig_local_set = *gccc::cgraph_node_local_set;
*swig_global_get = *gccc::cgraph_node_global_get;
*swig_global_set = *gccc::cgraph_node_global_set;
*swig_rtl_get = *gccc::cgraph_node_rtl_get;
*swig_rtl_set = *gccc::cgraph_node_rtl_set;
*swig_clone_get = *gccc::cgraph_node_clone_get;
*swig_clone_set = *gccc::cgraph_node_clone_set;
*swig_thunk_get = *gccc::cgraph_node_thunk_get;
*swig_thunk_set = *gccc::cgraph_node_thunk_set;
*swig_count_get = *gccc::cgraph_node_count_get;
*swig_count_set = *gccc::cgraph_node_count_set;
*swig_count_materialization_scale_get = *gccc::cgraph_node_count_materialization_scale_get;
*swig_count_materialization_scale_set = *gccc::cgraph_node_count_materialization_scale_set;
*swig_uid_get = *gccc::cgraph_node_uid_get;
*swig_uid_set = *gccc::cgraph_node_uid_set;
*swig_order_get = *gccc::cgraph_node_order_get;
*swig_order_set = *gccc::cgraph_node_order_set;
*swig_pid_get = *gccc::cgraph_node_pid_get;
*swig_pid_set = *gccc::cgraph_node_pid_set;
*swig_resolution_get = *gccc::cgraph_node_resolution_get;
*swig_resolution_set = *gccc::cgraph_node_resolution_set;
*swig_needed_get = *gccc::cgraph_node_needed_get;
*swig_needed_set = *gccc::cgraph_node_needed_set;
*swig_address_taken_get = *gccc::cgraph_node_address_taken_get;
*swig_address_taken_set = *gccc::cgraph_node_address_taken_set;
*swig_abstract_and_needed_get = *gccc::cgraph_node_abstract_and_needed_get;
*swig_abstract_and_needed_set = *gccc::cgraph_node_abstract_and_needed_set;
*swig_reachable_get = *gccc::cgraph_node_reachable_get;
*swig_reachable_set = *gccc::cgraph_node_reachable_set;
*swig_reachable_from_other_partition_get = *gccc::cgraph_node_reachable_from_other_partition_get;
*swig_reachable_from_other_partition_set = *gccc::cgraph_node_reachable_from_other_partition_set;
*swig_lowered_get = *gccc::cgraph_node_lowered_get;
*swig_lowered_set = *gccc::cgraph_node_lowered_set;
*swig_analyzed_get = *gccc::cgraph_node_analyzed_get;
*swig_analyzed_set = *gccc::cgraph_node_analyzed_set;
*swig_in_other_partition_get = *gccc::cgraph_node_in_other_partition_get;
*swig_in_other_partition_set = *gccc::cgraph_node_in_other_partition_set;
*swig_process_get = *gccc::cgraph_node_process_get;
*swig_process_set = *gccc::cgraph_node_process_set;
*swig_alias_get = *gccc::cgraph_node_alias_get;
*swig_alias_set = *gccc::cgraph_node_alias_set;
*swig_finalized_by_frontend_get = *gccc::cgraph_node_finalized_by_frontend_get;
*swig_finalized_by_frontend_set = *gccc::cgraph_node_finalized_by_frontend_set;
*swig_same_body_alias_get = *gccc::cgraph_node_same_body_alias_get;
*swig_same_body_alias_set = *gccc::cgraph_node_same_body_alias_set;
*swig_frequency_get = *gccc::cgraph_node_frequency_get;
*swig_frequency_set = *gccc::cgraph_node_frequency_set;
*swig_only_called_at_startup_get = *gccc::cgraph_node_only_called_at_startup_get;
*swig_only_called_at_startup_set = *gccc::cgraph_node_only_called_at_startup_set;
*swig_only_called_at_exit_get = *gccc::cgraph_node_only_called_at_exit_get;
*swig_only_called_at_exit_set = *gccc::cgraph_node_only_called_at_exit_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_ptr_base ##############

package gcc::VEC_cgraph_node_ptr_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_cgraph_node_ptr_base_num_get;
*swig_num_set = *gccc::VEC_cgraph_node_ptr_base_num_set;
*swig_alloc_get = *gccc::VEC_cgraph_node_ptr_base_alloc_get;
*swig_alloc_set = *gccc::VEC_cgraph_node_ptr_base_alloc_set;
*swig_vec_get = *gccc::VEC_cgraph_node_ptr_base_vec_get;
*swig_vec_set = *gccc::VEC_cgraph_node_ptr_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_ptr_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_ptr_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_ptr_none ##############

package gcc::VEC_cgraph_node_ptr_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_node_ptr_none_base_get;
*swig_base_set = *gccc::VEC_cgraph_node_ptr_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_ptr_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_ptr_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_ptr_heap ##############

package gcc::VEC_cgraph_node_ptr_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_node_ptr_heap_base_get;
*swig_base_set = *gccc::VEC_cgraph_node_ptr_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_ptr_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_ptr_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_ptr_gc ##############

package gcc::VEC_cgraph_node_ptr_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_node_ptr_gc_base_get;
*swig_base_set = *gccc::VEC_cgraph_node_ptr_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_ptr_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_ptr_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_node_set_def ##############

package gcc::cgraph_node_set_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_hashtab_get = *gccc::cgraph_node_set_def_hashtab_get;
*swig_hashtab_set = *gccc::cgraph_node_set_def_hashtab_set;
*swig_nodes_get = *gccc::cgraph_node_set_def_nodes_get;
*swig_nodes_set = *gccc::cgraph_node_set_def_nodes_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_node_set_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_node_set_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_ptr_base ##############

package gcc::VEC_varpool_node_ptr_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_varpool_node_ptr_base_num_get;
*swig_num_set = *gccc::VEC_varpool_node_ptr_base_num_set;
*swig_alloc_get = *gccc::VEC_varpool_node_ptr_base_alloc_get;
*swig_alloc_set = *gccc::VEC_varpool_node_ptr_base_alloc_set;
*swig_vec_get = *gccc::VEC_varpool_node_ptr_base_vec_get;
*swig_vec_set = *gccc::VEC_varpool_node_ptr_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_ptr_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_ptr_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_ptr_none ##############

package gcc::VEC_varpool_node_ptr_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_varpool_node_ptr_none_base_get;
*swig_base_set = *gccc::VEC_varpool_node_ptr_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_ptr_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_ptr_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_ptr_heap ##############

package gcc::VEC_varpool_node_ptr_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_varpool_node_ptr_heap_base_get;
*swig_base_set = *gccc::VEC_varpool_node_ptr_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_ptr_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_ptr_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_ptr_gc ##############

package gcc::VEC_varpool_node_ptr_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_varpool_node_ptr_gc_base_get;
*swig_base_set = *gccc::VEC_varpool_node_ptr_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_ptr_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_ptr_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::varpool_node_set_def ##############

package gcc::varpool_node_set_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_hashtab_get = *gccc::varpool_node_set_def_hashtab_get;
*swig_hashtab_set = *gccc::varpool_node_set_def_hashtab_set;
*swig_nodes_get = *gccc::varpool_node_set_def_nodes_get;
*swig_nodes_set = *gccc::varpool_node_set_def_nodes_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_varpool_node_set_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_varpool_node_set_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_set_base ##############

package gcc::VEC_cgraph_node_set_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_cgraph_node_set_base_num_get;
*swig_num_set = *gccc::VEC_cgraph_node_set_base_num_set;
*swig_alloc_get = *gccc::VEC_cgraph_node_set_base_alloc_get;
*swig_alloc_set = *gccc::VEC_cgraph_node_set_base_alloc_set;
*swig_vec_get = *gccc::VEC_cgraph_node_set_base_vec_get;
*swig_vec_set = *gccc::VEC_cgraph_node_set_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_set_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_set_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_set_none ##############

package gcc::VEC_cgraph_node_set_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_node_set_none_base_get;
*swig_base_set = *gccc::VEC_cgraph_node_set_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_set_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_set_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_set_gc ##############

package gcc::VEC_cgraph_node_set_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_node_set_gc_base_get;
*swig_base_set = *gccc::VEC_cgraph_node_set_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_set_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_set_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_node_set_heap ##############

package gcc::VEC_cgraph_node_set_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_node_set_heap_base_get;
*swig_base_set = *gccc::VEC_cgraph_node_set_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_node_set_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_node_set_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_set_base ##############

package gcc::VEC_varpool_node_set_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_varpool_node_set_base_num_get;
*swig_num_set = *gccc::VEC_varpool_node_set_base_num_set;
*swig_alloc_get = *gccc::VEC_varpool_node_set_base_alloc_get;
*swig_alloc_set = *gccc::VEC_varpool_node_set_base_alloc_set;
*swig_vec_get = *gccc::VEC_varpool_node_set_base_vec_get;
*swig_vec_set = *gccc::VEC_varpool_node_set_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_set_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_set_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_set_none ##############

package gcc::VEC_varpool_node_set_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_varpool_node_set_none_base_get;
*swig_base_set = *gccc::VEC_varpool_node_set_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_set_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_set_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_set_gc ##############

package gcc::VEC_varpool_node_set_gc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_varpool_node_set_gc_base_get;
*swig_base_set = *gccc::VEC_varpool_node_set_gc_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_set_gc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_set_gc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_varpool_node_set_heap ##############

package gcc::VEC_varpool_node_set_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_varpool_node_set_heap_base_get;
*swig_base_set = *gccc::VEC_varpool_node_set_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_varpool_node_set_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_varpool_node_set_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_node_set_element_def ##############

package gcc::cgraph_node_set_element_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_node_get = *gccc::cgraph_node_set_element_def_node_get;
*swig_node_set = *gccc::cgraph_node_set_element_def_node_set;
*swig_index_get = *gccc::cgraph_node_set_element_def_index_get;
*swig_index_set = *gccc::cgraph_node_set_element_def_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_node_set_element_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_node_set_element_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_node_set_iterator ##############

package gcc::cgraph_node_set_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_set_get = *gccc::cgraph_node_set_iterator_set_get;
*swig_set_set = *gccc::cgraph_node_set_iterator_set_set;
*swig_index_get = *gccc::cgraph_node_set_iterator_index_get;
*swig_index_set = *gccc::cgraph_node_set_iterator_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_node_set_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_node_set_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::varpool_node_set_element_def ##############

package gcc::varpool_node_set_element_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_node_get = *gccc::varpool_node_set_element_def_node_get;
*swig_node_set = *gccc::varpool_node_set_element_def_node_set;
*swig_index_get = *gccc::varpool_node_set_element_def_index_get;
*swig_index_set = *gccc::varpool_node_set_element_def_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_varpool_node_set_element_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_varpool_node_set_element_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::varpool_node_set_iterator ##############

package gcc::varpool_node_set_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_set_get = *gccc::varpool_node_set_iterator_set_get;
*swig_set_set = *gccc::varpool_node_set_iterator_set_set;
*swig_index_get = *gccc::varpool_node_set_iterator_index_get;
*swig_index_set = *gccc::varpool_node_set_iterator_index_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_varpool_node_set_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_varpool_node_set_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_indirect_call_info ##############

package gcc::cgraph_indirect_call_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_anc_offset_get = *gccc::cgraph_indirect_call_info_anc_offset_get;
*swig_anc_offset_set = *gccc::cgraph_indirect_call_info_anc_offset_set;
*swig_otr_token_get = *gccc::cgraph_indirect_call_info_otr_token_get;
*swig_otr_token_set = *gccc::cgraph_indirect_call_info_otr_token_set;
*swig_thunk_delta_get = *gccc::cgraph_indirect_call_info_thunk_delta_get;
*swig_thunk_delta_set = *gccc::cgraph_indirect_call_info_thunk_delta_set;
*swig_otr_type_get = *gccc::cgraph_indirect_call_info_otr_type_get;
*swig_otr_type_set = *gccc::cgraph_indirect_call_info_otr_type_set;
*swig_param_index_get = *gccc::cgraph_indirect_call_info_param_index_get;
*swig_param_index_set = *gccc::cgraph_indirect_call_info_param_index_set;
*swig_ecf_flags_get = *gccc::cgraph_indirect_call_info_ecf_flags_get;
*swig_ecf_flags_set = *gccc::cgraph_indirect_call_info_ecf_flags_set;
*swig_polymorphic_get = *gccc::cgraph_indirect_call_info_polymorphic_get;
*swig_polymorphic_set = *gccc::cgraph_indirect_call_info_polymorphic_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_indirect_call_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_indirect_call_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_edge ##############

package gcc::cgraph_edge;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_count_get = *gccc::cgraph_edge_count_get;
*swig_count_set = *gccc::cgraph_edge_count_set;
*swig_caller_get = *gccc::cgraph_edge_caller_get;
*swig_caller_set = *gccc::cgraph_edge_caller_set;
*swig_callee_get = *gccc::cgraph_edge_callee_get;
*swig_callee_set = *gccc::cgraph_edge_callee_set;
*swig_prev_caller_get = *gccc::cgraph_edge_prev_caller_get;
*swig_prev_caller_set = *gccc::cgraph_edge_prev_caller_set;
*swig_next_caller_get = *gccc::cgraph_edge_next_caller_get;
*swig_next_caller_set = *gccc::cgraph_edge_next_caller_set;
*swig_prev_callee_get = *gccc::cgraph_edge_prev_callee_get;
*swig_prev_callee_set = *gccc::cgraph_edge_prev_callee_set;
*swig_next_callee_get = *gccc::cgraph_edge_next_callee_get;
*swig_next_callee_set = *gccc::cgraph_edge_next_callee_set;
*swig_call_stmt_get = *gccc::cgraph_edge_call_stmt_get;
*swig_call_stmt_set = *gccc::cgraph_edge_call_stmt_set;
*swig_indirect_info_get = *gccc::cgraph_edge_indirect_info_get;
*swig_indirect_info_set = *gccc::cgraph_edge_indirect_info_set;
*swig_aux_get = *gccc::cgraph_edge_aux_get;
*swig_aux_set = *gccc::cgraph_edge_aux_set;
*swig_inline_failed_get = *gccc::cgraph_edge_inline_failed_get;
*swig_inline_failed_set = *gccc::cgraph_edge_inline_failed_set;
*swig_lto_stmt_uid_get = *gccc::cgraph_edge_lto_stmt_uid_get;
*swig_lto_stmt_uid_set = *gccc::cgraph_edge_lto_stmt_uid_set;
*swig_frequency_get = *gccc::cgraph_edge_frequency_get;
*swig_frequency_set = *gccc::cgraph_edge_frequency_set;
*swig_uid_get = *gccc::cgraph_edge_uid_get;
*swig_uid_set = *gccc::cgraph_edge_uid_set;
*swig_loop_nest_get = *gccc::cgraph_edge_loop_nest_get;
*swig_loop_nest_set = *gccc::cgraph_edge_loop_nest_set;
*swig_indirect_inlining_edge_get = *gccc::cgraph_edge_indirect_inlining_edge_get;
*swig_indirect_inlining_edge_set = *gccc::cgraph_edge_indirect_inlining_edge_set;
*swig_indirect_unknown_callee_get = *gccc::cgraph_edge_indirect_unknown_callee_get;
*swig_indirect_unknown_callee_set = *gccc::cgraph_edge_indirect_unknown_callee_set;
*swig_call_stmt_cannot_inline_p_get = *gccc::cgraph_edge_call_stmt_cannot_inline_p_get;
*swig_call_stmt_cannot_inline_p_set = *gccc::cgraph_edge_call_stmt_cannot_inline_p_set;
*swig_can_throw_external_get = *gccc::cgraph_edge_can_throw_external_get;
*swig_can_throw_external_set = *gccc::cgraph_edge_can_throw_external_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_edge(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_edge($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_edge_p_base ##############

package gcc::VEC_cgraph_edge_p_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_cgraph_edge_p_base_num_get;
*swig_num_set = *gccc::VEC_cgraph_edge_p_base_num_set;
*swig_alloc_get = *gccc::VEC_cgraph_edge_p_base_alloc_get;
*swig_alloc_set = *gccc::VEC_cgraph_edge_p_base_alloc_set;
*swig_vec_get = *gccc::VEC_cgraph_edge_p_base_vec_get;
*swig_vec_set = *gccc::VEC_cgraph_edge_p_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_edge_p_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_edge_p_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_edge_p_none ##############

package gcc::VEC_cgraph_edge_p_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_edge_p_none_base_get;
*swig_base_set = *gccc::VEC_cgraph_edge_p_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_edge_p_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_edge_p_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_cgraph_edge_p_heap ##############

package gcc::VEC_cgraph_edge_p_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_cgraph_edge_p_heap_base_get;
*swig_base_set = *gccc::VEC_cgraph_edge_p_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_cgraph_edge_p_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_cgraph_edge_p_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::varpool_node ##############

package gcc::varpool_node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_decl_get = *gccc::varpool_node_decl_get;
*swig_decl_set = *gccc::varpool_node_decl_set;
*swig_next_get = *gccc::varpool_node_next_get;
*swig_next_set = *gccc::varpool_node_next_set;
*swig_prev_get = *gccc::varpool_node_prev_get;
*swig_prev_set = *gccc::varpool_node_prev_set;
*swig_next_needed_get = *gccc::varpool_node_next_needed_get;
*swig_next_needed_set = *gccc::varpool_node_next_needed_set;
*swig_prev_needed_get = *gccc::varpool_node_prev_needed_get;
*swig_prev_needed_set = *gccc::varpool_node_prev_needed_set;
*swig_extra_name_get = *gccc::varpool_node_extra_name_get;
*swig_extra_name_set = *gccc::varpool_node_extra_name_set;
*swig_same_comdat_group_get = *gccc::varpool_node_same_comdat_group_get;
*swig_same_comdat_group_set = *gccc::varpool_node_same_comdat_group_set;
*swig_ref_list_get = *gccc::varpool_node_ref_list_get;
*swig_ref_list_set = *gccc::varpool_node_ref_list_set;
*swig_lto_file_data_get = *gccc::varpool_node_lto_file_data_get;
*swig_lto_file_data_set = *gccc::varpool_node_lto_file_data_set;
*swig_aux_get = *gccc::varpool_node_aux_get;
*swig_aux_set = *gccc::varpool_node_aux_set;
*swig_order_get = *gccc::varpool_node_order_get;
*swig_order_set = *gccc::varpool_node_order_set;
*swig_resolution_get = *gccc::varpool_node_resolution_get;
*swig_resolution_set = *gccc::varpool_node_resolution_set;
*swig_needed_get = *gccc::varpool_node_needed_get;
*swig_needed_set = *gccc::varpool_node_needed_set;
*swig_force_output_get = *gccc::varpool_node_force_output_get;
*swig_force_output_set = *gccc::varpool_node_force_output_set;
*swig_analyzed_get = *gccc::varpool_node_analyzed_get;
*swig_analyzed_set = *gccc::varpool_node_analyzed_set;
*swig_finalized_get = *gccc::varpool_node_finalized_get;
*swig_finalized_set = *gccc::varpool_node_finalized_set;
*swig_output_get = *gccc::varpool_node_output_get;
*swig_output_set = *gccc::varpool_node_output_set;
*swig_externally_visible_get = *gccc::varpool_node_externally_visible_get;
*swig_externally_visible_set = *gccc::varpool_node_externally_visible_set;
*swig_alias_get = *gccc::varpool_node_alias_get;
*swig_alias_set = *gccc::varpool_node_alias_set;
*swig_used_from_other_partition_get = *gccc::varpool_node_used_from_other_partition_get;
*swig_used_from_other_partition_set = *gccc::varpool_node_used_from_other_partition_set;
*swig_in_other_partition_get = *gccc::varpool_node_in_other_partition_get;
*swig_in_other_partition_set = *gccc::varpool_node_in_other_partition_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_varpool_node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_varpool_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::cgraph_asm_node ##############

package gcc::cgraph_asm_node;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *gccc::cgraph_asm_node_next_get;
*swig_next_set = *gccc::cgraph_asm_node_next_set;
*swig_asm_str_get = *gccc::cgraph_asm_node_asm_str_get;
*swig_asm_str_set = *gccc::cgraph_asm_node_asm_str_set;
*swig_order_get = *gccc::cgraph_asm_node_order_get;
*swig_order_set = *gccc::cgraph_asm_node_order_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_cgraph_asm_node(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_cgraph_asm_node($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::constant_descriptor_tree ##############

package gcc::constant_descriptor_tree;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_rtl_get = *gccc::constant_descriptor_tree_rtl_get;
*swig_rtl_set = *gccc::constant_descriptor_tree_rtl_set;
*swig_value_get = *gccc::constant_descriptor_tree_value_get;
*swig_value_set = *gccc::constant_descriptor_tree_value_set;
*swig_hash_get = *gccc::constant_descriptor_tree_hash_get;
*swig_hash_set = *gccc::constant_descriptor_tree_hash_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_constant_descriptor_tree(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_constant_descriptor_tree($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::gimple_df ##############

package gcc::gimple_df;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_referenced_vars_get = *gccc::gimple_df_referenced_vars_get;
*swig_referenced_vars_set = *gccc::gimple_df_referenced_vars_set;
*swig_modified_noreturn_calls_get = *gccc::gimple_df_modified_noreturn_calls_get;
*swig_modified_noreturn_calls_set = *gccc::gimple_df_modified_noreturn_calls_set;
*swig_ssa_names_get = *gccc::gimple_df_ssa_names_get;
*swig_ssa_names_set = *gccc::gimple_df_ssa_names_set;
*swig_vop_get = *gccc::gimple_df_vop_get;
*swig_vop_set = *gccc::gimple_df_vop_set;
*swig_escaped_get = *gccc::gimple_df_escaped_get;
*swig_escaped_set = *gccc::gimple_df_escaped_set;
*swig_decls_to_pointers_get = *gccc::gimple_df_decls_to_pointers_get;
*swig_decls_to_pointers_set = *gccc::gimple_df_decls_to_pointers_set;
*swig_free_ssanames_get = *gccc::gimple_df_free_ssanames_get;
*swig_free_ssanames_set = *gccc::gimple_df_free_ssanames_set;
*swig_default_defs_get = *gccc::gimple_df_default_defs_get;
*swig_default_defs_set = *gccc::gimple_df_default_defs_set;
*swig_syms_to_rename_get = *gccc::gimple_df_syms_to_rename_get;
*swig_syms_to_rename_set = *gccc::gimple_df_syms_to_rename_set;
*swig_in_ssa_p_get = *gccc::gimple_df_in_ssa_p_get;
*swig_in_ssa_p_set = *gccc::gimple_df_in_ssa_p_set;
*swig_ipa_pta_get = *gccc::gimple_df_ipa_pta_get;
*swig_ipa_pta_set = *gccc::gimple_df_ipa_pta_set;
*swig_ssa_operands_get = *gccc::gimple_df_ssa_operands_get;
*swig_ssa_operands_set = *gccc::gimple_df_ssa_operands_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_gimple_df(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_gimple_df($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::htab_iterator ##############

package gcc::htab_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_htab_get = *gccc::htab_iterator_htab_get;
*swig_htab_set = *gccc::htab_iterator_htab_set;
*swig_slot_get = *gccc::htab_iterator_slot_get;
*swig_slot_set = *gccc::htab_iterator_slot_set;
*swig_limit_get = *gccc::htab_iterator_limit_get;
*swig_limit_set = *gccc::htab_iterator_limit_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_htab_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_htab_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::ptr_info_def ##############

package gcc::ptr_info_def;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_pt_get = *gccc::ptr_info_def_pt_get;
*swig_pt_set = *gccc::ptr_info_def_pt_set;
*swig_align_get = *gccc::ptr_info_def_align_get;
*swig_align_set = *gccc::ptr_info_def_align_set;
*swig_misalign_get = *gccc::ptr_info_def_misalign_get;
*swig_misalign_set = *gccc::ptr_info_def_misalign_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_ptr_info_def(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_ptr_info_def($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::var_ann_d ##############

package gcc::var_ann_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_var_processed_get = *gccc::var_ann_d_base_var_processed_get;
*swig_base_var_processed_set = *gccc::var_ann_d_base_var_processed_set;
*swig_used_get = *gccc::var_ann_d_used_get;
*swig_used_set = *gccc::var_ann_d_used_set;
*swig_need_phi_state_get = *gccc::var_ann_d_need_phi_state_get;
*swig_need_phi_state_set = *gccc::var_ann_d_need_phi_state_set;
*swig_is_heapvar_get = *gccc::var_ann_d_is_heapvar_get;
*swig_is_heapvar_set = *gccc::var_ann_d_is_heapvar_set;
*swig_base_index_get = *gccc::var_ann_d_base_index_get;
*swig_base_index_set = *gccc::var_ann_d_base_index_set;
*swig_current_def_get = *gccc::var_ann_d_current_def_get;
*swig_current_def_set = *gccc::var_ann_d_current_def_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_var_ann_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_var_ann_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::imm_use_iterator ##############

package gcc::imm_use_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_imm_use_get = *gccc::imm_use_iterator_imm_use_get;
*swig_imm_use_set = *gccc::imm_use_iterator_imm_use_set;
*swig_end_p_get = *gccc::imm_use_iterator_end_p_get;
*swig_end_p_set = *gccc::imm_use_iterator_end_p_set;
*swig_iter_node_get = *gccc::imm_use_iterator_iter_node_get;
*swig_iter_node_set = *gccc::imm_use_iterator_iter_node_set;
*swig_next_imm_name_get = *gccc::imm_use_iterator_next_imm_name_get;
*swig_next_imm_name_set = *gccc::imm_use_iterator_next_imm_name_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_imm_use_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_imm_use_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::int_tree_map ##############

package gcc::int_tree_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_uid_get = *gccc::int_tree_map_uid_get;
*swig_uid_set = *gccc::int_tree_map_uid_set;
*swig_to_get = *gccc::int_tree_map_to_get;
*swig_to_set = *gccc::int_tree_map_to_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_int_tree_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_int_tree_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::referenced_var_iterator ##############

package gcc::referenced_var_iterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_hti_get = *gccc::referenced_var_iterator_hti_get;
*swig_hti_set = *gccc::referenced_var_iterator_hti_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_referenced_var_iterator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_referenced_var_iterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::omp_region ##############

package gcc::omp_region;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_outer_get = *gccc::omp_region_outer_get;
*swig_outer_set = *gccc::omp_region_outer_set;
*swig_inner_get = *gccc::omp_region_inner_get;
*swig_inner_set = *gccc::omp_region_inner_set;
*swig_next_get = *gccc::omp_region_next_get;
*swig_next_set = *gccc::omp_region_next_set;
*swig_entry_get = *gccc::omp_region_entry_get;
*swig_entry_set = *gccc::omp_region_entry_set;
*swig_exit_get = *gccc::omp_region_exit_get;
*swig_exit_set = *gccc::omp_region_exit_set;
*swig_cont_get = *gccc::omp_region_cont_get;
*swig_cont_set = *gccc::omp_region_cont_set;
*swig_ws_args_get = *gccc::omp_region_ws_args_get;
*swig_ws_args_set = *gccc::omp_region_ws_args_set;
*swig_type_get = *gccc::omp_region_type_get;
*swig_type_set = *gccc::omp_region_type_set;
*swig_sched_kind_get = *gccc::omp_region_sched_kind_get;
*swig_sched_kind_set = *gccc::omp_region_sched_kind_set;
*swig_is_combined_parallel_get = *gccc::omp_region_is_combined_parallel_get;
*swig_is_combined_parallel_set = *gccc::omp_region_is_combined_parallel_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_omp_region(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_omp_region($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::_edge_var_map ##############

package gcc::_edge_var_map;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_result_get = *gccc::_edge_var_map_result_get;
*swig_result_set = *gccc::_edge_var_map_result_set;
*swig_def_get = *gccc::_edge_var_map_def_get;
*swig_def_set = *gccc::_edge_var_map_def_set;
*swig_locus_get = *gccc::_edge_var_map_locus_get;
*swig_locus_set = *gccc::_edge_var_map_locus_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new__edge_var_map(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete__edge_var_map($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_var_map_base ##############

package gcc::VEC_edge_var_map_base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *gccc::VEC_edge_var_map_base_num_get;
*swig_num_set = *gccc::VEC_edge_var_map_base_num_set;
*swig_alloc_get = *gccc::VEC_edge_var_map_base_alloc_get;
*swig_alloc_set = *gccc::VEC_edge_var_map_base_alloc_set;
*swig_vec_get = *gccc::VEC_edge_var_map_base_vec_get;
*swig_vec_set = *gccc::VEC_edge_var_map_base_vec_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_var_map_base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_var_map_base($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_var_map_none ##############

package gcc::VEC_edge_var_map_none;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_edge_var_map_none_base_get;
*swig_base_set = *gccc::VEC_edge_var_map_none_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_var_map_none(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_var_map_none($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::VEC_edge_var_map_heap ##############

package gcc::VEC_edge_var_map_heap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::VEC_edge_var_map_heap_base_get;
*swig_base_set = *gccc::VEC_edge_var_map_heap_base_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_VEC_edge_var_map_heap(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_VEC_edge_var_map_heap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::affine_iv ##############

package gcc::affine_iv;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_base_get = *gccc::affine_iv_base_get;
*swig_base_set = *gccc::affine_iv_base_set;
*swig_step_get = *gccc::affine_iv_step_get;
*swig_step_set = *gccc::affine_iv_step_set;
*swig_no_overflow_get = *gccc::affine_iv_no_overflow_get;
*swig_no_overflow_set = *gccc::affine_iv_no_overflow_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_affine_iv(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_affine_iv($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::tree_niter_desc ##############

package gcc::tree_niter_desc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_assumptions_get = *gccc::tree_niter_desc_assumptions_get;
*swig_assumptions_set = *gccc::tree_niter_desc_assumptions_set;
*swig_may_be_zero_get = *gccc::tree_niter_desc_may_be_zero_get;
*swig_may_be_zero_set = *gccc::tree_niter_desc_may_be_zero_set;
*swig_niter_get = *gccc::tree_niter_desc_niter_get;
*swig_niter_set = *gccc::tree_niter_desc_niter_set;
*swig_max_get = *gccc::tree_niter_desc_max_get;
*swig_max_set = *gccc::tree_niter_desc_max_set;
*swig_control_get = *gccc::tree_niter_desc_control_get;
*swig_control_set = *gccc::tree_niter_desc_control_set;
*swig_bound_get = *gccc::tree_niter_desc_bound_get;
*swig_bound_set = *gccc::tree_niter_desc_bound_set;
*swig_cmp_get = *gccc::tree_niter_desc_cmp_get;
*swig_cmp_set = *gccc::tree_niter_desc_cmp_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_tree_niter_desc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_tree_niter_desc($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : gcc::mem_address ##############

package gcc::mem_address;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( gcc );
%OWNER = ();
%ITERATORS = ();
*swig_symbol_get = *gccc::mem_address_symbol_get;
*swig_symbol_set = *gccc::mem_address_symbol_set;
*swig_base_get = *gccc::mem_address_base_get;
*swig_base_set = *gccc::mem_address_base_set;
*swig_index_get = *gccc::mem_address_index_get;
*swig_index_set = *gccc::mem_address_index_set;
*swig_step_get = *gccc::mem_address_step_get;
*swig_step_set = *gccc::mem_address_step_set;
*swig_offset_get = *gccc::mem_address_offset_get;
*swig_offset_set = *gccc::mem_address_offset_set;
sub new {
    my $pkg = shift;
    my $self = gccc::new_mem_address(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        gccc::delete_mem_address($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package gcc;

*libiberty_concat_ptr = *gccc::libiberty_concat_ptr;
*_hex_value = *gccc::_hex_value;
*IR_GIMPLE = *gccc::IR_GIMPLE;
*IR_RTL_CFGRTL = *gccc::IR_RTL_CFGRTL;
*IR_RTL_CFGLAYOUT = *gccc::IR_RTL_CFGLAYOUT;
*TLS_MODEL_NONE = *gccc::TLS_MODEL_NONE;
*TLS_MODEL_EMULATED = *gccc::TLS_MODEL_EMULATED;
*TLS_MODEL_REAL = *gccc::TLS_MODEL_REAL;
*TLS_MODEL_GLOBAL_DYNAMIC = *gccc::TLS_MODEL_GLOBAL_DYNAMIC;
*TLS_MODEL_LOCAL_DYNAMIC = *gccc::TLS_MODEL_LOCAL_DYNAMIC;
*TLS_MODEL_INITIAL_EXEC = *gccc::TLS_MODEL_INITIAL_EXEC;
*TLS_MODEL_LOCAL_EXEC = *gccc::TLS_MODEL_LOCAL_EXEC;
*UI_NONE = *gccc::UI_NONE;
*UI_SJLJ = *gccc::UI_SJLJ;
*UI_DWARF2 = *gccc::UI_DWARF2;
*UI_TARGET = *gccc::UI_TARGET;
*NODE_FREQUENCY_UNLIKELY_EXECUTED = *gccc::NODE_FREQUENCY_UNLIKELY_EXECUTED;
*NODE_FREQUENCY_EXECUTED_ONCE = *gccc::NODE_FREQUENCY_EXECUTED_ONCE;
*NODE_FREQUENCY_NORMAL = *gccc::NODE_FREQUENCY_NORMAL;
*NODE_FREQUENCY_HOT = *gccc::NODE_FREQUENCY_HOT;
*NO_INSERT = *gccc::NO_INSERT;
*INSERT = *gccc::INSERT;
*htab_hash_pointer = *gccc::htab_hash_pointer;
*htab_eq_pointer = *gccc::htab_eq_pointer;
*PLUGIN_PASS_MANAGER_SETUP = *gccc::PLUGIN_PASS_MANAGER_SETUP;
*PLUGIN_FINISH_TYPE = *gccc::PLUGIN_FINISH_TYPE;
*PLUGIN_FINISH_UNIT = *gccc::PLUGIN_FINISH_UNIT;
*PLUGIN_PRE_GENERICIZE = *gccc::PLUGIN_PRE_GENERICIZE;
*PLUGIN_FINISH = *gccc::PLUGIN_FINISH;
*PLUGIN_INFO = *gccc::PLUGIN_INFO;
*PLUGIN_GGC_START = *gccc::PLUGIN_GGC_START;
*PLUGIN_GGC_MARKING = *gccc::PLUGIN_GGC_MARKING;
*PLUGIN_GGC_END = *gccc::PLUGIN_GGC_END;
*PLUGIN_REGISTER_GGC_ROOTS = *gccc::PLUGIN_REGISTER_GGC_ROOTS;
*PLUGIN_REGISTER_GGC_CACHES = *gccc::PLUGIN_REGISTER_GGC_CACHES;
*PLUGIN_ATTRIBUTES = *gccc::PLUGIN_ATTRIBUTES;
*PLUGIN_START_UNIT = *gccc::PLUGIN_START_UNIT;
*PLUGIN_PRAGMAS = *gccc::PLUGIN_PRAGMAS;
*PLUGIN_ALL_PASSES_START = *gccc::PLUGIN_ALL_PASSES_START;
*PLUGIN_ALL_PASSES_END = *gccc::PLUGIN_ALL_PASSES_END;
*PLUGIN_ALL_IPA_PASSES_START = *gccc::PLUGIN_ALL_IPA_PASSES_START;
*PLUGIN_ALL_IPA_PASSES_END = *gccc::PLUGIN_ALL_IPA_PASSES_END;
*PLUGIN_OVERRIDE_GATE = *gccc::PLUGIN_OVERRIDE_GATE;
*PLUGIN_PASS_EXECUTION = *gccc::PLUGIN_PASS_EXECUTION;
*PLUGIN_EARLY_GIMPLE_PASSES_START = *gccc::PLUGIN_EARLY_GIMPLE_PASSES_START;
*PLUGIN_EARLY_GIMPLE_PASSES_END = *gccc::PLUGIN_EARLY_GIMPLE_PASSES_END;
*PLUGIN_NEW_PASS = *gccc::PLUGIN_NEW_PASS;
*PLUGIN_EVENT_FIRST_DYNAMIC = *gccc::PLUGIN_EVENT_FIRST_DYNAMIC;
*plugin_event_name = *gccc::plugin_event_name;
*plugin_is_GPL_compatible = *gccc::plugin_is_GPL_compatible;
*VOIDmode = *gccc::VOIDmode;
*BLKmode = *gccc::BLKmode;
*CCmode = *gccc::CCmode;
*CCGCmode = *gccc::CCGCmode;
*CCGOCmode = *gccc::CCGOCmode;
*CCNOmode = *gccc::CCNOmode;
*CCAmode = *gccc::CCAmode;
*CCCmode = *gccc::CCCmode;
*CCOmode = *gccc::CCOmode;
*CCSmode = *gccc::CCSmode;
*CCZmode = *gccc::CCZmode;
*CCFPmode = *gccc::CCFPmode;
*CCFPUmode = *gccc::CCFPUmode;
*BImode = *gccc::BImode;
*QImode = *gccc::QImode;
*HImode = *gccc::HImode;
*SImode = *gccc::SImode;
*DImode = *gccc::DImode;
*TImode = *gccc::TImode;
*OImode = *gccc::OImode;
*QQmode = *gccc::QQmode;
*HQmode = *gccc::HQmode;
*SQmode = *gccc::SQmode;
*DQmode = *gccc::DQmode;
*TQmode = *gccc::TQmode;
*UQQmode = *gccc::UQQmode;
*UHQmode = *gccc::UHQmode;
*USQmode = *gccc::USQmode;
*UDQmode = *gccc::UDQmode;
*UTQmode = *gccc::UTQmode;
*HAmode = *gccc::HAmode;
*SAmode = *gccc::SAmode;
*DAmode = *gccc::DAmode;
*TAmode = *gccc::TAmode;
*UHAmode = *gccc::UHAmode;
*USAmode = *gccc::USAmode;
*UDAmode = *gccc::UDAmode;
*UTAmode = *gccc::UTAmode;
*SFmode = *gccc::SFmode;
*DFmode = *gccc::DFmode;
*XFmode = *gccc::XFmode;
*TFmode = *gccc::TFmode;
*SDmode = *gccc::SDmode;
*DDmode = *gccc::DDmode;
*TDmode = *gccc::TDmode;
*CQImode = *gccc::CQImode;
*CHImode = *gccc::CHImode;
*CSImode = *gccc::CSImode;
*CDImode = *gccc::CDImode;
*CTImode = *gccc::CTImode;
*COImode = *gccc::COImode;
*SCmode = *gccc::SCmode;
*DCmode = *gccc::DCmode;
*XCmode = *gccc::XCmode;
*TCmode = *gccc::TCmode;
*V2QImode = *gccc::V2QImode;
*V4QImode = *gccc::V4QImode;
*V2HImode = *gccc::V2HImode;
*V1SImode = *gccc::V1SImode;
*V8QImode = *gccc::V8QImode;
*V4HImode = *gccc::V4HImode;
*V2SImode = *gccc::V2SImode;
*V1DImode = *gccc::V1DImode;
*V16QImode = *gccc::V16QImode;
*V8HImode = *gccc::V8HImode;
*V4SImode = *gccc::V4SImode;
*V2DImode = *gccc::V2DImode;
*V1TImode = *gccc::V1TImode;
*V32QImode = *gccc::V32QImode;
*V16HImode = *gccc::V16HImode;
*V8SImode = *gccc::V8SImode;
*V4DImode = *gccc::V4DImode;
*V2TImode = *gccc::V2TImode;
*V64QImode = *gccc::V64QImode;
*V32HImode = *gccc::V32HImode;
*V16SImode = *gccc::V16SImode;
*V8DImode = *gccc::V8DImode;
*V4TImode = *gccc::V4TImode;
*V2SFmode = *gccc::V2SFmode;
*V4SFmode = *gccc::V4SFmode;
*V2DFmode = *gccc::V2DFmode;
*V8SFmode = *gccc::V8SFmode;
*V4DFmode = *gccc::V4DFmode;
*V2TFmode = *gccc::V2TFmode;
*V16SFmode = *gccc::V16SFmode;
*V8DFmode = *gccc::V8DFmode;
*V4TFmode = *gccc::V4TFmode;
*MAX_MACHINE_MODE = *gccc::MAX_MACHINE_MODE;
*MIN_MODE_RANDOM = *gccc::MIN_MODE_RANDOM;
*MAX_MODE_RANDOM = *gccc::MAX_MODE_RANDOM;
*MIN_MODE_CC = *gccc::MIN_MODE_CC;
*MAX_MODE_CC = *gccc::MAX_MODE_CC;
*MIN_MODE_INT = *gccc::MIN_MODE_INT;
*MAX_MODE_INT = *gccc::MAX_MODE_INT;
*MIN_MODE_PARTIAL_INT = *gccc::MIN_MODE_PARTIAL_INT;
*MAX_MODE_PARTIAL_INT = *gccc::MAX_MODE_PARTIAL_INT;
*MIN_MODE_FRACT = *gccc::MIN_MODE_FRACT;
*MAX_MODE_FRACT = *gccc::MAX_MODE_FRACT;
*MIN_MODE_UFRACT = *gccc::MIN_MODE_UFRACT;
*MAX_MODE_UFRACT = *gccc::MAX_MODE_UFRACT;
*MIN_MODE_ACCUM = *gccc::MIN_MODE_ACCUM;
*MAX_MODE_ACCUM = *gccc::MAX_MODE_ACCUM;
*MIN_MODE_UACCUM = *gccc::MIN_MODE_UACCUM;
*MAX_MODE_UACCUM = *gccc::MAX_MODE_UACCUM;
*MIN_MODE_FLOAT = *gccc::MIN_MODE_FLOAT;
*MAX_MODE_FLOAT = *gccc::MAX_MODE_FLOAT;
*MIN_MODE_DECIMAL_FLOAT = *gccc::MIN_MODE_DECIMAL_FLOAT;
*MAX_MODE_DECIMAL_FLOAT = *gccc::MAX_MODE_DECIMAL_FLOAT;
*MIN_MODE_COMPLEX_INT = *gccc::MIN_MODE_COMPLEX_INT;
*MAX_MODE_COMPLEX_INT = *gccc::MAX_MODE_COMPLEX_INT;
*MIN_MODE_COMPLEX_FLOAT = *gccc::MIN_MODE_COMPLEX_FLOAT;
*MAX_MODE_COMPLEX_FLOAT = *gccc::MAX_MODE_COMPLEX_FLOAT;
*MIN_MODE_VECTOR_INT = *gccc::MIN_MODE_VECTOR_INT;
*MAX_MODE_VECTOR_INT = *gccc::MAX_MODE_VECTOR_INT;
*MIN_MODE_VECTOR_FRACT = *gccc::MIN_MODE_VECTOR_FRACT;
*MAX_MODE_VECTOR_FRACT = *gccc::MAX_MODE_VECTOR_FRACT;
*MIN_MODE_VECTOR_UFRACT = *gccc::MIN_MODE_VECTOR_UFRACT;
*MAX_MODE_VECTOR_UFRACT = *gccc::MAX_MODE_VECTOR_UFRACT;
*MIN_MODE_VECTOR_ACCUM = *gccc::MIN_MODE_VECTOR_ACCUM;
*MAX_MODE_VECTOR_ACCUM = *gccc::MAX_MODE_VECTOR_ACCUM;
*MIN_MODE_VECTOR_UACCUM = *gccc::MIN_MODE_VECTOR_UACCUM;
*MAX_MODE_VECTOR_UACCUM = *gccc::MAX_MODE_VECTOR_UACCUM;
*MIN_MODE_VECTOR_FLOAT = *gccc::MIN_MODE_VECTOR_FLOAT;
*MAX_MODE_VECTOR_FLOAT = *gccc::MAX_MODE_VECTOR_FLOAT;
*NUM_MACHINE_MODES = *gccc::NUM_MACHINE_MODES;
*mode_name = *gccc::mode_name;
*MODE_RANDOM = *gccc::MODE_RANDOM;
*MODE_CC = *gccc::MODE_CC;
*MODE_INT = *gccc::MODE_INT;
*MODE_PARTIAL_INT = *gccc::MODE_PARTIAL_INT;
*MODE_FRACT = *gccc::MODE_FRACT;
*MODE_UFRACT = *gccc::MODE_UFRACT;
*MODE_ACCUM = *gccc::MODE_ACCUM;
*MODE_UACCUM = *gccc::MODE_UACCUM;
*MODE_FLOAT = *gccc::MODE_FLOAT;
*MODE_DECIMAL_FLOAT = *gccc::MODE_DECIMAL_FLOAT;
*MODE_COMPLEX_INT = *gccc::MODE_COMPLEX_INT;
*MODE_COMPLEX_FLOAT = *gccc::MODE_COMPLEX_FLOAT;
*MODE_VECTOR_INT = *gccc::MODE_VECTOR_INT;
*MODE_VECTOR_FRACT = *gccc::MODE_VECTOR_FRACT;
*MODE_VECTOR_UFRACT = *gccc::MODE_VECTOR_UFRACT;
*MODE_VECTOR_ACCUM = *gccc::MODE_VECTOR_ACCUM;
*MODE_VECTOR_UACCUM = *gccc::MODE_VECTOR_UACCUM;
*MODE_VECTOR_FLOAT = *gccc::MODE_VECTOR_FLOAT;
*MAX_MODE_CLASS = *gccc::MAX_MODE_CLASS;
*mode_size = *gccc::mode_size;
*mode_precision = *gccc::mode_precision;
*mode_ibit = *gccc::mode_ibit;
*mode_fbit = *gccc::mode_fbit;
*mode_mask_array = *gccc::mode_mask_array;
*mode_inner = *gccc::mode_inner;
*mode_nunits = *gccc::mode_nunits;
*mode_wider = *gccc::mode_wider;
*mode_2xwider = *gccc::mode_2xwider;
*mode_base_align = *gccc::mode_base_align;
*class_narrowest_mode = *gccc::class_narrowest_mode;
*byte_mode = *gccc::byte_mode;
*word_mode = *gccc::word_mode;
*ptr_mode = *gccc::ptr_mode;
*LC_ENTER = *gccc::LC_ENTER;
*LC_LEAVE = *gccc::LC_LEAVE;
*LC_RENAME = *gccc::LC_RENAME;
*LC_RENAME_VERBATIM = *gccc::LC_RENAME_VERBATIM;

my %__line_table_hash;
tie %__line_table_hash,"gcc::line_maps", $gccc::line_table;
$line_table= \%__line_table_hash;
bless $line_table, gcc::line_maps;
*builtins_location_check = *gccc::builtins_location_check;
*input_location = *gccc::input_location;
*GMP_RAND_ALG_DEFAULT = *gccc::GMP_RAND_ALG_DEFAULT;
*GMP_RAND_ALG_LC = *gccc::GMP_RAND_ALG_LC;
*__gmp_bits_per_limb = *gccc::__gmp_bits_per_limb;
*__gmp_errno = *gccc::__gmp_errno;
*__gmp_version = *gccc::__gmp_version;
*rvc_zero = *gccc::rvc_zero;
*rvc_normal = *gccc::rvc_normal;
*rvc_inf = *gccc::rvc_inf;
*rvc_nan = *gccc::rvc_nan;
*test_real_width = *gccc::test_real_width;
*real_format_for_mode = *gccc::real_format_for_mode;

my %__ieee_single_format_hash;
tie %__ieee_single_format_hash,"gcc::real_format", $gccc::ieee_single_format;
$ieee_single_format= \%__ieee_single_format_hash;
bless $ieee_single_format, gcc::real_format;

my %__mips_single_format_hash;
tie %__mips_single_format_hash,"gcc::real_format", $gccc::mips_single_format;
$mips_single_format= \%__mips_single_format_hash;
bless $mips_single_format, gcc::real_format;

my %__motorola_single_format_hash;
tie %__motorola_single_format_hash,"gcc::real_format", $gccc::motorola_single_format;
$motorola_single_format= \%__motorola_single_format_hash;
bless $motorola_single_format, gcc::real_format;

my %__spu_single_format_hash;
tie %__spu_single_format_hash,"gcc::real_format", $gccc::spu_single_format;
$spu_single_format= \%__spu_single_format_hash;
bless $spu_single_format, gcc::real_format;

my %__ieee_double_format_hash;
tie %__ieee_double_format_hash,"gcc::real_format", $gccc::ieee_double_format;
$ieee_double_format= \%__ieee_double_format_hash;
bless $ieee_double_format, gcc::real_format;

my %__mips_double_format_hash;
tie %__mips_double_format_hash,"gcc::real_format", $gccc::mips_double_format;
$mips_double_format= \%__mips_double_format_hash;
bless $mips_double_format, gcc::real_format;

my %__motorola_double_format_hash;
tie %__motorola_double_format_hash,"gcc::real_format", $gccc::motorola_double_format;
$motorola_double_format= \%__motorola_double_format_hash;
bless $motorola_double_format, gcc::real_format;

my %__ieee_extended_motorola_format_hash;
tie %__ieee_extended_motorola_format_hash,"gcc::real_format", $gccc::ieee_extended_motorola_format;
$ieee_extended_motorola_format= \%__ieee_extended_motorola_format_hash;
bless $ieee_extended_motorola_format, gcc::real_format;

my %__ieee_extended_intel_96_format_hash;
tie %__ieee_extended_intel_96_format_hash,"gcc::real_format", $gccc::ieee_extended_intel_96_format;
$ieee_extended_intel_96_format= \%__ieee_extended_intel_96_format_hash;
bless $ieee_extended_intel_96_format, gcc::real_format;

my %__ieee_extended_intel_96_round_53_format_hash;
tie %__ieee_extended_intel_96_round_53_format_hash,"gcc::real_format", $gccc::ieee_extended_intel_96_round_53_format;
$ieee_extended_intel_96_round_53_format= \%__ieee_extended_intel_96_round_53_format_hash;
bless $ieee_extended_intel_96_round_53_format, gcc::real_format;

my %__ieee_extended_intel_128_format_hash;
tie %__ieee_extended_intel_128_format_hash,"gcc::real_format", $gccc::ieee_extended_intel_128_format;
$ieee_extended_intel_128_format= \%__ieee_extended_intel_128_format_hash;
bless $ieee_extended_intel_128_format, gcc::real_format;

my %__ibm_extended_format_hash;
tie %__ibm_extended_format_hash,"gcc::real_format", $gccc::ibm_extended_format;
$ibm_extended_format= \%__ibm_extended_format_hash;
bless $ibm_extended_format, gcc::real_format;

my %__mips_extended_format_hash;
tie %__mips_extended_format_hash,"gcc::real_format", $gccc::mips_extended_format;
$mips_extended_format= \%__mips_extended_format_hash;
bless $mips_extended_format, gcc::real_format;

my %__ieee_quad_format_hash;
tie %__ieee_quad_format_hash,"gcc::real_format", $gccc::ieee_quad_format;
$ieee_quad_format= \%__ieee_quad_format_hash;
bless $ieee_quad_format, gcc::real_format;

my %__mips_quad_format_hash;
tie %__mips_quad_format_hash,"gcc::real_format", $gccc::mips_quad_format;
$mips_quad_format= \%__mips_quad_format_hash;
bless $mips_quad_format, gcc::real_format;

my %__vax_f_format_hash;
tie %__vax_f_format_hash,"gcc::real_format", $gccc::vax_f_format;
$vax_f_format= \%__vax_f_format_hash;
bless $vax_f_format, gcc::real_format;

my %__vax_d_format_hash;
tie %__vax_d_format_hash,"gcc::real_format", $gccc::vax_d_format;
$vax_d_format= \%__vax_d_format_hash;
bless $vax_d_format, gcc::real_format;

my %__vax_g_format_hash;
tie %__vax_g_format_hash,"gcc::real_format", $gccc::vax_g_format;
$vax_g_format= \%__vax_g_format_hash;
bless $vax_g_format, gcc::real_format;

my %__real_internal_format_hash;
tie %__real_internal_format_hash,"gcc::real_format", $gccc::real_internal_format;
$real_internal_format= \%__real_internal_format_hash;
bless $real_internal_format, gcc::real_format;

my %__decimal_single_format_hash;
tie %__decimal_single_format_hash,"gcc::real_format", $gccc::decimal_single_format;
$decimal_single_format= \%__decimal_single_format_hash;
bless $decimal_single_format, gcc::real_format;

my %__decimal_double_format_hash;
tie %__decimal_double_format_hash,"gcc::real_format", $gccc::decimal_double_format;
$decimal_double_format= \%__decimal_double_format_hash;
bless $decimal_double_format, gcc::real_format;

my %__decimal_quad_format_hash;
tie %__decimal_quad_format_hash,"gcc::real_format", $gccc::decimal_quad_format;
$decimal_quad_format= \%__decimal_quad_format_hash;
bless $decimal_quad_format, gcc::real_format;

my %__ieee_half_format_hash;
tie %__ieee_half_format_hash,"gcc::real_format", $gccc::ieee_half_format;
$ieee_half_format= \%__ieee_half_format_hash;
bless $ieee_half_format, gcc::real_format;

my %__arm_half_format_hash;
tie %__arm_half_format_hash,"gcc::real_format", $gccc::arm_half_format;
$arm_half_format= \%__arm_half_format_hash;
bless $arm_half_format, gcc::real_format;

my %__dconst0_hash;
tie %__dconst0_hash,"gcc::real_value", $gccc::dconst0;
$dconst0= \%__dconst0_hash;
bless $dconst0, gcc::real_value;

my %__dconst1_hash;
tie %__dconst1_hash,"gcc::real_value", $gccc::dconst1;
$dconst1= \%__dconst1_hash;
bless $dconst1, gcc::real_value;

my %__dconst2_hash;
tie %__dconst2_hash,"gcc::real_value", $gccc::dconst2;
$dconst2= \%__dconst2_hash;
bless $dconst2, gcc::real_value;

my %__dconstm1_hash;
tie %__dconstm1_hash,"gcc::real_value", $gccc::dconstm1;
$dconstm1= \%__dconstm1_hash;
bless $dconstm1, gcc::real_value;

my %__dconsthalf_hash;
tie %__dconsthalf_hash,"gcc::real_value", $gccc::dconsthalf;
$dconsthalf= \%__dconsthalf_hash;
bless $dconsthalf, gcc::real_value;

my %__fconst0_hash;
tie %__fconst0_hash,"gcc::fixed_value", $gccc::fconst0;
$fconst0= \%__fconst0_hash;
bless $fconst0, gcc::fixed_value;

my %__fconst1_hash;
tie %__fconst1_hash,"gcc::fixed_value", $gccc::fconst1;
$fconst1= \%__fconst1_hash;
bless $fconst1, gcc::fixed_value;
*NO_DEBUG = *gccc::NO_DEBUG;
*DBX_DEBUG = *gccc::DBX_DEBUG;
*SDB_DEBUG = *gccc::SDB_DEBUG;
*DWARF2_DEBUG = *gccc::DWARF2_DEBUG;
*XCOFF_DEBUG = *gccc::XCOFF_DEBUG;
*VMS_DEBUG = *gccc::VMS_DEBUG;
*VMS_AND_DWARF2_DEBUG = *gccc::VMS_AND_DWARF2_DEBUG;
*DINFO_LEVEL_NONE = *gccc::DINFO_LEVEL_NONE;
*DINFO_LEVEL_TERSE = *gccc::DINFO_LEVEL_TERSE;
*DINFO_LEVEL_NORMAL = *gccc::DINFO_LEVEL_NORMAL;
*DINFO_LEVEL_VERBOSE = *gccc::DINFO_LEVEL_VERBOSE;
*DINFO_USAGE_DFN = *gccc::DINFO_USAGE_DFN;
*DINFO_USAGE_DIR_USE = *gccc::DINFO_USAGE_DIR_USE;
*DINFO_USAGE_IND_USE = *gccc::DINFO_USAGE_IND_USE;
*DINFO_USAGE_NUM_ENUMS = *gccc::DINFO_USAGE_NUM_ENUMS;
*DINFO_STRUCT_FILE_NONE = *gccc::DINFO_STRUCT_FILE_NONE;
*DINFO_STRUCT_FILE_BASE = *gccc::DINFO_STRUCT_FILE_BASE;
*DINFO_STRUCT_FILE_SYS = *gccc::DINFO_STRUCT_FILE_SYS;
*DINFO_STRUCT_FILE_ANY = *gccc::DINFO_STRUCT_FILE_ANY;
*VISIBILITY_DEFAULT = *gccc::VISIBILITY_DEFAULT;
*VISIBILITY_PROTECTED = *gccc::VISIBILITY_PROTECTED;
*VISIBILITY_HIDDEN = *gccc::VISIBILITY_HIDDEN;
*VISIBILITY_INTERNAL = *gccc::VISIBILITY_INTERNAL;
*IRA_ALGORITHM_CB = *gccc::IRA_ALGORITHM_CB;
*IRA_ALGORITHM_PRIORITY = *gccc::IRA_ALGORITHM_PRIORITY;
*IRA_REGION_ONE = *gccc::IRA_REGION_ONE;
*IRA_REGION_ALL = *gccc::IRA_REGION_ALL;
*IRA_REGION_MIXED = *gccc::IRA_REGION_MIXED;
*EXCESS_PRECISION_DEFAULT = *gccc::EXCESS_PRECISION_DEFAULT;
*EXCESS_PRECISION_FAST = *gccc::EXCESS_PRECISION_FAST;
*EXCESS_PRECISION_STANDARD = *gccc::EXCESS_PRECISION_STANDARD;
*no_graph = *gccc::no_graph;
*vcg = *gccc::vcg;
*NO_STACK_CHECK = *gccc::NO_STACK_CHECK;
*GENERIC_STACK_CHECK = *gccc::GENERIC_STACK_CHECK;
*STATIC_BUILTIN_STACK_CHECK = *gccc::STATIC_BUILTIN_STACK_CHECK;
*FULL_BUILTIN_STACK_CHECK = *gccc::FULL_BUILTIN_STACK_CHECK;
*WARN_STRICT_OVERFLOW_ALL = *gccc::WARN_STRICT_OVERFLOW_ALL;
*WARN_STRICT_OVERFLOW_CONDITIONAL = *gccc::WARN_STRICT_OVERFLOW_CONDITIONAL;
*WARN_STRICT_OVERFLOW_COMPARISON = *gccc::WARN_STRICT_OVERFLOW_COMPARISON;
*WARN_STRICT_OVERFLOW_MISC = *gccc::WARN_STRICT_OVERFLOW_MISC;
*WARN_STRICT_OVERFLOW_MAGNITUDE = *gccc::WARN_STRICT_OVERFLOW_MAGNITUDE;
*FP_CONTRACT_OFF = *gccc::FP_CONTRACT_OFF;
*FP_CONTRACT_ON = *gccc::FP_CONTRACT_ON;
*FP_CONTRACT_FAST = *gccc::FP_CONTRACT_FAST;
*REPORT_NONE = *gccc::REPORT_NONE;
*REPORT_VECTORIZED_LOCATIONS = *gccc::REPORT_VECTORIZED_LOCATIONS;
*REPORT_UNVECTORIZED_LOCATIONS = *gccc::REPORT_UNVECTORIZED_LOCATIONS;
*REPORT_COST = *gccc::REPORT_COST;
*REPORT_ALIGNMENT = *gccc::REPORT_ALIGNMENT;
*REPORT_DR_DETAILS = *gccc::REPORT_DR_DETAILS;
*REPORT_BAD_FORM_LOOPS = *gccc::REPORT_BAD_FORM_LOOPS;
*REPORT_OUTER_LOOPS = *gccc::REPORT_OUTER_LOOPS;
*REPORT_SLP = *gccc::REPORT_SLP;
*REPORT_DETAILS = *gccc::REPORT_DETAILS;
*MAX_VERBOSITY_LEVEL = *gccc::MAX_VERBOSITY_LEVEL;

my %__global_options_hash;
tie %__global_options_hash,"gcc::gcc_options", $gccc::global_options;
$global_options= \%__global_options_hash;
bless $global_options, gcc::gcc_options;

my %__global_options_init_hash;
tie %__global_options_init_hash,"gcc::gcc_options", $gccc::global_options_init;
$global_options_init= \%__global_options_init_hash;
bless $global_options_init, gcc::gcc_options;

my %__global_options_set_hash;
tie %__global_options_set_hash,"gcc::gcc_options", $gccc::global_options_set;
$global_options_set= \%__global_options_set_hash;
bless $global_options_set, gcc::gcc_options;
*OPT____ = *gccc::OPT____;
*OPT__help = *gccc::OPT__help;
*OPT__help_ = *gccc::OPT__help_;
*OPT__output_pch_ = *gccc::OPT__output_pch_;
*OPT__param = *gccc::OPT__param;
*OPT__sysroot_ = *gccc::OPT__sysroot_;
*OPT__target_help = *gccc::OPT__target_help;
*OPT__version = *gccc::OPT__version;
*OPT_A = *gccc::OPT_A;
*OPT_B = *gccc::OPT_B;
*OPT_C = *gccc::OPT_C;
*OPT_CC = *gccc::OPT_CC;
*OPT_D = *gccc::OPT_D;
*OPT_E = *gccc::OPT_E;
*OPT_F = *gccc::OPT_F;
*OPT_H = *gccc::OPT_H;
*OPT_I = *gccc::OPT_I;
*OPT_J = *gccc::OPT_J;
*OPT_L = *gccc::OPT_L;
*OPT_M = *gccc::OPT_M;
*OPT_MD = *gccc::OPT_MD;
*OPT_MD_ = *gccc::OPT_MD_;
*OPT_MF = *gccc::OPT_MF;
*OPT_MG = *gccc::OPT_MG;
*OPT_MM = *gccc::OPT_MM;
*OPT_MMD = *gccc::OPT_MMD;
*OPT_MMD_ = *gccc::OPT_MMD_;
*OPT_MP = *gccc::OPT_MP;
*OPT_MQ = *gccc::OPT_MQ;
*OPT_MT = *gccc::OPT_MT;
*OPT_N = *gccc::OPT_N;
*OPT_O = *gccc::OPT_O;
*OPT_Ofast = *gccc::OPT_Ofast;
*OPT_Os = *gccc::OPT_Os;
*OPT_P = *gccc::OPT_P;
*OPT_Q = *gccc::OPT_Q;
*OPT_Qn = *gccc::OPT_Qn;
*OPT_Qy = *gccc::OPT_Qy;
*OPT_R = *gccc::OPT_R;
*OPT_S = *gccc::OPT_S;
*OPT_T = *gccc::OPT_T;
*OPT_Tbss = *gccc::OPT_Tbss;
*OPT_Tbss_ = *gccc::OPT_Tbss_;
*OPT_Tdata = *gccc::OPT_Tdata;
*OPT_Tdata_ = *gccc::OPT_Tdata_;
*OPT_Ttext = *gccc::OPT_Ttext;
*OPT_Ttext_ = *gccc::OPT_Ttext_;
*OPT_U = *gccc::OPT_U;
*OPT_Wa_ = *gccc::OPT_Wa_;
*OPT_Wabi = *gccc::OPT_Wabi;
*OPT_Waddress = *gccc::OPT_Waddress;
*OPT_Waggregate_return = *gccc::OPT_Waggregate_return;
*OPT_Waliasing = *gccc::OPT_Waliasing;
*OPT_Walign_commons = *gccc::OPT_Walign_commons;
*OPT_Wall = *gccc::OPT_Wall;
*OPT_Wall_deprecation = *gccc::OPT_Wall_deprecation;
*OPT_Wall_javadoc = *gccc::OPT_Wall_javadoc;
*OPT_Wampersand = *gccc::OPT_Wampersand;
*OPT_Warray_bounds = *gccc::OPT_Warray_bounds;
*OPT_Warray_temporaries = *gccc::OPT_Warray_temporaries;
*OPT_Wassert_identifier = *gccc::OPT_Wassert_identifier;
*OPT_Wassign_intercept = *gccc::OPT_Wassign_intercept;
*OPT_Wattributes = *gccc::OPT_Wattributes;
*OPT_Wbad_function_cast = *gccc::OPT_Wbad_function_cast;
*OPT_Wboxing = *gccc::OPT_Wboxing;
*OPT_Wbuiltin_macro_redefined = *gccc::OPT_Wbuiltin_macro_redefined;
*OPT_Wc___compat = *gccc::OPT_Wc___compat;
*OPT_Wc__0x_compat = *gccc::OPT_Wc__0x_compat;
*OPT_Wcast_align = *gccc::OPT_Wcast_align;
*OPT_Wcast_qual = *gccc::OPT_Wcast_qual;
*OPT_Wchar_concat = *gccc::OPT_Wchar_concat;
*OPT_Wchar_subscripts = *gccc::OPT_Wchar_subscripts;
*OPT_Wcharacter_truncation = *gccc::OPT_Wcharacter_truncation;
*OPT_Wclobbered = *gccc::OPT_Wclobbered;
*OPT_Wcomment = *gccc::OPT_Wcomment;
*OPT_Wcondition_assign = *gccc::OPT_Wcondition_assign;
*OPT_Wconstructor_name = *gccc::OPT_Wconstructor_name;
*OPT_Wconversion = *gccc::OPT_Wconversion;
*OPT_Wconversion_extra = *gccc::OPT_Wconversion_extra;
*OPT_Wconversion_null = *gccc::OPT_Wconversion_null;
*OPT_Wcoverage_mismatch = *gccc::OPT_Wcoverage_mismatch;
*OPT_Wcpp = *gccc::OPT_Wcpp;
*OPT_Wctor_dtor_privacy = *gccc::OPT_Wctor_dtor_privacy;
*OPT_Wdeclaration_after_statement = *gccc::OPT_Wdeclaration_after_statement;
*OPT_Wdep_ann = *gccc::OPT_Wdep_ann;
*OPT_Wdeprecated = *gccc::OPT_Wdeprecated;
*OPT_Wdeprecated_declarations = *gccc::OPT_Wdeprecated_declarations;
*OPT_Wdisabled_optimization = *gccc::OPT_Wdisabled_optimization;
*OPT_Wdiscouraged = *gccc::OPT_Wdiscouraged;
*OPT_Wdiv_by_zero = *gccc::OPT_Wdiv_by_zero;
*OPT_Wdouble_promotion = *gccc::OPT_Wdouble_promotion;
*OPT_Weffc__ = *gccc::OPT_Weffc__;
*OPT_Wempty_block = *gccc::OPT_Wempty_block;
*OPT_Wempty_body = *gccc::OPT_Wempty_body;
*OPT_Wendif_labels = *gccc::OPT_Wendif_labels;
*OPT_Wenum_compare = *gccc::OPT_Wenum_compare;
*OPT_Wenum_identifier = *gccc::OPT_Wenum_identifier;
*OPT_Wenum_switch = *gccc::OPT_Wenum_switch;
*OPT_Werror = *gccc::OPT_Werror;
*OPT_Werror_ = *gccc::OPT_Werror_;
*OPT_Wextra = *gccc::OPT_Wextra;
*OPT_Wextraneous_semicolon = *gccc::OPT_Wextraneous_semicolon;
*OPT_Wfallthrough = *gccc::OPT_Wfallthrough;
*OPT_Wfatal_errors = *gccc::OPT_Wfatal_errors;
*OPT_Wfield_hiding = *gccc::OPT_Wfield_hiding;
*OPT_Wfinal_bound = *gccc::OPT_Wfinal_bound;
*OPT_Wfinally = *gccc::OPT_Wfinally;
*OPT_Wfloat_equal = *gccc::OPT_Wfloat_equal;
*OPT_Wforbidden = *gccc::OPT_Wforbidden;
*OPT_Wformat = *gccc::OPT_Wformat;
*OPT_Wformat_contains_nul = *gccc::OPT_Wformat_contains_nul;
*OPT_Wformat_extra_args = *gccc::OPT_Wformat_extra_args;
*OPT_Wformat_nonliteral = *gccc::OPT_Wformat_nonliteral;
*OPT_Wformat_security = *gccc::OPT_Wformat_security;
*OPT_Wformat_y2k = *gccc::OPT_Wformat_y2k;
*OPT_Wformat_zero_length = *gccc::OPT_Wformat_zero_length;
*OPT_Wformat_ = *gccc::OPT_Wformat_;
*OPT_Wframe_larger_than_ = *gccc::OPT_Wframe_larger_than_;
*OPT_Whiding = *gccc::OPT_Whiding;
*OPT_Wignored_qualifiers = *gccc::OPT_Wignored_qualifiers;
*OPT_Wimplicit = *gccc::OPT_Wimplicit;
*OPT_Wimplicit_function_declaration = *gccc::OPT_Wimplicit_function_declaration;
*OPT_Wimplicit_int = *gccc::OPT_Wimplicit_int;
*OPT_Wimplicit_interface = *gccc::OPT_Wimplicit_interface;
*OPT_Wimplicit_procedure = *gccc::OPT_Wimplicit_procedure;
*OPT_Windirect_static = *gccc::OPT_Windirect_static;
*OPT_Winit_self = *gccc::OPT_Winit_self;
*OPT_Winline = *gccc::OPT_Winline;
*OPT_Wint_to_pointer_cast = *gccc::OPT_Wint_to_pointer_cast;
*OPT_Wintf_annotation = *gccc::OPT_Wintf_annotation;
*OPT_Wintf_non_inherited = *gccc::OPT_Wintf_non_inherited;
*OPT_Wintrinsic_shadow = *gccc::OPT_Wintrinsic_shadow;
*OPT_Wintrinsics_std = *gccc::OPT_Wintrinsics_std;
*OPT_Winvalid_offsetof = *gccc::OPT_Winvalid_offsetof;
*OPT_Winvalid_pch = *gccc::OPT_Winvalid_pch;
*OPT_Wjavadoc = *gccc::OPT_Wjavadoc;
*OPT_Wjump_misses_init = *gccc::OPT_Wjump_misses_init;
*OPT_Wl_ = *gccc::OPT_Wl_;
*OPT_Wlarger_than_ = *gccc::OPT_Wlarger_than_;
*OPT_Wline_truncation = *gccc::OPT_Wline_truncation;
*OPT_Wlocal_hiding = *gccc::OPT_Wlocal_hiding;
*OPT_Wlogical_op = *gccc::OPT_Wlogical_op;
*OPT_Wlong_long = *gccc::OPT_Wlong_long;
*OPT_Wmain = *gccc::OPT_Wmain;
*OPT_Wmasked_catch_block = *gccc::OPT_Wmasked_catch_block;
*OPT_Wmissing_braces = *gccc::OPT_Wmissing_braces;
*OPT_Wmissing_declarations = *gccc::OPT_Wmissing_declarations;
*OPT_Wmissing_field_initializers = *gccc::OPT_Wmissing_field_initializers;
*OPT_Wmissing_format_attribute = *gccc::OPT_Wmissing_format_attribute;
*OPT_Wmissing_include_dirs = *gccc::OPT_Wmissing_include_dirs;
*OPT_Wmissing_noreturn = *gccc::OPT_Wmissing_noreturn;
*OPT_Wmissing_parameter_type = *gccc::OPT_Wmissing_parameter_type;
*OPT_Wmissing_prototypes = *gccc::OPT_Wmissing_prototypes;
*OPT_Wmudflap = *gccc::OPT_Wmudflap;
*OPT_Wmultichar = *gccc::OPT_Wmultichar;
*OPT_Wnested_externs = *gccc::OPT_Wnested_externs;
*OPT_Wnls = *gccc::OPT_Wnls;
*OPT_Wno_effect_assign = *gccc::OPT_Wno_effect_assign;
*OPT_Wnoexcept = *gccc::OPT_Wnoexcept;
*OPT_Wnon_template_friend = *gccc::OPT_Wnon_template_friend;
*OPT_Wnon_virtual_dtor = *gccc::OPT_Wnon_virtual_dtor;
*OPT_Wnonnull = *gccc::OPT_Wnonnull;
*OPT_Wnormalized_ = *gccc::OPT_Wnormalized_;
*OPT_Wnull = *gccc::OPT_Wnull;
*OPT_Wold_style_cast = *gccc::OPT_Wold_style_cast;
*OPT_Wold_style_declaration = *gccc::OPT_Wold_style_declaration;
*OPT_Wold_style_definition = *gccc::OPT_Wold_style_definition;
*OPT_Wout_of_date = *gccc::OPT_Wout_of_date;
*OPT_Wover_ann = *gccc::OPT_Wover_ann;
*OPT_Woverflow = *gccc::OPT_Woverflow;
*OPT_Woverlength_strings = *gccc::OPT_Woverlength_strings;
*OPT_Woverloaded_virtual = *gccc::OPT_Woverloaded_virtual;
*OPT_Woverride_init = *gccc::OPT_Woverride_init;
*OPT_Wp_ = *gccc::OPT_Wp_;
*OPT_Wpacked = *gccc::OPT_Wpacked;
*OPT_Wpacked_bitfield_compat = *gccc::OPT_Wpacked_bitfield_compat;
*OPT_Wpadded = *gccc::OPT_Wpadded;
*OPT_Wparam_assign = *gccc::OPT_Wparam_assign;
*OPT_Wparentheses = *gccc::OPT_Wparentheses;
*OPT_Wpkg_default_method = *gccc::OPT_Wpkg_default_method;
*OPT_Wpmf_conversions = *gccc::OPT_Wpmf_conversions;
*OPT_Wpointer_arith = *gccc::OPT_Wpointer_arith;
*OPT_Wpointer_sign = *gccc::OPT_Wpointer_sign;
*OPT_Wpointer_to_int_cast = *gccc::OPT_Wpointer_to_int_cast;
*OPT_Wpragmas = *gccc::OPT_Wpragmas;
*OPT_Wproperty_assign_default = *gccc::OPT_Wproperty_assign_default;
*OPT_Wprotocol = *gccc::OPT_Wprotocol;
*OPT_Wpsabi = *gccc::OPT_Wpsabi;
*OPT_Wraw = *gccc::OPT_Wraw;
*OPT_Wreal_q_constant = *gccc::OPT_Wreal_q_constant;
*OPT_Wredundant_decls = *gccc::OPT_Wredundant_decls;
*OPT_Wredundant_modifiers = *gccc::OPT_Wredundant_modifiers;
*OPT_Wreorder = *gccc::OPT_Wreorder;
*OPT_Wreturn_type = *gccc::OPT_Wreturn_type;
*OPT_Wselector = *gccc::OPT_Wselector;
*OPT_Wsequence_point = *gccc::OPT_Wsequence_point;
*OPT_Wserial = *gccc::OPT_Wserial;
*OPT_Wshadow = *gccc::OPT_Wshadow;
*OPT_Wsign_compare = *gccc::OPT_Wsign_compare;
*OPT_Wsign_conversion = *gccc::OPT_Wsign_conversion;
*OPT_Wsign_promo = *gccc::OPT_Wsign_promo;
*OPT_Wspecial_param_hiding = *gccc::OPT_Wspecial_param_hiding;
*OPT_Wstack_protector = *gccc::OPT_Wstack_protector;
*OPT_Wstatic_access = *gccc::OPT_Wstatic_access;
*OPT_Wstatic_receiver = *gccc::OPT_Wstatic_receiver;
*OPT_Wstrict_aliasing = *gccc::OPT_Wstrict_aliasing;
*OPT_Wstrict_aliasing_ = *gccc::OPT_Wstrict_aliasing_;
*OPT_Wstrict_null_sentinel = *gccc::OPT_Wstrict_null_sentinel;
*OPT_Wstrict_overflow = *gccc::OPT_Wstrict_overflow;
*OPT_Wstrict_overflow_ = *gccc::OPT_Wstrict_overflow_;
*OPT_Wstrict_prototypes = *gccc::OPT_Wstrict_prototypes;
*OPT_Wstrict_selector_match = *gccc::OPT_Wstrict_selector_match;
*OPT_Wsuggest_attribute_const = *gccc::OPT_Wsuggest_attribute_const;
*OPT_Wsuggest_attribute_noreturn = *gccc::OPT_Wsuggest_attribute_noreturn;
*OPT_Wsuggest_attribute_pure = *gccc::OPT_Wsuggest_attribute_pure;
*OPT_Wsuppress = *gccc::OPT_Wsuppress;
*OPT_Wsurprising = *gccc::OPT_Wsurprising;
*OPT_Wswitch = *gccc::OPT_Wswitch;
*OPT_Wswitch_default = *gccc::OPT_Wswitch_default;
*OPT_Wswitch_enum = *gccc::OPT_Wswitch_enum;
*OPT_Wsync_nand = *gccc::OPT_Wsync_nand;
*OPT_Wsynth = *gccc::OPT_Wsynth;
*OPT_Wsynthetic_access = *gccc::OPT_Wsynthetic_access;
*OPT_Wsystem_headers = *gccc::OPT_Wsystem_headers;
*OPT_Wtabs = *gccc::OPT_Wtabs;
*OPT_Wtasks = *gccc::OPT_Wtasks;
*OPT_Wtraditional = *gccc::OPT_Wtraditional;
*OPT_Wtraditional_conversion = *gccc::OPT_Wtraditional_conversion;
*OPT_Wtrampolines = *gccc::OPT_Wtrampolines;
*OPT_Wtrigraphs = *gccc::OPT_Wtrigraphs;
*OPT_Wtype_hiding = *gccc::OPT_Wtype_hiding;
*OPT_Wtype_limits = *gccc::OPT_Wtype_limits;
*OPT_Wuncheck = *gccc::OPT_Wuncheck;
*OPT_Wundeclared_selector = *gccc::OPT_Wundeclared_selector;
*OPT_Wundef = *gccc::OPT_Wundef;
*OPT_Wunderflow = *gccc::OPT_Wunderflow;
*OPT_Wuninitialized = *gccc::OPT_Wuninitialized;
*OPT_Wunknown_pragmas = *gccc::OPT_Wunknown_pragmas;
*OPT_Wunnecessary_else = *gccc::OPT_Wunnecessary_else;
*OPT_Wunqualified_field = *gccc::OPT_Wunqualified_field;
*OPT_Wunsafe_loop_optimizations = *gccc::OPT_Wunsafe_loop_optimizations;
*OPT_Wunsuffixed_float_constants = *gccc::OPT_Wunsuffixed_float_constants;
*OPT_Wunused = *gccc::OPT_Wunused;
*OPT_Wunused_argument = *gccc::OPT_Wunused_argument;
*OPT_Wunused_but_set_parameter = *gccc::OPT_Wunused_but_set_parameter;
*OPT_Wunused_but_set_variable = *gccc::OPT_Wunused_but_set_variable;
*OPT_Wunused_dummy_argument = *gccc::OPT_Wunused_dummy_argument;
*OPT_Wunused_function = *gccc::OPT_Wunused_function;
*OPT_Wunused_import = *gccc::OPT_Wunused_import;
*OPT_Wunused_label = *gccc::OPT_Wunused_label;
*OPT_Wunused_local = *gccc::OPT_Wunused_local;
*OPT_Wunused_macros = *gccc::OPT_Wunused_macros;
*OPT_Wunused_parameter = *gccc::OPT_Wunused_parameter;
*OPT_Wunused_private = *gccc::OPT_Wunused_private;
*OPT_Wunused_result = *gccc::OPT_Wunused_result;
*OPT_Wunused_thrown = *gccc::OPT_Wunused_thrown;
*OPT_Wunused_value = *gccc::OPT_Wunused_value;
*OPT_Wunused_variable = *gccc::OPT_Wunused_variable;
*OPT_Wuseless_type_check = *gccc::OPT_Wuseless_type_check;
*OPT_Wvarargs_cast = *gccc::OPT_Wvarargs_cast;
*OPT_Wvariadic_macros = *gccc::OPT_Wvariadic_macros;
*OPT_Wvla = *gccc::OPT_Wvla;
*OPT_Wvolatile_register_var = *gccc::OPT_Wvolatile_register_var;
*OPT_Wwarning_token = *gccc::OPT_Wwarning_token;
*OPT_Wwrite_strings = *gccc::OPT_Wwrite_strings;
*OPT_Xassembler = *gccc::OPT_Xassembler;
*OPT_Xlinker = *gccc::OPT_Xlinker;
*OPT_Xpreprocessor = *gccc::OPT_Xpreprocessor;
*OPT_Z = *gccc::OPT_Z;
*OPT_ansi = *gccc::OPT_ansi;
*OPT_aux_info = *gccc::OPT_aux_info;
*OPT_auxbase = *gccc::OPT_auxbase;
*OPT_auxbase_strip = *gccc::OPT_auxbase_strip;
*OPT_c = *gccc::OPT_c;
*OPT_coverage = *gccc::OPT_coverage;
*OPT_cpp = *gccc::OPT_cpp;
*OPT_cpp_ = *gccc::OPT_cpp_;
*OPT_d = *gccc::OPT_d;
*OPT_dumpbase = *gccc::OPT_dumpbase;
*OPT_dumpdir = *gccc::OPT_dumpdir;
*OPT_dumpmachine = *gccc::OPT_dumpmachine;
*OPT_dumpspecs = *gccc::OPT_dumpspecs;
*OPT_dumpversion = *gccc::OPT_dumpversion;
*OPT_e = *gccc::OPT_e;
*OPT_export_dynamic = *gccc::OPT_export_dynamic;
*OPT_extdirs = *gccc::OPT_extdirs;
*OPT_fPIC = *gccc::OPT_fPIC;
*OPT_fPIE = *gccc::OPT_fPIE;
*OPT_fRTS_ = *gccc::OPT_fRTS_;
*OPT_fabi_version_ = *gccc::OPT_fabi_version_;
*OPT_faccess_control = *gccc::OPT_faccess_control;
*OPT_falign_commons = *gccc::OPT_falign_commons;
*OPT_falign_functions = *gccc::OPT_falign_functions;
*OPT_falign_functions_ = *gccc::OPT_falign_functions_;
*OPT_falign_jumps = *gccc::OPT_falign_jumps;
*OPT_falign_jumps_ = *gccc::OPT_falign_jumps_;
*OPT_falign_labels = *gccc::OPT_falign_labels;
*OPT_falign_labels_ = *gccc::OPT_falign_labels_;
*OPT_falign_loops = *gccc::OPT_falign_loops;
*OPT_falign_loops_ = *gccc::OPT_falign_loops_;
*OPT_fall_intrinsics = *gccc::OPT_fall_intrinsics;
*OPT_fallow_leading_underscore = *gccc::OPT_fallow_leading_underscore;
*OPT_fasm = *gccc::OPT_fasm;
*OPT_fassert = *gccc::OPT_fassert;
*OPT_fassociative_math = *gccc::OPT_fassociative_math;
*OPT_fassume_compiled = *gccc::OPT_fassume_compiled;
*OPT_fassume_compiled_ = *gccc::OPT_fassume_compiled_;
*OPT_fasynchronous_unwind_tables = *gccc::OPT_fasynchronous_unwind_tables;
*OPT_fauto_inc_dec = *gccc::OPT_fauto_inc_dec;
*OPT_fautomatic = *gccc::OPT_fautomatic;
*OPT_faux_classpath = *gccc::OPT_faux_classpath;
*OPT_fbackslash = *gccc::OPT_fbackslash;
*OPT_fbacktrace = *gccc::OPT_fbacktrace;
*OPT_fblas_matmul_limit_ = *gccc::OPT_fblas_matmul_limit_;
*OPT_fbootclasspath_ = *gccc::OPT_fbootclasspath_;
*OPT_fbootstrap_classes = *gccc::OPT_fbootstrap_classes;
*OPT_fbounds_check = *gccc::OPT_fbounds_check;
*OPT_fbranch_count_reg = *gccc::OPT_fbranch_count_reg;
*OPT_fbranch_probabilities = *gccc::OPT_fbranch_probabilities;
*OPT_fbranch_target_load_optimize = *gccc::OPT_fbranch_target_load_optimize;
*OPT_fbranch_target_load_optimize2 = *gccc::OPT_fbranch_target_load_optimize2;
*OPT_fbtr_bb_exclusive = *gccc::OPT_fbtr_bb_exclusive;
*OPT_fbuiltin = *gccc::OPT_fbuiltin;
*OPT_fbuiltin_ = *gccc::OPT_fbuiltin_;
*OPT_fcall_saved_ = *gccc::OPT_fcall_saved_;
*OPT_fcall_used_ = *gccc::OPT_fcall_used_;
*OPT_fcaller_saves = *gccc::OPT_fcaller_saves;
*OPT_fcheck_array_temporaries = *gccc::OPT_fcheck_array_temporaries;
*OPT_fcheck_data_deps = *gccc::OPT_fcheck_data_deps;
*OPT_fcheck_new = *gccc::OPT_fcheck_new;
*OPT_fcheck_references = *gccc::OPT_fcheck_references;
*OPT_fcheck_ = *gccc::OPT_fcheck_;
*OPT_fclasspath_ = *gccc::OPT_fclasspath_;
*OPT_fcoarray_ = *gccc::OPT_fcoarray_;
*OPT_fcombine_stack_adjustments = *gccc::OPT_fcombine_stack_adjustments;
*OPT_fcommon = *gccc::OPT_fcommon;
*OPT_fcompare_debug = *gccc::OPT_fcompare_debug;
*OPT_fcompare_debug_second = *gccc::OPT_fcompare_debug_second;
*OPT_fcompare_debug_ = *gccc::OPT_fcompare_debug_;
*OPT_fcompare_elim = *gccc::OPT_fcompare_elim;
*OPT_fcompile_resource_ = *gccc::OPT_fcompile_resource_;
*OPT_fcond_mismatch = *gccc::OPT_fcond_mismatch;
*OPT_fconserve_space = *gccc::OPT_fconserve_space;
*OPT_fconserve_stack = *gccc::OPT_fconserve_stack;
*OPT_fconstant_string_class_ = *gccc::OPT_fconstant_string_class_;
*OPT_fconstexpr_depth_ = *gccc::OPT_fconstexpr_depth_;
*OPT_fconvert_big_endian = *gccc::OPT_fconvert_big_endian;
*OPT_fconvert_little_endian = *gccc::OPT_fconvert_little_endian;
*OPT_fconvert_native = *gccc::OPT_fconvert_native;
*OPT_fconvert_swap = *gccc::OPT_fconvert_swap;
*OPT_fcprop_registers = *gccc::OPT_fcprop_registers;
*OPT_fcray_pointer = *gccc::OPT_fcray_pointer;
*OPT_fcrossjumping = *gccc::OPT_fcrossjumping;
*OPT_fcse_follow_jumps = *gccc::OPT_fcse_follow_jumps;
*OPT_fcx_fortran_rules = *gccc::OPT_fcx_fortran_rules;
*OPT_fcx_limited_range = *gccc::OPT_fcx_limited_range;
*OPT_fd_lines_as_code = *gccc::OPT_fd_lines_as_code;
*OPT_fd_lines_as_comments = *gccc::OPT_fd_lines_as_comments;
*OPT_fdata_sections = *gccc::OPT_fdata_sections;
*OPT_fdbg_cnt_list = *gccc::OPT_fdbg_cnt_list;
*OPT_fdbg_cnt_ = *gccc::OPT_fdbg_cnt_;
*OPT_fdce = *gccc::OPT_fdce;
*OPT_fdebug_prefix_map_ = *gccc::OPT_fdebug_prefix_map_;
*OPT_fdeduce_init_list = *gccc::OPT_fdeduce_init_list;
*OPT_fdefault_double_8 = *gccc::OPT_fdefault_double_8;
*OPT_fdefault_integer_8 = *gccc::OPT_fdefault_integer_8;
*OPT_fdefault_real_8 = *gccc::OPT_fdefault_real_8;
*OPT_fdefer_pop = *gccc::OPT_fdefer_pop;
*OPT_fdelayed_branch = *gccc::OPT_fdelayed_branch;
*OPT_fdelete_null_pointer_checks = *gccc::OPT_fdelete_null_pointer_checks;
*OPT_fdevirtualize = *gccc::OPT_fdevirtualize;
*OPT_fdiagnostics_show_location_ = *gccc::OPT_fdiagnostics_show_location_;
*OPT_fdiagnostics_show_option = *gccc::OPT_fdiagnostics_show_option;
*OPT_fdirectives_only = *gccc::OPT_fdirectives_only;
*OPT_fdisable_assertions = *gccc::OPT_fdisable_assertions;
*OPT_fdisable_assertions_ = *gccc::OPT_fdisable_assertions_;
*OPT_fdollar_ok = *gccc::OPT_fdollar_ok;
*OPT_fdollars_in_identifiers = *gccc::OPT_fdollars_in_identifiers;
*OPT_fdse = *gccc::OPT_fdse;
*OPT_fdump_ = *gccc::OPT_fdump_;
*OPT_fdump_core = *gccc::OPT_fdump_core;
*OPT_fdump_final_insns = *gccc::OPT_fdump_final_insns;
*OPT_fdump_final_insns_ = *gccc::OPT_fdump_final_insns_;
*OPT_fdump_fortran_optimized = *gccc::OPT_fdump_fortran_optimized;
*OPT_fdump_fortran_original = *gccc::OPT_fdump_fortran_original;
*OPT_fdump_go_spec_ = *gccc::OPT_fdump_go_spec_;
*OPT_fdump_noaddr = *gccc::OPT_fdump_noaddr;
*OPT_fdump_parse_tree = *gccc::OPT_fdump_parse_tree;
*OPT_fdump_unnumbered = *gccc::OPT_fdump_unnumbered;
*OPT_fdump_unnumbered_links = *gccc::OPT_fdump_unnumbered_links;
*OPT_fdwarf2_cfi_asm = *gccc::OPT_fdwarf2_cfi_asm;
*OPT_fearly_inlining = *gccc::OPT_fearly_inlining;
*OPT_felide_constructors = *gccc::OPT_felide_constructors;
*OPT_feliminate_dwarf2_dups = *gccc::OPT_feliminate_dwarf2_dups;
*OPT_feliminate_unused_debug_symbols = *gccc::OPT_feliminate_unused_debug_symbols;
*OPT_feliminate_unused_debug_types = *gccc::OPT_feliminate_unused_debug_types;
*OPT_femit_class_debug_always = *gccc::OPT_femit_class_debug_always;
*OPT_femit_class_file = *gccc::OPT_femit_class_file;
*OPT_femit_class_files = *gccc::OPT_femit_class_files;
*OPT_femit_struct_debug_baseonly = *gccc::OPT_femit_struct_debug_baseonly;
*OPT_femit_struct_debug_detailed_ = *gccc::OPT_femit_struct_debug_detailed_;
*OPT_femit_struct_debug_reduced = *gccc::OPT_femit_struct_debug_reduced;
*OPT_fenable_assertions = *gccc::OPT_fenable_assertions;
*OPT_fenable_assertions_ = *gccc::OPT_fenable_assertions_;
*OPT_fenable_icf_debug = *gccc::OPT_fenable_icf_debug;
*OPT_fencoding_ = *gccc::OPT_fencoding_;
*OPT_fenforce_eh_specs = *gccc::OPT_fenforce_eh_specs;
*OPT_fexceptions = *gccc::OPT_fexceptions;
*OPT_fexcess_precision_ = *gccc::OPT_fexcess_precision_;
*OPT_fexec_charset_ = *gccc::OPT_fexec_charset_;
*OPT_fexpensive_optimizations = *gccc::OPT_fexpensive_optimizations;
*OPT_fextdirs_ = *gccc::OPT_fextdirs_;
*OPT_fextended_identifiers = *gccc::OPT_fextended_identifiers;
*OPT_fexternal_blas = *gccc::OPT_fexternal_blas;
*OPT_ff2c = *gccc::OPT_ff2c;
*OPT_ffast_math = *gccc::OPT_ffast_math;
*OPT_ffilelist_file = *gccc::OPT_ffilelist_file;
*OPT_ffinite_math_only = *gccc::OPT_ffinite_math_only;
*OPT_ffixed_ = *gccc::OPT_ffixed_;
*OPT_ffixed_form = *gccc::OPT_ffixed_form;
*OPT_ffixed_line_length_ = *gccc::OPT_ffixed_line_length_;
*OPT_ffixed_line_length_none = *gccc::OPT_ffixed_line_length_none;
*OPT_ffloat_store = *gccc::OPT_ffloat_store;
*OPT_ffor_scope = *gccc::OPT_ffor_scope;
*OPT_fforce_classes_archive_check = *gccc::OPT_fforce_classes_archive_check;
*OPT_fforward_propagate = *gccc::OPT_fforward_propagate;
*OPT_ffp_contract_ = *gccc::OPT_ffp_contract_;
*OPT_ffpe_trap_ = *gccc::OPT_ffpe_trap_;
*OPT_ffree_form = *gccc::OPT_ffree_form;
*OPT_ffree_line_length_ = *gccc::OPT_ffree_line_length_;
*OPT_ffree_line_length_none = *gccc::OPT_ffree_line_length_none;
*OPT_ffreestanding = *gccc::OPT_ffreestanding;
*OPT_ffriend_injection = *gccc::OPT_ffriend_injection;
*OPT_ffunction_cse = *gccc::OPT_ffunction_cse;
*OPT_ffunction_sections = *gccc::OPT_ffunction_sections;
*OPT_fgcse = *gccc::OPT_fgcse;
*OPT_fgcse_after_reload = *gccc::OPT_fgcse_after_reload;
*OPT_fgcse_las = *gccc::OPT_fgcse_las;
*OPT_fgcse_lm = *gccc::OPT_fgcse_lm;
*OPT_fgcse_sm = *gccc::OPT_fgcse_sm;
*OPT_fgnu_keywords = *gccc::OPT_fgnu_keywords;
*OPT_fgnu_runtime = *gccc::OPT_fgnu_runtime;
*OPT_fgnu89_inline = *gccc::OPT_fgnu89_inline;
*OPT_fgo_dump_ = *gccc::OPT_fgo_dump_;
*OPT_fgo_prefix_ = *gccc::OPT_fgo_prefix_;
*OPT_fgraphite = *gccc::OPT_fgraphite;
*OPT_fgraphite_identity = *gccc::OPT_fgraphite_identity;
*OPT_fguess_branch_probability = *gccc::OPT_fguess_branch_probability;
*OPT_fhash_synchronization = *gccc::OPT_fhash_synchronization;
*OPT_fhosted = *gccc::OPT_fhosted;
*OPT_fident = *gccc::OPT_fident;
*OPT_fif_conversion = *gccc::OPT_fif_conversion;
*OPT_fif_conversion2 = *gccc::OPT_fif_conversion2;
*OPT_fimplement_inlines = *gccc::OPT_fimplement_inlines;
*OPT_fimplicit_inline_templates = *gccc::OPT_fimplicit_inline_templates;
*OPT_fimplicit_none = *gccc::OPT_fimplicit_none;
*OPT_fimplicit_templates = *gccc::OPT_fimplicit_templates;
*OPT_findirect_classes = *gccc::OPT_findirect_classes;
*OPT_findirect_dispatch = *gccc::OPT_findirect_dispatch;
*OPT_findirect_inlining = *gccc::OPT_findirect_inlining;
*OPT_finhibit_size_directive = *gccc::OPT_finhibit_size_directive;
*OPT_finit_character_ = *gccc::OPT_finit_character_;
*OPT_finit_integer_ = *gccc::OPT_finit_integer_;
*OPT_finit_local_zero = *gccc::OPT_finit_local_zero;
*OPT_finit_logical_ = *gccc::OPT_finit_logical_;
*OPT_finit_real_ = *gccc::OPT_finit_real_;
*OPT_finline = *gccc::OPT_finline;
*OPT_finline_functions = *gccc::OPT_finline_functions;
*OPT_finline_functions_called_once = *gccc::OPT_finline_functions_called_once;
*OPT_finline_limit_ = *gccc::OPT_finline_limit_;
*OPT_finline_small_functions = *gccc::OPT_finline_small_functions;
*OPT_finput_charset_ = *gccc::OPT_finput_charset_;
*OPT_finstrument_functions = *gccc::OPT_finstrument_functions;
*OPT_finstrument_functions_exclude_file_list_ = *gccc::OPT_finstrument_functions_exclude_file_list_;
*OPT_finstrument_functions_exclude_function_list_ = *gccc::OPT_finstrument_functions_exclude_function_list_;
*OPT_fintrinsic_modules_path = *gccc::OPT_fintrinsic_modules_path;
*OPT_fipa_cp = *gccc::OPT_fipa_cp;
*OPT_fipa_cp_clone = *gccc::OPT_fipa_cp_clone;
*OPT_fipa_matrix_reorg = *gccc::OPT_fipa_matrix_reorg;
*OPT_fipa_profile = *gccc::OPT_fipa_profile;
*OPT_fipa_pta = *gccc::OPT_fipa_pta;
*OPT_fipa_pure_const = *gccc::OPT_fipa_pure_const;
*OPT_fipa_reference = *gccc::OPT_fipa_reference;
*OPT_fipa_sra = *gccc::OPT_fipa_sra;
*OPT_fipa_struct_reorg = *gccc::OPT_fipa_struct_reorg;
*OPT_fira_algorithm_ = *gccc::OPT_fira_algorithm_;
*OPT_fira_loop_pressure = *gccc::OPT_fira_loop_pressure;
*OPT_fira_region_ = *gccc::OPT_fira_region_;
*OPT_fira_share_save_slots = *gccc::OPT_fira_share_save_slots;
*OPT_fira_share_spill_slots = *gccc::OPT_fira_share_spill_slots;
*OPT_fira_verbose_ = *gccc::OPT_fira_verbose_;
*OPT_fivopts = *gccc::OPT_fivopts;
*OPT_fjni = *gccc::OPT_fjni;
*OPT_fjump_tables = *gccc::OPT_fjump_tables;
*OPT_fkeep_inline_dllexport = *gccc::OPT_fkeep_inline_dllexport;
*OPT_fkeep_inline_functions = *gccc::OPT_fkeep_inline_functions;
*OPT_fkeep_static_consts = *gccc::OPT_fkeep_static_consts;
*OPT_flax_vector_conversions = *gccc::OPT_flax_vector_conversions;
*OPT_fleading_underscore = *gccc::OPT_fleading_underscore;
*OPT_floop_block = *gccc::OPT_floop_block;
*OPT_floop_flatten = *gccc::OPT_floop_flatten;
*OPT_floop_interchange = *gccc::OPT_floop_interchange;
*OPT_floop_parallelize_all = *gccc::OPT_floop_parallelize_all;
*OPT_floop_strip_mine = *gccc::OPT_floop_strip_mine;
*OPT_flto = *gccc::OPT_flto;
*OPT_flto_compression_level_ = *gccc::OPT_flto_compression_level_;
*OPT_flto_partition_1to1 = *gccc::OPT_flto_partition_1to1;
*OPT_flto_partition_balanced = *gccc::OPT_flto_partition_balanced;
*OPT_flto_partition_none = *gccc::OPT_flto_partition_none;
*OPT_flto_report = *gccc::OPT_flto_report;
*OPT_flto_ = *gccc::OPT_flto_;
*OPT_fltrans = *gccc::OPT_fltrans;
*OPT_fltrans_output_list_ = *gccc::OPT_fltrans_output_list_;
*OPT_fmain_ = *gccc::OPT_fmain_;
*OPT_fmath_errno = *gccc::OPT_fmath_errno;
*OPT_fmax_array_constructor_ = *gccc::OPT_fmax_array_constructor_;
*OPT_fmax_errors_ = *gccc::OPT_fmax_errors_;
*OPT_fmax_identifier_length_ = *gccc::OPT_fmax_identifier_length_;
*OPT_fmax_stack_var_size_ = *gccc::OPT_fmax_stack_var_size_;
*OPT_fmax_subrecord_length_ = *gccc::OPT_fmax_subrecord_length_;
*OPT_fmem_report = *gccc::OPT_fmem_report;
*OPT_fmerge_all_constants = *gccc::OPT_fmerge_all_constants;
*OPT_fmerge_constants = *gccc::OPT_fmerge_constants;
*OPT_fmerge_debug_strings = *gccc::OPT_fmerge_debug_strings;
*OPT_fmessage_length_ = *gccc::OPT_fmessage_length_;
*OPT_fmodule_private = *gccc::OPT_fmodule_private;
*OPT_fmodulo_sched = *gccc::OPT_fmodulo_sched;
*OPT_fmodulo_sched_allow_regmoves = *gccc::OPT_fmodulo_sched_allow_regmoves;
*OPT_fmove_loop_invariants = *gccc::OPT_fmove_loop_invariants;
*OPT_fms_extensions = *gccc::OPT_fms_extensions;
*OPT_fmudflap = *gccc::OPT_fmudflap;
*OPT_fmudflapir = *gccc::OPT_fmudflapir;
*OPT_fmudflapth = *gccc::OPT_fmudflapth;
*OPT_fnext_runtime = *gccc::OPT_fnext_runtime;
*OPT_fnil_receivers = *gccc::OPT_fnil_receivers;
*OPT_fnon_call_exceptions = *gccc::OPT_fnon_call_exceptions;
*OPT_fnonansi_builtins = *gccc::OPT_fnonansi_builtins;
*OPT_fnothrow_opt = *gccc::OPT_fnothrow_opt;
*OPT_fobjc_abi_version_ = *gccc::OPT_fobjc_abi_version_;
*OPT_fobjc_call_cxx_cdtors = *gccc::OPT_fobjc_call_cxx_cdtors;
*OPT_fobjc_direct_dispatch = *gccc::OPT_fobjc_direct_dispatch;
*OPT_fobjc_exceptions = *gccc::OPT_fobjc_exceptions;
*OPT_fobjc_gc = *gccc::OPT_fobjc_gc;
*OPT_fobjc_nilcheck = *gccc::OPT_fobjc_nilcheck;
*OPT_fobjc_sjlj_exceptions = *gccc::OPT_fobjc_sjlj_exceptions;
*OPT_fobjc_std_objc1 = *gccc::OPT_fobjc_std_objc1;
*OPT_fomit_frame_pointer = *gccc::OPT_fomit_frame_pointer;
*OPT_fopenmp = *gccc::OPT_fopenmp;
*OPT_foperator_names = *gccc::OPT_foperator_names;
*OPT_foptimize_register_move = *gccc::OPT_foptimize_register_move;
*OPT_foptimize_sibling_calls = *gccc::OPT_foptimize_sibling_calls;
*OPT_foptimize_static_class_initialization = *gccc::OPT_foptimize_static_class_initialization;
*OPT_foutput_class_dir_ = *gccc::OPT_foutput_class_dir_;
*OPT_fpack_derived = *gccc::OPT_fpack_derived;
*OPT_fpack_struct = *gccc::OPT_fpack_struct;
*OPT_fpack_struct_ = *gccc::OPT_fpack_struct_;
*OPT_fpartial_inlining = *gccc::OPT_fpartial_inlining;
*OPT_fpcc_struct_return = *gccc::OPT_fpcc_struct_return;
*OPT_fpch_deps = *gccc::OPT_fpch_deps;
*OPT_fpch_preprocess = *gccc::OPT_fpch_preprocess;
*OPT_fpeel_loops = *gccc::OPT_fpeel_loops;
*OPT_fpeephole = *gccc::OPT_fpeephole;
*OPT_fpeephole2 = *gccc::OPT_fpeephole2;
*OPT_fpermissive = *gccc::OPT_fpermissive;
*OPT_fpic = *gccc::OPT_fpic;
*OPT_fpie = *gccc::OPT_fpie;
*OPT_fplan9_extensions = *gccc::OPT_fplan9_extensions;
*OPT_fplugin_arg_ = *gccc::OPT_fplugin_arg_;
*OPT_fplugin_ = *gccc::OPT_fplugin_;
*OPT_fpost_ipa_mem_report = *gccc::OPT_fpost_ipa_mem_report;
*OPT_fpre_ipa_mem_report = *gccc::OPT_fpre_ipa_mem_report;
*OPT_fpredictive_commoning = *gccc::OPT_fpredictive_commoning;
*OPT_fprefetch_loop_arrays = *gccc::OPT_fprefetch_loop_arrays;
*OPT_fpreprocessed = *gccc::OPT_fpreprocessed;
*OPT_fpretty_templates = *gccc::OPT_fpretty_templates;
*OPT_fprofile = *gccc::OPT_fprofile;
*OPT_fprofile_arcs = *gccc::OPT_fprofile_arcs;
*OPT_fprofile_correction = *gccc::OPT_fprofile_correction;
*OPT_fprofile_dir_ = *gccc::OPT_fprofile_dir_;
*OPT_fprofile_generate = *gccc::OPT_fprofile_generate;
*OPT_fprofile_generate_ = *gccc::OPT_fprofile_generate_;
*OPT_fprofile_use = *gccc::OPT_fprofile_use;
*OPT_fprofile_use_ = *gccc::OPT_fprofile_use_;
*OPT_fprofile_values = *gccc::OPT_fprofile_values;
*OPT_fprotect_parens = *gccc::OPT_fprotect_parens;
*OPT_frandom_seed = *gccc::OPT_frandom_seed;
*OPT_frandom_seed_ = *gccc::OPT_frandom_seed_;
*OPT_frange_check = *gccc::OPT_frange_check;
*OPT_frealloc_lhs = *gccc::OPT_frealloc_lhs;
*OPT_freciprocal_math = *gccc::OPT_freciprocal_math;
*OPT_frecord_gcc_switches = *gccc::OPT_frecord_gcc_switches;
*OPT_frecord_marker_4 = *gccc::OPT_frecord_marker_4;
*OPT_frecord_marker_8 = *gccc::OPT_frecord_marker_8;
*OPT_frecursive = *gccc::OPT_frecursive;
*OPT_freduced_reflection = *gccc::OPT_freduced_reflection;
*OPT_freg_struct_return = *gccc::OPT_freg_struct_return;
*OPT_fregmove = *gccc::OPT_fregmove;
*OPT_frename_registers = *gccc::OPT_frename_registers;
*OPT_freorder_blocks = *gccc::OPT_freorder_blocks;
*OPT_freorder_blocks_and_partition = *gccc::OPT_freorder_blocks_and_partition;
*OPT_freorder_functions = *gccc::OPT_freorder_functions;
*OPT_frepack_arrays = *gccc::OPT_frepack_arrays;
*OPT_freplace_objc_classes = *gccc::OPT_freplace_objc_classes;
*OPT_frepo = *gccc::OPT_frepo;
*OPT_frequire_return_statement = *gccc::OPT_frequire_return_statement;
*OPT_frerun_cse_after_loop = *gccc::OPT_frerun_cse_after_loop;
*OPT_freschedule_modulo_scheduled_loops = *gccc::OPT_freschedule_modulo_scheduled_loops;
*OPT_fresolution_ = *gccc::OPT_fresolution_;
*OPT_frounding_math = *gccc::OPT_frounding_math;
*OPT_frtti = *gccc::OPT_frtti;
*OPT_fsaw_java_file = *gccc::OPT_fsaw_java_file;
*OPT_fsched_critical_path_heuristic = *gccc::OPT_fsched_critical_path_heuristic;
*OPT_fsched_dep_count_heuristic = *gccc::OPT_fsched_dep_count_heuristic;
*OPT_fsched_group_heuristic = *gccc::OPT_fsched_group_heuristic;
*OPT_fsched_interblock = *gccc::OPT_fsched_interblock;
*OPT_fsched_last_insn_heuristic = *gccc::OPT_fsched_last_insn_heuristic;
*OPT_fsched_pressure = *gccc::OPT_fsched_pressure;
*OPT_fsched_rank_heuristic = *gccc::OPT_fsched_rank_heuristic;
*OPT_fsched_spec = *gccc::OPT_fsched_spec;
*OPT_fsched_spec_insn_heuristic = *gccc::OPT_fsched_spec_insn_heuristic;
*OPT_fsched_spec_load = *gccc::OPT_fsched_spec_load;
*OPT_fsched_spec_load_dangerous = *gccc::OPT_fsched_spec_load_dangerous;
*OPT_fsched_stalled_insns = *gccc::OPT_fsched_stalled_insns;
*OPT_fsched_stalled_insns_dep = *gccc::OPT_fsched_stalled_insns_dep;
*OPT_fsched_stalled_insns_dep_ = *gccc::OPT_fsched_stalled_insns_dep_;
*OPT_fsched_stalled_insns_ = *gccc::OPT_fsched_stalled_insns_;
*OPT_fsched_verbose_ = *gccc::OPT_fsched_verbose_;
*OPT_fsched2_use_superblocks = *gccc::OPT_fsched2_use_superblocks;
*OPT_fschedule_insns = *gccc::OPT_fschedule_insns;
*OPT_fschedule_insns2 = *gccc::OPT_fschedule_insns2;
*OPT_fsecond_underscore = *gccc::OPT_fsecond_underscore;
*OPT_fsection_anchors = *gccc::OPT_fsection_anchors;
*OPT_fsel_sched_pipelining = *gccc::OPT_fsel_sched_pipelining;
*OPT_fsel_sched_pipelining_outer_loops = *gccc::OPT_fsel_sched_pipelining_outer_loops;
*OPT_fsel_sched_reschedule_pipelined = *gccc::OPT_fsel_sched_reschedule_pipelined;
*OPT_fselective_scheduling = *gccc::OPT_fselective_scheduling;
*OPT_fselective_scheduling2 = *gccc::OPT_fselective_scheduling2;
*OPT_fshort_double = *gccc::OPT_fshort_double;
*OPT_fshort_enums = *gccc::OPT_fshort_enums;
*OPT_fshort_wchar = *gccc::OPT_fshort_wchar;
*OPT_fshow_column = *gccc::OPT_fshow_column;
*OPT_fsign_zero = *gccc::OPT_fsign_zero;
*OPT_fsignaling_nans = *gccc::OPT_fsignaling_nans;
*OPT_fsigned_bitfields = *gccc::OPT_fsigned_bitfields;
*OPT_fsigned_char = *gccc::OPT_fsigned_char;
*OPT_fsigned_zeros = *gccc::OPT_fsigned_zeros;
*OPT_fsingle_precision_constant = *gccc::OPT_fsingle_precision_constant;
*OPT_fsource_filename_ = *gccc::OPT_fsource_filename_;
*OPT_fsource_ = *gccc::OPT_fsource_;
*OPT_fsplit_ivs_in_unroller = *gccc::OPT_fsplit_ivs_in_unroller;
*OPT_fsplit_stack = *gccc::OPT_fsplit_stack;
*OPT_fsplit_wide_types = *gccc::OPT_fsplit_wide_types;
*OPT_fstack_check_ = *gccc::OPT_fstack_check_;
*OPT_fstack_limit = *gccc::OPT_fstack_limit;
*OPT_fstack_limit_register_ = *gccc::OPT_fstack_limit_register_;
*OPT_fstack_limit_symbol_ = *gccc::OPT_fstack_limit_symbol_;
*OPT_fstack_protector = *gccc::OPT_fstack_protector;
*OPT_fstack_protector_all = *gccc::OPT_fstack_protector_all;
*OPT_fstack_usage = *gccc::OPT_fstack_usage;
*OPT_fstats = *gccc::OPT_fstats;
*OPT_fstore_check = *gccc::OPT_fstore_check;
*OPT_fstrict_aliasing = *gccc::OPT_fstrict_aliasing;
*OPT_fstrict_enums = *gccc::OPT_fstrict_enums;
*OPT_fstrict_overflow = *gccc::OPT_fstrict_overflow;
*OPT_fstrict_volatile_bitfields = *gccc::OPT_fstrict_volatile_bitfields;
*OPT_fsyntax_only = *gccc::OPT_fsyntax_only;
*OPT_ftabstop_ = *gccc::OPT_ftabstop_;
*OPT_ftarget_ = *gccc::OPT_ftarget_;
*OPT_ftemplate_depth_ = *gccc::OPT_ftemplate_depth_;
*OPT_ftest_coverage = *gccc::OPT_ftest_coverage;
*OPT_fthread_jumps = *gccc::OPT_fthread_jumps;
*OPT_fthreadsafe_statics = *gccc::OPT_fthreadsafe_statics;
*OPT_ftime_report = *gccc::OPT_ftime_report;
*OPT_ftls_model_ = *gccc::OPT_ftls_model_;
*OPT_ftoplevel_reorder = *gccc::OPT_ftoplevel_reorder;
*OPT_ftracer = *gccc::OPT_ftracer;
*OPT_ftrapping_math = *gccc::OPT_ftrapping_math;
*OPT_ftrapv = *gccc::OPT_ftrapv;
*OPT_ftree_bit_ccp = *gccc::OPT_ftree_bit_ccp;
*OPT_ftree_builtin_call_dce = *gccc::OPT_ftree_builtin_call_dce;
*OPT_ftree_ccp = *gccc::OPT_ftree_ccp;
*OPT_ftree_ch = *gccc::OPT_ftree_ch;
*OPT_ftree_copy_prop = *gccc::OPT_ftree_copy_prop;
*OPT_ftree_copyrename = *gccc::OPT_ftree_copyrename;
*OPT_ftree_cselim = *gccc::OPT_ftree_cselim;
*OPT_ftree_dce = *gccc::OPT_ftree_dce;
*OPT_ftree_dominator_opts = *gccc::OPT_ftree_dominator_opts;
*OPT_ftree_dse = *gccc::OPT_ftree_dse;
*OPT_ftree_forwprop = *gccc::OPT_ftree_forwprop;
*OPT_ftree_fre = *gccc::OPT_ftree_fre;
*OPT_ftree_loop_distribute_patterns = *gccc::OPT_ftree_loop_distribute_patterns;
*OPT_ftree_loop_distribution = *gccc::OPT_ftree_loop_distribution;
*OPT_ftree_loop_if_convert = *gccc::OPT_ftree_loop_if_convert;
*OPT_ftree_loop_if_convert_stores = *gccc::OPT_ftree_loop_if_convert_stores;
*OPT_ftree_loop_im = *gccc::OPT_ftree_loop_im;
*OPT_ftree_loop_ivcanon = *gccc::OPT_ftree_loop_ivcanon;
*OPT_ftree_loop_optimize = *gccc::OPT_ftree_loop_optimize;
*OPT_ftree_lrs = *gccc::OPT_ftree_lrs;
*OPT_ftree_parallelize_loops_ = *gccc::OPT_ftree_parallelize_loops_;
*OPT_ftree_phiprop = *gccc::OPT_ftree_phiprop;
*OPT_ftree_pre = *gccc::OPT_ftree_pre;
*OPT_ftree_pta = *gccc::OPT_ftree_pta;
*OPT_ftree_reassoc = *gccc::OPT_ftree_reassoc;
*OPT_ftree_scev_cprop = *gccc::OPT_ftree_scev_cprop;
*OPT_ftree_sink = *gccc::OPT_ftree_sink;
*OPT_ftree_slp_vectorize = *gccc::OPT_ftree_slp_vectorize;
*OPT_ftree_sra = *gccc::OPT_ftree_sra;
*OPT_ftree_switch_conversion = *gccc::OPT_ftree_switch_conversion;
*OPT_ftree_ter = *gccc::OPT_ftree_ter;
*OPT_ftree_vect_loop_version = *gccc::OPT_ftree_vect_loop_version;
*OPT_ftree_vectorize = *gccc::OPT_ftree_vectorize;
*OPT_ftree_vectorizer_verbose_ = *gccc::OPT_ftree_vectorizer_verbose_;
*OPT_ftree_vrp = *gccc::OPT_ftree_vrp;
*OPT_funderscoring = *gccc::OPT_funderscoring;
*OPT_funit_at_a_time = *gccc::OPT_funit_at_a_time;
*OPT_funroll_all_loops = *gccc::OPT_funroll_all_loops;
*OPT_funroll_loops = *gccc::OPT_funroll_loops;
*OPT_funsafe_loop_optimizations = *gccc::OPT_funsafe_loop_optimizations;
*OPT_funsafe_math_optimizations = *gccc::OPT_funsafe_math_optimizations;
*OPT_funsigned_bitfields = *gccc::OPT_funsigned_bitfields;
*OPT_funsigned_char = *gccc::OPT_funsigned_char;
*OPT_funswitch_loops = *gccc::OPT_funswitch_loops;
*OPT_funwind_tables = *gccc::OPT_funwind_tables;
*OPT_fuse_atomic_builtins = *gccc::OPT_fuse_atomic_builtins;
*OPT_fuse_boehm_gc = *gccc::OPT_fuse_boehm_gc;
*OPT_fuse_cxa_atexit = *gccc::OPT_fuse_cxa_atexit;
*OPT_fuse_cxa_get_exception_ptr = *gccc::OPT_fuse_cxa_get_exception_ptr;
*OPT_fuse_divide_subroutine = *gccc::OPT_fuse_divide_subroutine;
*OPT_fuse_linker_plugin = *gccc::OPT_fuse_linker_plugin;
*OPT_fvar_tracking = *gccc::OPT_fvar_tracking;
*OPT_fvar_tracking_assignments = *gccc::OPT_fvar_tracking_assignments;
*OPT_fvar_tracking_assignments_toggle = *gccc::OPT_fvar_tracking_assignments_toggle;
*OPT_fvar_tracking_uninit = *gccc::OPT_fvar_tracking_uninit;
*OPT_fvariable_expansion_in_unroller = *gccc::OPT_fvariable_expansion_in_unroller;
*OPT_fvect_cost_model = *gccc::OPT_fvect_cost_model;
*OPT_fverbose_asm = *gccc::OPT_fverbose_asm;
*OPT_fvisibility_inlines_hidden = *gccc::OPT_fvisibility_inlines_hidden;
*OPT_fvisibility_ms_compat = *gccc::OPT_fvisibility_ms_compat;
*OPT_fvisibility_ = *gccc::OPT_fvisibility_;
*OPT_fvpt = *gccc::OPT_fvpt;
*OPT_fweak = *gccc::OPT_fweak;
*OPT_fweb = *gccc::OPT_fweb;
*OPT_fwhole_file = *gccc::OPT_fwhole_file;
*OPT_fwhole_program = *gccc::OPT_fwhole_program;
*OPT_fwide_exec_charset_ = *gccc::OPT_fwide_exec_charset_;
*OPT_fworking_directory = *gccc::OPT_fworking_directory;
*OPT_fwpa = *gccc::OPT_fwpa;
*OPT_fwrapv = *gccc::OPT_fwrapv;
*OPT_fzee = *gccc::OPT_fzee;
*OPT_fzero_initialized_in_bss = *gccc::OPT_fzero_initialized_in_bss;
*OPT_fzero_link = *gccc::OPT_fzero_link;
*OPT_g = *gccc::OPT_g;
*OPT_gant = *gccc::OPT_gant;
*OPT_gcoff = *gccc::OPT_gcoff;
*OPT_gdwarf_ = *gccc::OPT_gdwarf_;
*OPT_gen_decls = *gccc::OPT_gen_decls;
*OPT_ggdb = *gccc::OPT_ggdb;
*OPT_gnat = *gccc::OPT_gnat;
*OPT_gnatO = *gccc::OPT_gnatO;
*OPT_gno_strict_dwarf = *gccc::OPT_gno_strict_dwarf;
*OPT_gstabs = *gccc::OPT_gstabs;
*OPT_gstabs_ = *gccc::OPT_gstabs_;
*OPT_gstrict_dwarf = *gccc::OPT_gstrict_dwarf;
*OPT_gtoggle = *gccc::OPT_gtoggle;
*OPT_gvms = *gccc::OPT_gvms;
*OPT_gxcoff = *gccc::OPT_gxcoff;
*OPT_gxcoff_ = *gccc::OPT_gxcoff_;
*OPT_h = *gccc::OPT_h;
*OPT_idirafter = *gccc::OPT_idirafter;
*OPT_imacros = *gccc::OPT_imacros;
*OPT_imultiarch = *gccc::OPT_imultiarch;
*OPT_imultilib = *gccc::OPT_imultilib;
*OPT_include = *gccc::OPT_include;
*OPT_iplugindir_ = *gccc::OPT_iplugindir_;
*OPT_iprefix = *gccc::OPT_iprefix;
*OPT_iquote = *gccc::OPT_iquote;
*OPT_isysroot = *gccc::OPT_isysroot;
*OPT_isystem = *gccc::OPT_isystem;
*OPT_iwithprefix = *gccc::OPT_iwithprefix;
*OPT_iwithprefixbefore = *gccc::OPT_iwithprefixbefore;
*OPT_k8 = *gccc::OPT_k8;
*OPT_l = *gccc::OPT_l;
*OPT_lang_asm = *gccc::OPT_lang_asm;
*OPT_m128bit_long_double = *gccc::OPT_m128bit_long_double;
*OPT_m32 = *gccc::OPT_m32;
*OPT_m3dnow = *gccc::OPT_m3dnow;
*OPT_m3dnowa = *gccc::OPT_m3dnowa;
*OPT_m64 = *gccc::OPT_m64;
*OPT_m80387 = *gccc::OPT_m80387;
*OPT_m8bit_idiv = *gccc::OPT_m8bit_idiv;
*OPT_m96bit_long_double = *gccc::OPT_m96bit_long_double;
*OPT_mabi_ = *gccc::OPT_mabi_;
*OPT_mabm = *gccc::OPT_mabm;
*OPT_maccumulate_outgoing_args = *gccc::OPT_maccumulate_outgoing_args;
*OPT_maes = *gccc::OPT_maes;
*OPT_malign_double = *gccc::OPT_malign_double;
*OPT_malign_functions_ = *gccc::OPT_malign_functions_;
*OPT_malign_jumps_ = *gccc::OPT_malign_jumps_;
*OPT_malign_loops_ = *gccc::OPT_malign_loops_;
*OPT_malign_stringops = *gccc::OPT_malign_stringops;
*OPT_mandroid = *gccc::OPT_mandroid;
*OPT_march_ = *gccc::OPT_march_;
*OPT_masm_ = *gccc::OPT_masm_;
*OPT_mavx = *gccc::OPT_mavx;
*OPT_mavx256_split_unaligned_load = *gccc::OPT_mavx256_split_unaligned_load;
*OPT_mavx256_split_unaligned_store = *gccc::OPT_mavx256_split_unaligned_store;
*OPT_mbionic = *gccc::OPT_mbionic;
*OPT_mbmi = *gccc::OPT_mbmi;
*OPT_mbranch_cost_ = *gccc::OPT_mbranch_cost_;
*OPT_mcld = *gccc::OPT_mcld;
*OPT_mcmodel_ = *gccc::OPT_mcmodel_;
*OPT_mcrc32 = *gccc::OPT_mcrc32;
*OPT_mcx16 = *gccc::OPT_mcx16;
*OPT_mdispatch_scheduler = *gccc::OPT_mdispatch_scheduler;
*OPT_mf16c = *gccc::OPT_mf16c;
*OPT_mfancy_math_387 = *gccc::OPT_mfancy_math_387;
*OPT_mfentry = *gccc::OPT_mfentry;
*OPT_mfma = *gccc::OPT_mfma;
*OPT_mfma4 = *gccc::OPT_mfma4;
*OPT_mforce_drap = *gccc::OPT_mforce_drap;
*OPT_mfp_ret_in_387 = *gccc::OPT_mfp_ret_in_387;
*OPT_mfpmath_ = *gccc::OPT_mfpmath_;
*OPT_mfsgsbase = *gccc::OPT_mfsgsbase;
*OPT_mglibc = *gccc::OPT_mglibc;
*OPT_mhard_float = *gccc::OPT_mhard_float;
*OPT_mieee_fp = *gccc::OPT_mieee_fp;
*OPT_mincoming_stack_boundary_ = *gccc::OPT_mincoming_stack_boundary_;
*OPT_minline_all_stringops = *gccc::OPT_minline_all_stringops;
*OPT_minline_stringops_dynamically = *gccc::OPT_minline_stringops_dynamically;
*OPT_mlarge_data_threshold_ = *gccc::OPT_mlarge_data_threshold_;
*OPT_mlwp = *gccc::OPT_mlwp;
*OPT_mmmx = *gccc::OPT_mmmx;
*OPT_mmovbe = *gccc::OPT_mmovbe;
*OPT_mms_bitfields = *gccc::OPT_mms_bitfields;
*OPT_mno_align_stringops = *gccc::OPT_mno_align_stringops;
*OPT_mno_fancy_math_387 = *gccc::OPT_mno_fancy_math_387;
*OPT_mno_push_args = *gccc::OPT_mno_push_args;
*OPT_mno_red_zone = *gccc::OPT_mno_red_zone;
*OPT_mno_sse4 = *gccc::OPT_mno_sse4;
*OPT_momit_leaf_frame_pointer = *gccc::OPT_momit_leaf_frame_pointer;
*OPT_mpc = *gccc::OPT_mpc;
*OPT_mpclmul = *gccc::OPT_mpclmul;
*OPT_mpopcnt = *gccc::OPT_mpopcnt;
*OPT_mprefer_avx128 = *gccc::OPT_mprefer_avx128;
*OPT_mpreferred_stack_boundary_ = *gccc::OPT_mpreferred_stack_boundary_;
*OPT_mpush_args = *gccc::OPT_mpush_args;
*OPT_mrdrnd = *gccc::OPT_mrdrnd;
*OPT_mrecip = *gccc::OPT_mrecip;
*OPT_mred_zone = *gccc::OPT_mred_zone;
*OPT_mregparm_ = *gccc::OPT_mregparm_;
*OPT_mrtd = *gccc::OPT_mrtd;
*OPT_msahf = *gccc::OPT_msahf;
*OPT_msoft_float = *gccc::OPT_msoft_float;
*OPT_msse = *gccc::OPT_msse;
*OPT_msse2 = *gccc::OPT_msse2;
*OPT_msse2avx = *gccc::OPT_msse2avx;
*OPT_msse3 = *gccc::OPT_msse3;
*OPT_msse4 = *gccc::OPT_msse4;
*OPT_msse4_1 = *gccc::OPT_msse4_1;
*OPT_msse4_2 = *gccc::OPT_msse4_2;
*OPT_msse4a = *gccc::OPT_msse4a;
*OPT_msseregparm = *gccc::OPT_msseregparm;
*OPT_mssse3 = *gccc::OPT_mssse3;
*OPT_mstack_arg_probe = *gccc::OPT_mstack_arg_probe;
*OPT_mstackrealign = *gccc::OPT_mstackrealign;
*OPT_mstringop_strategy_ = *gccc::OPT_mstringop_strategy_;
*OPT_mtbm = *gccc::OPT_mtbm;
*OPT_mtls_dialect_ = *gccc::OPT_mtls_dialect_;
*OPT_mtls_direct_seg_refs = *gccc::OPT_mtls_direct_seg_refs;
*OPT_mtune_ = *gccc::OPT_mtune_;
*OPT_muclibc = *gccc::OPT_muclibc;
*OPT_mveclibabi_ = *gccc::OPT_mveclibabi_;
*OPT_mvect8_ret_in_mem = *gccc::OPT_mvect8_ret_in_mem;
*OPT_mvzeroupper = *gccc::OPT_mvzeroupper;
*OPT_mxop = *gccc::OPT_mxop;
*OPT_n = *gccc::OPT_n;
*OPT_no_canonical_prefixes = *gccc::OPT_no_canonical_prefixes;
*OPT_no_integrated_cpp = *gccc::OPT_no_integrated_cpp;
*OPT_nocpp = *gccc::OPT_nocpp;
*OPT_nodefaultlibs = *gccc::OPT_nodefaultlibs;
*OPT_nostartfiles = *gccc::OPT_nostartfiles;
*OPT_nostdinc = *gccc::OPT_nostdinc;
*OPT_nostdinc__ = *gccc::OPT_nostdinc__;
*OPT_nostdlib = *gccc::OPT_nostdlib;
*OPT_o = *gccc::OPT_o;
*OPT_p = *gccc::OPT_p;
*OPT_pass_exit_codes = *gccc::OPT_pass_exit_codes;
*OPT_pedantic = *gccc::OPT_pedantic;
*OPT_pedantic_errors = *gccc::OPT_pedantic_errors;
*OPT_pg = *gccc::OPT_pg;
*OPT_pie = *gccc::OPT_pie;
*OPT_pipe = *gccc::OPT_pipe;
*OPT_posix = *gccc::OPT_posix;
*OPT_print_file_name_ = *gccc::OPT_print_file_name_;
*OPT_print_libgcc_file_name = *gccc::OPT_print_libgcc_file_name;
*OPT_print_multi_directory = *gccc::OPT_print_multi_directory;
*OPT_print_multi_lib = *gccc::OPT_print_multi_lib;
*OPT_print_multi_os_directory = *gccc::OPT_print_multi_os_directory;
*OPT_print_multiarch = *gccc::OPT_print_multiarch;
*OPT_print_objc_runtime_info = *gccc::OPT_print_objc_runtime_info;
*OPT_print_prog_name_ = *gccc::OPT_print_prog_name_;
*OPT_print_search_dirs = *gccc::OPT_print_search_dirs;
*OPT_print_sysroot = *gccc::OPT_print_sysroot;
*OPT_print_sysroot_headers_suffix = *gccc::OPT_print_sysroot_headers_suffix;
*OPT_profile = *gccc::OPT_profile;
*OPT_pthread = *gccc::OPT_pthread;
*OPT_quiet = *gccc::OPT_quiet;
*OPT_r = *gccc::OPT_r;
*OPT_rdynamic = *gccc::OPT_rdynamic;
*OPT_remap = *gccc::OPT_remap;
*OPT_s = *gccc::OPT_s;
*OPT_s_bc_abi = *gccc::OPT_s_bc_abi;
*OPT_save_temps = *gccc::OPT_save_temps;
*OPT_save_temps_ = *gccc::OPT_save_temps_;
*OPT_shared = *gccc::OPT_shared;
*OPT_shared_libgcc = *gccc::OPT_shared_libgcc;
*OPT_specs_ = *gccc::OPT_specs_;
*OPT_static = *gccc::OPT_static;
*OPT_static_libgcc = *gccc::OPT_static_libgcc;
*OPT_static_libgcj = *gccc::OPT_static_libgcj;
*OPT_static_libgfortran = *gccc::OPT_static_libgfortran;
*OPT_static_libgo = *gccc::OPT_static_libgo;
*OPT_static_libstdc__ = *gccc::OPT_static_libstdc__;
*OPT_std_c__0x = *gccc::OPT_std_c__0x;
*OPT_std_c__98 = *gccc::OPT_std_c__98;
*OPT_std_c1x = *gccc::OPT_std_c1x;
*OPT_std_c90 = *gccc::OPT_std_c90;
*OPT_std_c99 = *gccc::OPT_std_c99;
*OPT_std_f2003 = *gccc::OPT_std_f2003;
*OPT_std_f2008 = *gccc::OPT_std_f2008;
*OPT_std_f95 = *gccc::OPT_std_f95;
*OPT_std_gnu = *gccc::OPT_std_gnu;
*OPT_std_gnu__0x = *gccc::OPT_std_gnu__0x;
*OPT_std_gnu__98 = *gccc::OPT_std_gnu__98;
*OPT_std_gnu1x = *gccc::OPT_std_gnu1x;
*OPT_std_gnu90 = *gccc::OPT_std_gnu90;
*OPT_std_gnu99 = *gccc::OPT_std_gnu99;
*OPT_std_iso9899_199409 = *gccc::OPT_std_iso9899_199409;
*OPT_std_legacy = *gccc::OPT_std_legacy;
*OPT_symbolic = *gccc::OPT_symbolic;
*OPT_t = *gccc::OPT_t;
*OPT_time = *gccc::OPT_time;
*OPT_time_ = *gccc::OPT_time_;
*OPT_tno_android_cc = *gccc::OPT_tno_android_cc;
*OPT_tno_android_ld = *gccc::OPT_tno_android_ld;
*OPT_traditional = *gccc::OPT_traditional;
*OPT_traditional_cpp = *gccc::OPT_traditional_cpp;
*OPT_trigraphs = *gccc::OPT_trigraphs;
*OPT_u = *gccc::OPT_u;
*OPT_undef = *gccc::OPT_undef;
*OPT_v = *gccc::OPT_v;
*OPT_version = *gccc::OPT_version;
*OPT_w = *gccc::OPT_w;
*OPT_wrapper = *gccc::OPT_wrapper;
*OPT_x = *gccc::OPT_x;
*OPT_z = *gccc::OPT_z;
*N_OPTS = *gccc::N_OPTS;
*OPT_SPECIAL_unknown = *gccc::OPT_SPECIAL_unknown;
*OPT_SPECIAL_ignore = *gccc::OPT_SPECIAL_ignore;
*OPT_SPECIAL_program_name = *gccc::OPT_SPECIAL_program_name;
*OPT_SPECIAL_input_file = *gccc::OPT_SPECIAL_input_file;
*debug_type_names = *gccc::debug_type_names;
*in_lto_p = *gccc::in_lto_p;
*final_insns_dump_p = *gccc::final_insns_dump_p;
*flag_permissive = *gccc::flag_permissive;
*flag_next_runtime = *gccc::flag_next_runtime;

my %__default_target_flag_state_hash;
tie %__default_target_flag_state_hash,"gcc::target_flag_state", $gccc::default_target_flag_state;
$default_target_flag_state= \%__default_target_flag_state_hash;
bless $default_target_flag_state, gcc::target_flag_state;
*dump_for_graph = *gccc::dump_for_graph;
*ERROR_MARK = *gccc::ERROR_MARK;
*IDENTIFIER_NODE = *gccc::IDENTIFIER_NODE;
*TREE_LIST = *gccc::TREE_LIST;
*TREE_VEC = *gccc::TREE_VEC;
*BLOCK = *gccc::BLOCK;
*OFFSET_TYPE = *gccc::OFFSET_TYPE;
*ENUMERAL_TYPE = *gccc::ENUMERAL_TYPE;
*BOOLEAN_TYPE = *gccc::BOOLEAN_TYPE;
*INTEGER_TYPE = *gccc::INTEGER_TYPE;
*REAL_TYPE = *gccc::REAL_TYPE;
*POINTER_TYPE = *gccc::POINTER_TYPE;
*REFERENCE_TYPE = *gccc::REFERENCE_TYPE;
*NULLPTR_TYPE = *gccc::NULLPTR_TYPE;
*FIXED_POINT_TYPE = *gccc::FIXED_POINT_TYPE;
*COMPLEX_TYPE = *gccc::COMPLEX_TYPE;
*VECTOR_TYPE = *gccc::VECTOR_TYPE;
*ARRAY_TYPE = *gccc::ARRAY_TYPE;
*RECORD_TYPE = *gccc::RECORD_TYPE;
*UNION_TYPE = *gccc::UNION_TYPE;
*QUAL_UNION_TYPE = *gccc::QUAL_UNION_TYPE;
*VOID_TYPE = *gccc::VOID_TYPE;
*FUNCTION_TYPE = *gccc::FUNCTION_TYPE;
*METHOD_TYPE = *gccc::METHOD_TYPE;
*LANG_TYPE = *gccc::LANG_TYPE;
*INTEGER_CST = *gccc::INTEGER_CST;
*REAL_CST = *gccc::REAL_CST;
*FIXED_CST = *gccc::FIXED_CST;
*COMPLEX_CST = *gccc::COMPLEX_CST;
*VECTOR_CST = *gccc::VECTOR_CST;
*STRING_CST = *gccc::STRING_CST;
*FUNCTION_DECL = *gccc::FUNCTION_DECL;
*LABEL_DECL = *gccc::LABEL_DECL;
*FIELD_DECL = *gccc::FIELD_DECL;
*VAR_DECL = *gccc::VAR_DECL;
*CONST_DECL = *gccc::CONST_DECL;
*PARM_DECL = *gccc::PARM_DECL;
*TYPE_DECL = *gccc::TYPE_DECL;
*RESULT_DECL = *gccc::RESULT_DECL;
*DEBUG_EXPR_DECL = *gccc::DEBUG_EXPR_DECL;
*NAMESPACE_DECL = *gccc::NAMESPACE_DECL;
*IMPORTED_DECL = *gccc::IMPORTED_DECL;
*TRANSLATION_UNIT_DECL = *gccc::TRANSLATION_UNIT_DECL;
*COMPONENT_REF = *gccc::COMPONENT_REF;
*BIT_FIELD_REF = *gccc::BIT_FIELD_REF;
*REALPART_EXPR = *gccc::REALPART_EXPR;
*IMAGPART_EXPR = *gccc::IMAGPART_EXPR;
*ARRAY_REF = *gccc::ARRAY_REF;
*ARRAY_RANGE_REF = *gccc::ARRAY_RANGE_REF;
*INDIRECT_REF = *gccc::INDIRECT_REF;
*OBJ_TYPE_REF = *gccc::OBJ_TYPE_REF;
*CONSTRUCTOR = *gccc::CONSTRUCTOR;
*COMPOUND_EXPR = *gccc::COMPOUND_EXPR;
*MODIFY_EXPR = *gccc::MODIFY_EXPR;
*INIT_EXPR = *gccc::INIT_EXPR;
*TARGET_EXPR = *gccc::TARGET_EXPR;
*COND_EXPR = *gccc::COND_EXPR;
*VEC_COND_EXPR = *gccc::VEC_COND_EXPR;
*BIND_EXPR = *gccc::BIND_EXPR;
*CALL_EXPR = *gccc::CALL_EXPR;
*WITH_CLEANUP_EXPR = *gccc::WITH_CLEANUP_EXPR;
*CLEANUP_POINT_EXPR = *gccc::CLEANUP_POINT_EXPR;
*PLACEHOLDER_EXPR = *gccc::PLACEHOLDER_EXPR;
*PLUS_EXPR = *gccc::PLUS_EXPR;
*MINUS_EXPR = *gccc::MINUS_EXPR;
*MULT_EXPR = *gccc::MULT_EXPR;
*POINTER_PLUS_EXPR = *gccc::POINTER_PLUS_EXPR;
*TRUNC_DIV_EXPR = *gccc::TRUNC_DIV_EXPR;
*CEIL_DIV_EXPR = *gccc::CEIL_DIV_EXPR;
*FLOOR_DIV_EXPR = *gccc::FLOOR_DIV_EXPR;
*ROUND_DIV_EXPR = *gccc::ROUND_DIV_EXPR;
*TRUNC_MOD_EXPR = *gccc::TRUNC_MOD_EXPR;
*CEIL_MOD_EXPR = *gccc::CEIL_MOD_EXPR;
*FLOOR_MOD_EXPR = *gccc::FLOOR_MOD_EXPR;
*ROUND_MOD_EXPR = *gccc::ROUND_MOD_EXPR;
*RDIV_EXPR = *gccc::RDIV_EXPR;
*EXACT_DIV_EXPR = *gccc::EXACT_DIV_EXPR;
*FIX_TRUNC_EXPR = *gccc::FIX_TRUNC_EXPR;
*FLOAT_EXPR = *gccc::FLOAT_EXPR;
*NEGATE_EXPR = *gccc::NEGATE_EXPR;
*MIN_EXPR = *gccc::MIN_EXPR;
*MAX_EXPR = *gccc::MAX_EXPR;
*ABS_EXPR = *gccc::ABS_EXPR;
*LSHIFT_EXPR = *gccc::LSHIFT_EXPR;
*RSHIFT_EXPR = *gccc::RSHIFT_EXPR;
*LROTATE_EXPR = *gccc::LROTATE_EXPR;
*RROTATE_EXPR = *gccc::RROTATE_EXPR;
*BIT_IOR_EXPR = *gccc::BIT_IOR_EXPR;
*BIT_XOR_EXPR = *gccc::BIT_XOR_EXPR;
*BIT_AND_EXPR = *gccc::BIT_AND_EXPR;
*BIT_NOT_EXPR = *gccc::BIT_NOT_EXPR;
*TRUTH_ANDIF_EXPR = *gccc::TRUTH_ANDIF_EXPR;
*TRUTH_ORIF_EXPR = *gccc::TRUTH_ORIF_EXPR;
*TRUTH_AND_EXPR = *gccc::TRUTH_AND_EXPR;
*TRUTH_OR_EXPR = *gccc::TRUTH_OR_EXPR;
*TRUTH_XOR_EXPR = *gccc::TRUTH_XOR_EXPR;
*TRUTH_NOT_EXPR = *gccc::TRUTH_NOT_EXPR;
*LT_EXPR = *gccc::LT_EXPR;
*LE_EXPR = *gccc::LE_EXPR;
*GT_EXPR = *gccc::GT_EXPR;
*GE_EXPR = *gccc::GE_EXPR;
*EQ_EXPR = *gccc::EQ_EXPR;
*NE_EXPR = *gccc::NE_EXPR;
*UNORDERED_EXPR = *gccc::UNORDERED_EXPR;
*ORDERED_EXPR = *gccc::ORDERED_EXPR;
*UNLT_EXPR = *gccc::UNLT_EXPR;
*UNLE_EXPR = *gccc::UNLE_EXPR;
*UNGT_EXPR = *gccc::UNGT_EXPR;
*UNGE_EXPR = *gccc::UNGE_EXPR;
*UNEQ_EXPR = *gccc::UNEQ_EXPR;
*LTGT_EXPR = *gccc::LTGT_EXPR;
*RANGE_EXPR = *gccc::RANGE_EXPR;
*PAREN_EXPR = *gccc::PAREN_EXPR;
*CONVERT_EXPR = *gccc::CONVERT_EXPR;
*ADDR_SPACE_CONVERT_EXPR = *gccc::ADDR_SPACE_CONVERT_EXPR;
*FIXED_CONVERT_EXPR = *gccc::FIXED_CONVERT_EXPR;
*NOP_EXPR = *gccc::NOP_EXPR;
*NON_LVALUE_EXPR = *gccc::NON_LVALUE_EXPR;
*VIEW_CONVERT_EXPR = *gccc::VIEW_CONVERT_EXPR;
*COMPOUND_LITERAL_EXPR = *gccc::COMPOUND_LITERAL_EXPR;
*SAVE_EXPR = *gccc::SAVE_EXPR;
*ADDR_EXPR = *gccc::ADDR_EXPR;
*FDESC_EXPR = *gccc::FDESC_EXPR;
*COMPLEX_EXPR = *gccc::COMPLEX_EXPR;
*CONJ_EXPR = *gccc::CONJ_EXPR;
*PREDECREMENT_EXPR = *gccc::PREDECREMENT_EXPR;
*PREINCREMENT_EXPR = *gccc::PREINCREMENT_EXPR;
*POSTDECREMENT_EXPR = *gccc::POSTDECREMENT_EXPR;
*POSTINCREMENT_EXPR = *gccc::POSTINCREMENT_EXPR;
*VA_ARG_EXPR = *gccc::VA_ARG_EXPR;
*TRY_CATCH_EXPR = *gccc::TRY_CATCH_EXPR;
*TRY_FINALLY_EXPR = *gccc::TRY_FINALLY_EXPR;
*DECL_EXPR = *gccc::DECL_EXPR;
*LABEL_EXPR = *gccc::LABEL_EXPR;
*GOTO_EXPR = *gccc::GOTO_EXPR;
*RETURN_EXPR = *gccc::RETURN_EXPR;
*EXIT_EXPR = *gccc::EXIT_EXPR;
*LOOP_EXPR = *gccc::LOOP_EXPR;
*SWITCH_EXPR = *gccc::SWITCH_EXPR;
*CASE_LABEL_EXPR = *gccc::CASE_LABEL_EXPR;
*ASM_EXPR = *gccc::ASM_EXPR;
*SSA_NAME = *gccc::SSA_NAME;
*CATCH_EXPR = *gccc::CATCH_EXPR;
*EH_FILTER_EXPR = *gccc::EH_FILTER_EXPR;
*SCEV_KNOWN = *gccc::SCEV_KNOWN;
*SCEV_NOT_KNOWN = *gccc::SCEV_NOT_KNOWN;
*POLYNOMIAL_CHREC = *gccc::POLYNOMIAL_CHREC;
*STATEMENT_LIST = *gccc::STATEMENT_LIST;
*ASSERT_EXPR = *gccc::ASSERT_EXPR;
*TREE_BINFO = *gccc::TREE_BINFO;
*WITH_SIZE_EXPR = *gccc::WITH_SIZE_EXPR;
*REALIGN_LOAD_EXPR = *gccc::REALIGN_LOAD_EXPR;
*TARGET_MEM_REF = *gccc::TARGET_MEM_REF;
*MEM_REF = *gccc::MEM_REF;
*OMP_PARALLEL = *gccc::OMP_PARALLEL;
*OMP_TASK = *gccc::OMP_TASK;
*OMP_FOR = *gccc::OMP_FOR;
*OMP_SECTIONS = *gccc::OMP_SECTIONS;
*OMP_SINGLE = *gccc::OMP_SINGLE;
*OMP_SECTION = *gccc::OMP_SECTION;
*OMP_MASTER = *gccc::OMP_MASTER;
*OMP_ORDERED = *gccc::OMP_ORDERED;
*OMP_CRITICAL = *gccc::OMP_CRITICAL;
*OMP_ATOMIC = *gccc::OMP_ATOMIC;
*OMP_CLAUSE = *gccc::OMP_CLAUSE;
*REDUC_MAX_EXPR = *gccc::REDUC_MAX_EXPR;
*REDUC_MIN_EXPR = *gccc::REDUC_MIN_EXPR;
*REDUC_PLUS_EXPR = *gccc::REDUC_PLUS_EXPR;
*DOT_PROD_EXPR = *gccc::DOT_PROD_EXPR;
*WIDEN_SUM_EXPR = *gccc::WIDEN_SUM_EXPR;
*WIDEN_MULT_EXPR = *gccc::WIDEN_MULT_EXPR;
*WIDEN_MULT_PLUS_EXPR = *gccc::WIDEN_MULT_PLUS_EXPR;
*WIDEN_MULT_MINUS_EXPR = *gccc::WIDEN_MULT_MINUS_EXPR;
*FMA_EXPR = *gccc::FMA_EXPR;
*VEC_LSHIFT_EXPR = *gccc::VEC_LSHIFT_EXPR;
*VEC_RSHIFT_EXPR = *gccc::VEC_RSHIFT_EXPR;
*VEC_WIDEN_MULT_HI_EXPR = *gccc::VEC_WIDEN_MULT_HI_EXPR;
*VEC_WIDEN_MULT_LO_EXPR = *gccc::VEC_WIDEN_MULT_LO_EXPR;
*VEC_UNPACK_HI_EXPR = *gccc::VEC_UNPACK_HI_EXPR;
*VEC_UNPACK_LO_EXPR = *gccc::VEC_UNPACK_LO_EXPR;
*VEC_UNPACK_FLOAT_HI_EXPR = *gccc::VEC_UNPACK_FLOAT_HI_EXPR;
*VEC_UNPACK_FLOAT_LO_EXPR = *gccc::VEC_UNPACK_FLOAT_LO_EXPR;
*VEC_PACK_TRUNC_EXPR = *gccc::VEC_PACK_TRUNC_EXPR;
*VEC_PACK_SAT_EXPR = *gccc::VEC_PACK_SAT_EXPR;
*VEC_PACK_FIX_TRUNC_EXPR = *gccc::VEC_PACK_FIX_TRUNC_EXPR;
*VEC_EXTRACT_EVEN_EXPR = *gccc::VEC_EXTRACT_EVEN_EXPR;
*VEC_EXTRACT_ODD_EXPR = *gccc::VEC_EXTRACT_ODD_EXPR;
*VEC_INTERLEAVE_HIGH_EXPR = *gccc::VEC_INTERLEAVE_HIGH_EXPR;
*VEC_INTERLEAVE_LOW_EXPR = *gccc::VEC_INTERLEAVE_LOW_EXPR;
*PREDICT_EXPR = *gccc::PREDICT_EXPR;
*OPTIMIZATION_NODE = *gccc::OPTIMIZATION_NODE;
*TARGET_OPTION_NODE = *gccc::TARGET_OPTION_NODE;
*LAST_AND_UNUSED_TREE_CODE = *gccc::LAST_AND_UNUSED_TREE_CODE;
*C_MAYBE_CONST_EXPR = *gccc::C_MAYBE_CONST_EXPR;
*EXCESS_PRECISION_EXPR = *gccc::EXCESS_PRECISION_EXPR;
*UNCONSTRAINED_ARRAY_TYPE = *gccc::UNCONSTRAINED_ARRAY_TYPE;
*UNCONSTRAINED_ARRAY_REF = *gccc::UNCONSTRAINED_ARRAY_REF;
*NULL_EXPR = *gccc::NULL_EXPR;
*PLUS_NOMOD_EXPR = *gccc::PLUS_NOMOD_EXPR;
*MINUS_NOMOD_EXPR = *gccc::MINUS_NOMOD_EXPR;
*ATTR_ADDR_EXPR = *gccc::ATTR_ADDR_EXPR;
*STMT_STMT = *gccc::STMT_STMT;
*LOOP_STMT = *gccc::LOOP_STMT;
*EXIT_STMT = *gccc::EXIT_STMT;
*OFFSET_REF = *gccc::OFFSET_REF;
*PTRMEM_CST = *gccc::PTRMEM_CST;
*NEW_EXPR = *gccc::NEW_EXPR;
*VEC_NEW_EXPR = *gccc::VEC_NEW_EXPR;
*DELETE_EXPR = *gccc::DELETE_EXPR;
*VEC_DELETE_EXPR = *gccc::VEC_DELETE_EXPR;
*SCOPE_REF = *gccc::SCOPE_REF;
*MEMBER_REF = *gccc::MEMBER_REF;
*TYPE_EXPR = *gccc::TYPE_EXPR;
*AGGR_INIT_EXPR = *gccc::AGGR_INIT_EXPR;
*VEC_INIT_EXPR = *gccc::VEC_INIT_EXPR;
*THROW_EXPR = *gccc::THROW_EXPR;
*EMPTY_CLASS_EXPR = *gccc::EMPTY_CLASS_EXPR;
*BASELINK = *gccc::BASELINK;
*TEMPLATE_DECL = *gccc::TEMPLATE_DECL;
*TEMPLATE_PARM_INDEX = *gccc::TEMPLATE_PARM_INDEX;
*TEMPLATE_TEMPLATE_PARM = *gccc::TEMPLATE_TEMPLATE_PARM;
*TEMPLATE_TYPE_PARM = *gccc::TEMPLATE_TYPE_PARM;
*TYPENAME_TYPE = *gccc::TYPENAME_TYPE;
*TYPEOF_TYPE = *gccc::TYPEOF_TYPE;
*BOUND_TEMPLATE_TEMPLATE_PARM = *gccc::BOUND_TEMPLATE_TEMPLATE_PARM;
*UNBOUND_CLASS_TEMPLATE = *gccc::UNBOUND_CLASS_TEMPLATE;
*USING_DECL = *gccc::USING_DECL;
*USING_STMT = *gccc::USING_STMT;
*DEFAULT_ARG = *gccc::DEFAULT_ARG;
*TEMPLATE_ID_EXPR = *gccc::TEMPLATE_ID_EXPR;
*OVERLOAD = *gccc::OVERLOAD;
*PSEUDO_DTOR_EXPR = *gccc::PSEUDO_DTOR_EXPR;
*MODOP_EXPR = *gccc::MODOP_EXPR;
*CAST_EXPR = *gccc::CAST_EXPR;
*REINTERPRET_CAST_EXPR = *gccc::REINTERPRET_CAST_EXPR;
*CONST_CAST_EXPR = *gccc::CONST_CAST_EXPR;
*STATIC_CAST_EXPR = *gccc::STATIC_CAST_EXPR;
*DYNAMIC_CAST_EXPR = *gccc::DYNAMIC_CAST_EXPR;
*DOTSTAR_EXPR = *gccc::DOTSTAR_EXPR;
*TYPEID_EXPR = *gccc::TYPEID_EXPR;
*NOEXCEPT_EXPR = *gccc::NOEXCEPT_EXPR;
*NON_DEPENDENT_EXPR = *gccc::NON_DEPENDENT_EXPR;
*CTOR_INITIALIZER = *gccc::CTOR_INITIALIZER;
*TRY_BLOCK = *gccc::TRY_BLOCK;
*EH_SPEC_BLOCK = *gccc::EH_SPEC_BLOCK;
*HANDLER = *gccc::HANDLER;
*MUST_NOT_THROW_EXPR = *gccc::MUST_NOT_THROW_EXPR;
*CLEANUP_STMT = *gccc::CLEANUP_STMT;
*IF_STMT = *gccc::IF_STMT;
*FOR_STMT = *gccc::FOR_STMT;
*RANGE_FOR_STMT = *gccc::RANGE_FOR_STMT;
*WHILE_STMT = *gccc::WHILE_STMT;
*DO_STMT = *gccc::DO_STMT;
*BREAK_STMT = *gccc::BREAK_STMT;
*CONTINUE_STMT = *gccc::CONTINUE_STMT;
*SWITCH_STMT = *gccc::SWITCH_STMT;
*EXPR_STMT = *gccc::EXPR_STMT;
*TAG_DEFN = *gccc::TAG_DEFN;
*OFFSETOF_EXPR = *gccc::OFFSETOF_EXPR;
*SIZEOF_EXPR = *gccc::SIZEOF_EXPR;
*ARROW_EXPR = *gccc::ARROW_EXPR;
*ALIGNOF_EXPR = *gccc::ALIGNOF_EXPR;
*AT_ENCODE_EXPR = *gccc::AT_ENCODE_EXPR;
*STMT_EXPR = *gccc::STMT_EXPR;
*UNARY_PLUS_EXPR = *gccc::UNARY_PLUS_EXPR;
*STATIC_ASSERT = *gccc::STATIC_ASSERT;
*TYPE_ARGUMENT_PACK = *gccc::TYPE_ARGUMENT_PACK;
*NONTYPE_ARGUMENT_PACK = *gccc::NONTYPE_ARGUMENT_PACK;
*TYPE_PACK_EXPANSION = *gccc::TYPE_PACK_EXPANSION;
*EXPR_PACK_EXPANSION = *gccc::EXPR_PACK_EXPANSION;
*ARGUMENT_PACK_SELECT = *gccc::ARGUMENT_PACK_SELECT;
*TRAIT_EXPR = *gccc::TRAIT_EXPR;
*LAMBDA_EXPR = *gccc::LAMBDA_EXPR;
*DECLTYPE_TYPE = *gccc::DECLTYPE_TYPE;
*TEMPLATE_INFO = *gccc::TEMPLATE_INFO;
*URSHIFT_EXPR = *gccc::URSHIFT_EXPR;
*COMPARE_EXPR = *gccc::COMPARE_EXPR;
*COMPARE_L_EXPR = *gccc::COMPARE_L_EXPR;
*COMPARE_G_EXPR = *gccc::COMPARE_G_EXPR;
*CLASS_INTERFACE_TYPE = *gccc::CLASS_INTERFACE_TYPE;
*CLASS_IMPLEMENTATION_TYPE = *gccc::CLASS_IMPLEMENTATION_TYPE;
*CATEGORY_INTERFACE_TYPE = *gccc::CATEGORY_INTERFACE_TYPE;
*CATEGORY_IMPLEMENTATION_TYPE = *gccc::CATEGORY_IMPLEMENTATION_TYPE;
*PROTOCOL_INTERFACE_TYPE = *gccc::PROTOCOL_INTERFACE_TYPE;
*KEYWORD_DECL = *gccc::KEYWORD_DECL;
*INSTANCE_METHOD_DECL = *gccc::INSTANCE_METHOD_DECL;
*CLASS_METHOD_DECL = *gccc::CLASS_METHOD_DECL;
*PROPERTY_DECL = *gccc::PROPERTY_DECL;
*MESSAGE_SEND_EXPR = *gccc::MESSAGE_SEND_EXPR;
*CLASS_REFERENCE_EXPR = *gccc::CLASS_REFERENCE_EXPR;
*PROPERTY_REF = *gccc::PROPERTY_REF;
*MAX_TREE_CODES = *gccc::MAX_TREE_CODES;
*tree_contains_struct = *gccc::tree_contains_struct;
*tcc_exceptional = *gccc::tcc_exceptional;
*tcc_constant = *gccc::tcc_constant;
*tcc_type = *gccc::tcc_type;
*tcc_declaration = *gccc::tcc_declaration;
*tcc_reference = *gccc::tcc_reference;
*tcc_comparison = *gccc::tcc_comparison;
*tcc_unary = *gccc::tcc_unary;
*tcc_binary = *gccc::tcc_binary;
*tcc_statement = *gccc::tcc_statement;
*tcc_vl_exp = *gccc::tcc_vl_exp;
*tcc_expression = *gccc::tcc_expression;
*tree_code_class_strings = *gccc::tree_code_class_strings;
*tree_code_type = *gccc::tree_code_type;
*tree_code_length = *gccc::tree_code_length;
*tree_code_name = *gccc::tree_code_name;
*ALIAS_DIAG_NONE = *gccc::ALIAS_DIAG_NONE;
*ALIAS_DIAG_TO_UNDEF = *gccc::ALIAS_DIAG_TO_UNDEF;
*ALIAS_DIAG_TO_EXTERN = *gccc::ALIAS_DIAG_TO_EXTERN;

my %__alias_pairs_hash;
tie %__alias_pairs_hash,"gcc::VEC_alias_pair_gc", $gccc::alias_pairs;
$alias_pairs= \%__alias_pairs_hash;
bless $alias_pairs, gcc::VEC_alias_pair_gc;
*NOT_BUILT_IN = *gccc::NOT_BUILT_IN;
*BUILT_IN_FRONTEND = *gccc::BUILT_IN_FRONTEND;
*BUILT_IN_MD = *gccc::BUILT_IN_MD;
*BUILT_IN_NORMAL = *gccc::BUILT_IN_NORMAL;
*built_in_class_names = *gccc::built_in_class_names;
*BUILT_IN_ACOS = *gccc::BUILT_IN_ACOS;
*BUILT_IN_ACOSF = *gccc::BUILT_IN_ACOSF;
*BUILT_IN_ACOSH = *gccc::BUILT_IN_ACOSH;
*BUILT_IN_ACOSHF = *gccc::BUILT_IN_ACOSHF;
*BUILT_IN_ACOSHL = *gccc::BUILT_IN_ACOSHL;
*BUILT_IN_ACOSL = *gccc::BUILT_IN_ACOSL;
*BUILT_IN_ASIN = *gccc::BUILT_IN_ASIN;
*BUILT_IN_ASINF = *gccc::BUILT_IN_ASINF;
*BUILT_IN_ASINH = *gccc::BUILT_IN_ASINH;
*BUILT_IN_ASINHF = *gccc::BUILT_IN_ASINHF;
*BUILT_IN_ASINHL = *gccc::BUILT_IN_ASINHL;
*BUILT_IN_ASINL = *gccc::BUILT_IN_ASINL;
*BUILT_IN_ATAN = *gccc::BUILT_IN_ATAN;
*BUILT_IN_ATAN2 = *gccc::BUILT_IN_ATAN2;
*BUILT_IN_ATAN2F = *gccc::BUILT_IN_ATAN2F;
*BUILT_IN_ATAN2L = *gccc::BUILT_IN_ATAN2L;
*BUILT_IN_ATANF = *gccc::BUILT_IN_ATANF;
*BUILT_IN_ATANH = *gccc::BUILT_IN_ATANH;
*BUILT_IN_ATANHF = *gccc::BUILT_IN_ATANHF;
*BUILT_IN_ATANHL = *gccc::BUILT_IN_ATANHL;
*BUILT_IN_ATANL = *gccc::BUILT_IN_ATANL;
*BUILT_IN_CBRT = *gccc::BUILT_IN_CBRT;
*BUILT_IN_CBRTF = *gccc::BUILT_IN_CBRTF;
*BUILT_IN_CBRTL = *gccc::BUILT_IN_CBRTL;
*BUILT_IN_CEIL = *gccc::BUILT_IN_CEIL;
*BUILT_IN_CEILF = *gccc::BUILT_IN_CEILF;
*BUILT_IN_CEILL = *gccc::BUILT_IN_CEILL;
*BUILT_IN_COPYSIGN = *gccc::BUILT_IN_COPYSIGN;
*BUILT_IN_COPYSIGNF = *gccc::BUILT_IN_COPYSIGNF;
*BUILT_IN_COPYSIGNL = *gccc::BUILT_IN_COPYSIGNL;
*BUILT_IN_COS = *gccc::BUILT_IN_COS;
*BUILT_IN_COSF = *gccc::BUILT_IN_COSF;
*BUILT_IN_COSH = *gccc::BUILT_IN_COSH;
*BUILT_IN_COSHF = *gccc::BUILT_IN_COSHF;
*BUILT_IN_COSHL = *gccc::BUILT_IN_COSHL;
*BUILT_IN_COSL = *gccc::BUILT_IN_COSL;
*BUILT_IN_DREM = *gccc::BUILT_IN_DREM;
*BUILT_IN_DREMF = *gccc::BUILT_IN_DREMF;
*BUILT_IN_DREML = *gccc::BUILT_IN_DREML;
*BUILT_IN_ERF = *gccc::BUILT_IN_ERF;
*BUILT_IN_ERFC = *gccc::BUILT_IN_ERFC;
*BUILT_IN_ERFCF = *gccc::BUILT_IN_ERFCF;
*BUILT_IN_ERFCL = *gccc::BUILT_IN_ERFCL;
*BUILT_IN_ERFF = *gccc::BUILT_IN_ERFF;
*BUILT_IN_ERFL = *gccc::BUILT_IN_ERFL;
*BUILT_IN_EXP = *gccc::BUILT_IN_EXP;
*BUILT_IN_EXP10 = *gccc::BUILT_IN_EXP10;
*BUILT_IN_EXP10F = *gccc::BUILT_IN_EXP10F;
*BUILT_IN_EXP10L = *gccc::BUILT_IN_EXP10L;
*BUILT_IN_EXP2 = *gccc::BUILT_IN_EXP2;
*BUILT_IN_EXP2F = *gccc::BUILT_IN_EXP2F;
*BUILT_IN_EXP2L = *gccc::BUILT_IN_EXP2L;
*BUILT_IN_EXPF = *gccc::BUILT_IN_EXPF;
*BUILT_IN_EXPL = *gccc::BUILT_IN_EXPL;
*BUILT_IN_EXPM1 = *gccc::BUILT_IN_EXPM1;
*BUILT_IN_EXPM1F = *gccc::BUILT_IN_EXPM1F;
*BUILT_IN_EXPM1L = *gccc::BUILT_IN_EXPM1L;
*BUILT_IN_FABS = *gccc::BUILT_IN_FABS;
*BUILT_IN_FABSF = *gccc::BUILT_IN_FABSF;
*BUILT_IN_FABSL = *gccc::BUILT_IN_FABSL;
*BUILT_IN_FDIM = *gccc::BUILT_IN_FDIM;
*BUILT_IN_FDIMF = *gccc::BUILT_IN_FDIMF;
*BUILT_IN_FDIML = *gccc::BUILT_IN_FDIML;
*BUILT_IN_FLOOR = *gccc::BUILT_IN_FLOOR;
*BUILT_IN_FLOORF = *gccc::BUILT_IN_FLOORF;
*BUILT_IN_FLOORL = *gccc::BUILT_IN_FLOORL;
*BUILT_IN_FMA = *gccc::BUILT_IN_FMA;
*BUILT_IN_FMAF = *gccc::BUILT_IN_FMAF;
*BUILT_IN_FMAL = *gccc::BUILT_IN_FMAL;
*BUILT_IN_FMAX = *gccc::BUILT_IN_FMAX;
*BUILT_IN_FMAXF = *gccc::BUILT_IN_FMAXF;
*BUILT_IN_FMAXL = *gccc::BUILT_IN_FMAXL;
*BUILT_IN_FMIN = *gccc::BUILT_IN_FMIN;
*BUILT_IN_FMINF = *gccc::BUILT_IN_FMINF;
*BUILT_IN_FMINL = *gccc::BUILT_IN_FMINL;
*BUILT_IN_FMOD = *gccc::BUILT_IN_FMOD;
*BUILT_IN_FMODF = *gccc::BUILT_IN_FMODF;
*BUILT_IN_FMODL = *gccc::BUILT_IN_FMODL;
*BUILT_IN_FREXP = *gccc::BUILT_IN_FREXP;
*BUILT_IN_FREXPF = *gccc::BUILT_IN_FREXPF;
*BUILT_IN_FREXPL = *gccc::BUILT_IN_FREXPL;
*BUILT_IN_GAMMA = *gccc::BUILT_IN_GAMMA;
*BUILT_IN_GAMMAF = *gccc::BUILT_IN_GAMMAF;
*BUILT_IN_GAMMAL = *gccc::BUILT_IN_GAMMAL;
*BUILT_IN_GAMMA_R = *gccc::BUILT_IN_GAMMA_R;
*BUILT_IN_GAMMAF_R = *gccc::BUILT_IN_GAMMAF_R;
*BUILT_IN_GAMMAL_R = *gccc::BUILT_IN_GAMMAL_R;
*BUILT_IN_HUGE_VAL = *gccc::BUILT_IN_HUGE_VAL;
*BUILT_IN_HUGE_VALF = *gccc::BUILT_IN_HUGE_VALF;
*BUILT_IN_HUGE_VALL = *gccc::BUILT_IN_HUGE_VALL;
*BUILT_IN_HYPOT = *gccc::BUILT_IN_HYPOT;
*BUILT_IN_HYPOTF = *gccc::BUILT_IN_HYPOTF;
*BUILT_IN_HYPOTL = *gccc::BUILT_IN_HYPOTL;
*BUILT_IN_ILOGB = *gccc::BUILT_IN_ILOGB;
*BUILT_IN_ILOGBF = *gccc::BUILT_IN_ILOGBF;
*BUILT_IN_ILOGBL = *gccc::BUILT_IN_ILOGBL;
*BUILT_IN_INF = *gccc::BUILT_IN_INF;
*BUILT_IN_INFF = *gccc::BUILT_IN_INFF;
*BUILT_IN_INFL = *gccc::BUILT_IN_INFL;
*BUILT_IN_INFD32 = *gccc::BUILT_IN_INFD32;
*BUILT_IN_INFD64 = *gccc::BUILT_IN_INFD64;
*BUILT_IN_INFD128 = *gccc::BUILT_IN_INFD128;
*BUILT_IN_J0 = *gccc::BUILT_IN_J0;
*BUILT_IN_J0F = *gccc::BUILT_IN_J0F;
*BUILT_IN_J0L = *gccc::BUILT_IN_J0L;
*BUILT_IN_J1 = *gccc::BUILT_IN_J1;
*BUILT_IN_J1F = *gccc::BUILT_IN_J1F;
*BUILT_IN_J1L = *gccc::BUILT_IN_J1L;
*BUILT_IN_JN = *gccc::BUILT_IN_JN;
*BUILT_IN_JNF = *gccc::BUILT_IN_JNF;
*BUILT_IN_JNL = *gccc::BUILT_IN_JNL;
*BUILT_IN_LCEIL = *gccc::BUILT_IN_LCEIL;
*BUILT_IN_LCEILF = *gccc::BUILT_IN_LCEILF;
*BUILT_IN_LCEILL = *gccc::BUILT_IN_LCEILL;
*BUILT_IN_LDEXP = *gccc::BUILT_IN_LDEXP;
*BUILT_IN_LDEXPF = *gccc::BUILT_IN_LDEXPF;
*BUILT_IN_LDEXPL = *gccc::BUILT_IN_LDEXPL;
*BUILT_IN_LFLOOR = *gccc::BUILT_IN_LFLOOR;
*BUILT_IN_LFLOORF = *gccc::BUILT_IN_LFLOORF;
*BUILT_IN_LFLOORL = *gccc::BUILT_IN_LFLOORL;
*BUILT_IN_LGAMMA = *gccc::BUILT_IN_LGAMMA;
*BUILT_IN_LGAMMAF = *gccc::BUILT_IN_LGAMMAF;
*BUILT_IN_LGAMMAL = *gccc::BUILT_IN_LGAMMAL;
*BUILT_IN_LGAMMA_R = *gccc::BUILT_IN_LGAMMA_R;
*BUILT_IN_LGAMMAF_R = *gccc::BUILT_IN_LGAMMAF_R;
*BUILT_IN_LGAMMAL_R = *gccc::BUILT_IN_LGAMMAL_R;
*BUILT_IN_LLCEIL = *gccc::BUILT_IN_LLCEIL;
*BUILT_IN_LLCEILF = *gccc::BUILT_IN_LLCEILF;
*BUILT_IN_LLCEILL = *gccc::BUILT_IN_LLCEILL;
*BUILT_IN_LLFLOOR = *gccc::BUILT_IN_LLFLOOR;
*BUILT_IN_LLFLOORF = *gccc::BUILT_IN_LLFLOORF;
*BUILT_IN_LLFLOORL = *gccc::BUILT_IN_LLFLOORL;
*BUILT_IN_LLRINT = *gccc::BUILT_IN_LLRINT;
*BUILT_IN_LLRINTF = *gccc::BUILT_IN_LLRINTF;
*BUILT_IN_LLRINTL = *gccc::BUILT_IN_LLRINTL;
*BUILT_IN_LLROUND = *gccc::BUILT_IN_LLROUND;
*BUILT_IN_LLROUNDF = *gccc::BUILT_IN_LLROUNDF;
*BUILT_IN_LLROUNDL = *gccc::BUILT_IN_LLROUNDL;
*BUILT_IN_LOG = *gccc::BUILT_IN_LOG;
*BUILT_IN_LOG10 = *gccc::BUILT_IN_LOG10;
*BUILT_IN_LOG10F = *gccc::BUILT_IN_LOG10F;
*BUILT_IN_LOG10L = *gccc::BUILT_IN_LOG10L;
*BUILT_IN_LOG1P = *gccc::BUILT_IN_LOG1P;
*BUILT_IN_LOG1PF = *gccc::BUILT_IN_LOG1PF;
*BUILT_IN_LOG1PL = *gccc::BUILT_IN_LOG1PL;
*BUILT_IN_LOG2 = *gccc::BUILT_IN_LOG2;
*BUILT_IN_LOG2F = *gccc::BUILT_IN_LOG2F;
*BUILT_IN_LOG2L = *gccc::BUILT_IN_LOG2L;
*BUILT_IN_LOGB = *gccc::BUILT_IN_LOGB;
*BUILT_IN_LOGBF = *gccc::BUILT_IN_LOGBF;
*BUILT_IN_LOGBL = *gccc::BUILT_IN_LOGBL;
*BUILT_IN_LOGF = *gccc::BUILT_IN_LOGF;
*BUILT_IN_LOGL = *gccc::BUILT_IN_LOGL;
*BUILT_IN_LRINT = *gccc::BUILT_IN_LRINT;
*BUILT_IN_LRINTF = *gccc::BUILT_IN_LRINTF;
*BUILT_IN_LRINTL = *gccc::BUILT_IN_LRINTL;
*BUILT_IN_LROUND = *gccc::BUILT_IN_LROUND;
*BUILT_IN_LROUNDF = *gccc::BUILT_IN_LROUNDF;
*BUILT_IN_LROUNDL = *gccc::BUILT_IN_LROUNDL;
*BUILT_IN_MODF = *gccc::BUILT_IN_MODF;
*BUILT_IN_MODFF = *gccc::BUILT_IN_MODFF;
*BUILT_IN_MODFL = *gccc::BUILT_IN_MODFL;
*BUILT_IN_NAN = *gccc::BUILT_IN_NAN;
*BUILT_IN_NANF = *gccc::BUILT_IN_NANF;
*BUILT_IN_NANL = *gccc::BUILT_IN_NANL;
*BUILT_IN_NAND32 = *gccc::BUILT_IN_NAND32;
*BUILT_IN_NAND64 = *gccc::BUILT_IN_NAND64;
*BUILT_IN_NAND128 = *gccc::BUILT_IN_NAND128;
*BUILT_IN_NANS = *gccc::BUILT_IN_NANS;
*BUILT_IN_NANSF = *gccc::BUILT_IN_NANSF;
*BUILT_IN_NANSL = *gccc::BUILT_IN_NANSL;
*BUILT_IN_NEARBYINT = *gccc::BUILT_IN_NEARBYINT;
*BUILT_IN_NEARBYINTF = *gccc::BUILT_IN_NEARBYINTF;
*BUILT_IN_NEARBYINTL = *gccc::BUILT_IN_NEARBYINTL;
*BUILT_IN_NEXTAFTER = *gccc::BUILT_IN_NEXTAFTER;
*BUILT_IN_NEXTAFTERF = *gccc::BUILT_IN_NEXTAFTERF;
*BUILT_IN_NEXTAFTERL = *gccc::BUILT_IN_NEXTAFTERL;
*BUILT_IN_NEXTTOWARD = *gccc::BUILT_IN_NEXTTOWARD;
*BUILT_IN_NEXTTOWARDF = *gccc::BUILT_IN_NEXTTOWARDF;
*BUILT_IN_NEXTTOWARDL = *gccc::BUILT_IN_NEXTTOWARDL;
*BUILT_IN_POW = *gccc::BUILT_IN_POW;
*BUILT_IN_POW10 = *gccc::BUILT_IN_POW10;
*BUILT_IN_POW10F = *gccc::BUILT_IN_POW10F;
*BUILT_IN_POW10L = *gccc::BUILT_IN_POW10L;
*BUILT_IN_POWF = *gccc::BUILT_IN_POWF;
*BUILT_IN_POWI = *gccc::BUILT_IN_POWI;
*BUILT_IN_POWIF = *gccc::BUILT_IN_POWIF;
*BUILT_IN_POWIL = *gccc::BUILT_IN_POWIL;
*BUILT_IN_POWL = *gccc::BUILT_IN_POWL;
*BUILT_IN_REMAINDER = *gccc::BUILT_IN_REMAINDER;
*BUILT_IN_REMAINDERF = *gccc::BUILT_IN_REMAINDERF;
*BUILT_IN_REMAINDERL = *gccc::BUILT_IN_REMAINDERL;
*BUILT_IN_REMQUO = *gccc::BUILT_IN_REMQUO;
*BUILT_IN_REMQUOF = *gccc::BUILT_IN_REMQUOF;
*BUILT_IN_REMQUOL = *gccc::BUILT_IN_REMQUOL;
*BUILT_IN_RINT = *gccc::BUILT_IN_RINT;
*BUILT_IN_RINTF = *gccc::BUILT_IN_RINTF;
*BUILT_IN_RINTL = *gccc::BUILT_IN_RINTL;
*BUILT_IN_ROUND = *gccc::BUILT_IN_ROUND;
*BUILT_IN_ROUNDF = *gccc::BUILT_IN_ROUNDF;
*BUILT_IN_ROUNDL = *gccc::BUILT_IN_ROUNDL;
*BUILT_IN_SCALB = *gccc::BUILT_IN_SCALB;
*BUILT_IN_SCALBF = *gccc::BUILT_IN_SCALBF;
*BUILT_IN_SCALBL = *gccc::BUILT_IN_SCALBL;
*BUILT_IN_SCALBLN = *gccc::BUILT_IN_SCALBLN;
*BUILT_IN_SCALBLNF = *gccc::BUILT_IN_SCALBLNF;
*BUILT_IN_SCALBLNL = *gccc::BUILT_IN_SCALBLNL;
*BUILT_IN_SCALBN = *gccc::BUILT_IN_SCALBN;
*BUILT_IN_SCALBNF = *gccc::BUILT_IN_SCALBNF;
*BUILT_IN_SCALBNL = *gccc::BUILT_IN_SCALBNL;
*BUILT_IN_SIGNBIT = *gccc::BUILT_IN_SIGNBIT;
*BUILT_IN_SIGNBITF = *gccc::BUILT_IN_SIGNBITF;
*BUILT_IN_SIGNBITL = *gccc::BUILT_IN_SIGNBITL;
*BUILT_IN_SIGNBITD32 = *gccc::BUILT_IN_SIGNBITD32;
*BUILT_IN_SIGNBITD64 = *gccc::BUILT_IN_SIGNBITD64;
*BUILT_IN_SIGNBITD128 = *gccc::BUILT_IN_SIGNBITD128;
*BUILT_IN_SIGNIFICAND = *gccc::BUILT_IN_SIGNIFICAND;
*BUILT_IN_SIGNIFICANDF = *gccc::BUILT_IN_SIGNIFICANDF;
*BUILT_IN_SIGNIFICANDL = *gccc::BUILT_IN_SIGNIFICANDL;
*BUILT_IN_SIN = *gccc::BUILT_IN_SIN;
*BUILT_IN_SINCOS = *gccc::BUILT_IN_SINCOS;
*BUILT_IN_SINCOSF = *gccc::BUILT_IN_SINCOSF;
*BUILT_IN_SINCOSL = *gccc::BUILT_IN_SINCOSL;
*BUILT_IN_SINF = *gccc::BUILT_IN_SINF;
*BUILT_IN_SINH = *gccc::BUILT_IN_SINH;
*BUILT_IN_SINHF = *gccc::BUILT_IN_SINHF;
*BUILT_IN_SINHL = *gccc::BUILT_IN_SINHL;
*BUILT_IN_SINL = *gccc::BUILT_IN_SINL;
*BUILT_IN_SQRT = *gccc::BUILT_IN_SQRT;
*BUILT_IN_SQRTF = *gccc::BUILT_IN_SQRTF;
*BUILT_IN_SQRTL = *gccc::BUILT_IN_SQRTL;
*BUILT_IN_TAN = *gccc::BUILT_IN_TAN;
*BUILT_IN_TANF = *gccc::BUILT_IN_TANF;
*BUILT_IN_TANH = *gccc::BUILT_IN_TANH;
*BUILT_IN_TANHF = *gccc::BUILT_IN_TANHF;
*BUILT_IN_TANHL = *gccc::BUILT_IN_TANHL;
*BUILT_IN_TANL = *gccc::BUILT_IN_TANL;
*BUILT_IN_TGAMMA = *gccc::BUILT_IN_TGAMMA;
*BUILT_IN_TGAMMAF = *gccc::BUILT_IN_TGAMMAF;
*BUILT_IN_TGAMMAL = *gccc::BUILT_IN_TGAMMAL;
*BUILT_IN_TRUNC = *gccc::BUILT_IN_TRUNC;
*BUILT_IN_TRUNCF = *gccc::BUILT_IN_TRUNCF;
*BUILT_IN_TRUNCL = *gccc::BUILT_IN_TRUNCL;
*BUILT_IN_Y0 = *gccc::BUILT_IN_Y0;
*BUILT_IN_Y0F = *gccc::BUILT_IN_Y0F;
*BUILT_IN_Y0L = *gccc::BUILT_IN_Y0L;
*BUILT_IN_Y1 = *gccc::BUILT_IN_Y1;
*BUILT_IN_Y1F = *gccc::BUILT_IN_Y1F;
*BUILT_IN_Y1L = *gccc::BUILT_IN_Y1L;
*BUILT_IN_YN = *gccc::BUILT_IN_YN;
*BUILT_IN_YNF = *gccc::BUILT_IN_YNF;
*BUILT_IN_YNL = *gccc::BUILT_IN_YNL;
*BUILT_IN_CABS = *gccc::BUILT_IN_CABS;
*BUILT_IN_CABSF = *gccc::BUILT_IN_CABSF;
*BUILT_IN_CABSL = *gccc::BUILT_IN_CABSL;
*BUILT_IN_CACOS = *gccc::BUILT_IN_CACOS;
*BUILT_IN_CACOSF = *gccc::BUILT_IN_CACOSF;
*BUILT_IN_CACOSH = *gccc::BUILT_IN_CACOSH;
*BUILT_IN_CACOSHF = *gccc::BUILT_IN_CACOSHF;
*BUILT_IN_CACOSHL = *gccc::BUILT_IN_CACOSHL;
*BUILT_IN_CACOSL = *gccc::BUILT_IN_CACOSL;
*BUILT_IN_CARG = *gccc::BUILT_IN_CARG;
*BUILT_IN_CARGF = *gccc::BUILT_IN_CARGF;
*BUILT_IN_CARGL = *gccc::BUILT_IN_CARGL;
*BUILT_IN_CASIN = *gccc::BUILT_IN_CASIN;
*BUILT_IN_CASINF = *gccc::BUILT_IN_CASINF;
*BUILT_IN_CASINH = *gccc::BUILT_IN_CASINH;
*BUILT_IN_CASINHF = *gccc::BUILT_IN_CASINHF;
*BUILT_IN_CASINHL = *gccc::BUILT_IN_CASINHL;
*BUILT_IN_CASINL = *gccc::BUILT_IN_CASINL;
*BUILT_IN_CATAN = *gccc::BUILT_IN_CATAN;
*BUILT_IN_CATANF = *gccc::BUILT_IN_CATANF;
*BUILT_IN_CATANH = *gccc::BUILT_IN_CATANH;
*BUILT_IN_CATANHF = *gccc::BUILT_IN_CATANHF;
*BUILT_IN_CATANHL = *gccc::BUILT_IN_CATANHL;
*BUILT_IN_CATANL = *gccc::BUILT_IN_CATANL;
*BUILT_IN_CCOS = *gccc::BUILT_IN_CCOS;
*BUILT_IN_CCOSF = *gccc::BUILT_IN_CCOSF;
*BUILT_IN_CCOSH = *gccc::BUILT_IN_CCOSH;
*BUILT_IN_CCOSHF = *gccc::BUILT_IN_CCOSHF;
*BUILT_IN_CCOSHL = *gccc::BUILT_IN_CCOSHL;
*BUILT_IN_CCOSL = *gccc::BUILT_IN_CCOSL;
*BUILT_IN_CEXP = *gccc::BUILT_IN_CEXP;
*BUILT_IN_CEXPF = *gccc::BUILT_IN_CEXPF;
*BUILT_IN_CEXPL = *gccc::BUILT_IN_CEXPL;
*BUILT_IN_CEXPI = *gccc::BUILT_IN_CEXPI;
*BUILT_IN_CEXPIF = *gccc::BUILT_IN_CEXPIF;
*BUILT_IN_CEXPIL = *gccc::BUILT_IN_CEXPIL;
*BUILT_IN_CIMAG = *gccc::BUILT_IN_CIMAG;
*BUILT_IN_CIMAGF = *gccc::BUILT_IN_CIMAGF;
*BUILT_IN_CIMAGL = *gccc::BUILT_IN_CIMAGL;
*BUILT_IN_CLOG = *gccc::BUILT_IN_CLOG;
*BUILT_IN_CLOGF = *gccc::BUILT_IN_CLOGF;
*BUILT_IN_CLOGL = *gccc::BUILT_IN_CLOGL;
*BUILT_IN_CLOG10 = *gccc::BUILT_IN_CLOG10;
*BUILT_IN_CLOG10F = *gccc::BUILT_IN_CLOG10F;
*BUILT_IN_CLOG10L = *gccc::BUILT_IN_CLOG10L;
*BUILT_IN_CONJ = *gccc::BUILT_IN_CONJ;
*BUILT_IN_CONJF = *gccc::BUILT_IN_CONJF;
*BUILT_IN_CONJL = *gccc::BUILT_IN_CONJL;
*BUILT_IN_CPOW = *gccc::BUILT_IN_CPOW;
*BUILT_IN_CPOWF = *gccc::BUILT_IN_CPOWF;
*BUILT_IN_CPOWL = *gccc::BUILT_IN_CPOWL;
*BUILT_IN_CPROJ = *gccc::BUILT_IN_CPROJ;
*BUILT_IN_CPROJF = *gccc::BUILT_IN_CPROJF;
*BUILT_IN_CPROJL = *gccc::BUILT_IN_CPROJL;
*BUILT_IN_CREAL = *gccc::BUILT_IN_CREAL;
*BUILT_IN_CREALF = *gccc::BUILT_IN_CREALF;
*BUILT_IN_CREALL = *gccc::BUILT_IN_CREALL;
*BUILT_IN_CSIN = *gccc::BUILT_IN_CSIN;
*BUILT_IN_CSINF = *gccc::BUILT_IN_CSINF;
*BUILT_IN_CSINH = *gccc::BUILT_IN_CSINH;
*BUILT_IN_CSINHF = *gccc::BUILT_IN_CSINHF;
*BUILT_IN_CSINHL = *gccc::BUILT_IN_CSINHL;
*BUILT_IN_CSINL = *gccc::BUILT_IN_CSINL;
*BUILT_IN_CSQRT = *gccc::BUILT_IN_CSQRT;
*BUILT_IN_CSQRTF = *gccc::BUILT_IN_CSQRTF;
*BUILT_IN_CSQRTL = *gccc::BUILT_IN_CSQRTL;
*BUILT_IN_CTAN = *gccc::BUILT_IN_CTAN;
*BUILT_IN_CTANF = *gccc::BUILT_IN_CTANF;
*BUILT_IN_CTANH = *gccc::BUILT_IN_CTANH;
*BUILT_IN_CTANHF = *gccc::BUILT_IN_CTANHF;
*BUILT_IN_CTANHL = *gccc::BUILT_IN_CTANHL;
*BUILT_IN_CTANL = *gccc::BUILT_IN_CTANL;
*BUILT_IN_BCMP = *gccc::BUILT_IN_BCMP;
*BUILT_IN_BCOPY = *gccc::BUILT_IN_BCOPY;
*BUILT_IN_BZERO = *gccc::BUILT_IN_BZERO;
*BUILT_IN_INDEX = *gccc::BUILT_IN_INDEX;
*BUILT_IN_MEMCHR = *gccc::BUILT_IN_MEMCHR;
*BUILT_IN_MEMCMP = *gccc::BUILT_IN_MEMCMP;
*BUILT_IN_MEMCPY = *gccc::BUILT_IN_MEMCPY;
*BUILT_IN_MEMMOVE = *gccc::BUILT_IN_MEMMOVE;
*BUILT_IN_MEMPCPY = *gccc::BUILT_IN_MEMPCPY;
*BUILT_IN_MEMSET = *gccc::BUILT_IN_MEMSET;
*BUILT_IN_RINDEX = *gccc::BUILT_IN_RINDEX;
*BUILT_IN_STPCPY = *gccc::BUILT_IN_STPCPY;
*BUILT_IN_STPNCPY = *gccc::BUILT_IN_STPNCPY;
*BUILT_IN_STRCASECMP = *gccc::BUILT_IN_STRCASECMP;
*BUILT_IN_STRCAT = *gccc::BUILT_IN_STRCAT;
*BUILT_IN_STRCHR = *gccc::BUILT_IN_STRCHR;
*BUILT_IN_STRCMP = *gccc::BUILT_IN_STRCMP;
*BUILT_IN_STRCPY = *gccc::BUILT_IN_STRCPY;
*BUILT_IN_STRCSPN = *gccc::BUILT_IN_STRCSPN;
*BUILT_IN_STRDUP = *gccc::BUILT_IN_STRDUP;
*BUILT_IN_STRNDUP = *gccc::BUILT_IN_STRNDUP;
*BUILT_IN_STRLEN = *gccc::BUILT_IN_STRLEN;
*BUILT_IN_STRNCASECMP = *gccc::BUILT_IN_STRNCASECMP;
*BUILT_IN_STRNCAT = *gccc::BUILT_IN_STRNCAT;
*BUILT_IN_STRNCMP = *gccc::BUILT_IN_STRNCMP;
*BUILT_IN_STRNCPY = *gccc::BUILT_IN_STRNCPY;
*BUILT_IN_STRPBRK = *gccc::BUILT_IN_STRPBRK;
*BUILT_IN_STRRCHR = *gccc::BUILT_IN_STRRCHR;
*BUILT_IN_STRSPN = *gccc::BUILT_IN_STRSPN;
*BUILT_IN_STRSTR = *gccc::BUILT_IN_STRSTR;
*BUILT_IN_FPRINTF = *gccc::BUILT_IN_FPRINTF;
*BUILT_IN_FPRINTF_UNLOCKED = *gccc::BUILT_IN_FPRINTF_UNLOCKED;
*BUILT_IN_PUTC = *gccc::BUILT_IN_PUTC;
*BUILT_IN_PUTC_UNLOCKED = *gccc::BUILT_IN_PUTC_UNLOCKED;
*BUILT_IN_FPUTC = *gccc::BUILT_IN_FPUTC;
*BUILT_IN_FPUTC_UNLOCKED = *gccc::BUILT_IN_FPUTC_UNLOCKED;
*BUILT_IN_FPUTS = *gccc::BUILT_IN_FPUTS;
*BUILT_IN_FPUTS_UNLOCKED = *gccc::BUILT_IN_FPUTS_UNLOCKED;
*BUILT_IN_FSCANF = *gccc::BUILT_IN_FSCANF;
*BUILT_IN_FWRITE = *gccc::BUILT_IN_FWRITE;
*BUILT_IN_FWRITE_UNLOCKED = *gccc::BUILT_IN_FWRITE_UNLOCKED;
*BUILT_IN_PRINTF = *gccc::BUILT_IN_PRINTF;
*BUILT_IN_PRINTF_UNLOCKED = *gccc::BUILT_IN_PRINTF_UNLOCKED;
*BUILT_IN_PUTCHAR = *gccc::BUILT_IN_PUTCHAR;
*BUILT_IN_PUTCHAR_UNLOCKED = *gccc::BUILT_IN_PUTCHAR_UNLOCKED;
*BUILT_IN_PUTS = *gccc::BUILT_IN_PUTS;
*BUILT_IN_PUTS_UNLOCKED = *gccc::BUILT_IN_PUTS_UNLOCKED;
*BUILT_IN_SCANF = *gccc::BUILT_IN_SCANF;
*BUILT_IN_SNPRINTF = *gccc::BUILT_IN_SNPRINTF;
*BUILT_IN_SPRINTF = *gccc::BUILT_IN_SPRINTF;
*BUILT_IN_SSCANF = *gccc::BUILT_IN_SSCANF;
*BUILT_IN_VFPRINTF = *gccc::BUILT_IN_VFPRINTF;
*BUILT_IN_VFSCANF = *gccc::BUILT_IN_VFSCANF;
*BUILT_IN_VPRINTF = *gccc::BUILT_IN_VPRINTF;
*BUILT_IN_VSCANF = *gccc::BUILT_IN_VSCANF;
*BUILT_IN_VSNPRINTF = *gccc::BUILT_IN_VSNPRINTF;
*BUILT_IN_VSPRINTF = *gccc::BUILT_IN_VSPRINTF;
*BUILT_IN_VSSCANF = *gccc::BUILT_IN_VSSCANF;
*BUILT_IN_ISALNUM = *gccc::BUILT_IN_ISALNUM;
*BUILT_IN_ISALPHA = *gccc::BUILT_IN_ISALPHA;
*BUILT_IN_ISASCII = *gccc::BUILT_IN_ISASCII;
*BUILT_IN_ISBLANK = *gccc::BUILT_IN_ISBLANK;
*BUILT_IN_ISCNTRL = *gccc::BUILT_IN_ISCNTRL;
*BUILT_IN_ISDIGIT = *gccc::BUILT_IN_ISDIGIT;
*BUILT_IN_ISGRAPH = *gccc::BUILT_IN_ISGRAPH;
*BUILT_IN_ISLOWER = *gccc::BUILT_IN_ISLOWER;
*BUILT_IN_ISPRINT = *gccc::BUILT_IN_ISPRINT;
*BUILT_IN_ISPUNCT = *gccc::BUILT_IN_ISPUNCT;
*BUILT_IN_ISSPACE = *gccc::BUILT_IN_ISSPACE;
*BUILT_IN_ISUPPER = *gccc::BUILT_IN_ISUPPER;
*BUILT_IN_ISXDIGIT = *gccc::BUILT_IN_ISXDIGIT;
*BUILT_IN_TOASCII = *gccc::BUILT_IN_TOASCII;
*BUILT_IN_TOLOWER = *gccc::BUILT_IN_TOLOWER;
*BUILT_IN_TOUPPER = *gccc::BUILT_IN_TOUPPER;
*BUILT_IN_ISWALNUM = *gccc::BUILT_IN_ISWALNUM;
*BUILT_IN_ISWALPHA = *gccc::BUILT_IN_ISWALPHA;
*BUILT_IN_ISWBLANK = *gccc::BUILT_IN_ISWBLANK;
*BUILT_IN_ISWCNTRL = *gccc::BUILT_IN_ISWCNTRL;
*BUILT_IN_ISWDIGIT = *gccc::BUILT_IN_ISWDIGIT;
*BUILT_IN_ISWGRAPH = *gccc::BUILT_IN_ISWGRAPH;
*BUILT_IN_ISWLOWER = *gccc::BUILT_IN_ISWLOWER;
*BUILT_IN_ISWPRINT = *gccc::BUILT_IN_ISWPRINT;
*BUILT_IN_ISWPUNCT = *gccc::BUILT_IN_ISWPUNCT;
*BUILT_IN_ISWSPACE = *gccc::BUILT_IN_ISWSPACE;
*BUILT_IN_ISWUPPER = *gccc::BUILT_IN_ISWUPPER;
*BUILT_IN_ISWXDIGIT = *gccc::BUILT_IN_ISWXDIGIT;
*BUILT_IN_TOWLOWER = *gccc::BUILT_IN_TOWLOWER;
*BUILT_IN_TOWUPPER = *gccc::BUILT_IN_TOWUPPER;
*BUILT_IN_ABORT = *gccc::BUILT_IN_ABORT;
*BUILT_IN_ABS = *gccc::BUILT_IN_ABS;
*BUILT_IN_AGGREGATE_INCOMING_ADDRESS = *gccc::BUILT_IN_AGGREGATE_INCOMING_ADDRESS;
*BUILT_IN_ALLOCA = *gccc::BUILT_IN_ALLOCA;
*BUILT_IN_APPLY = *gccc::BUILT_IN_APPLY;
*BUILT_IN_APPLY_ARGS = *gccc::BUILT_IN_APPLY_ARGS;
*BUILT_IN_BSWAP32 = *gccc::BUILT_IN_BSWAP32;
*BUILT_IN_BSWAP64 = *gccc::BUILT_IN_BSWAP64;
*BUILT_IN_CLEAR_CACHE = *gccc::BUILT_IN_CLEAR_CACHE;
*BUILT_IN_CALLOC = *gccc::BUILT_IN_CALLOC;
*BUILT_IN_CLASSIFY_TYPE = *gccc::BUILT_IN_CLASSIFY_TYPE;
*BUILT_IN_CLZ = *gccc::BUILT_IN_CLZ;
*BUILT_IN_CLZIMAX = *gccc::BUILT_IN_CLZIMAX;
*BUILT_IN_CLZL = *gccc::BUILT_IN_CLZL;
*BUILT_IN_CLZLL = *gccc::BUILT_IN_CLZLL;
*BUILT_IN_CONSTANT_P = *gccc::BUILT_IN_CONSTANT_P;
*BUILT_IN_CTZ = *gccc::BUILT_IN_CTZ;
*BUILT_IN_CTZIMAX = *gccc::BUILT_IN_CTZIMAX;
*BUILT_IN_CTZL = *gccc::BUILT_IN_CTZL;
*BUILT_IN_CTZLL = *gccc::BUILT_IN_CTZLL;
*BUILT_IN_DCGETTEXT = *gccc::BUILT_IN_DCGETTEXT;
*BUILT_IN_DGETTEXT = *gccc::BUILT_IN_DGETTEXT;
*BUILT_IN_DWARF_CFA = *gccc::BUILT_IN_DWARF_CFA;
*BUILT_IN_DWARF_SP_COLUMN = *gccc::BUILT_IN_DWARF_SP_COLUMN;
*BUILT_IN_EH_RETURN = *gccc::BUILT_IN_EH_RETURN;
*BUILT_IN_EH_RETURN_DATA_REGNO = *gccc::BUILT_IN_EH_RETURN_DATA_REGNO;
*BUILT_IN_EXECL = *gccc::BUILT_IN_EXECL;
*BUILT_IN_EXECLP = *gccc::BUILT_IN_EXECLP;
*BUILT_IN_EXECLE = *gccc::BUILT_IN_EXECLE;
*BUILT_IN_EXECV = *gccc::BUILT_IN_EXECV;
*BUILT_IN_EXECVP = *gccc::BUILT_IN_EXECVP;
*BUILT_IN_EXECVE = *gccc::BUILT_IN_EXECVE;
*BUILT_IN_EXIT = *gccc::BUILT_IN_EXIT;
*BUILT_IN_EXPECT = *gccc::BUILT_IN_EXPECT;
*BUILT_IN_EXTEND_POINTER = *gccc::BUILT_IN_EXTEND_POINTER;
*BUILT_IN_EXTRACT_RETURN_ADDR = *gccc::BUILT_IN_EXTRACT_RETURN_ADDR;
*BUILT_IN_FFS = *gccc::BUILT_IN_FFS;
*BUILT_IN_FFSIMAX = *gccc::BUILT_IN_FFSIMAX;
*BUILT_IN_FFSL = *gccc::BUILT_IN_FFSL;
*BUILT_IN_FFSLL = *gccc::BUILT_IN_FFSLL;
*BUILT_IN_FORK = *gccc::BUILT_IN_FORK;
*BUILT_IN_FRAME_ADDRESS = *gccc::BUILT_IN_FRAME_ADDRESS;
*BUILT_IN_FREE = *gccc::BUILT_IN_FREE;
*BUILT_IN_FROB_RETURN_ADDR = *gccc::BUILT_IN_FROB_RETURN_ADDR;
*BUILT_IN_GETTEXT = *gccc::BUILT_IN_GETTEXT;
*BUILT_IN_IMAXABS = *gccc::BUILT_IN_IMAXABS;
*BUILT_IN_INIT_DWARF_REG_SIZES = *gccc::BUILT_IN_INIT_DWARF_REG_SIZES;
*BUILT_IN_FINITE = *gccc::BUILT_IN_FINITE;
*BUILT_IN_FINITEF = *gccc::BUILT_IN_FINITEF;
*BUILT_IN_FINITEL = *gccc::BUILT_IN_FINITEL;
*BUILT_IN_FINITED32 = *gccc::BUILT_IN_FINITED32;
*BUILT_IN_FINITED64 = *gccc::BUILT_IN_FINITED64;
*BUILT_IN_FINITED128 = *gccc::BUILT_IN_FINITED128;
*BUILT_IN_FPCLASSIFY = *gccc::BUILT_IN_FPCLASSIFY;
*BUILT_IN_ISFINITE = *gccc::BUILT_IN_ISFINITE;
*BUILT_IN_ISINF_SIGN = *gccc::BUILT_IN_ISINF_SIGN;
*BUILT_IN_ISINF = *gccc::BUILT_IN_ISINF;
*BUILT_IN_ISINFF = *gccc::BUILT_IN_ISINFF;
*BUILT_IN_ISINFL = *gccc::BUILT_IN_ISINFL;
*BUILT_IN_ISINFD32 = *gccc::BUILT_IN_ISINFD32;
*BUILT_IN_ISINFD64 = *gccc::BUILT_IN_ISINFD64;
*BUILT_IN_ISINFD128 = *gccc::BUILT_IN_ISINFD128;
*BUILT_IN_ISNAN = *gccc::BUILT_IN_ISNAN;
*BUILT_IN_ISNANF = *gccc::BUILT_IN_ISNANF;
*BUILT_IN_ISNANL = *gccc::BUILT_IN_ISNANL;
*BUILT_IN_ISNAND32 = *gccc::BUILT_IN_ISNAND32;
*BUILT_IN_ISNAND64 = *gccc::BUILT_IN_ISNAND64;
*BUILT_IN_ISNAND128 = *gccc::BUILT_IN_ISNAND128;
*BUILT_IN_ISNORMAL = *gccc::BUILT_IN_ISNORMAL;
*BUILT_IN_ISGREATER = *gccc::BUILT_IN_ISGREATER;
*BUILT_IN_ISGREATEREQUAL = *gccc::BUILT_IN_ISGREATEREQUAL;
*BUILT_IN_ISLESS = *gccc::BUILT_IN_ISLESS;
*BUILT_IN_ISLESSEQUAL = *gccc::BUILT_IN_ISLESSEQUAL;
*BUILT_IN_ISLESSGREATER = *gccc::BUILT_IN_ISLESSGREATER;
*BUILT_IN_ISUNORDERED = *gccc::BUILT_IN_ISUNORDERED;
*BUILT_IN_LABS = *gccc::BUILT_IN_LABS;
*BUILT_IN_LLABS = *gccc::BUILT_IN_LLABS;
*BUILT_IN_LONGJMP = *gccc::BUILT_IN_LONGJMP;
*BUILT_IN_MALLOC = *gccc::BUILT_IN_MALLOC;
*BUILT_IN_NEXT_ARG = *gccc::BUILT_IN_NEXT_ARG;
*BUILT_IN_PARITY = *gccc::BUILT_IN_PARITY;
*BUILT_IN_PARITYIMAX = *gccc::BUILT_IN_PARITYIMAX;
*BUILT_IN_PARITYL = *gccc::BUILT_IN_PARITYL;
*BUILT_IN_PARITYLL = *gccc::BUILT_IN_PARITYLL;
*BUILT_IN_POPCOUNT = *gccc::BUILT_IN_POPCOUNT;
*BUILT_IN_POPCOUNTIMAX = *gccc::BUILT_IN_POPCOUNTIMAX;
*BUILT_IN_POPCOUNTL = *gccc::BUILT_IN_POPCOUNTL;
*BUILT_IN_POPCOUNTLL = *gccc::BUILT_IN_POPCOUNTLL;
*BUILT_IN_PREFETCH = *gccc::BUILT_IN_PREFETCH;
*BUILT_IN_REALLOC = *gccc::BUILT_IN_REALLOC;
*BUILT_IN_RETURN = *gccc::BUILT_IN_RETURN;
*BUILT_IN_RETURN_ADDRESS = *gccc::BUILT_IN_RETURN_ADDRESS;
*BUILT_IN_SAVEREGS = *gccc::BUILT_IN_SAVEREGS;
*BUILT_IN_SETJMP = *gccc::BUILT_IN_SETJMP;
*BUILT_IN_STRFMON = *gccc::BUILT_IN_STRFMON;
*BUILT_IN_STRFTIME = *gccc::BUILT_IN_STRFTIME;
*BUILT_IN_TRAP = *gccc::BUILT_IN_TRAP;
*BUILT_IN_UNREACHABLE = *gccc::BUILT_IN_UNREACHABLE;
*BUILT_IN_UNWIND_INIT = *gccc::BUILT_IN_UNWIND_INIT;
*BUILT_IN_UPDATE_SETJMP_BUF = *gccc::BUILT_IN_UPDATE_SETJMP_BUF;
*BUILT_IN_VA_COPY = *gccc::BUILT_IN_VA_COPY;
*BUILT_IN_VA_END = *gccc::BUILT_IN_VA_END;
*BUILT_IN_VA_START = *gccc::BUILT_IN_VA_START;
*BUILT_IN_VA_ARG_PACK = *gccc::BUILT_IN_VA_ARG_PACK;
*BUILT_IN_VA_ARG_PACK_LEN = *gccc::BUILT_IN_VA_ARG_PACK_LEN;
*BUILT_IN__EXIT = *gccc::BUILT_IN__EXIT;
*BUILT_IN__EXIT2 = *gccc::BUILT_IN__EXIT2;
*BUILT_IN_INIT_TRAMPOLINE = *gccc::BUILT_IN_INIT_TRAMPOLINE;
*BUILT_IN_ADJUST_TRAMPOLINE = *gccc::BUILT_IN_ADJUST_TRAMPOLINE;
*BUILT_IN_NONLOCAL_GOTO = *gccc::BUILT_IN_NONLOCAL_GOTO;
*BUILT_IN_SETJMP_SETUP = *gccc::BUILT_IN_SETJMP_SETUP;
*BUILT_IN_SETJMP_DISPATCHER = *gccc::BUILT_IN_SETJMP_DISPATCHER;
*BUILT_IN_SETJMP_RECEIVER = *gccc::BUILT_IN_SETJMP_RECEIVER;
*BUILT_IN_STACK_SAVE = *gccc::BUILT_IN_STACK_SAVE;
*BUILT_IN_STACK_RESTORE = *gccc::BUILT_IN_STACK_RESTORE;
*BUILT_IN_OBJECT_SIZE = *gccc::BUILT_IN_OBJECT_SIZE;
*BUILT_IN_MEMCPY_CHK = *gccc::BUILT_IN_MEMCPY_CHK;
*BUILT_IN_MEMMOVE_CHK = *gccc::BUILT_IN_MEMMOVE_CHK;
*BUILT_IN_MEMPCPY_CHK = *gccc::BUILT_IN_MEMPCPY_CHK;
*BUILT_IN_MEMSET_CHK = *gccc::BUILT_IN_MEMSET_CHK;
*BUILT_IN_STPCPY_CHK = *gccc::BUILT_IN_STPCPY_CHK;
*BUILT_IN_STRCAT_CHK = *gccc::BUILT_IN_STRCAT_CHK;
*BUILT_IN_STRCPY_CHK = *gccc::BUILT_IN_STRCPY_CHK;
*BUILT_IN_STRNCAT_CHK = *gccc::BUILT_IN_STRNCAT_CHK;
*BUILT_IN_STRNCPY_CHK = *gccc::BUILT_IN_STRNCPY_CHK;
*BUILT_IN_SNPRINTF_CHK = *gccc::BUILT_IN_SNPRINTF_CHK;
*BUILT_IN_SPRINTF_CHK = *gccc::BUILT_IN_SPRINTF_CHK;
*BUILT_IN_VSNPRINTF_CHK = *gccc::BUILT_IN_VSNPRINTF_CHK;
*BUILT_IN_VSPRINTF_CHK = *gccc::BUILT_IN_VSPRINTF_CHK;
*BUILT_IN_FPRINTF_CHK = *gccc::BUILT_IN_FPRINTF_CHK;
*BUILT_IN_PRINTF_CHK = *gccc::BUILT_IN_PRINTF_CHK;
*BUILT_IN_VFPRINTF_CHK = *gccc::BUILT_IN_VFPRINTF_CHK;
*BUILT_IN_VPRINTF_CHK = *gccc::BUILT_IN_VPRINTF_CHK;
*BUILT_IN_PROFILE_FUNC_ENTER = *gccc::BUILT_IN_PROFILE_FUNC_ENTER;
*BUILT_IN_PROFILE_FUNC_EXIT = *gccc::BUILT_IN_PROFILE_FUNC_EXIT;
*BUILT_IN_EMUTLS_GET_ADDRESS = *gccc::BUILT_IN_EMUTLS_GET_ADDRESS;
*BUILT_IN_EMUTLS_REGISTER_COMMON = *gccc::BUILT_IN_EMUTLS_REGISTER_COMMON;
*BUILT_IN_UNWIND_RESUME = *gccc::BUILT_IN_UNWIND_RESUME;
*BUILT_IN_CXA_END_CLEANUP = *gccc::BUILT_IN_CXA_END_CLEANUP;
*BUILT_IN_EH_POINTER = *gccc::BUILT_IN_EH_POINTER;
*BUILT_IN_EH_FILTER = *gccc::BUILT_IN_EH_FILTER;
*BUILT_IN_EH_COPY_VALUES = *gccc::BUILT_IN_EH_COPY_VALUES;
*BUILT_IN_FETCH_AND_ADD_N = *gccc::BUILT_IN_FETCH_AND_ADD_N;
*BUILT_IN_FETCH_AND_ADD_1 = *gccc::BUILT_IN_FETCH_AND_ADD_1;
*BUILT_IN_FETCH_AND_ADD_2 = *gccc::BUILT_IN_FETCH_AND_ADD_2;
*BUILT_IN_FETCH_AND_ADD_4 = *gccc::BUILT_IN_FETCH_AND_ADD_4;
*BUILT_IN_FETCH_AND_ADD_8 = *gccc::BUILT_IN_FETCH_AND_ADD_8;
*BUILT_IN_FETCH_AND_ADD_16 = *gccc::BUILT_IN_FETCH_AND_ADD_16;
*BUILT_IN_FETCH_AND_SUB_N = *gccc::BUILT_IN_FETCH_AND_SUB_N;
*BUILT_IN_FETCH_AND_SUB_1 = *gccc::BUILT_IN_FETCH_AND_SUB_1;
*BUILT_IN_FETCH_AND_SUB_2 = *gccc::BUILT_IN_FETCH_AND_SUB_2;
*BUILT_IN_FETCH_AND_SUB_4 = *gccc::BUILT_IN_FETCH_AND_SUB_4;
*BUILT_IN_FETCH_AND_SUB_8 = *gccc::BUILT_IN_FETCH_AND_SUB_8;
*BUILT_IN_FETCH_AND_SUB_16 = *gccc::BUILT_IN_FETCH_AND_SUB_16;
*BUILT_IN_FETCH_AND_OR_N = *gccc::BUILT_IN_FETCH_AND_OR_N;
*BUILT_IN_FETCH_AND_OR_1 = *gccc::BUILT_IN_FETCH_AND_OR_1;
*BUILT_IN_FETCH_AND_OR_2 = *gccc::BUILT_IN_FETCH_AND_OR_2;
*BUILT_IN_FETCH_AND_OR_4 = *gccc::BUILT_IN_FETCH_AND_OR_4;
*BUILT_IN_FETCH_AND_OR_8 = *gccc::BUILT_IN_FETCH_AND_OR_8;
*BUILT_IN_FETCH_AND_OR_16 = *gccc::BUILT_IN_FETCH_AND_OR_16;
*BUILT_IN_FETCH_AND_AND_N = *gccc::BUILT_IN_FETCH_AND_AND_N;
*BUILT_IN_FETCH_AND_AND_1 = *gccc::BUILT_IN_FETCH_AND_AND_1;
*BUILT_IN_FETCH_AND_AND_2 = *gccc::BUILT_IN_FETCH_AND_AND_2;
*BUILT_IN_FETCH_AND_AND_4 = *gccc::BUILT_IN_FETCH_AND_AND_4;
*BUILT_IN_FETCH_AND_AND_8 = *gccc::BUILT_IN_FETCH_AND_AND_8;
*BUILT_IN_FETCH_AND_AND_16 = *gccc::BUILT_IN_FETCH_AND_AND_16;
*BUILT_IN_FETCH_AND_XOR_N = *gccc::BUILT_IN_FETCH_AND_XOR_N;
*BUILT_IN_FETCH_AND_XOR_1 = *gccc::BUILT_IN_FETCH_AND_XOR_1;
*BUILT_IN_FETCH_AND_XOR_2 = *gccc::BUILT_IN_FETCH_AND_XOR_2;
*BUILT_IN_FETCH_AND_XOR_4 = *gccc::BUILT_IN_FETCH_AND_XOR_4;
*BUILT_IN_FETCH_AND_XOR_8 = *gccc::BUILT_IN_FETCH_AND_XOR_8;
*BUILT_IN_FETCH_AND_XOR_16 = *gccc::BUILT_IN_FETCH_AND_XOR_16;
*BUILT_IN_FETCH_AND_NAND_N = *gccc::BUILT_IN_FETCH_AND_NAND_N;
*BUILT_IN_FETCH_AND_NAND_1 = *gccc::BUILT_IN_FETCH_AND_NAND_1;
*BUILT_IN_FETCH_AND_NAND_2 = *gccc::BUILT_IN_FETCH_AND_NAND_2;
*BUILT_IN_FETCH_AND_NAND_4 = *gccc::BUILT_IN_FETCH_AND_NAND_4;
*BUILT_IN_FETCH_AND_NAND_8 = *gccc::BUILT_IN_FETCH_AND_NAND_8;
*BUILT_IN_FETCH_AND_NAND_16 = *gccc::BUILT_IN_FETCH_AND_NAND_16;
*BUILT_IN_ADD_AND_FETCH_N = *gccc::BUILT_IN_ADD_AND_FETCH_N;
*BUILT_IN_ADD_AND_FETCH_1 = *gccc::BUILT_IN_ADD_AND_FETCH_1;
*BUILT_IN_ADD_AND_FETCH_2 = *gccc::BUILT_IN_ADD_AND_FETCH_2;
*BUILT_IN_ADD_AND_FETCH_4 = *gccc::BUILT_IN_ADD_AND_FETCH_4;
*BUILT_IN_ADD_AND_FETCH_8 = *gccc::BUILT_IN_ADD_AND_FETCH_8;
*BUILT_IN_ADD_AND_FETCH_16 = *gccc::BUILT_IN_ADD_AND_FETCH_16;
*BUILT_IN_SUB_AND_FETCH_N = *gccc::BUILT_IN_SUB_AND_FETCH_N;
*BUILT_IN_SUB_AND_FETCH_1 = *gccc::BUILT_IN_SUB_AND_FETCH_1;
*BUILT_IN_SUB_AND_FETCH_2 = *gccc::BUILT_IN_SUB_AND_FETCH_2;
*BUILT_IN_SUB_AND_FETCH_4 = *gccc::BUILT_IN_SUB_AND_FETCH_4;
*BUILT_IN_SUB_AND_FETCH_8 = *gccc::BUILT_IN_SUB_AND_FETCH_8;
*BUILT_IN_SUB_AND_FETCH_16 = *gccc::BUILT_IN_SUB_AND_FETCH_16;
*BUILT_IN_OR_AND_FETCH_N = *gccc::BUILT_IN_OR_AND_FETCH_N;
*BUILT_IN_OR_AND_FETCH_1 = *gccc::BUILT_IN_OR_AND_FETCH_1;
*BUILT_IN_OR_AND_FETCH_2 = *gccc::BUILT_IN_OR_AND_FETCH_2;
*BUILT_IN_OR_AND_FETCH_4 = *gccc::BUILT_IN_OR_AND_FETCH_4;
*BUILT_IN_OR_AND_FETCH_8 = *gccc::BUILT_IN_OR_AND_FETCH_8;
*BUILT_IN_OR_AND_FETCH_16 = *gccc::BUILT_IN_OR_AND_FETCH_16;
*BUILT_IN_AND_AND_FETCH_N = *gccc::BUILT_IN_AND_AND_FETCH_N;
*BUILT_IN_AND_AND_FETCH_1 = *gccc::BUILT_IN_AND_AND_FETCH_1;
*BUILT_IN_AND_AND_FETCH_2 = *gccc::BUILT_IN_AND_AND_FETCH_2;
*BUILT_IN_AND_AND_FETCH_4 = *gccc::BUILT_IN_AND_AND_FETCH_4;
*BUILT_IN_AND_AND_FETCH_8 = *gccc::BUILT_IN_AND_AND_FETCH_8;
*BUILT_IN_AND_AND_FETCH_16 = *gccc::BUILT_IN_AND_AND_FETCH_16;
*BUILT_IN_XOR_AND_FETCH_N = *gccc::BUILT_IN_XOR_AND_FETCH_N;
*BUILT_IN_XOR_AND_FETCH_1 = *gccc::BUILT_IN_XOR_AND_FETCH_1;
*BUILT_IN_XOR_AND_FETCH_2 = *gccc::BUILT_IN_XOR_AND_FETCH_2;
*BUILT_IN_XOR_AND_FETCH_4 = *gccc::BUILT_IN_XOR_AND_FETCH_4;
*BUILT_IN_XOR_AND_FETCH_8 = *gccc::BUILT_IN_XOR_AND_FETCH_8;
*BUILT_IN_XOR_AND_FETCH_16 = *gccc::BUILT_IN_XOR_AND_FETCH_16;
*BUILT_IN_NAND_AND_FETCH_N = *gccc::BUILT_IN_NAND_AND_FETCH_N;
*BUILT_IN_NAND_AND_FETCH_1 = *gccc::BUILT_IN_NAND_AND_FETCH_1;
*BUILT_IN_NAND_AND_FETCH_2 = *gccc::BUILT_IN_NAND_AND_FETCH_2;
*BUILT_IN_NAND_AND_FETCH_4 = *gccc::BUILT_IN_NAND_AND_FETCH_4;
*BUILT_IN_NAND_AND_FETCH_8 = *gccc::BUILT_IN_NAND_AND_FETCH_8;
*BUILT_IN_NAND_AND_FETCH_16 = *gccc::BUILT_IN_NAND_AND_FETCH_16;
*BUILT_IN_BOOL_COMPARE_AND_SWAP_N = *gccc::BUILT_IN_BOOL_COMPARE_AND_SWAP_N;
*BUILT_IN_BOOL_COMPARE_AND_SWAP_1 = *gccc::BUILT_IN_BOOL_COMPARE_AND_SWAP_1;
*BUILT_IN_BOOL_COMPARE_AND_SWAP_2 = *gccc::BUILT_IN_BOOL_COMPARE_AND_SWAP_2;
*BUILT_IN_BOOL_COMPARE_AND_SWAP_4 = *gccc::BUILT_IN_BOOL_COMPARE_AND_SWAP_4;
*BUILT_IN_BOOL_COMPARE_AND_SWAP_8 = *gccc::BUILT_IN_BOOL_COMPARE_AND_SWAP_8;
*BUILT_IN_BOOL_COMPARE_AND_SWAP_16 = *gccc::BUILT_IN_BOOL_COMPARE_AND_SWAP_16;
*BUILT_IN_VAL_COMPARE_AND_SWAP_N = *gccc::BUILT_IN_VAL_COMPARE_AND_SWAP_N;
*BUILT_IN_VAL_COMPARE_AND_SWAP_1 = *gccc::BUILT_IN_VAL_COMPARE_AND_SWAP_1;
*BUILT_IN_VAL_COMPARE_AND_SWAP_2 = *gccc::BUILT_IN_VAL_COMPARE_AND_SWAP_2;
*BUILT_IN_VAL_COMPARE_AND_SWAP_4 = *gccc::BUILT_IN_VAL_COMPARE_AND_SWAP_4;
*BUILT_IN_VAL_COMPARE_AND_SWAP_8 = *gccc::BUILT_IN_VAL_COMPARE_AND_SWAP_8;
*BUILT_IN_VAL_COMPARE_AND_SWAP_16 = *gccc::BUILT_IN_VAL_COMPARE_AND_SWAP_16;
*BUILT_IN_LOCK_TEST_AND_SET_N = *gccc::BUILT_IN_LOCK_TEST_AND_SET_N;
*BUILT_IN_LOCK_TEST_AND_SET_1 = *gccc::BUILT_IN_LOCK_TEST_AND_SET_1;
*BUILT_IN_LOCK_TEST_AND_SET_2 = *gccc::BUILT_IN_LOCK_TEST_AND_SET_2;
*BUILT_IN_LOCK_TEST_AND_SET_4 = *gccc::BUILT_IN_LOCK_TEST_AND_SET_4;
*BUILT_IN_LOCK_TEST_AND_SET_8 = *gccc::BUILT_IN_LOCK_TEST_AND_SET_8;
*BUILT_IN_LOCK_TEST_AND_SET_16 = *gccc::BUILT_IN_LOCK_TEST_AND_SET_16;
*BUILT_IN_LOCK_RELEASE_N = *gccc::BUILT_IN_LOCK_RELEASE_N;
*BUILT_IN_LOCK_RELEASE_1 = *gccc::BUILT_IN_LOCK_RELEASE_1;
*BUILT_IN_LOCK_RELEASE_2 = *gccc::BUILT_IN_LOCK_RELEASE_2;
*BUILT_IN_LOCK_RELEASE_4 = *gccc::BUILT_IN_LOCK_RELEASE_4;
*BUILT_IN_LOCK_RELEASE_8 = *gccc::BUILT_IN_LOCK_RELEASE_8;
*BUILT_IN_LOCK_RELEASE_16 = *gccc::BUILT_IN_LOCK_RELEASE_16;
*BUILT_IN_SYNCHRONIZE = *gccc::BUILT_IN_SYNCHRONIZE;
*BUILT_IN_OMP_GET_THREAD_NUM = *gccc::BUILT_IN_OMP_GET_THREAD_NUM;
*BUILT_IN_OMP_GET_NUM_THREADS = *gccc::BUILT_IN_OMP_GET_NUM_THREADS;
*BUILT_IN_GOMP_ATOMIC_START = *gccc::BUILT_IN_GOMP_ATOMIC_START;
*BUILT_IN_GOMP_ATOMIC_END = *gccc::BUILT_IN_GOMP_ATOMIC_END;
*BUILT_IN_GOMP_BARRIER = *gccc::BUILT_IN_GOMP_BARRIER;
*BUILT_IN_GOMP_TASKWAIT = *gccc::BUILT_IN_GOMP_TASKWAIT;
*BUILT_IN_GOMP_CRITICAL_START = *gccc::BUILT_IN_GOMP_CRITICAL_START;
*BUILT_IN_GOMP_CRITICAL_END = *gccc::BUILT_IN_GOMP_CRITICAL_END;
*BUILT_IN_GOMP_CRITICAL_NAME_START = *gccc::BUILT_IN_GOMP_CRITICAL_NAME_START;
*BUILT_IN_GOMP_CRITICAL_NAME_END = *gccc::BUILT_IN_GOMP_CRITICAL_NAME_END;
*BUILT_IN_GOMP_LOOP_STATIC_START = *gccc::BUILT_IN_GOMP_LOOP_STATIC_START;
*BUILT_IN_GOMP_LOOP_DYNAMIC_START = *gccc::BUILT_IN_GOMP_LOOP_DYNAMIC_START;
*BUILT_IN_GOMP_LOOP_GUIDED_START = *gccc::BUILT_IN_GOMP_LOOP_GUIDED_START;
*BUILT_IN_GOMP_LOOP_RUNTIME_START = *gccc::BUILT_IN_GOMP_LOOP_RUNTIME_START;
*BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START;
*BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START;
*BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START;
*BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START;
*BUILT_IN_GOMP_LOOP_STATIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_STATIC_NEXT;
*BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT;
*BUILT_IN_GOMP_LOOP_GUIDED_NEXT = *gccc::BUILT_IN_GOMP_LOOP_GUIDED_NEXT;
*BUILT_IN_GOMP_LOOP_RUNTIME_NEXT = *gccc::BUILT_IN_GOMP_LOOP_RUNTIME_NEXT;
*BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT;
*BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT;
*BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT;
*BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_STATIC_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_STATIC_START;
*BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START;
*BUILT_IN_GOMP_LOOP_ULL_GUIDED_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_GUIDED_START;
*BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START;
*BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT;
*BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT = *gccc::BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT;
*BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START = *gccc::BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START;
*BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START = *gccc::BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START;
*BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START = *gccc::BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START;
*BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START = *gccc::BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START;
*BUILT_IN_GOMP_LOOP_END = *gccc::BUILT_IN_GOMP_LOOP_END;
*BUILT_IN_GOMP_LOOP_END_NOWAIT = *gccc::BUILT_IN_GOMP_LOOP_END_NOWAIT;
*BUILT_IN_GOMP_ORDERED_START = *gccc::BUILT_IN_GOMP_ORDERED_START;
*BUILT_IN_GOMP_ORDERED_END = *gccc::BUILT_IN_GOMP_ORDERED_END;
*BUILT_IN_GOMP_PARALLEL_START = *gccc::BUILT_IN_GOMP_PARALLEL_START;
*BUILT_IN_GOMP_PARALLEL_END = *gccc::BUILT_IN_GOMP_PARALLEL_END;
*BUILT_IN_GOMP_TASK = *gccc::BUILT_IN_GOMP_TASK;
*BUILT_IN_GOMP_SECTIONS_START = *gccc::BUILT_IN_GOMP_SECTIONS_START;
*BUILT_IN_GOMP_SECTIONS_NEXT = *gccc::BUILT_IN_GOMP_SECTIONS_NEXT;
*BUILT_IN_GOMP_PARALLEL_SECTIONS_START = *gccc::BUILT_IN_GOMP_PARALLEL_SECTIONS_START;
*BUILT_IN_GOMP_SECTIONS_END = *gccc::BUILT_IN_GOMP_SECTIONS_END;
*BUILT_IN_GOMP_SECTIONS_END_NOWAIT = *gccc::BUILT_IN_GOMP_SECTIONS_END_NOWAIT;
*BUILT_IN_GOMP_SINGLE_START = *gccc::BUILT_IN_GOMP_SINGLE_START;
*BUILT_IN_GOMP_SINGLE_COPY_START = *gccc::BUILT_IN_GOMP_SINGLE_COPY_START;
*BUILT_IN_GOMP_SINGLE_COPY_END = *gccc::BUILT_IN_GOMP_SINGLE_COPY_END;
*BUILT_IN_COMPLEX_MUL_MIN = *gccc::BUILT_IN_COMPLEX_MUL_MIN;
*BUILT_IN_COMPLEX_MUL_MAX = *gccc::BUILT_IN_COMPLEX_MUL_MAX;
*BUILT_IN_COMPLEX_DIV_MIN = *gccc::BUILT_IN_COMPLEX_DIV_MIN;
*BUILT_IN_COMPLEX_DIV_MAX = *gccc::BUILT_IN_COMPLEX_DIV_MAX;
*END_BUILTINS = *gccc::END_BUILTINS;
*built_in_names = *gccc::built_in_names;
*built_in_decls = *gccc::built_in_decls;
*implicit_built_in_decls = *gccc::implicit_built_in_decls;
*omp_clause_num_ops = *gccc::omp_clause_num_ops;
*omp_clause_code_name = *gccc::omp_clause_code_name;
*OMP_CLAUSE_ERROR = *gccc::OMP_CLAUSE_ERROR;
*OMP_CLAUSE_PRIVATE = *gccc::OMP_CLAUSE_PRIVATE;
*OMP_CLAUSE_SHARED = *gccc::OMP_CLAUSE_SHARED;
*OMP_CLAUSE_FIRSTPRIVATE = *gccc::OMP_CLAUSE_FIRSTPRIVATE;
*OMP_CLAUSE_LASTPRIVATE = *gccc::OMP_CLAUSE_LASTPRIVATE;
*OMP_CLAUSE_REDUCTION = *gccc::OMP_CLAUSE_REDUCTION;
*OMP_CLAUSE_COPYIN = *gccc::OMP_CLAUSE_COPYIN;
*OMP_CLAUSE_COPYPRIVATE = *gccc::OMP_CLAUSE_COPYPRIVATE;
*OMP_CLAUSE_IF = *gccc::OMP_CLAUSE_IF;
*OMP_CLAUSE_NUM_THREADS = *gccc::OMP_CLAUSE_NUM_THREADS;
*OMP_CLAUSE_SCHEDULE = *gccc::OMP_CLAUSE_SCHEDULE;
*OMP_CLAUSE_NOWAIT = *gccc::OMP_CLAUSE_NOWAIT;
*OMP_CLAUSE_ORDERED = *gccc::OMP_CLAUSE_ORDERED;
*OMP_CLAUSE_DEFAULT = *gccc::OMP_CLAUSE_DEFAULT;
*OMP_CLAUSE_COLLAPSE = *gccc::OMP_CLAUSE_COLLAPSE;
*OMP_CLAUSE_UNTIED = *gccc::OMP_CLAUSE_UNTIED;
*TS_BASE = *gccc::TS_BASE;
*TS_COMMON = *gccc::TS_COMMON;
*TS_INT_CST = *gccc::TS_INT_CST;
*TS_REAL_CST = *gccc::TS_REAL_CST;
*TS_FIXED_CST = *gccc::TS_FIXED_CST;
*TS_VECTOR = *gccc::TS_VECTOR;
*TS_STRING = *gccc::TS_STRING;
*TS_COMPLEX = *gccc::TS_COMPLEX;
*TS_IDENTIFIER = *gccc::TS_IDENTIFIER;
*TS_DECL_MINIMAL = *gccc::TS_DECL_MINIMAL;
*TS_DECL_COMMON = *gccc::TS_DECL_COMMON;
*TS_DECL_WRTL = *gccc::TS_DECL_WRTL;
*TS_DECL_NON_COMMON = *gccc::TS_DECL_NON_COMMON;
*TS_DECL_WITH_VIS = *gccc::TS_DECL_WITH_VIS;
*TS_FIELD_DECL = *gccc::TS_FIELD_DECL;
*TS_VAR_DECL = *gccc::TS_VAR_DECL;
*TS_PARM_DECL = *gccc::TS_PARM_DECL;
*TS_LABEL_DECL = *gccc::TS_LABEL_DECL;
*TS_RESULT_DECL = *gccc::TS_RESULT_DECL;
*TS_CONST_DECL = *gccc::TS_CONST_DECL;
*TS_TYPE_DECL = *gccc::TS_TYPE_DECL;
*TS_FUNCTION_DECL = *gccc::TS_FUNCTION_DECL;
*TS_TRANSLATION_UNIT_DECL = *gccc::TS_TRANSLATION_UNIT_DECL;
*TS_TYPE = *gccc::TS_TYPE;
*TS_LIST = *gccc::TS_LIST;
*TS_VEC = *gccc::TS_VEC;
*TS_EXP = *gccc::TS_EXP;
*TS_SSA_NAME = *gccc::TS_SSA_NAME;
*TS_BLOCK = *gccc::TS_BLOCK;
*TS_BINFO = *gccc::TS_BINFO;
*TS_STATEMENT_LIST = *gccc::TS_STATEMENT_LIST;
*TS_CONSTRUCTOR = *gccc::TS_CONSTRUCTOR;
*TS_OMP_CLAUSE = *gccc::TS_OMP_CLAUSE;
*TS_OPTIMIZATION = *gccc::TS_OPTIMIZATION;
*TS_TARGET_OPTION = *gccc::TS_TARGET_OPTION;
*LAST_TS_ENUM = *gccc::LAST_TS_ENUM;
*obstack_alloc_failed_handler = *gccc::obstack_alloc_failed_handler;
*obstack_exit_failure = *gccc::obstack_exit_failure;
*HT_NO_INSERT = *gccc::HT_NO_INSERT;
*HT_ALLOC = *gccc::HT_ALLOC;
*OMP_CLAUSE_SCHEDULE_STATIC = *gccc::OMP_CLAUSE_SCHEDULE_STATIC;
*OMP_CLAUSE_SCHEDULE_DYNAMIC = *gccc::OMP_CLAUSE_SCHEDULE_DYNAMIC;
*OMP_CLAUSE_SCHEDULE_GUIDED = *gccc::OMP_CLAUSE_SCHEDULE_GUIDED;
*OMP_CLAUSE_SCHEDULE_AUTO = *gccc::OMP_CLAUSE_SCHEDULE_AUTO;
*OMP_CLAUSE_SCHEDULE_RUNTIME = *gccc::OMP_CLAUSE_SCHEDULE_RUNTIME;
*OMP_CLAUSE_DEFAULT_UNSPECIFIED = *gccc::OMP_CLAUSE_DEFAULT_UNSPECIFIED;
*OMP_CLAUSE_DEFAULT_SHARED = *gccc::OMP_CLAUSE_DEFAULT_SHARED;
*OMP_CLAUSE_DEFAULT_NONE = *gccc::OMP_CLAUSE_DEFAULT_NONE;
*OMP_CLAUSE_DEFAULT_PRIVATE = *gccc::OMP_CLAUSE_DEFAULT_PRIVATE;
*OMP_CLAUSE_DEFAULT_FIRSTPRIVATE = *gccc::OMP_CLAUSE_DEFAULT_FIRSTPRIVATE;

my %__all_translation_units_hash;
tie %__all_translation_units_hash,"gcc::VEC_tree_gc", $gccc::all_translation_units;
$all_translation_units= \%__all_translation_units_hash;
bless $all_translation_units, gcc::VEC_tree_gc;
*TI_ERROR_MARK = *gccc::TI_ERROR_MARK;
*TI_INTQI_TYPE = *gccc::TI_INTQI_TYPE;
*TI_INTHI_TYPE = *gccc::TI_INTHI_TYPE;
*TI_INTSI_TYPE = *gccc::TI_INTSI_TYPE;
*TI_INTDI_TYPE = *gccc::TI_INTDI_TYPE;
*TI_INTTI_TYPE = *gccc::TI_INTTI_TYPE;
*TI_UINTQI_TYPE = *gccc::TI_UINTQI_TYPE;
*TI_UINTHI_TYPE = *gccc::TI_UINTHI_TYPE;
*TI_UINTSI_TYPE = *gccc::TI_UINTSI_TYPE;
*TI_UINTDI_TYPE = *gccc::TI_UINTDI_TYPE;
*TI_UINTTI_TYPE = *gccc::TI_UINTTI_TYPE;
*TI_UINT32_TYPE = *gccc::TI_UINT32_TYPE;
*TI_UINT64_TYPE = *gccc::TI_UINT64_TYPE;
*TI_INTEGER_ZERO = *gccc::TI_INTEGER_ZERO;
*TI_INTEGER_ONE = *gccc::TI_INTEGER_ONE;
*TI_INTEGER_THREE = *gccc::TI_INTEGER_THREE;
*TI_INTEGER_MINUS_ONE = *gccc::TI_INTEGER_MINUS_ONE;
*TI_NULL_POINTER = *gccc::TI_NULL_POINTER;
*TI_SIZE_ZERO = *gccc::TI_SIZE_ZERO;
*TI_SIZE_ONE = *gccc::TI_SIZE_ONE;
*TI_BITSIZE_ZERO = *gccc::TI_BITSIZE_ZERO;
*TI_BITSIZE_ONE = *gccc::TI_BITSIZE_ONE;
*TI_BITSIZE_UNIT = *gccc::TI_BITSIZE_UNIT;
*TI_PUBLIC = *gccc::TI_PUBLIC;
*TI_PROTECTED = *gccc::TI_PROTECTED;
*TI_PRIVATE = *gccc::TI_PRIVATE;
*TI_BOOLEAN_FALSE = *gccc::TI_BOOLEAN_FALSE;
*TI_BOOLEAN_TRUE = *gccc::TI_BOOLEAN_TRUE;
*TI_COMPLEX_INTEGER_TYPE = *gccc::TI_COMPLEX_INTEGER_TYPE;
*TI_COMPLEX_FLOAT_TYPE = *gccc::TI_COMPLEX_FLOAT_TYPE;
*TI_COMPLEX_DOUBLE_TYPE = *gccc::TI_COMPLEX_DOUBLE_TYPE;
*TI_COMPLEX_LONG_DOUBLE_TYPE = *gccc::TI_COMPLEX_LONG_DOUBLE_TYPE;
*TI_FLOAT_TYPE = *gccc::TI_FLOAT_TYPE;
*TI_DOUBLE_TYPE = *gccc::TI_DOUBLE_TYPE;
*TI_LONG_DOUBLE_TYPE = *gccc::TI_LONG_DOUBLE_TYPE;
*TI_FLOAT_PTR_TYPE = *gccc::TI_FLOAT_PTR_TYPE;
*TI_DOUBLE_PTR_TYPE = *gccc::TI_DOUBLE_PTR_TYPE;
*TI_LONG_DOUBLE_PTR_TYPE = *gccc::TI_LONG_DOUBLE_PTR_TYPE;
*TI_INTEGER_PTR_TYPE = *gccc::TI_INTEGER_PTR_TYPE;
*TI_VOID_TYPE = *gccc::TI_VOID_TYPE;
*TI_PTR_TYPE = *gccc::TI_PTR_TYPE;
*TI_CONST_PTR_TYPE = *gccc::TI_CONST_PTR_TYPE;
*TI_SIZE_TYPE = *gccc::TI_SIZE_TYPE;
*TI_PID_TYPE = *gccc::TI_PID_TYPE;
*TI_PTRDIFF_TYPE = *gccc::TI_PTRDIFF_TYPE;
*TI_VA_LIST_TYPE = *gccc::TI_VA_LIST_TYPE;
*TI_VA_LIST_GPR_COUNTER_FIELD = *gccc::TI_VA_LIST_GPR_COUNTER_FIELD;
*TI_VA_LIST_FPR_COUNTER_FIELD = *gccc::TI_VA_LIST_FPR_COUNTER_FIELD;
*TI_BOOLEAN_TYPE = *gccc::TI_BOOLEAN_TYPE;
*TI_FILEPTR_TYPE = *gccc::TI_FILEPTR_TYPE;
*TI_DFLOAT32_TYPE = *gccc::TI_DFLOAT32_TYPE;
*TI_DFLOAT64_TYPE = *gccc::TI_DFLOAT64_TYPE;
*TI_DFLOAT128_TYPE = *gccc::TI_DFLOAT128_TYPE;
*TI_DFLOAT32_PTR_TYPE = *gccc::TI_DFLOAT32_PTR_TYPE;
*TI_DFLOAT64_PTR_TYPE = *gccc::TI_DFLOAT64_PTR_TYPE;
*TI_DFLOAT128_PTR_TYPE = *gccc::TI_DFLOAT128_PTR_TYPE;
*TI_VOID_LIST_NODE = *gccc::TI_VOID_LIST_NODE;
*TI_MAIN_IDENTIFIER = *gccc::TI_MAIN_IDENTIFIER;
*TI_SAT_SFRACT_TYPE = *gccc::TI_SAT_SFRACT_TYPE;
*TI_SAT_FRACT_TYPE = *gccc::TI_SAT_FRACT_TYPE;
*TI_SAT_LFRACT_TYPE = *gccc::TI_SAT_LFRACT_TYPE;
*TI_SAT_LLFRACT_TYPE = *gccc::TI_SAT_LLFRACT_TYPE;
*TI_SAT_USFRACT_TYPE = *gccc::TI_SAT_USFRACT_TYPE;
*TI_SAT_UFRACT_TYPE = *gccc::TI_SAT_UFRACT_TYPE;
*TI_SAT_ULFRACT_TYPE = *gccc::TI_SAT_ULFRACT_TYPE;
*TI_SAT_ULLFRACT_TYPE = *gccc::TI_SAT_ULLFRACT_TYPE;
*TI_SFRACT_TYPE = *gccc::TI_SFRACT_TYPE;
*TI_FRACT_TYPE = *gccc::TI_FRACT_TYPE;
*TI_LFRACT_TYPE = *gccc::TI_LFRACT_TYPE;
*TI_LLFRACT_TYPE = *gccc::TI_LLFRACT_TYPE;
*TI_USFRACT_TYPE = *gccc::TI_USFRACT_TYPE;
*TI_UFRACT_TYPE = *gccc::TI_UFRACT_TYPE;
*TI_ULFRACT_TYPE = *gccc::TI_ULFRACT_TYPE;
*TI_ULLFRACT_TYPE = *gccc::TI_ULLFRACT_TYPE;
*TI_SAT_SACCUM_TYPE = *gccc::TI_SAT_SACCUM_TYPE;
*TI_SAT_ACCUM_TYPE = *gccc::TI_SAT_ACCUM_TYPE;
*TI_SAT_LACCUM_TYPE = *gccc::TI_SAT_LACCUM_TYPE;
*TI_SAT_LLACCUM_TYPE = *gccc::TI_SAT_LLACCUM_TYPE;
*TI_SAT_USACCUM_TYPE = *gccc::TI_SAT_USACCUM_TYPE;
*TI_SAT_UACCUM_TYPE = *gccc::TI_SAT_UACCUM_TYPE;
*TI_SAT_ULACCUM_TYPE = *gccc::TI_SAT_ULACCUM_TYPE;
*TI_SAT_ULLACCUM_TYPE = *gccc::TI_SAT_ULLACCUM_TYPE;
*TI_SACCUM_TYPE = *gccc::TI_SACCUM_TYPE;
*TI_ACCUM_TYPE = *gccc::TI_ACCUM_TYPE;
*TI_LACCUM_TYPE = *gccc::TI_LACCUM_TYPE;
*TI_LLACCUM_TYPE = *gccc::TI_LLACCUM_TYPE;
*TI_USACCUM_TYPE = *gccc::TI_USACCUM_TYPE;
*TI_UACCUM_TYPE = *gccc::TI_UACCUM_TYPE;
*TI_ULACCUM_TYPE = *gccc::TI_ULACCUM_TYPE;
*TI_ULLACCUM_TYPE = *gccc::TI_ULLACCUM_TYPE;
*TI_QQ_TYPE = *gccc::TI_QQ_TYPE;
*TI_HQ_TYPE = *gccc::TI_HQ_TYPE;
*TI_SQ_TYPE = *gccc::TI_SQ_TYPE;
*TI_DQ_TYPE = *gccc::TI_DQ_TYPE;
*TI_TQ_TYPE = *gccc::TI_TQ_TYPE;
*TI_UQQ_TYPE = *gccc::TI_UQQ_TYPE;
*TI_UHQ_TYPE = *gccc::TI_UHQ_TYPE;
*TI_USQ_TYPE = *gccc::TI_USQ_TYPE;
*TI_UDQ_TYPE = *gccc::TI_UDQ_TYPE;
*TI_UTQ_TYPE = *gccc::TI_UTQ_TYPE;
*TI_SAT_QQ_TYPE = *gccc::TI_SAT_QQ_TYPE;
*TI_SAT_HQ_TYPE = *gccc::TI_SAT_HQ_TYPE;
*TI_SAT_SQ_TYPE = *gccc::TI_SAT_SQ_TYPE;
*TI_SAT_DQ_TYPE = *gccc::TI_SAT_DQ_TYPE;
*TI_SAT_TQ_TYPE = *gccc::TI_SAT_TQ_TYPE;
*TI_SAT_UQQ_TYPE = *gccc::TI_SAT_UQQ_TYPE;
*TI_SAT_UHQ_TYPE = *gccc::TI_SAT_UHQ_TYPE;
*TI_SAT_USQ_TYPE = *gccc::TI_SAT_USQ_TYPE;
*TI_SAT_UDQ_TYPE = *gccc::TI_SAT_UDQ_TYPE;
*TI_SAT_UTQ_TYPE = *gccc::TI_SAT_UTQ_TYPE;
*TI_HA_TYPE = *gccc::TI_HA_TYPE;
*TI_SA_TYPE = *gccc::TI_SA_TYPE;
*TI_DA_TYPE = *gccc::TI_DA_TYPE;
*TI_TA_TYPE = *gccc::TI_TA_TYPE;
*TI_UHA_TYPE = *gccc::TI_UHA_TYPE;
*TI_USA_TYPE = *gccc::TI_USA_TYPE;
*TI_UDA_TYPE = *gccc::TI_UDA_TYPE;
*TI_UTA_TYPE = *gccc::TI_UTA_TYPE;
*TI_SAT_HA_TYPE = *gccc::TI_SAT_HA_TYPE;
*TI_SAT_SA_TYPE = *gccc::TI_SAT_SA_TYPE;
*TI_SAT_DA_TYPE = *gccc::TI_SAT_DA_TYPE;
*TI_SAT_TA_TYPE = *gccc::TI_SAT_TA_TYPE;
*TI_SAT_UHA_TYPE = *gccc::TI_SAT_UHA_TYPE;
*TI_SAT_USA_TYPE = *gccc::TI_SAT_USA_TYPE;
*TI_SAT_UDA_TYPE = *gccc::TI_SAT_UDA_TYPE;
*TI_SAT_UTA_TYPE = *gccc::TI_SAT_UTA_TYPE;
*TI_OPTIMIZATION_DEFAULT = *gccc::TI_OPTIMIZATION_DEFAULT;
*TI_OPTIMIZATION_CURRENT = *gccc::TI_OPTIMIZATION_CURRENT;
*TI_TARGET_OPTION_DEFAULT = *gccc::TI_TARGET_OPTION_DEFAULT;
*TI_TARGET_OPTION_CURRENT = *gccc::TI_TARGET_OPTION_CURRENT;
*TI_CURRENT_TARGET_PRAGMA = *gccc::TI_CURRENT_TARGET_PRAGMA;
*TI_CURRENT_OPTIMIZE_PRAGMA = *gccc::TI_CURRENT_OPTIMIZE_PRAGMA;
*TI_MAX = *gccc::TI_MAX;
*global_trees = *gccc::global_trees;
*itk_char = *gccc::itk_char;
*itk_signed_char = *gccc::itk_signed_char;
*itk_unsigned_char = *gccc::itk_unsigned_char;
*itk_short = *gccc::itk_short;
*itk_unsigned_short = *gccc::itk_unsigned_short;
*itk_int = *gccc::itk_int;
*itk_unsigned_int = *gccc::itk_unsigned_int;
*itk_long = *gccc::itk_long;
*itk_unsigned_long = *gccc::itk_unsigned_long;
*itk_long_long = *gccc::itk_long_long;
*itk_unsigned_long_long = *gccc::itk_unsigned_long_long;
*itk_int128 = *gccc::itk_int128;
*itk_unsigned_int128 = *gccc::itk_unsigned_int128;
*itk_none = *gccc::itk_none;
*integer_types = *gccc::integer_types;
*ptrmemfunc_vbit_in_pfn = *gccc::ptrmemfunc_vbit_in_pfn;
*ptrmemfunc_vbit_in_delta = *gccc::ptrmemfunc_vbit_in_delta;
*ATTR_FLAG_DECL_NEXT = *gccc::ATTR_FLAG_DECL_NEXT;
*ATTR_FLAG_FUNCTION_NEXT = *gccc::ATTR_FLAG_FUNCTION_NEXT;
*ATTR_FLAG_ARRAY_NEXT = *gccc::ATTR_FLAG_ARRAY_NEXT;
*ATTR_FLAG_TYPE_IN_PLACE = *gccc::ATTR_FLAG_TYPE_IN_PLACE;
*ATTR_FLAG_BUILT_IN = *gccc::ATTR_FLAG_BUILT_IN;
*SIZETYPE = *gccc::SIZETYPE;
*SSIZETYPE = *gccc::SSIZETYPE;
*BITSIZETYPE = *gccc::BITSIZETYPE;
*SBITSIZETYPE = *gccc::SBITSIZETYPE;
*TYPE_KIND_LAST = *gccc::TYPE_KIND_LAST;
*sizetype_tab = *gccc::sizetype_tab;
*maximum_field_alignment = *gccc::maximum_field_alignment;
*pedantic_lvalues = *gccc::pedantic_lvalues;

my %__current_function_decl_hash;
tie %__current_function_decl_hash,"gcc::tree_node", $gccc::current_function_decl;
$current_function_decl= \%__current_function_decl_hash;
bless $current_function_decl, gcc::tree_node;
*current_function_func_begin_label = *gccc::current_function_func_begin_label;
*folding_initializer = *gccc::folding_initializer;
*OEP_ONLY_CONST = *gccc::OEP_ONLY_CONST;
*OEP_PURE_SAME = *gccc::OEP_PURE_SAME;
*d_kind = *gccc::d_kind;
*t_kind = *gccc::t_kind;
*b_kind = *gccc::b_kind;
*s_kind = *gccc::s_kind;
*r_kind = *gccc::r_kind;
*e_kind = *gccc::e_kind;
*c_kind = *gccc::c_kind;
*id_kind = *gccc::id_kind;
*vec_kind = *gccc::vec_kind;
*binfo_kind = *gccc::binfo_kind;
*ssa_name_kind = *gccc::ssa_name_kind;
*constr_kind = *gccc::constr_kind;
*x_kind = *gccc::x_kind;
*lang_decl = *gccc::lang_decl;
*lang_type = *gccc::lang_type;
*omp_clause_kind = *gccc::omp_clause_kind;
*all_kinds = *gccc::all_kinds;
*tree_node_counts = *gccc::tree_node_counts;
*tree_node_sizes = *gccc::tree_node_sizes;
*in_gimple_form = *gccc::in_gimple_form;
*configuration_arguments = *gccc::configuration_arguments;
*thread_model = *gccc::thread_model;

my %__configure_default_options_hash;
tie %__configure_default_options_hash,"gcc::configure_default_options_t", $gccc::configure_default_options;
$configure_default_options= \%__configure_default_options_hash;
bless $configure_default_options, gcc::configure_default_options_t;
*basever = *gccc::basever;
*datestamp = *gccc::datestamp;
*devphase = *gccc::devphase;
*revision = *gccc::revision;

my %__gcc_version_hash;
tie %__gcc_version_hash,"gcc::plugin_gcc_version", $gccc::gcc_version;
$gcc_version= \%__gcc_version_hash;
bless $gcc_version, gcc::plugin_gcc_version;
*empty_string = *gccc::empty_string;
*gt_ggc_e_24lazy_hex_fp_value_struct = *gccc::gt_ggc_e_24lazy_hex_fp_value_struct;
*gt_ggc_e_15c_inline_static = *gccc::gt_ggc_e_15c_inline_static;
*gt_ggc_e_24VEC_c_goto_bindings_p_gc = *gccc::gt_ggc_e_24VEC_c_goto_bindings_p_gc;
*gt_ggc_e_26VEC_c_goto_bindings_p_base = *gccc::gt_ggc_e_26VEC_c_goto_bindings_p_base;
*gt_ggc_e_15c_goto_bindings = *gccc::gt_ggc_e_15c_goto_bindings;
*gt_ggc_e_7c_scope = *gccc::gt_ggc_e_7c_scope;
*gt_ggc_e_9c_binding = *gccc::gt_ggc_e_9c_binding;
*gt_ggc_e_12c_label_vars = *gccc::gt_ggc_e_12c_label_vars;
*gt_ggc_e_15c_spot_bindings = *gccc::gt_ggc_e_15c_spot_bindings;
*gt_ggc_e_8c_parser = *gccc::gt_ggc_e_8c_parser;
*gt_ggc_e_7c_token = *gccc::gt_ggc_e_7c_token;
*gt_ggc_e_20VEC_ivarref_entry_gc = *gccc::gt_ggc_e_20VEC_ivarref_entry_gc;
*gt_ggc_e_22VEC_ivarref_entry_base = *gccc::gt_ggc_e_22VEC_ivarref_entry_base;
*gt_ggc_e_13ivarref_entry = *gccc::gt_ggc_e_13ivarref_entry;
*gt_ggc_e_22VEC_prot_list_entry_gc = *gccc::gt_ggc_e_22VEC_prot_list_entry_gc;
*gt_ggc_e_24VEC_prot_list_entry_base = *gccc::gt_ggc_e_24VEC_prot_list_entry_base;
*gt_ggc_e_15prot_list_entry = *gccc::gt_ggc_e_15prot_list_entry;
*gt_ggc_e_19VEC_msgref_entry_gc = *gccc::gt_ggc_e_19VEC_msgref_entry_gc;
*gt_ggc_e_21VEC_msgref_entry_base = *gccc::gt_ggc_e_21VEC_msgref_entry_base;
*gt_ggc_e_12msgref_entry = *gccc::gt_ggc_e_12msgref_entry;
*gt_ggc_e_23VEC_ident_data_tuple_gc = *gccc::gt_ggc_e_23VEC_ident_data_tuple_gc;
*gt_ggc_e_25VEC_ident_data_tuple_base = *gccc::gt_ggc_e_25VEC_ident_data_tuple_base;
*gt_ggc_e_16ident_data_tuple = *gccc::gt_ggc_e_16ident_data_tuple;
*gt_ggc_e_15interface_tuple = *gccc::gt_ggc_e_15interface_tuple;
*gt_ggc_e_17string_descriptor = *gccc::gt_ggc_e_17string_descriptor;
*gt_ggc_e_9imp_entry = *gccc::gt_ggc_e_9imp_entry;
*gt_ggc_e_16hashed_attribute = *gccc::gt_ggc_e_16hashed_attribute;
*gt_ggc_e_12hashed_entry = *gccc::gt_ggc_e_12hashed_entry;
*gt_ggc_e_23VEC_ltrans_partition_gc = *gccc::gt_ggc_e_23VEC_ltrans_partition_gc;
*gt_ggc_e_25VEC_ltrans_partition_base = *gccc::gt_ggc_e_25VEC_ltrans_partition_base;
*gt_ggc_e_20ltrans_partition_def = *gccc::gt_ggc_e_20ltrans_partition_def;
*gt_ggc_e_14builtin_record = *gccc::gt_ggc_e_14builtin_record;
*gt_ggc_e_14string_or_tree = *gccc::gt_ggc_e_14string_or_tree;
*gt_ggc_e_11cpool_entry = *gccc::gt_ggc_e_11cpool_entry;
*gt_ggc_e_19VEC_method_entry_gc = *gccc::gt_ggc_e_19VEC_method_entry_gc;
*gt_ggc_e_21VEC_method_entry_base = *gccc::gt_ggc_e_21VEC_method_entry_base;
*gt_ggc_e_14method_entry_d = *gccc::gt_ggc_e_14method_entry_d;
*gt_ggc_e_13lang_decl_var = *gccc::gt_ggc_e_13lang_decl_var;
*gt_ggc_e_14type_assertion = *gccc::gt_ggc_e_14type_assertion;
*gt_ggc_e_14lang_decl_func = *gccc::gt_ggc_e_14lang_decl_func;
*gt_ggc_e_18treetreehash_entry = *gccc::gt_ggc_e_18treetreehash_entry;
*gt_ggc_e_5CPool = *gccc::gt_ggc_e_5CPool;
*gt_ggc_e_3JCF = *gccc::gt_ggc_e_3JCF;
*gt_ggc_e_16gfc_powdecl_list = *gccc::gt_ggc_e_16gfc_powdecl_list;
*gt_ggc_e_16gfc_st_parameter = *gccc::gt_ggc_e_16gfc_st_parameter;
*gt_ggc_e_22gfc_st_parameter_field = *gccc::gt_ggc_e_22gfc_st_parameter_field;
*gt_ggc_e_19gfc_intrinsic_map_t = *gccc::gt_ggc_e_19gfc_intrinsic_map_t;
*gt_ggc_e_17module_htab_entry = *gccc::gt_ggc_e_17module_htab_entry;
*gt_ggc_e_13binding_level = *gccc::gt_ggc_e_13binding_level;
*gt_ggc_e_9opt_stack = *gccc::gt_ggc_e_9opt_stack;
*gt_ggc_e_27VEC_pending_redefinition_gc = *gccc::gt_ggc_e_27VEC_pending_redefinition_gc;
*gt_ggc_e_29VEC_pending_redefinition_base = *gccc::gt_ggc_e_29VEC_pending_redefinition_base;
*gt_ggc_e_22pending_redefinition_d = *gccc::gt_ggc_e_22pending_redefinition_d;
*gt_ggc_e_19VEC_pending_weak_gc = *gccc::gt_ggc_e_19VEC_pending_weak_gc;
*gt_ggc_e_21VEC_pending_weak_base = *gccc::gt_ggc_e_21VEC_pending_weak_base;
*gt_ggc_e_14pending_weak_d = *gccc::gt_ggc_e_14pending_weak_d;
*gt_ggc_e_11align_stack = *gccc::gt_ggc_e_11align_stack;
*gt_ggc_e_18VEC_tree_gc_vec_gc = *gccc::gt_ggc_e_18VEC_tree_gc_vec_gc;
*gt_ggc_e_20VEC_tree_gc_vec_base = *gccc::gt_ggc_e_20VEC_tree_gc_vec_base;
*gt_ggc_e_19VEC_const_char_p_gc = *gccc::gt_ggc_e_19VEC_const_char_p_gc;
*gt_ggc_e_21VEC_const_char_p_base = *gccc::gt_ggc_e_21VEC_const_char_p_base;
*gt_ggc_e_21pending_abstract_type = *gccc::gt_ggc_e_21pending_abstract_type;
*gt_ggc_e_15VEC_tree_int_gc = *gccc::gt_ggc_e_15VEC_tree_int_gc;
*gt_ggc_e_17VEC_tree_int_base = *gccc::gt_ggc_e_17VEC_tree_int_base;
*gt_ggc_e_8tree_int = *gccc::gt_ggc_e_8tree_int;
*gt_ggc_e_9cp_parser = *gccc::gt_ggc_e_9cp_parser;
*gt_ggc_e_34VEC_cp_unparsed_functions_entry_gc = *gccc::gt_ggc_e_34VEC_cp_unparsed_functions_entry_gc;
*gt_ggc_e_36VEC_cp_unparsed_functions_entry_base = *gccc::gt_ggc_e_36VEC_cp_unparsed_functions_entry_base;
*gt_ggc_e_29cp_unparsed_functions_entry_d = *gccc::gt_ggc_e_29cp_unparsed_functions_entry_d;
*gt_ggc_e_27VEC_cp_default_arg_entry_gc = *gccc::gt_ggc_e_27VEC_cp_default_arg_entry_gc;
*gt_ggc_e_29VEC_cp_default_arg_entry_base = *gccc::gt_ggc_e_29VEC_cp_default_arg_entry_base;
*gt_ggc_e_22cp_default_arg_entry_d = *gccc::gt_ggc_e_22cp_default_arg_entry_d;
*gt_ggc_e_17cp_parser_context = *gccc::gt_ggc_e_17cp_parser_context;
*gt_ggc_e_8cp_lexer = *gccc::gt_ggc_e_8cp_lexer;
*gt_ggc_e_8cp_token = *gccc::gt_ggc_e_8cp_token;
*gt_ggc_e_14cp_token_value = *gccc::gt_ggc_e_14cp_token_value;
*gt_ggc_e_10tree_check = *gccc::gt_ggc_e_10tree_check;
*gt_ggc_e_14constexpr_call = *gccc::gt_ggc_e_14constexpr_call;
*gt_ggc_e_16constexpr_fundef = *gccc::gt_ggc_e_16constexpr_fundef;
*gt_ggc_e_22VEC_deferred_access_gc = *gccc::gt_ggc_e_22VEC_deferred_access_gc;
*gt_ggc_e_24VEC_deferred_access_base = *gccc::gt_ggc_e_24VEC_deferred_access_base;
*gt_ggc_e_15deferred_access = *gccc::gt_ggc_e_15deferred_access;
*gt_ggc_e_10spec_entry = *gccc::gt_ggc_e_10spec_entry;
*gt_ggc_e_16pending_template = *gccc::gt_ggc_e_16pending_template;
*gt_ggc_e_21VEC_incomplete_var_gc = *gccc::gt_ggc_e_21VEC_incomplete_var_gc;
*gt_ggc_e_23VEC_incomplete_var_base = *gccc::gt_ggc_e_23VEC_incomplete_var_base;
*gt_ggc_e_16incomplete_var_d = *gccc::gt_ggc_e_16incomplete_var_d;
*gt_ggc_e_21named_label_use_entry = *gccc::gt_ggc_e_21named_label_use_entry;
*gt_ggc_e_28VEC_deferred_access_check_gc = *gccc::gt_ggc_e_28VEC_deferred_access_check_gc;
*gt_ggc_e_30VEC_deferred_access_check_base = *gccc::gt_ggc_e_30VEC_deferred_access_check_base;
*gt_ggc_e_21deferred_access_check = *gccc::gt_ggc_e_21deferred_access_check;
*gt_ggc_e_20operator_name_info_t = *gccc::gt_ggc_e_20operator_name_info_t;
*gt_ggc_e_11lang_decl_u = *gccc::gt_ggc_e_11lang_decl_u;
*gt_ggc_e_14lang_decl_parm = *gccc::gt_ggc_e_14lang_decl_parm;
*gt_ggc_e_12lang_decl_ns = *gccc::gt_ggc_e_12lang_decl_ns;
*gt_ggc_e_12lang_decl_fn = *gccc::gt_ggc_e_12lang_decl_fn;
*gt_ggc_e_12lang_decl_u3 = *gccc::gt_ggc_e_12lang_decl_u3;
*gt_ggc_e_12lang_decl_u5 = *gccc::gt_ggc_e_12lang_decl_u5;
*gt_ggc_e_13lang_decl_min = *gccc::gt_ggc_e_13lang_decl_min;
*gt_ggc_e_12lang_decl_u2 = *gccc::gt_ggc_e_12lang_decl_u2;
*gt_ggc_e_14lang_decl_base = *gccc::gt_ggc_e_14lang_decl_base;
*gt_ggc_e_11lang_type_u = *gccc::gt_ggc_e_11lang_type_u;
*gt_ggc_e_16lang_type_ptrmem = *gccc::gt_ggc_e_16lang_type_ptrmem;
*gt_ggc_e_15lang_type_class = *gccc::gt_ggc_e_15lang_type_class;
*gt_ggc_e_18sorted_fields_type = *gccc::gt_ggc_e_18sorted_fields_type;
*gt_ggc_e_16lang_type_header = *gccc::gt_ggc_e_16lang_type_header;
*gt_ggc_e_18VEC_tree_pair_s_gc = *gccc::gt_ggc_e_18VEC_tree_pair_s_gc;
*gt_ggc_e_20VEC_tree_pair_s_base = *gccc::gt_ggc_e_20VEC_tree_pair_s_base;
*gt_ggc_e_11tree_pair_s = *gccc::gt_ggc_e_11tree_pair_s;
*gt_ggc_e_17named_label_entry = *gccc::gt_ggc_e_17named_label_entry;
*gt_ggc_e_19c_language_function = *gccc::gt_ggc_e_19c_language_function;
*gt_ggc_e_11stmt_tree_s = *gccc::gt_ggc_e_11stmt_tree_s;
*gt_ggc_e_18tree_template_info = *gccc::gt_ggc_e_18tree_template_info;
*gt_ggc_e_32VEC_qualified_typedef_usage_t_gc = *gccc::gt_ggc_e_32VEC_qualified_typedef_usage_t_gc;
*gt_ggc_e_34VEC_qualified_typedef_usage_t_base = *gccc::gt_ggc_e_34VEC_qualified_typedef_usage_t_base;
*gt_ggc_e_25qualified_typedef_usage_s = *gccc::gt_ggc_e_25qualified_typedef_usage_s;
*gt_ggc_e_16tree_lambda_expr = *gccc::gt_ggc_e_16tree_lambda_expr;
*gt_ggc_e_15tree_trait_expr = *gccc::gt_ggc_e_15tree_trait_expr;
*gt_ggc_e_25tree_argument_pack_select = *gccc::gt_ggc_e_25tree_argument_pack_select;
*gt_ggc_e_18tree_static_assert = *gccc::gt_ggc_e_18tree_static_assert;
*gt_ggc_e_16tree_default_arg = *gccc::gt_ggc_e_16tree_default_arg;
*gt_ggc_e_14cp_token_cache = *gccc::gt_ggc_e_14cp_token_cache;
*gt_ggc_e_13tree_baselink = *gccc::gt_ggc_e_13tree_baselink;
*gt_ggc_e_13tree_overload = *gccc::gt_ggc_e_13tree_overload;
*gt_ggc_e_10ptrmem_cst = *gccc::gt_ggc_e_10ptrmem_cst;
*gt_ggc_e_21template_parm_index_s = *gccc::gt_ggc_e_21template_parm_index_s;
*gt_ggc_e_15lang_identifier = *gccc::gt_ggc_e_15lang_identifier;
*gt_ggc_e_19c_common_identifier = *gccc::gt_ggc_e_19c_common_identifier;
*gt_ggc_e_11saved_scope = *gccc::gt_ggc_e_11saved_scope;
*gt_ggc_e_16cxx_int_tree_map = *gccc::gt_ggc_e_16cxx_int_tree_map;
*gt_ggc_e_23VEC_cp_label_binding_gc = *gccc::gt_ggc_e_23VEC_cp_label_binding_gc;
*gt_ggc_e_25VEC_cp_label_binding_base = *gccc::gt_ggc_e_25VEC_cp_label_binding_base;
*gt_ggc_e_16cp_label_binding = *gccc::gt_ggc_e_16cp_label_binding;
*gt_ggc_e_23VEC_cp_class_binding_gc = *gccc::gt_ggc_e_23VEC_cp_class_binding_gc;
*gt_ggc_e_25VEC_cp_class_binding_base = *gccc::gt_ggc_e_25VEC_cp_class_binding_base;
*gt_ggc_e_16cp_class_binding = *gccc::gt_ggc_e_16cp_class_binding;
*gt_ggc_e_24VEC_cxx_saved_binding_gc = *gccc::gt_ggc_e_24VEC_cxx_saved_binding_gc;
*gt_ggc_e_26VEC_cxx_saved_binding_base = *gccc::gt_ggc_e_26VEC_cxx_saved_binding_base;
*gt_ggc_e_17cxx_saved_binding = *gccc::gt_ggc_e_17cxx_saved_binding;
*gt_ggc_e_16cp_binding_level = *gccc::gt_ggc_e_16cp_binding_level;
*gt_ggc_e_11cxx_binding = *gccc::gt_ggc_e_11cxx_binding;
*gt_ggc_e_15binding_entry_s = *gccc::gt_ggc_e_15binding_entry_s;
*gt_ggc_e_15binding_table_s = *gccc::gt_ggc_e_15binding_table_s;
*gt_ggc_e_11tinst_level = *gccc::gt_ggc_e_11tinst_level;
*gt_ggc_e_7globals = *gccc::gt_ggc_e_7globals;
*gt_ggc_e_14VEC_tinfo_s_gc = *gccc::gt_ggc_e_14VEC_tinfo_s_gc;
*gt_ggc_e_16VEC_tinfo_s_base = *gccc::gt_ggc_e_16VEC_tinfo_s_base;
*gt_ggc_e_7tinfo_s = *gccc::gt_ggc_e_7tinfo_s;
*gt_ggc_e_18gnat_binding_level = *gccc::gt_ggc_e_18gnat_binding_level;
*gt_ggc_e_9elab_info = *gccc::gt_ggc_e_9elab_info;
*gt_ggc_e_10stmt_group = *gccc::gt_ggc_e_10stmt_group;
*gt_ggc_e_16VEC_parm_attr_gc = *gccc::gt_ggc_e_16VEC_parm_attr_gc;
*gt_ggc_e_18VEC_parm_attr_base = *gccc::gt_ggc_e_18VEC_parm_attr_base;
*gt_ggc_e_11parm_attr_d = *gccc::gt_ggc_e_11parm_attr_d;
*gt_ggc_e_18lto_tree_ref_table = *gccc::gt_ggc_e_18lto_tree_ref_table;
*gt_ggc_e_17lto_in_decl_state = *gccc::gt_ggc_e_17lto_in_decl_state;
*gt_ggc_e_22VEC_ipa_edge_args_t_gc = *gccc::gt_ggc_e_22VEC_ipa_edge_args_t_gc;
*gt_ggc_e_24VEC_ipa_edge_args_t_base = *gccc::gt_ggc_e_24VEC_ipa_edge_args_t_base;
*gt_ggc_e_15jump_func_value = *gccc::gt_ggc_e_15jump_func_value;
*gt_ggc_e_18ipa_member_ptr_cst = *gccc::gt_ggc_e_18ipa_member_ptr_cst;
*gt_ggc_e_20ipa_ancestor_jf_data = *gccc::gt_ggc_e_20ipa_ancestor_jf_data;
*gt_ggc_e_21ipa_pass_through_data = *gccc::gt_ggc_e_21ipa_pass_through_data;
*gt_ggc_e_20lto_symtab_entry_def = *gccc::gt_ggc_e_20lto_symtab_entry_def;
*gt_ggc_e_11heapvar_map = *gccc::gt_ggc_e_11heapvar_map;
*gt_ggc_e_20ssa_operand_memory_d = *gccc::gt_ggc_e_20ssa_operand_memory_d;
*gt_ggc_e_13scev_info_str = *gccc::gt_ggc_e_13scev_info_str;
*gt_ggc_e_24VEC_mem_addr_template_gc = *gccc::gt_ggc_e_24VEC_mem_addr_template_gc;
*gt_ggc_e_26VEC_mem_addr_template_base = *gccc::gt_ggc_e_26VEC_mem_addr_template_base;
*gt_ggc_e_17mem_addr_template = *gccc::gt_ggc_e_17mem_addr_template;
*gt_ggc_e_12ssa_operands = *gccc::gt_ggc_e_12ssa_operands;
*gt_ggc_e_26gimple_type_leader_entry_s = *gccc::gt_ggc_e_26gimple_type_leader_entry_s;
*gt_ggc_e_33gimple_statement_omp_atomic_store = *gccc::gt_ggc_e_33gimple_statement_omp_atomic_store;
*gt_ggc_e_32gimple_statement_omp_atomic_load = *gccc::gt_ggc_e_32gimple_statement_omp_atomic_load;
*gt_ggc_e_27gimple_statement_omp_single = *gccc::gt_ggc_e_27gimple_statement_omp_single;
*gt_ggc_e_29gimple_statement_omp_continue = *gccc::gt_ggc_e_29gimple_statement_omp_continue;
*gt_ggc_e_29gimple_statement_omp_sections = *gccc::gt_ggc_e_29gimple_statement_omp_sections;
*gt_ggc_e_25gimple_statement_omp_task = *gccc::gt_ggc_e_25gimple_statement_omp_task;
*gt_ggc_e_29gimple_statement_omp_parallel = *gccc::gt_ggc_e_29gimple_statement_omp_parallel;
*gt_ggc_e_24gimple_statement_omp_for = *gccc::gt_ggc_e_24gimple_statement_omp_for;
*gt_ggc_e_19gimple_omp_for_iter = *gccc::gt_ggc_e_19gimple_omp_for_iter;
*gt_ggc_e_29gimple_statement_omp_critical = *gccc::gt_ggc_e_29gimple_statement_omp_critical;
*gt_ggc_e_20gimple_statement_asm = *gccc::gt_ggc_e_20gimple_statement_asm;
*gt_ggc_e_20gimple_statement_wce = *gccc::gt_ggc_e_20gimple_statement_wce;
*gt_ggc_e_20gimple_statement_try = *gccc::gt_ggc_e_20gimple_statement_try;
*gt_ggc_e_24gimple_statement_eh_ctrl = *gccc::gt_ggc_e_24gimple_statement_eh_ctrl;
*gt_ggc_e_20gimple_statement_phi = *gccc::gt_ggc_e_20gimple_statement_phi;
*gt_ggc_e_23gimple_statement_eh_mnt = *gccc::gt_ggc_e_23gimple_statement_eh_mnt;
*gt_ggc_e_26gimple_statement_eh_filter = *gccc::gt_ggc_e_26gimple_statement_eh_filter;
*gt_ggc_e_22gimple_statement_catch = *gccc::gt_ggc_e_22gimple_statement_catch;
*gt_ggc_e_21gimple_statement_bind = *gccc::gt_ggc_e_21gimple_statement_bind;
*gt_ggc_e_20gimple_statement_omp = *gccc::gt_ggc_e_20gimple_statement_omp;
*gt_ggc_e_21gimple_statement_call = *gccc::gt_ggc_e_21gimple_statement_call;
*gt_ggc_e_11pt_solution = *gccc::gt_ggc_e_11pt_solution;
*gt_ggc_e_32gimple_statement_with_memory_ops = *gccc::gt_ggc_e_32gimple_statement_with_memory_ops;
*gt_ggc_e_37gimple_statement_with_memory_ops_base = *gccc::gt_ggc_e_37gimple_statement_with_memory_ops_base;
*gt_ggc_e_25gimple_statement_with_ops = *gccc::gt_ggc_e_25gimple_statement_with_ops;
*gt_ggc_e_30gimple_statement_with_ops_base = *gccc::gt_ggc_e_30gimple_statement_with_ops_base;
*gt_ggc_e_21gimple_statement_base = *gccc::gt_ggc_e_21gimple_statement_base;
*gt_ggc_e_17gimple_seq_node_d = *gccc::gt_ggc_e_17gimple_seq_node_d;
*gt_ggc_e_9type_hash = *gccc::gt_ggc_e_9type_hash;
*gt_ggc_e_16string_pool_data = *gccc::gt_ggc_e_16string_pool_data;
*gt_ggc_e_18initial_value_pair = *gccc::gt_ggc_e_18initial_value_pair;
*gt_ggc_e_23temp_slot_address_entry = *gccc::gt_ggc_e_23temp_slot_address_entry;
*gt_ggc_e_11eh_status_u = *gccc::gt_ggc_e_11eh_status_u;
*gt_ggc_e_15throw_stmt_node = *gccc::gt_ggc_e_15throw_stmt_node;
*gt_ggc_e_21VEC_eh_landing_pad_gc = *gccc::gt_ggc_e_21VEC_eh_landing_pad_gc;
*gt_ggc_e_23VEC_eh_landing_pad_base = *gccc::gt_ggc_e_23VEC_eh_landing_pad_base;
*gt_ggc_e_16VEC_eh_region_gc = *gccc::gt_ggc_e_16VEC_eh_region_gc;
*gt_ggc_e_18VEC_eh_region_base = *gccc::gt_ggc_e_18VEC_eh_region_base;
*gt_ggc_e_11eh_region_u = *gccc::gt_ggc_e_11eh_region_u;
*gt_ggc_e_26eh_region_u_must_not_throw = *gccc::gt_ggc_e_26eh_region_u_must_not_throw;
*gt_ggc_e_19eh_region_u_allowed = *gccc::gt_ggc_e_19eh_region_u_allowed;
*gt_ggc_e_15eh_region_u_try = *gccc::gt_ggc_e_15eh_region_u_try;
*gt_ggc_e_10eh_catch_d = *gccc::gt_ggc_e_10eh_catch_d;
*gt_ggc_e_16eh_landing_pad_d = *gccc::gt_ggc_e_16eh_landing_pad_d;
*gt_ggc_e_11eh_region_d = *gccc::gt_ggc_e_11eh_region_d;
*gt_ggc_e_10vcall_insn = *gccc::gt_ggc_e_10vcall_insn;
*gt_ggc_e_18VEC_vcall_entry_gc = *gccc::gt_ggc_e_18VEC_vcall_entry_gc;
*gt_ggc_e_20VEC_vcall_entry_base = *gccc::gt_ggc_e_20VEC_vcall_entry_base;
*gt_ggc_e_12vcall_struct = *gccc::gt_ggc_e_12vcall_struct;
*gt_ggc_e_18VEC_dcall_entry_gc = *gccc::gt_ggc_e_18VEC_dcall_entry_gc;
*gt_ggc_e_20VEC_dcall_entry_base = *gccc::gt_ggc_e_20VEC_dcall_entry_base;
*gt_ggc_e_12dcall_struct = *gccc::gt_ggc_e_12dcall_struct;
*gt_ggc_e_22cached_dw_loc_list_def = *gccc::gt_ggc_e_22cached_dw_loc_list_def;
*gt_ggc_e_16var_loc_list_def = *gccc::gt_ggc_e_16var_loc_list_def;
*gt_ggc_e_12var_loc_node = *gccc::gt_ggc_e_12var_loc_node;
*gt_ggc_e_20VEC_die_arg_entry_gc = *gccc::gt_ggc_e_20VEC_die_arg_entry_gc;
*gt_ggc_e_22VEC_die_arg_entry_base = *gccc::gt_ggc_e_22VEC_die_arg_entry_base;
*gt_ggc_e_20die_arg_entry_struct = *gccc::gt_ggc_e_20die_arg_entry_struct;
*gt_ggc_e_16limbo_die_struct = *gccc::gt_ggc_e_16limbo_die_struct;
*gt_ggc_e_20VEC_macinfo_entry_gc = *gccc::gt_ggc_e_20VEC_macinfo_entry_gc;
*gt_ggc_e_22VEC_macinfo_entry_base = *gccc::gt_ggc_e_22VEC_macinfo_entry_base;
*gt_ggc_e_14macinfo_struct = *gccc::gt_ggc_e_14macinfo_struct;
*gt_ggc_e_20VEC_pubname_entry_gc = *gccc::gt_ggc_e_20VEC_pubname_entry_gc;
*gt_ggc_e_22VEC_pubname_entry_base = *gccc::gt_ggc_e_22VEC_pubname_entry_base;
*gt_ggc_e_23die_symbol_or_type_node = *gccc::gt_ggc_e_23die_symbol_or_type_node;
*gt_ggc_e_19VEC_dw_attr_node_gc = *gccc::gt_ggc_e_19VEC_dw_attr_node_gc;
*gt_ggc_e_21VEC_dw_attr_node_base = *gccc::gt_ggc_e_21VEC_dw_attr_node_base;
*gt_ggc_e_18comdat_type_struct = *gccc::gt_ggc_e_18comdat_type_struct;
*gt_ggc_e_25dw_ranges_by_label_struct = *gccc::gt_ggc_e_25dw_ranges_by_label_struct;
*gt_ggc_e_16dw_ranges_struct = *gccc::gt_ggc_e_16dw_ranges_struct;
*gt_ggc_e_14pubname_struct = *gccc::gt_ggc_e_14pubname_struct;
*gt_ggc_e_28dw_separate_line_info_struct = *gccc::gt_ggc_e_28dw_separate_line_info_struct;
*gt_ggc_e_19dw_line_info_struct = *gccc::gt_ggc_e_19dw_line_info_struct;
*gt_ggc_e_14dw_attr_struct = *gccc::gt_ggc_e_14dw_attr_struct;
*gt_ggc_e_19dw_val_struct_union = *gccc::gt_ggc_e_19dw_val_struct_union;
*gt_ggc_e_22dw_val_vms_delta_union = *gccc::gt_ggc_e_22dw_val_vms_delta_union;
*gt_ggc_e_16dw_val_die_union = *gccc::gt_ggc_e_16dw_val_die_union;
*gt_ggc_e_13dw_vec_struct = *gccc::gt_ggc_e_13dw_vec_struct;
*gt_ggc_e_25VEC_deferred_locations_gc = *gccc::gt_ggc_e_25VEC_deferred_locations_gc;
*gt_ggc_e_27VEC_deferred_locations_base = *gccc::gt_ggc_e_27VEC_deferred_locations_base;
*gt_ggc_e_25deferred_locations_struct = *gccc::gt_ggc_e_25deferred_locations_struct;
*gt_ggc_e_18dw_loc_list_struct = *gccc::gt_ggc_e_18dw_loc_list_struct;
*gt_ggc_e_13dw_val_struct = *gccc::gt_ggc_e_13dw_val_struct;
*gt_ggc_e_15dwarf_file_data = *gccc::gt_ggc_e_15dwarf_file_data;
*gt_ggc_e_17reg_saved_in_data = *gccc::gt_ggc_e_17reg_saved_in_data;
*gt_ggc_e_15queued_reg_save = *gccc::gt_ggc_e_15queued_reg_save;
*gt_ggc_e_20indirect_string_node = *gccc::gt_ggc_e_20indirect_string_node;
*gt_ggc_e_19dw_loc_descr_struct = *gccc::gt_ggc_e_19dw_loc_descr_struct;
*gt_ggc_e_19dw_cfi_oprnd_struct = *gccc::gt_ggc_e_19dw_cfi_oprnd_struct;
*gt_ggc_e_13dw_fde_struct = *gccc::gt_ggc_e_13dw_fde_struct;
*gt_ggc_e_13dw_cfi_struct = *gccc::gt_ggc_e_13dw_cfi_struct;
*gt_ggc_e_8typeinfo = *gccc::gt_ggc_e_8typeinfo;
*gt_ggc_e_13ipa_edge_args = *gccc::gt_ggc_e_13ipa_edge_args;
*gt_ggc_e_13ipa_jump_func = *gccc::gt_ggc_e_13ipa_jump_func;
*gt_ggc_e_22VEC_alias_set_entry_gc = *gccc::gt_ggc_e_22VEC_alias_set_entry_gc;
*gt_ggc_e_24VEC_alias_set_entry_base = *gccc::gt_ggc_e_24VEC_alias_set_entry_base;
*gt_ggc_e_17alias_set_entry_d = *gccc::gt_ggc_e_17alias_set_entry_d;
*gt_ggc_e_24constant_descriptor_tree = *gccc::gt_ggc_e_24constant_descriptor_tree;
*gt_ggc_e_15cgraph_asm_node = *gccc::gt_ggc_e_15cgraph_asm_node;
*gt_ggc_e_25cgraph_indirect_call_info = *gccc::gt_ggc_e_25cgraph_indirect_call_info;
*gt_ggc_e_20varpool_node_set_def = *gccc::gt_ggc_e_20varpool_node_set_def;
*gt_ggc_e_28varpool_node_set_element_def = *gccc::gt_ggc_e_28varpool_node_set_element_def;
*gt_ggc_e_23VEC_varpool_node_ptr_gc = *gccc::gt_ggc_e_23VEC_varpool_node_ptr_gc;
*gt_ggc_e_25VEC_varpool_node_ptr_base = *gccc::gt_ggc_e_25VEC_varpool_node_ptr_base;
*gt_ggc_e_19cgraph_node_set_def = *gccc::gt_ggc_e_19cgraph_node_set_def;
*gt_ggc_e_27cgraph_node_set_element_def = *gccc::gt_ggc_e_27cgraph_node_set_element_def;
*gt_ggc_e_22VEC_cgraph_node_ptr_gc = *gccc::gt_ggc_e_22VEC_cgraph_node_ptr_gc;
*gt_ggc_e_24VEC_cgraph_node_ptr_base = *gccc::gt_ggc_e_24VEC_cgraph_node_ptr_base;
*gt_ggc_e_11cgraph_edge = *gccc::gt_ggc_e_11cgraph_edge;
*gt_ggc_e_17cgraph_clone_info = *gccc::gt_ggc_e_17cgraph_clone_info;
*gt_ggc_e_24VEC_ipa_replace_map_p_gc = *gccc::gt_ggc_e_24VEC_ipa_replace_map_p_gc;
*gt_ggc_e_26VEC_ipa_replace_map_p_base = *gccc::gt_ggc_e_26VEC_ipa_replace_map_p_base;
*gt_ggc_e_15ipa_replace_map = *gccc::gt_ggc_e_15ipa_replace_map;
*gt_ggc_e_15cgraph_rtl_info = *gccc::gt_ggc_e_15cgraph_rtl_info;
*gt_ggc_e_18cgraph_global_info = *gccc::gt_ggc_e_18cgraph_global_info;
*gt_ggc_e_17cgraph_local_info = *gccc::gt_ggc_e_17cgraph_local_info;
*gt_ggc_e_17cgraph_thunk_info = *gccc::gt_ggc_e_17cgraph_thunk_info;
*gt_ggc_e_14inline_summary = *gccc::gt_ggc_e_14inline_summary;
*gt_ggc_e_18lto_file_decl_data = *gccc::gt_ggc_e_18lto_file_decl_data;
*gt_ggc_e_12ipa_ref_list = *gccc::gt_ggc_e_12ipa_ref_list;
*gt_ggc_e_16VEC_ipa_ref_t_gc = *gccc::gt_ggc_e_16VEC_ipa_ref_t_gc;
*gt_ggc_e_18VEC_ipa_ref_t_base = *gccc::gt_ggc_e_18VEC_ipa_ref_t_base;
*gt_ggc_e_7ipa_ref = *gccc::gt_ggc_e_7ipa_ref;
*gt_ggc_e_13ipa_ref_ptr_u = *gccc::gt_ggc_e_13ipa_ref_ptr_u;
*gt_ggc_e_12varpool_node = *gccc::gt_ggc_e_12varpool_node;
*gt_ggc_e_11cgraph_node = *gccc::gt_ggc_e_11cgraph_node;
*gt_ggc_e_18VEC_basic_block_gc = *gccc::gt_ggc_e_18VEC_basic_block_gc;
*gt_ggc_e_20VEC_basic_block_base = *gccc::gt_ggc_e_20VEC_basic_block_base;
*gt_ggc_e_24basic_block_il_dependent = *gccc::gt_ggc_e_24basic_block_il_dependent;
*gt_ggc_e_14gimple_bb_info = *gccc::gt_ggc_e_14gimple_bb_info;
*gt_ggc_e_11rtl_bb_info = *gccc::gt_ggc_e_11rtl_bb_info;
*gt_ggc_e_11VEC_edge_gc = *gccc::gt_ggc_e_11VEC_edge_gc;
*gt_ggc_e_13VEC_edge_base = *gccc::gt_ggc_e_13VEC_edge_base;
*gt_ggc_e_14edge_def_insns = *gccc::gt_ggc_e_14edge_def_insns;
*gt_ggc_e_13VEC_loop_p_gc = *gccc::gt_ggc_e_13VEC_loop_p_gc;
*gt_ggc_e_15VEC_loop_p_base = *gccc::gt_ggc_e_15VEC_loop_p_base;
*gt_ggc_e_4loop = *gccc::gt_ggc_e_4loop;
*gt_ggc_e_9loop_exit = *gccc::gt_ggc_e_9loop_exit;
*gt_ggc_e_13nb_iter_bound = *gccc::gt_ggc_e_13nb_iter_bound;
*gt_ggc_e_12lpt_decision = *gccc::gt_ggc_e_12lpt_decision;
*gt_ggc_e_16noswitch_section = *gccc::gt_ggc_e_16noswitch_section;
*gt_ggc_e_15unnamed_section = *gccc::gt_ggc_e_15unnamed_section;
*gt_ggc_e_13named_section = *gccc::gt_ggc_e_13named_section;
*gt_ggc_e_14section_common = *gccc::gt_ggc_e_14section_common;
*gt_ggc_e_24types_used_by_vars_entry = *gccc::gt_ggc_e_24types_used_by_vars_entry;
*gt_ggc_e_17language_function = *gccc::gt_ggc_e_17language_function;
*gt_ggc_e_5loops = *gccc::gt_ggc_e_5loops;
*gt_ggc_e_18control_flow_graph = *gccc::gt_ggc_e_18control_flow_graph;
*gt_ggc_e_9eh_status = *gccc::gt_ggc_e_9eh_status;
*gt_ggc_e_11stack_usage = *gccc::gt_ggc_e_11stack_usage;
*gt_ggc_e_8rtl_data = *gccc::gt_ggc_e_8rtl_data;
*gt_ggc_e_20initial_value_struct = *gccc::gt_ggc_e_20initial_value_struct;
*gt_ggc_e_11frame_space = *gccc::gt_ggc_e_11frame_space;
*gt_ggc_e_20function_subsections = *gccc::gt_ggc_e_20function_subsections;
*gt_ggc_e_13incoming_args = *gccc::gt_ggc_e_13incoming_args;
*gt_ggc_e_13varasm_status = *gccc::gt_ggc_e_13varasm_status;
*gt_ggc_e_17rtx_constant_pool = *gccc::gt_ggc_e_17rtx_constant_pool;
*gt_ggc_e_18VEC_temp_slot_p_gc = *gccc::gt_ggc_e_18VEC_temp_slot_p_gc;
*gt_ggc_e_20VEC_temp_slot_p_base = *gccc::gt_ggc_e_20VEC_temp_slot_p_base;
*gt_ggc_e_9temp_slot = *gccc::gt_ggc_e_9temp_slot;
*gt_ggc_e_9gimple_df = *gccc::gt_ggc_e_9gimple_df;
*gt_ggc_e_6rtl_eh = *gccc::gt_ggc_e_6rtl_eh;
*gt_ggc_e_23VEC_call_site_record_gc = *gccc::gt_ggc_e_23VEC_call_site_record_gc;
*gt_ggc_e_25VEC_call_site_record_base = *gccc::gt_ggc_e_25VEC_call_site_record_base;
*gt_ggc_e_18call_site_record_d = *gccc::gt_ggc_e_18call_site_record_d;
*gt_ggc_e_11expr_status = *gccc::gt_ggc_e_11expr_status;
*gt_ggc_e_11emit_status = *gccc::gt_ggc_e_11emit_status;
*gt_ggc_e_14sequence_stack = *gccc::gt_ggc_e_14sequence_stack;
*gt_ggc_e_15target_libfuncs = *gccc::gt_ggc_e_15target_libfuncs;
*gt_ggc_e_13libfunc_entry = *gccc::gt_ggc_e_13libfunc_entry;
*gt_ggc_e_17tree_priority_map = *gccc::gt_ggc_e_17tree_priority_map;
*gt_ggc_e_12tree_int_map = *gccc::gt_ggc_e_12tree_int_map;
*gt_ggc_e_13tree_decl_map = *gccc::gt_ggc_e_13tree_decl_map;
*gt_ggc_e_8tree_map = *gccc::gt_ggc_e_8tree_map;
*gt_ggc_e_13tree_map_base = *gccc::gt_ggc_e_13tree_map_base;
*gt_ggc_e_14lang_tree_node = *gccc::gt_ggc_e_14lang_tree_node;
*gt_ggc_e_18tree_target_option = *gccc::gt_ggc_e_18tree_target_option;
*gt_ggc_e_24tree_optimization_option = *gccc::gt_ggc_e_24tree_optimization_option;
*gt_ggc_e_19tree_statement_list = *gccc::gt_ggc_e_19tree_statement_list;
*gt_ggc_e_24tree_statement_list_node = *gccc::gt_ggc_e_24tree_statement_list_node;
*gt_ggc_e_14tree_type_decl = *gccc::gt_ggc_e_14tree_type_decl;
*gt_ggc_e_26tree_translation_unit_decl = *gccc::gt_ggc_e_26tree_translation_unit_decl;
*gt_ggc_e_18tree_function_decl = *gccc::gt_ggc_e_18tree_function_decl;
*gt_ggc_e_20tree_decl_non_common = *gccc::gt_ggc_e_20tree_decl_non_common;
*gt_ggc_e_13tree_var_decl = *gccc::gt_ggc_e_13tree_var_decl;
*gt_ggc_e_18tree_decl_with_vis = *gccc::gt_ggc_e_18tree_decl_with_vis;
*gt_ggc_e_14tree_parm_decl = *gccc::gt_ggc_e_14tree_parm_decl;
*gt_ggc_e_15tree_const_decl = *gccc::gt_ggc_e_15tree_const_decl;
*gt_ggc_e_16tree_result_decl = *gccc::gt_ggc_e_16tree_result_decl;
*gt_ggc_e_9var_ann_d = *gccc::gt_ggc_e_9var_ann_d;
*gt_ggc_e_15tree_label_decl = *gccc::gt_ggc_e_15tree_label_decl;
*gt_ggc_e_15tree_field_decl = *gccc::gt_ggc_e_15tree_field_decl;
*gt_ggc_e_18tree_decl_with_rtl = *gccc::gt_ggc_e_18tree_decl_with_rtl;
*gt_ggc_e_16tree_decl_common = *gccc::gt_ggc_e_16tree_decl_common;
*gt_ggc_e_9lang_decl = *gccc::gt_ggc_e_9lang_decl;
*gt_ggc_e_17tree_decl_minimal = *gccc::gt_ggc_e_17tree_decl_minimal;
*gt_ggc_e_10tree_binfo = *gccc::gt_ggc_e_10tree_binfo;
*gt_ggc_e_9tree_type = *gccc::gt_ggc_e_9tree_type;
*gt_ggc_e_9lang_type = *gccc::gt_ggc_e_9lang_type;
*gt_ggc_e_16tree_type_symtab = *gccc::gt_ggc_e_16tree_type_symtab;
*gt_ggc_e_10die_struct = *gccc::gt_ggc_e_10die_struct;
*gt_ggc_e_10tree_block = *gccc::gt_ggc_e_10tree_block;
*gt_ggc_e_15tree_omp_clause = *gccc::gt_ggc_e_15tree_omp_clause;
*gt_ggc_e_9phi_arg_d = *gccc::gt_ggc_e_9phi_arg_d;
*gt_ggc_e_13tree_ssa_name = *gccc::gt_ggc_e_13tree_ssa_name;
*gt_ggc_e_17ssa_use_operand_d = *gccc::gt_ggc_e_17ssa_use_operand_d;
*gt_ggc_e_12ptr_info_def = *gccc::gt_ggc_e_12ptr_info_def;
*gt_ggc_e_8tree_exp = *gccc::gt_ggc_e_8tree_exp;
*gt_ggc_e_17tree_exp_subunion = *gccc::gt_ggc_e_17tree_exp_subunion;
*gt_ggc_e_16tree_constructor = *gccc::gt_ggc_e_16tree_constructor;
*gt_ggc_e_22VEC_constructor_elt_gc = *gccc::gt_ggc_e_22VEC_constructor_elt_gc;
*gt_ggc_e_24VEC_constructor_elt_base = *gccc::gt_ggc_e_24VEC_constructor_elt_base;
*gt_ggc_e_17constructor_elt_d = *gccc::gt_ggc_e_17constructor_elt_d;
*gt_ggc_e_8tree_vec = *gccc::gt_ggc_e_8tree_vec;
*gt_ggc_e_9tree_list = *gccc::gt_ggc_e_9tree_list;
*gt_ggc_e_15tree_identifier = *gccc::gt_ggc_e_15tree_identifier;
*gt_ggc_e_11tree_vector = *gccc::gt_ggc_e_11tree_vector;
*gt_ggc_e_12tree_complex = *gccc::gt_ggc_e_12tree_complex;
*gt_ggc_e_11tree_string = *gccc::gt_ggc_e_11tree_string;
*gt_ggc_e_14tree_fixed_cst = *gccc::gt_ggc_e_14tree_fixed_cst;
*gt_ggc_e_13tree_real_cst = *gccc::gt_ggc_e_13tree_real_cst;
*gt_ggc_e_12tree_int_cst = *gccc::gt_ggc_e_12tree_int_cst;
*gt_ggc_e_11tree_common = *gccc::gt_ggc_e_11tree_common;
*gt_ggc_e_9tree_base = *gccc::gt_ggc_e_9tree_base;
*gt_ggc_e_17VEC_alias_pair_gc = *gccc::gt_ggc_e_17VEC_alias_pair_gc;
*gt_ggc_e_19VEC_alias_pair_base = *gccc::gt_ggc_e_19VEC_alias_pair_base;
*gt_ggc_e_10alias_pair = *gccc::gt_ggc_e_10alias_pair;
*gt_ggc_e_10target_rtl = *gccc::gt_ggc_e_10target_rtl;
*gt_ggc_e_8function = *gccc::gt_ggc_e_8function;
*gt_ggc_e_16rtx_def_subunion = *gccc::gt_ggc_e_16rtx_def_subunion;
*gt_ggc_e_26rtx_def_debug_implicit_ptr = *gccc::gt_ggc_e_26rtx_def_debug_implicit_ptr;
*gt_ggc_e_20rtx_def_var_location = *gccc::gt_ggc_e_20rtx_def_var_location;
*gt_ggc_e_11rtx_def_fma = *gccc::gt_ggc_e_11rtx_def_fma;
*gt_ggc_e_19rtx_def_us_truncate = *gccc::gt_ggc_e_19rtx_def_us_truncate;
*gt_ggc_e_19rtx_def_ss_truncate = *gccc::gt_ggc_e_19rtx_def_ss_truncate;
*gt_ggc_e_16rtx_def_us_minus = *gccc::gt_ggc_e_16rtx_def_us_minus;
*gt_ggc_e_17rtx_def_us_ashift = *gccc::gt_ggc_e_17rtx_def_us_ashift;
*gt_ggc_e_17rtx_def_ss_ashift = *gccc::gt_ggc_e_17rtx_def_ss_ashift;
*gt_ggc_e_14rtx_def_ss_abs = *gccc::gt_ggc_e_14rtx_def_ss_abs;
*gt_ggc_e_14rtx_def_us_neg = *gccc::gt_ggc_e_14rtx_def_us_neg;
*gt_ggc_e_14rtx_def_ss_neg = *gccc::gt_ggc_e_14rtx_def_ss_neg;
*gt_ggc_e_16rtx_def_ss_minus = *gccc::gt_ggc_e_16rtx_def_ss_minus;
*gt_ggc_e_15rtx_def_us_plus = *gccc::gt_ggc_e_15rtx_def_us_plus;
*gt_ggc_e_15rtx_def_ss_plus = *gccc::gt_ggc_e_15rtx_def_ss_plus;
*gt_ggc_e_21rtx_def_vec_duplicate = *gccc::gt_ggc_e_21rtx_def_vec_duplicate;
*gt_ggc_e_18rtx_def_vec_concat = *gccc::gt_ggc_e_18rtx_def_vec_concat;
*gt_ggc_e_18rtx_def_vec_select = *gccc::gt_ggc_e_18rtx_def_vec_select;
*gt_ggc_e_17rtx_def_vec_merge = *gccc::gt_ggc_e_17rtx_def_vec_merge;
*gt_ggc_e_14rtx_def_lo_sum = *gccc::gt_ggc_e_14rtx_def_lo_sum;
*gt_ggc_e_12rtx_def_high = *gccc::gt_ggc_e_12rtx_def_high;
*gt_ggc_e_20rtx_def_zero_extract = *gccc::gt_ggc_e_20rtx_def_zero_extract;
*gt_ggc_e_20rtx_def_sign_extract = *gccc::gt_ggc_e_20rtx_def_sign_extract;
*gt_ggc_e_14rtx_def_parity = *gccc::gt_ggc_e_14rtx_def_parity;
*gt_ggc_e_16rtx_def_popcount = *gccc::gt_ggc_e_16rtx_def_popcount;
*gt_ggc_e_11rtx_def_ctz = *gccc::gt_ggc_e_11rtx_def_ctz;
*gt_ggc_e_11rtx_def_clz = *gccc::gt_ggc_e_11rtx_def_clz;
*gt_ggc_e_11rtx_def_ffs = *gccc::gt_ggc_e_11rtx_def_ffs;
*gt_ggc_e_13rtx_def_bswap = *gccc::gt_ggc_e_13rtx_def_bswap;
*gt_ggc_e_12rtx_def_sqrt = *gccc::gt_ggc_e_12rtx_def_sqrt;
*gt_ggc_e_11rtx_def_abs = *gccc::gt_ggc_e_11rtx_def_abs;
*gt_ggc_e_26rtx_def_unsigned_sat_fract = *gccc::gt_ggc_e_26rtx_def_unsigned_sat_fract;
*gt_ggc_e_17rtx_def_sat_fract = *gccc::gt_ggc_e_17rtx_def_sat_fract;
*gt_ggc_e_30rtx_def_unsigned_fract_convert = *gccc::gt_ggc_e_30rtx_def_unsigned_fract_convert;
*gt_ggc_e_21rtx_def_fract_convert = *gccc::gt_ggc_e_21rtx_def_fract_convert;
*gt_ggc_e_20rtx_def_unsigned_fix = *gccc::gt_ggc_e_20rtx_def_unsigned_fix;
*gt_ggc_e_22rtx_def_unsigned_float = *gccc::gt_ggc_e_22rtx_def_unsigned_float;
*gt_ggc_e_11rtx_def_fix = *gccc::gt_ggc_e_11rtx_def_fix;
*gt_ggc_e_13rtx_def_float = *gccc::gt_ggc_e_13rtx_def_float;
*gt_ggc_e_22rtx_def_float_truncate = *gccc::gt_ggc_e_22rtx_def_float_truncate;
*gt_ggc_e_20rtx_def_float_extend = *gccc::gt_ggc_e_20rtx_def_float_extend;
*gt_ggc_e_16rtx_def_truncate = *gccc::gt_ggc_e_16rtx_def_truncate;
*gt_ggc_e_19rtx_def_zero_extend = *gccc::gt_ggc_e_19rtx_def_zero_extend;
*gt_ggc_e_19rtx_def_sign_extend = *gccc::gt_ggc_e_19rtx_def_sign_extend;
*gt_ggc_e_12rtx_def_ltgt = *gccc::gt_ggc_e_12rtx_def_ltgt;
*gt_ggc_e_12rtx_def_unlt = *gccc::gt_ggc_e_12rtx_def_unlt;
*gt_ggc_e_12rtx_def_unle = *gccc::gt_ggc_e_12rtx_def_unle;
*gt_ggc_e_12rtx_def_ungt = *gccc::gt_ggc_e_12rtx_def_ungt;
*gt_ggc_e_12rtx_def_unge = *gccc::gt_ggc_e_12rtx_def_unge;
*gt_ggc_e_12rtx_def_uneq = *gccc::gt_ggc_e_12rtx_def_uneq;
*gt_ggc_e_15rtx_def_ordered = *gccc::gt_ggc_e_15rtx_def_ordered;
*gt_ggc_e_17rtx_def_unordered = *gccc::gt_ggc_e_17rtx_def_unordered;
*gt_ggc_e_11rtx_def_ltu = *gccc::gt_ggc_e_11rtx_def_ltu;
*gt_ggc_e_11rtx_def_leu = *gccc::gt_ggc_e_11rtx_def_leu;
*gt_ggc_e_11rtx_def_gtu = *gccc::gt_ggc_e_11rtx_def_gtu;
*gt_ggc_e_11rtx_def_geu = *gccc::gt_ggc_e_11rtx_def_geu;
*gt_ggc_e_10rtx_def_lt = *gccc::gt_ggc_e_10rtx_def_lt;
*gt_ggc_e_10rtx_def_le = *gccc::gt_ggc_e_10rtx_def_le;
*gt_ggc_e_10rtx_def_gt = *gccc::gt_ggc_e_10rtx_def_gt;
*gt_ggc_e_10rtx_def_ge = *gccc::gt_ggc_e_10rtx_def_ge;
*gt_ggc_e_10rtx_def_eq = *gccc::gt_ggc_e_10rtx_def_eq;
*gt_ggc_e_10rtx_def_ne = *gccc::gt_ggc_e_10rtx_def_ne;
*gt_ggc_e_19rtx_def_post_modify = *gccc::gt_ggc_e_19rtx_def_post_modify;
*gt_ggc_e_18rtx_def_pre_modify = *gccc::gt_ggc_e_18rtx_def_pre_modify;
*gt_ggc_e_16rtx_def_post_inc = *gccc::gt_ggc_e_16rtx_def_post_inc;
*gt_ggc_e_16rtx_def_post_dec = *gccc::gt_ggc_e_16rtx_def_post_dec;
*gt_ggc_e_15rtx_def_pre_inc = *gccc::gt_ggc_e_15rtx_def_pre_inc;
*gt_ggc_e_15rtx_def_pre_dec = *gccc::gt_ggc_e_15rtx_def_pre_dec;
*gt_ggc_e_12rtx_def_umax = *gccc::gt_ggc_e_12rtx_def_umax;
*gt_ggc_e_12rtx_def_umin = *gccc::gt_ggc_e_12rtx_def_umin;
*gt_ggc_e_12rtx_def_smax = *gccc::gt_ggc_e_12rtx_def_smax;
*gt_ggc_e_12rtx_def_smin = *gccc::gt_ggc_e_12rtx_def_smin;
*gt_ggc_e_16rtx_def_rotatert = *gccc::gt_ggc_e_16rtx_def_rotatert;
*gt_ggc_e_16rtx_def_lshiftrt = *gccc::gt_ggc_e_16rtx_def_lshiftrt;
*gt_ggc_e_16rtx_def_ashiftrt = *gccc::gt_ggc_e_16rtx_def_ashiftrt;
*gt_ggc_e_14rtx_def_rotate = *gccc::gt_ggc_e_14rtx_def_rotate;
*gt_ggc_e_14rtx_def_ashift = *gccc::gt_ggc_e_14rtx_def_ashift;
*gt_ggc_e_11rtx_def_not = *gccc::gt_ggc_e_11rtx_def_not;
*gt_ggc_e_11rtx_def_xor = *gccc::gt_ggc_e_11rtx_def_xor;
*gt_ggc_e_11rtx_def_ior = *gccc::gt_ggc_e_11rtx_def_ior;
*gt_ggc_e_11rtx_def_and = *gccc::gt_ggc_e_11rtx_def_and;
*gt_ggc_e_12rtx_def_umod = *gccc::gt_ggc_e_12rtx_def_umod;
*gt_ggc_e_12rtx_def_udiv = *gccc::gt_ggc_e_12rtx_def_udiv;
*gt_ggc_e_11rtx_def_mod = *gccc::gt_ggc_e_11rtx_def_mod;
*gt_ggc_e_14rtx_def_us_div = *gccc::gt_ggc_e_14rtx_def_us_div;
*gt_ggc_e_14rtx_def_ss_div = *gccc::gt_ggc_e_14rtx_def_ss_div;
*gt_ggc_e_11rtx_def_div = *gccc::gt_ggc_e_11rtx_def_div;
*gt_ggc_e_15rtx_def_us_mult = *gccc::gt_ggc_e_15rtx_def_us_mult;
*gt_ggc_e_15rtx_def_ss_mult = *gccc::gt_ggc_e_15rtx_def_ss_mult;
*gt_ggc_e_12rtx_def_mult = *gccc::gt_ggc_e_12rtx_def_mult;
*gt_ggc_e_11rtx_def_neg = *gccc::gt_ggc_e_11rtx_def_neg;
*gt_ggc_e_13rtx_def_minus = *gccc::gt_ggc_e_13rtx_def_minus;
*gt_ggc_e_12rtx_def_plus = *gccc::gt_ggc_e_12rtx_def_plus;
*gt_ggc_e_15rtx_def_compare = *gccc::gt_ggc_e_15rtx_def_compare;
*gt_ggc_e_20rtx_def_if_then_else = *gccc::gt_ggc_e_20rtx_def_if_then_else;
*gt_ggc_e_11rtx_def_cc0 = *gccc::gt_ggc_e_11rtx_def_cc0;
*gt_ggc_e_18rtx_def_symbol_ref = *gccc::gt_ggc_e_18rtx_def_symbol_ref;
*gt_ggc_e_12fake_union_1 = *gccc::gt_ggc_e_12fake_union_1;
*gt_ggc_e_17rtx_def_label_ref = *gccc::gt_ggc_e_17rtx_def_label_ref;
*gt_ggc_e_11rtx_def_mem = *gccc::gt_ggc_e_11rtx_def_mem;
*gt_ggc_e_15rtx_def_concatn = *gccc::gt_ggc_e_15rtx_def_concatn;
*gt_ggc_e_14rtx_def_concat = *gccc::gt_ggc_e_14rtx_def_concat;
*gt_ggc_e_23rtx_def_strict_low_part = *gccc::gt_ggc_e_23rtx_def_strict_low_part;
*gt_ggc_e_14rtx_def_subreg = *gccc::gt_ggc_e_14rtx_def_subreg;
*gt_ggc_e_15rtx_def_scratch = *gccc::gt_ggc_e_15rtx_def_scratch;
*gt_ggc_e_11rtx_def_reg = *gccc::gt_ggc_e_11rtx_def_reg;
*gt_ggc_e_10rtx_def_pc = *gccc::gt_ggc_e_10rtx_def_pc;
*gt_ggc_e_13rtx_def_const = *gccc::gt_ggc_e_13rtx_def_const;
*gt_ggc_e_20rtx_def_const_string = *gccc::gt_ggc_e_20rtx_def_const_string;
*gt_ggc_e_20rtx_def_const_vector = *gccc::gt_ggc_e_20rtx_def_const_vector;
*gt_ggc_e_20rtx_def_const_double = *gccc::gt_ggc_e_20rtx_def_const_double;
*gt_ggc_e_19rtx_def_const_fixed = *gccc::gt_ggc_e_19rtx_def_const_fixed;
*gt_ggc_e_17rtx_def_const_int = *gccc::gt_ggc_e_17rtx_def_const_int;
*gt_ggc_e_15rtx_def_trap_if = *gccc::gt_ggc_e_15rtx_def_trap_if;
*gt_ggc_e_17rtx_def_eh_return = *gccc::gt_ggc_e_17rtx_def_eh_return;
*gt_ggc_e_14rtx_def_return = *gccc::gt_ggc_e_14rtx_def_return;
*gt_ggc_e_12rtx_def_call = *gccc::gt_ggc_e_12rtx_def_call;
*gt_ggc_e_15rtx_def_clobber = *gccc::gt_ggc_e_15rtx_def_clobber;
*gt_ggc_e_11rtx_def_use = *gccc::gt_ggc_e_11rtx_def_use;
*gt_ggc_e_11rtx_def_set = *gccc::gt_ggc_e_11rtx_def_set;
*gt_ggc_e_16rtx_def_prefetch = *gccc::gt_ggc_e_16rtx_def_prefetch;
*gt_ggc_e_21rtx_def_addr_diff_vec = *gccc::gt_ggc_e_21rtx_def_addr_diff_vec;
*gt_ggc_e_16rtx_def_addr_vec = *gccc::gt_ggc_e_16rtx_def_addr_vec;
*gt_ggc_e_23rtx_def_unspec_volatile = *gccc::gt_ggc_e_23rtx_def_unspec_volatile;
*gt_ggc_e_14rtx_def_unspec = *gccc::gt_ggc_e_14rtx_def_unspec;
*gt_ggc_e_20rtx_def_asm_operands = *gccc::gt_ggc_e_20rtx_def_asm_operands;
*gt_ggc_e_17rtx_def_asm_input = *gccc::gt_ggc_e_17rtx_def_asm_input;
*gt_ggc_e_16rtx_def_parallel = *gccc::gt_ggc_e_16rtx_def_parallel;
*gt_ggc_e_17rtx_def_cond_exec = *gccc::gt_ggc_e_17rtx_def_cond_exec;
*gt_ggc_e_12rtx_def_note = *gccc::gt_ggc_e_12rtx_def_note;
*gt_ggc_e_18rtx_def_code_label = *gccc::gt_ggc_e_18rtx_def_code_label;
*gt_ggc_e_15rtx_def_barrier = *gccc::gt_ggc_e_15rtx_def_barrier;
*gt_ggc_e_17rtx_def_call_insn = *gccc::gt_ggc_e_17rtx_def_call_insn;
*gt_ggc_e_17rtx_def_jump_insn = *gccc::gt_ggc_e_17rtx_def_jump_insn;
*gt_ggc_e_12rtx_def_insn = *gccc::gt_ggc_e_12rtx_def_insn;
*gt_ggc_e_18rtx_def_debug_insn = *gccc::gt_ggc_e_18rtx_def_debug_insn;
*gt_ggc_e_15rtx_def_address = *gccc::gt_ggc_e_15rtx_def_address;
*gt_ggc_e_16rtx_def_sequence = *gccc::gt_ggc_e_16rtx_def_sequence;
*gt_ggc_e_17rtx_def_insn_list = *gccc::gt_ggc_e_17rtx_def_insn_list;
*gt_ggc_e_17rtx_def_expr_list = *gccc::gt_ggc_e_17rtx_def_expr_list;
*gt_ggc_e_18rtx_def_debug_expr = *gccc::gt_ggc_e_18rtx_def_debug_expr;
*gt_ggc_e_13rtx_def_value = *gccc::gt_ggc_e_13rtx_def_value;
*gt_ggc_e_15rtx_def_UnKnown = *gccc::gt_ggc_e_15rtx_def_UnKnown;
*gt_ggc_e_23rtx_def_symbol_subunion = *gccc::gt_ggc_e_23rtx_def_symbol_subunion;
*gt_ggc_e_21rtx_def_note_subunion = *gccc::gt_ggc_e_21rtx_def_note_subunion;
*gt_ggc_e_23constant_descriptor_rtx = *gccc::gt_ggc_e_23constant_descriptor_rtx;
*gt_ggc_e_11fixed_value = *gccc::gt_ggc_e_11fixed_value;
*gt_ggc_e_10real_value = *gccc::gt_ggc_e_10real_value;
*gt_ggc_e_12block_symbol = *gccc::gt_ggc_e_12block_symbol;
*gt_ggc_e_12object_block = *gccc::gt_ggc_e_12object_block;
*gt_ggc_e_9reg_attrs = *gccc::gt_ggc_e_9reg_attrs;
*gt_ggc_e_9mem_attrs = *gccc::gt_ggc_e_9mem_attrs;
*gt_ggc_e_14bitmap_obstack = *gccc::gt_ggc_e_14bitmap_obstack;
*gt_ggc_e_18bitmap_element_def = *gccc::gt_ggc_e_18bitmap_element_def;
*gt_ggc_e_12splay_tree_s = *gccc::gt_ggc_e_12splay_tree_s;
*gt_ggc_e_17splay_tree_node_s = *gccc::gt_ggc_e_17splay_tree_node_s;
*gt_ggc_e_4htab = *gccc::gt_ggc_e_4htab;
*gt_ggc_e_16machine_function = *gccc::gt_ggc_e_16machine_function;
*gt_ggc_e_17stack_local_entry = *gccc::gt_ggc_e_17stack_local_entry;
*gt_ggc_e_19machine_frame_state = *gccc::gt_ggc_e_19machine_frame_state;
*gt_ggc_e_10VEC_rtx_gc = *gccc::gt_ggc_e_10VEC_rtx_gc;
*gt_ggc_e_12VEC_rtx_base = *gccc::gt_ggc_e_12VEC_rtx_base;
*gt_ggc_e_13VEC_gimple_gc = *gccc::gt_ggc_e_13VEC_gimple_gc;
*gt_ggc_e_15VEC_gimple_base = *gccc::gt_ggc_e_15VEC_gimple_base;
*gt_ggc_e_11VEC_tree_gc = *gccc::gt_ggc_e_11VEC_tree_gc;
*gt_ggc_e_13VEC_tree_none = *gccc::gt_ggc_e_13VEC_tree_none;
*gt_ggc_e_13VEC_tree_base = *gccc::gt_ggc_e_13VEC_tree_base;
*gt_ggc_e_12VEC_uchar_gc = *gccc::gt_ggc_e_12VEC_uchar_gc;
*gt_ggc_e_14VEC_uchar_base = *gccc::gt_ggc_e_14VEC_uchar_base;
*gt_ggc_e_15basic_block_def = *gccc::gt_ggc_e_15basic_block_def;
*gt_ggc_e_8edge_def = *gccc::gt_ggc_e_8edge_def;
*gt_ggc_e_12gimple_seq_d = *gccc::gt_ggc_e_12gimple_seq_d;
*gt_ggc_e_15cl_optimization = *gccc::gt_ggc_e_15cl_optimization;
*gt_ggc_e_16cl_target_option = *gccc::gt_ggc_e_16cl_target_option;
*gt_ggc_e_7section = *gccc::gt_ggc_e_7section;
*gt_ggc_e_18gimple_statement_d = *gccc::gt_ggc_e_18gimple_statement_d;
*gt_ggc_e_9rtvec_def = *gccc::gt_ggc_e_9rtvec_def;
*gt_ggc_e_7rtx_def = *gccc::gt_ggc_e_7rtx_def;
*gt_ggc_e_15bitmap_head_def = *gccc::gt_ggc_e_15bitmap_head_def;
*gt_ggc_e_11cpp_macro_u = *gccc::gt_ggc_e_11cpp_macro_u;
*gt_ggc_e_13ht_identifier = *gccc::gt_ggc_e_13ht_identifier;
*gt_ggc_e_19_cpp_hashnode_value = *gccc::gt_ggc_e_19_cpp_hashnode_value;
*gt_ggc_e_11cpp_token_u = *gccc::gt_ggc_e_11cpp_token_u;
*gt_ggc_e_14cpp_identifier = *gccc::gt_ggc_e_14cpp_identifier;
*gt_ggc_e_9tree_node = *gccc::gt_ggc_e_9tree_node;
*gt_ggc_e_13cpp_macro_arg = *gccc::gt_ggc_e_13cpp_macro_arg;
*gt_ggc_e_6answer = *gccc::gt_ggc_e_6answer;
*gt_ggc_e_9cpp_macro = *gccc::gt_ggc_e_9cpp_macro;
*gt_ggc_e_12cpp_hashnode = *gccc::gt_ggc_e_12cpp_hashnode;
*gt_ggc_e_10cpp_string = *gccc::gt_ggc_e_10cpp_string;
*gt_ggc_e_9cpp_token = *gccc::gt_ggc_e_9cpp_token;
*gt_ggc_e_9line_maps = *gccc::gt_ggc_e_9line_maps;
*gt_ggc_e_8line_map = *gccc::gt_ggc_e_8line_map;
*gt_e_II17splay_tree_node_s = *gccc::gt_e_II17splay_tree_node_s;
*gt_e_SP9tree_node17splay_tree_node_s = *gccc::gt_e_SP9tree_node17splay_tree_node_s;
*gt_e_P9tree_nodeP9tree_node17splay_tree_node_s = *gccc::gt_e_P9tree_nodeP9tree_node17splay_tree_node_s;
*gt_e_P15interface_tuple4htab = *gccc::gt_e_P15interface_tuple4htab;
*gt_e_P17string_descriptor4htab = *gccc::gt_e_P17string_descriptor4htab;
*gt_e_P14type_assertion4htab = *gccc::gt_e_P14type_assertion4htab;
*gt_e_P18treetreehash_entry4htab = *gccc::gt_e_P18treetreehash_entry4htab;
*gt_e_P17module_htab_entry4htab = *gccc::gt_e_P17module_htab_entry4htab;
*gt_e_P21pending_abstract_type4htab = *gccc::gt_e_P21pending_abstract_type4htab;
*gt_e_P14constexpr_call4htab = *gccc::gt_e_P14constexpr_call4htab;
*gt_e_P16constexpr_fundef4htab = *gccc::gt_e_P16constexpr_fundef4htab;
*gt_e_P10spec_entry4htab = *gccc::gt_e_P10spec_entry4htab;
*gt_e_P16cxx_int_tree_map4htab = *gccc::gt_e_P16cxx_int_tree_map4htab;
*gt_e_P17named_label_entry4htab = *gccc::gt_e_P17named_label_entry4htab;
*gt_e_P17lto_in_decl_state4htab = *gccc::gt_e_P17lto_in_decl_state4htab;
*gt_e_P20lto_symtab_entry_def4htab = *gccc::gt_e_P20lto_symtab_entry_def4htab;
*gt_e_P11heapvar_map4htab = *gccc::gt_e_P11heapvar_map4htab;
*gt_e_P8tree_map4htab = *gccc::gt_e_P8tree_map4htab;
*gt_e_P9tree_nodeP9tree_node12splay_tree_s = *gccc::gt_e_P9tree_nodeP9tree_node12splay_tree_s;
*gt_e_P12varpool_node4htab = *gccc::gt_e_P12varpool_node4htab;
*gt_e_P13scev_info_str4htab = *gccc::gt_e_P13scev_info_str4htab;
*gt_e_P12tree_int_map4htab = *gccc::gt_e_P12tree_int_map4htab;
*gt_e_P23constant_descriptor_rtx4htab = *gccc::gt_e_P23constant_descriptor_rtx4htab;
*gt_e_P24constant_descriptor_tree4htab = *gccc::gt_e_P24constant_descriptor_tree4htab;
*gt_e_P12object_block4htab = *gccc::gt_e_P12object_block4htab;
*gt_e_P7section4htab = *gccc::gt_e_P7section4htab;
*gt_e_P17tree_priority_map4htab = *gccc::gt_e_P17tree_priority_map4htab;
*gt_e_P13tree_decl_map4htab = *gccc::gt_e_P13tree_decl_map4htab;
*gt_e_P9type_hash4htab = *gccc::gt_e_P9type_hash4htab;
*gt_e_P23temp_slot_address_entry4htab = *gccc::gt_e_P23temp_slot_address_entry4htab;
*gt_e_P15throw_stmt_node4htab = *gccc::gt_e_P15throw_stmt_node4htab;
*gt_e_P9reg_attrs4htab = *gccc::gt_e_P9reg_attrs4htab;
*gt_e_P9mem_attrs4htab = *gccc::gt_e_P9mem_attrs4htab;
*gt_e_P7rtx_def4htab = *gccc::gt_e_P7rtx_def4htab;
*gt_e_SP9tree_node12splay_tree_s = *gccc::gt_e_SP9tree_node12splay_tree_s;
*gt_e_P10vcall_insn4htab = *gccc::gt_e_P10vcall_insn4htab;
*gt_e_P22cached_dw_loc_list_def4htab = *gccc::gt_e_P22cached_dw_loc_list_def4htab;
*gt_e_P16var_loc_list_def4htab = *gccc::gt_e_P16var_loc_list_def4htab;
*gt_e_P10die_struct4htab = *gccc::gt_e_P10die_struct4htab;
*gt_e_P15dwarf_file_data4htab = *gccc::gt_e_P15dwarf_file_data4htab;
*gt_e_P20indirect_string_node4htab = *gccc::gt_e_P20indirect_string_node4htab;
*gt_e_P11cgraph_node4htab = *gccc::gt_e_P11cgraph_node4htab;
*gt_e_II12splay_tree_s = *gccc::gt_e_II12splay_tree_s;
*gt_e_P28varpool_node_set_element_def4htab = *gccc::gt_e_P28varpool_node_set_element_def4htab;
*gt_e_P27cgraph_node_set_element_def4htab = *gccc::gt_e_P27cgraph_node_set_element_def4htab;
*gt_e_P11cgraph_edge4htab = *gccc::gt_e_P11cgraph_edge4htab;
*gt_e_P9loop_exit4htab = *gccc::gt_e_P9loop_exit4htab;
*gt_e_P24types_used_by_vars_entry4htab = *gccc::gt_e_P24types_used_by_vars_entry4htab;
*gt_e_P9tree_node4htab = *gccc::gt_e_P9tree_node4htab;
*gt_e_P13libfunc_entry4htab = *gccc::gt_e_P13libfunc_entry4htab;
*gt_types_enum_last = *gccc::gt_types_enum_last;
*gt_ggc_rtab = *gccc::gt_ggc_rtab;
*gt_ggc_deletable_rtab = *gccc::gt_ggc_deletable_rtab;
*gt_pch_cache_rtab = *gccc::gt_pch_cache_rtab;
*gt_pch_scalar_rtab = *gccc::gt_pch_scalar_rtab;
*gt_ggc_cache_rtab = *gccc::gt_ggc_cache_rtab;
*ggc_protect_identifiers = *gccc::ggc_protect_identifiers;
*rtl_zone = *gccc::rtl_zone;
*tree_zone = *gccc::tree_zone;
*tree_id_zone = *gccc::tree_id_zone;
*UNSPEC_GOT = *gccc::UNSPEC_GOT;
*UNSPEC_GOTOFF = *gccc::UNSPEC_GOTOFF;
*UNSPEC_GOTPCREL = *gccc::UNSPEC_GOTPCREL;
*UNSPEC_GOTTPOFF = *gccc::UNSPEC_GOTTPOFF;
*UNSPEC_TPOFF = *gccc::UNSPEC_TPOFF;
*UNSPEC_NTPOFF = *gccc::UNSPEC_NTPOFF;
*UNSPEC_DTPOFF = *gccc::UNSPEC_DTPOFF;
*UNSPEC_GOTNTPOFF = *gccc::UNSPEC_GOTNTPOFF;
*UNSPEC_INDNTPOFF = *gccc::UNSPEC_INDNTPOFF;
*UNSPEC_PLTOFF = *gccc::UNSPEC_PLTOFF;
*UNSPEC_MACHOPIC_OFFSET = *gccc::UNSPEC_MACHOPIC_OFFSET;
*UNSPEC_PCREL = *gccc::UNSPEC_PCREL;
*UNSPEC_STACK_ALLOC = *gccc::UNSPEC_STACK_ALLOC;
*UNSPEC_SET_GOT = *gccc::UNSPEC_SET_GOT;
*UNSPEC_REG_SAVE = *gccc::UNSPEC_REG_SAVE;
*UNSPEC_DEF_CFA = *gccc::UNSPEC_DEF_CFA;
*UNSPEC_SET_RIP = *gccc::UNSPEC_SET_RIP;
*UNSPEC_SET_GOT_OFFSET = *gccc::UNSPEC_SET_GOT_OFFSET;
*UNSPEC_MEMORY_BLOCKAGE = *gccc::UNSPEC_MEMORY_BLOCKAGE;
*UNSPEC_STACK_CHECK = *gccc::UNSPEC_STACK_CHECK;
*UNSPEC_TP = *gccc::UNSPEC_TP;
*UNSPEC_TLS_GD = *gccc::UNSPEC_TLS_GD;
*UNSPEC_TLS_LD_BASE = *gccc::UNSPEC_TLS_LD_BASE;
*UNSPEC_TLSDESC = *gccc::UNSPEC_TLSDESC;
*UNSPEC_TLS_IE_SUN = *gccc::UNSPEC_TLS_IE_SUN;
*UNSPEC_SCAS = *gccc::UNSPEC_SCAS;
*UNSPEC_FNSTSW = *gccc::UNSPEC_FNSTSW;
*UNSPEC_SAHF = *gccc::UNSPEC_SAHF;
*UNSPEC_PARITY = *gccc::UNSPEC_PARITY;
*UNSPEC_FSTCW = *gccc::UNSPEC_FSTCW;
*UNSPEC_ADD_CARRY = *gccc::UNSPEC_ADD_CARRY;
*UNSPEC_FLDCW = *gccc::UNSPEC_FLDCW;
*UNSPEC_REP = *gccc::UNSPEC_REP;
*UNSPEC_LD_MPIC = *gccc::UNSPEC_LD_MPIC;
*UNSPEC_TRUNC_NOOP = *gccc::UNSPEC_TRUNC_NOOP;
*UNSPEC_DIV_ALREADY_SPLIT = *gccc::UNSPEC_DIV_ALREADY_SPLIT;
*UNSPEC_CALL_NEEDS_VZEROUPPER = *gccc::UNSPEC_CALL_NEEDS_VZEROUPPER;
*UNSPEC_FIX_NOTRUNC = *gccc::UNSPEC_FIX_NOTRUNC;
*UNSPEC_MASKMOV = *gccc::UNSPEC_MASKMOV;
*UNSPEC_MOVMSK = *gccc::UNSPEC_MOVMSK;
*UNSPEC_MOVNT = *gccc::UNSPEC_MOVNT;
*UNSPEC_MOVU = *gccc::UNSPEC_MOVU;
*UNSPEC_RCP = *gccc::UNSPEC_RCP;
*UNSPEC_RSQRT = *gccc::UNSPEC_RSQRT;
*UNSPEC_SFENCE = *gccc::UNSPEC_SFENCE;
*UNSPEC_PFRCP = *gccc::UNSPEC_PFRCP;
*UNSPEC_PFRCPIT1 = *gccc::UNSPEC_PFRCPIT1;
*UNSPEC_PFRCPIT2 = *gccc::UNSPEC_PFRCPIT2;
*UNSPEC_PFRSQRT = *gccc::UNSPEC_PFRSQRT;
*UNSPEC_PFRSQIT1 = *gccc::UNSPEC_PFRSQIT1;
*UNSPEC_MFENCE = *gccc::UNSPEC_MFENCE;
*UNSPEC_LFENCE = *gccc::UNSPEC_LFENCE;
*UNSPEC_PSADBW = *gccc::UNSPEC_PSADBW;
*UNSPEC_LDDQU = *gccc::UNSPEC_LDDQU;
*UNSPEC_MS_TO_SYSV_CALL = *gccc::UNSPEC_MS_TO_SYSV_CALL;
*UNSPEC_COPYSIGN = *gccc::UNSPEC_COPYSIGN;
*UNSPEC_IEEE_MIN = *gccc::UNSPEC_IEEE_MIN;
*UNSPEC_IEEE_MAX = *gccc::UNSPEC_IEEE_MAX;
*UNSPEC_SIN = *gccc::UNSPEC_SIN;
*UNSPEC_COS = *gccc::UNSPEC_COS;
*UNSPEC_FPATAN = *gccc::UNSPEC_FPATAN;
*UNSPEC_FYL2X = *gccc::UNSPEC_FYL2X;
*UNSPEC_FYL2XP1 = *gccc::UNSPEC_FYL2XP1;
*UNSPEC_FRNDINT = *gccc::UNSPEC_FRNDINT;
*UNSPEC_FIST = *gccc::UNSPEC_FIST;
*UNSPEC_F2XM1 = *gccc::UNSPEC_F2XM1;
*UNSPEC_TAN = *gccc::UNSPEC_TAN;
*UNSPEC_FXAM = *gccc::UNSPEC_FXAM;
*UNSPEC_FRNDINT_FLOOR = *gccc::UNSPEC_FRNDINT_FLOOR;
*UNSPEC_FRNDINT_CEIL = *gccc::UNSPEC_FRNDINT_CEIL;
*UNSPEC_FRNDINT_TRUNC = *gccc::UNSPEC_FRNDINT_TRUNC;
*UNSPEC_FRNDINT_MASK_PM = *gccc::UNSPEC_FRNDINT_MASK_PM;
*UNSPEC_FIST_FLOOR = *gccc::UNSPEC_FIST_FLOOR;
*UNSPEC_FIST_CEIL = *gccc::UNSPEC_FIST_CEIL;
*UNSPEC_SINCOS_COS = *gccc::UNSPEC_SINCOS_COS;
*UNSPEC_SINCOS_SIN = *gccc::UNSPEC_SINCOS_SIN;
*UNSPEC_XTRACT_FRACT = *gccc::UNSPEC_XTRACT_FRACT;
*UNSPEC_XTRACT_EXP = *gccc::UNSPEC_XTRACT_EXP;
*UNSPEC_FSCALE_FRACT = *gccc::UNSPEC_FSCALE_FRACT;
*UNSPEC_FSCALE_EXP = *gccc::UNSPEC_FSCALE_EXP;
*UNSPEC_FPREM_F = *gccc::UNSPEC_FPREM_F;
*UNSPEC_FPREM_U = *gccc::UNSPEC_FPREM_U;
*UNSPEC_FPREM1_F = *gccc::UNSPEC_FPREM1_F;
*UNSPEC_FPREM1_U = *gccc::UNSPEC_FPREM1_U;
*UNSPEC_C2_FLAG = *gccc::UNSPEC_C2_FLAG;
*UNSPEC_FXAM_MEM = *gccc::UNSPEC_FXAM_MEM;
*UNSPEC_SP_SET = *gccc::UNSPEC_SP_SET;
*UNSPEC_SP_TEST = *gccc::UNSPEC_SP_TEST;
*UNSPEC_SP_TLS_SET = *gccc::UNSPEC_SP_TLS_SET;
*UNSPEC_SP_TLS_TEST = *gccc::UNSPEC_SP_TLS_TEST;
*UNSPEC_PSHUFB = *gccc::UNSPEC_PSHUFB;
*UNSPEC_PSIGN = *gccc::UNSPEC_PSIGN;
*UNSPEC_PALIGNR = *gccc::UNSPEC_PALIGNR;
*UNSPEC_EXTRQI = *gccc::UNSPEC_EXTRQI;
*UNSPEC_EXTRQ = *gccc::UNSPEC_EXTRQ;
*UNSPEC_INSERTQI = *gccc::UNSPEC_INSERTQI;
*UNSPEC_INSERTQ = *gccc::UNSPEC_INSERTQ;
*UNSPEC_BLENDV = *gccc::UNSPEC_BLENDV;
*UNSPEC_INSERTPS = *gccc::UNSPEC_INSERTPS;
*UNSPEC_DP = *gccc::UNSPEC_DP;
*UNSPEC_MOVNTDQA = *gccc::UNSPEC_MOVNTDQA;
*UNSPEC_MPSADBW = *gccc::UNSPEC_MPSADBW;
*UNSPEC_PHMINPOSUW = *gccc::UNSPEC_PHMINPOSUW;
*UNSPEC_PTEST = *gccc::UNSPEC_PTEST;
*UNSPEC_ROUND = *gccc::UNSPEC_ROUND;
*UNSPEC_CRC32 = *gccc::UNSPEC_CRC32;
*UNSPEC_PCMPESTR = *gccc::UNSPEC_PCMPESTR;
*UNSPEC_PCMPISTR = *gccc::UNSPEC_PCMPISTR;
*UNSPEC_FMADDSUB = *gccc::UNSPEC_FMADDSUB;
*UNSPEC_XOP_UNSIGNED_CMP = *gccc::UNSPEC_XOP_UNSIGNED_CMP;
*UNSPEC_XOP_TRUEFALSE = *gccc::UNSPEC_XOP_TRUEFALSE;
*UNSPEC_XOP_PERMUTE = *gccc::UNSPEC_XOP_PERMUTE;
*UNSPEC_FRCZ = *gccc::UNSPEC_FRCZ;
*UNSPEC_AESENC = *gccc::UNSPEC_AESENC;
*UNSPEC_AESENCLAST = *gccc::UNSPEC_AESENCLAST;
*UNSPEC_AESDEC = *gccc::UNSPEC_AESDEC;
*UNSPEC_AESDECLAST = *gccc::UNSPEC_AESDECLAST;
*UNSPEC_AESIMC = *gccc::UNSPEC_AESIMC;
*UNSPEC_AESKEYGENASSIST = *gccc::UNSPEC_AESKEYGENASSIST;
*UNSPEC_PCLMUL = *gccc::UNSPEC_PCLMUL;
*UNSPEC_PCMP = *gccc::UNSPEC_PCMP;
*UNSPEC_VPERMIL = *gccc::UNSPEC_VPERMIL;
*UNSPEC_VPERMIL2 = *gccc::UNSPEC_VPERMIL2;
*UNSPEC_VPERMIL2F128 = *gccc::UNSPEC_VPERMIL2F128;
*UNSPEC_MASKLOAD = *gccc::UNSPEC_MASKLOAD;
*UNSPEC_MASKSTORE = *gccc::UNSPEC_MASKSTORE;
*UNSPEC_CAST = *gccc::UNSPEC_CAST;
*UNSPEC_VTESTP = *gccc::UNSPEC_VTESTP;
*UNSPEC_VCVTPH2PS = *gccc::UNSPEC_VCVTPH2PS;
*UNSPEC_VCVTPS2PH = *gccc::UNSPEC_VCVTPS2PH;
*UNSPEC_BEXTR = *gccc::UNSPEC_BEXTR;
*UNSPEC_RDRAND = *gccc::UNSPEC_RDRAND;
*unspec_strings = *gccc::unspec_strings;
*UNSPECV_BLOCKAGE = *gccc::UNSPECV_BLOCKAGE;
*UNSPECV_STACK_PROBE = *gccc::UNSPECV_STACK_PROBE;
*UNSPECV_PROBE_STACK_RANGE = *gccc::UNSPECV_PROBE_STACK_RANGE;
*UNSPECV_EMMS = *gccc::UNSPECV_EMMS;
*UNSPECV_LDMXCSR = *gccc::UNSPECV_LDMXCSR;
*UNSPECV_STMXCSR = *gccc::UNSPECV_STMXCSR;
*UNSPECV_FEMMS = *gccc::UNSPECV_FEMMS;
*UNSPECV_CLFLUSH = *gccc::UNSPECV_CLFLUSH;
*UNSPECV_ALIGN = *gccc::UNSPECV_ALIGN;
*UNSPECV_MONITOR = *gccc::UNSPECV_MONITOR;
*UNSPECV_MWAIT = *gccc::UNSPECV_MWAIT;
*UNSPECV_CMPXCHG = *gccc::UNSPECV_CMPXCHG;
*UNSPECV_XCHG = *gccc::UNSPECV_XCHG;
*UNSPECV_LOCK = *gccc::UNSPECV_LOCK;
*UNSPECV_PROLOGUE_USE = *gccc::UNSPECV_PROLOGUE_USE;
*UNSPECV_CLD = *gccc::UNSPECV_CLD;
*UNSPECV_NOPS = *gccc::UNSPECV_NOPS;
*UNSPECV_VZEROALL = *gccc::UNSPECV_VZEROALL;
*UNSPECV_VZEROUPPER = *gccc::UNSPECV_VZEROUPPER;
*UNSPECV_RDTSC = *gccc::UNSPECV_RDTSC;
*UNSPECV_RDTSCP = *gccc::UNSPECV_RDTSCP;
*UNSPECV_RDPMC = *gccc::UNSPECV_RDPMC;
*UNSPECV_LLWP_INTRINSIC = *gccc::UNSPECV_LLWP_INTRINSIC;
*UNSPECV_SLWP_INTRINSIC = *gccc::UNSPECV_SLWP_INTRINSIC;
*UNSPECV_LWPVAL_INTRINSIC = *gccc::UNSPECV_LWPVAL_INTRINSIC;
*UNSPECV_LWPINS_INTRINSIC = *gccc::UNSPECV_LWPINS_INTRINSIC;
*UNSPECV_RDFSBASE = *gccc::UNSPECV_RDFSBASE;
*UNSPECV_RDGSBASE = *gccc::UNSPECV_RDGSBASE;
*UNSPECV_WRFSBASE = *gccc::UNSPECV_WRFSBASE;
*UNSPECV_WRGSBASE = *gccc::UNSPECV_WRGSBASE;
*UNSPECV_SPLIT_STACK_RETURN = *gccc::UNSPECV_SPLIT_STACK_RETURN;
*unspecv_strings = *gccc::unspecv_strings;
*no_stringop = *gccc::no_stringop;
*libcall = *gccc::libcall;
*rep_prefix_1_byte = *gccc::rep_prefix_1_byte;
*rep_prefix_4_byte = *gccc::rep_prefix_4_byte;
*rep_prefix_8_byte = *gccc::rep_prefix_8_byte;
*loop_1_byte = *gccc::loop_1_byte;
*loop = *gccc::loop;
*unrolled_loop = *gccc::unrolled_loop;

my %__ix86_cost_hash;
tie %__ix86_cost_hash,"gcc::processor_costs", $gccc::ix86_cost;
$ix86_cost= \%__ix86_cost_hash;
bless $ix86_cost, gcc::processor_costs;

my %__ix86_size_cost_hash;
tie %__ix86_size_cost_hash,"gcc::processor_costs", $gccc::ix86_size_cost;
$ix86_size_cost= \%__ix86_size_cost_hash;
bless $ix86_size_cost, gcc::processor_costs;
*X86_TUNE_USE_LEAVE = *gccc::X86_TUNE_USE_LEAVE;
*X86_TUNE_PUSH_MEMORY = *gccc::X86_TUNE_PUSH_MEMORY;
*X86_TUNE_ZERO_EXTEND_WITH_AND = *gccc::X86_TUNE_ZERO_EXTEND_WITH_AND;
*X86_TUNE_UNROLL_STRLEN = *gccc::X86_TUNE_UNROLL_STRLEN;
*X86_TUNE_DEEP_BRANCH_PREDICTION = *gccc::X86_TUNE_DEEP_BRANCH_PREDICTION;
*X86_TUNE_BRANCH_PREDICTION_HINTS = *gccc::X86_TUNE_BRANCH_PREDICTION_HINTS;
*X86_TUNE_DOUBLE_WITH_ADD = *gccc::X86_TUNE_DOUBLE_WITH_ADD;
*X86_TUNE_USE_SAHF = *gccc::X86_TUNE_USE_SAHF;
*X86_TUNE_MOVX = *gccc::X86_TUNE_MOVX;
*X86_TUNE_PARTIAL_REG_STALL = *gccc::X86_TUNE_PARTIAL_REG_STALL;
*X86_TUNE_PARTIAL_FLAG_REG_STALL = *gccc::X86_TUNE_PARTIAL_FLAG_REG_STALL;
*X86_TUNE_USE_HIMODE_FIOP = *gccc::X86_TUNE_USE_HIMODE_FIOP;
*X86_TUNE_USE_SIMODE_FIOP = *gccc::X86_TUNE_USE_SIMODE_FIOP;
*X86_TUNE_USE_MOV0 = *gccc::X86_TUNE_USE_MOV0;
*X86_TUNE_USE_CLTD = *gccc::X86_TUNE_USE_CLTD;
*X86_TUNE_USE_XCHGB = *gccc::X86_TUNE_USE_XCHGB;
*X86_TUNE_SPLIT_LONG_MOVES = *gccc::X86_TUNE_SPLIT_LONG_MOVES;
*X86_TUNE_READ_MODIFY_WRITE = *gccc::X86_TUNE_READ_MODIFY_WRITE;
*X86_TUNE_READ_MODIFY = *gccc::X86_TUNE_READ_MODIFY;
*X86_TUNE_PROMOTE_QIMODE = *gccc::X86_TUNE_PROMOTE_QIMODE;
*X86_TUNE_FAST_PREFIX = *gccc::X86_TUNE_FAST_PREFIX;
*X86_TUNE_SINGLE_STRINGOP = *gccc::X86_TUNE_SINGLE_STRINGOP;
*X86_TUNE_QIMODE_MATH = *gccc::X86_TUNE_QIMODE_MATH;
*X86_TUNE_HIMODE_MATH = *gccc::X86_TUNE_HIMODE_MATH;
*X86_TUNE_PROMOTE_QI_REGS = *gccc::X86_TUNE_PROMOTE_QI_REGS;
*X86_TUNE_PROMOTE_HI_REGS = *gccc::X86_TUNE_PROMOTE_HI_REGS;
*X86_TUNE_SINGLE_POP = *gccc::X86_TUNE_SINGLE_POP;
*X86_TUNE_DOUBLE_POP = *gccc::X86_TUNE_DOUBLE_POP;
*X86_TUNE_SINGLE_PUSH = *gccc::X86_TUNE_SINGLE_PUSH;
*X86_TUNE_DOUBLE_PUSH = *gccc::X86_TUNE_DOUBLE_PUSH;
*X86_TUNE_INTEGER_DFMODE_MOVES = *gccc::X86_TUNE_INTEGER_DFMODE_MOVES;
*X86_TUNE_PARTIAL_REG_DEPENDENCY = *gccc::X86_TUNE_PARTIAL_REG_DEPENDENCY;
*X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY = *gccc::X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY;
*X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL = *gccc::X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL;
*X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL = *gccc::X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL;
*X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL = *gccc::X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL;
*X86_TUNE_SSE_SPLIT_REGS = *gccc::X86_TUNE_SSE_SPLIT_REGS;
*X86_TUNE_SSE_TYPELESS_STORES = *gccc::X86_TUNE_SSE_TYPELESS_STORES;
*X86_TUNE_SSE_LOAD0_BY_PXOR = *gccc::X86_TUNE_SSE_LOAD0_BY_PXOR;
*X86_TUNE_MEMORY_MISMATCH_STALL = *gccc::X86_TUNE_MEMORY_MISMATCH_STALL;
*X86_TUNE_PROLOGUE_USING_MOVE = *gccc::X86_TUNE_PROLOGUE_USING_MOVE;
*X86_TUNE_EPILOGUE_USING_MOVE = *gccc::X86_TUNE_EPILOGUE_USING_MOVE;
*X86_TUNE_SHIFT1 = *gccc::X86_TUNE_SHIFT1;
*X86_TUNE_USE_FFREEP = *gccc::X86_TUNE_USE_FFREEP;
*X86_TUNE_INTER_UNIT_MOVES = *gccc::X86_TUNE_INTER_UNIT_MOVES;
*X86_TUNE_INTER_UNIT_CONVERSIONS = *gccc::X86_TUNE_INTER_UNIT_CONVERSIONS;
*X86_TUNE_FOUR_JUMP_LIMIT = *gccc::X86_TUNE_FOUR_JUMP_LIMIT;
*X86_TUNE_SCHEDULE = *gccc::X86_TUNE_SCHEDULE;
*X86_TUNE_USE_BT = *gccc::X86_TUNE_USE_BT;
*X86_TUNE_USE_INCDEC = *gccc::X86_TUNE_USE_INCDEC;
*X86_TUNE_PAD_RETURNS = *gccc::X86_TUNE_PAD_RETURNS;
*X86_TUNE_PAD_SHORT_FUNCTION = *gccc::X86_TUNE_PAD_SHORT_FUNCTION;
*X86_TUNE_EXT_80387_CONSTANTS = *gccc::X86_TUNE_EXT_80387_CONSTANTS;
*X86_TUNE_SHORTEN_X87_SSE = *gccc::X86_TUNE_SHORTEN_X87_SSE;
*X86_TUNE_AVOID_VECTOR_DECODE = *gccc::X86_TUNE_AVOID_VECTOR_DECODE;
*X86_TUNE_PROMOTE_HIMODE_IMUL = *gccc::X86_TUNE_PROMOTE_HIMODE_IMUL;
*X86_TUNE_SLOW_IMUL_IMM32_MEM = *gccc::X86_TUNE_SLOW_IMUL_IMM32_MEM;
*X86_TUNE_SLOW_IMUL_IMM8 = *gccc::X86_TUNE_SLOW_IMUL_IMM8;
*X86_TUNE_MOVE_M1_VIA_OR = *gccc::X86_TUNE_MOVE_M1_VIA_OR;
*X86_TUNE_NOT_UNPAIRABLE = *gccc::X86_TUNE_NOT_UNPAIRABLE;
*X86_TUNE_NOT_VECTORMODE = *gccc::X86_TUNE_NOT_VECTORMODE;
*X86_TUNE_USE_VECTOR_FP_CONVERTS = *gccc::X86_TUNE_USE_VECTOR_FP_CONVERTS;
*X86_TUNE_USE_VECTOR_CONVERTS = *gccc::X86_TUNE_USE_VECTOR_CONVERTS;
*X86_TUNE_FUSE_CMP_AND_BRANCH = *gccc::X86_TUNE_FUSE_CMP_AND_BRANCH;
*X86_TUNE_OPT_AGU = *gccc::X86_TUNE_OPT_AGU;
*X86_TUNE_VECTORIZE_DOUBLE = *gccc::X86_TUNE_VECTORIZE_DOUBLE;
*X86_TUNE_AVX128_OPTIMAL = *gccc::X86_TUNE_AVX128_OPTIMAL;
*X86_TUNE_LAST = *gccc::X86_TUNE_LAST;
*ix86_tune_features = *gccc::ix86_tune_features;
*X86_ARCH_CMOVE = *gccc::X86_ARCH_CMOVE;
*X86_ARCH_CMPXCHG = *gccc::X86_ARCH_CMPXCHG;
*X86_ARCH_CMPXCHG8B = *gccc::X86_ARCH_CMPXCHG8B;
*X86_ARCH_XADD = *gccc::X86_ARCH_XADD;
*X86_ARCH_BSWAP = *gccc::X86_ARCH_BSWAP;
*X86_ARCH_LAST = *gccc::X86_ARCH_LAST;
*ix86_arch_features = *gccc::ix86_arch_features;
*x86_prefetch_sse = *gccc::x86_prefetch_sse;

my %__x86_mfence_hash;
tie %__x86_mfence_hash,"gcc::tree_node", $gccc::x86_mfence;
$x86_mfence= \%__x86_mfence_hash;
bless $x86_mfence, gcc::tree_node;
*SYSV_ABI = *gccc::SYSV_ABI;
*MS_ABI = *gccc::MS_ABI;
*ix86_abi = *gccc::ix86_abi;
*TARGET_CPU_DEFAULT_generic = *gccc::TARGET_CPU_DEFAULT_generic;
*TARGET_CPU_DEFAULT_i386 = *gccc::TARGET_CPU_DEFAULT_i386;
*TARGET_CPU_DEFAULT_i486 = *gccc::TARGET_CPU_DEFAULT_i486;
*TARGET_CPU_DEFAULT_pentium = *gccc::TARGET_CPU_DEFAULT_pentium;
*TARGET_CPU_DEFAULT_pentium_mmx = *gccc::TARGET_CPU_DEFAULT_pentium_mmx;
*TARGET_CPU_DEFAULT_pentiumpro = *gccc::TARGET_CPU_DEFAULT_pentiumpro;
*TARGET_CPU_DEFAULT_pentium2 = *gccc::TARGET_CPU_DEFAULT_pentium2;
*TARGET_CPU_DEFAULT_pentium3 = *gccc::TARGET_CPU_DEFAULT_pentium3;
*TARGET_CPU_DEFAULT_pentium4 = *gccc::TARGET_CPU_DEFAULT_pentium4;
*TARGET_CPU_DEFAULT_pentium_m = *gccc::TARGET_CPU_DEFAULT_pentium_m;
*TARGET_CPU_DEFAULT_prescott = *gccc::TARGET_CPU_DEFAULT_prescott;
*TARGET_CPU_DEFAULT_nocona = *gccc::TARGET_CPU_DEFAULT_nocona;
*TARGET_CPU_DEFAULT_core2 = *gccc::TARGET_CPU_DEFAULT_core2;
*TARGET_CPU_DEFAULT_corei7 = *gccc::TARGET_CPU_DEFAULT_corei7;
*TARGET_CPU_DEFAULT_atom = *gccc::TARGET_CPU_DEFAULT_atom;
*TARGET_CPU_DEFAULT_geode = *gccc::TARGET_CPU_DEFAULT_geode;
*TARGET_CPU_DEFAULT_k6 = *gccc::TARGET_CPU_DEFAULT_k6;
*TARGET_CPU_DEFAULT_k6_2 = *gccc::TARGET_CPU_DEFAULT_k6_2;
*TARGET_CPU_DEFAULT_k6_3 = *gccc::TARGET_CPU_DEFAULT_k6_3;
*TARGET_CPU_DEFAULT_athlon = *gccc::TARGET_CPU_DEFAULT_athlon;
*TARGET_CPU_DEFAULT_athlon_sse = *gccc::TARGET_CPU_DEFAULT_athlon_sse;
*TARGET_CPU_DEFAULT_k8 = *gccc::TARGET_CPU_DEFAULT_k8;
*TARGET_CPU_DEFAULT_amdfam10 = *gccc::TARGET_CPU_DEFAULT_amdfam10;
*TARGET_CPU_DEFAULT_bdver1 = *gccc::TARGET_CPU_DEFAULT_bdver1;
*TARGET_CPU_DEFAULT_btver1 = *gccc::TARGET_CPU_DEFAULT_btver1;
*TARGET_CPU_DEFAULT_max = *gccc::TARGET_CPU_DEFAULT_max;
*NO_REGS = *gccc::NO_REGS;
*AREG = *gccc::AREG;
*DREG = *gccc::DREG;
*CREG = *gccc::CREG;
*BREG = *gccc::BREG;
*SIREG = *gccc::SIREG;
*DIREG = *gccc::DIREG;
*AD_REGS = *gccc::AD_REGS;
*CLOBBERED_REGS = *gccc::CLOBBERED_REGS;
*Q_REGS = *gccc::Q_REGS;
*NON_Q_REGS = *gccc::NON_Q_REGS;
*INDEX_REGS = *gccc::INDEX_REGS;
*LEGACY_REGS = *gccc::LEGACY_REGS;
*GENERAL_REGS = *gccc::GENERAL_REGS;
*FP_TOP_REG = *gccc::FP_TOP_REG;
*FP_SECOND_REG = *gccc::FP_SECOND_REG;
*FLOAT_REGS = *gccc::FLOAT_REGS;
*SSE_FIRST_REG = *gccc::SSE_FIRST_REG;
*SSE_REGS = *gccc::SSE_REGS;
*MMX_REGS = *gccc::MMX_REGS;
*FP_TOP_SSE_REGS = *gccc::FP_TOP_SSE_REGS;
*FP_SECOND_SSE_REGS = *gccc::FP_SECOND_SSE_REGS;
*FLOAT_SSE_REGS = *gccc::FLOAT_SSE_REGS;
*FLOAT_INT_REGS = *gccc::FLOAT_INT_REGS;
*INT_SSE_REGS = *gccc::INT_SSE_REGS;
*FLOAT_INT_SSE_REGS = *gccc::FLOAT_INT_SSE_REGS;
*ALL_REGS = *gccc::ALL_REGS;
*LIM_REG_CLASSES = *gccc::LIM_REG_CLASSES;
*dbx_register_map = *gccc::dbx_register_map;
*dbx64_register_map = *gccc::dbx64_register_map;
*svr4_dbx_register_map = *gccc::svr4_dbx_register_map;
*PROCESSOR_I386 = *gccc::PROCESSOR_I386;
*PROCESSOR_I486 = *gccc::PROCESSOR_I486;
*PROCESSOR_PENTIUM = *gccc::PROCESSOR_PENTIUM;
*PROCESSOR_PENTIUMPRO = *gccc::PROCESSOR_PENTIUMPRO;
*PROCESSOR_GEODE = *gccc::PROCESSOR_GEODE;
*PROCESSOR_K6 = *gccc::PROCESSOR_K6;
*PROCESSOR_ATHLON = *gccc::PROCESSOR_ATHLON;
*PROCESSOR_PENTIUM4 = *gccc::PROCESSOR_PENTIUM4;
*PROCESSOR_K8 = *gccc::PROCESSOR_K8;
*PROCESSOR_NOCONA = *gccc::PROCESSOR_NOCONA;
*PROCESSOR_CORE2_32 = *gccc::PROCESSOR_CORE2_32;
*PROCESSOR_CORE2_64 = *gccc::PROCESSOR_CORE2_64;
*PROCESSOR_COREI7_32 = *gccc::PROCESSOR_COREI7_32;
*PROCESSOR_COREI7_64 = *gccc::PROCESSOR_COREI7_64;
*PROCESSOR_GENERIC32 = *gccc::PROCESSOR_GENERIC32;
*PROCESSOR_GENERIC64 = *gccc::PROCESSOR_GENERIC64;
*PROCESSOR_AMDFAM10 = *gccc::PROCESSOR_AMDFAM10;
*PROCESSOR_BDVER1 = *gccc::PROCESSOR_BDVER1;
*PROCESSOR_BTVER1 = *gccc::PROCESSOR_BTVER1;
*PROCESSOR_ATOM = *gccc::PROCESSOR_ATOM;
*PROCESSOR_max = *gccc::PROCESSOR_max;
*ix86_tune = *gccc::ix86_tune;
*ix86_arch = *gccc::ix86_arch;
*FPMATH_387 = *gccc::FPMATH_387;
*FPMATH_SSE = *gccc::FPMATH_SSE;
*ix86_fpmath = *gccc::ix86_fpmath;
*TLS_DIALECT_GNU = *gccc::TLS_DIALECT_GNU;
*TLS_DIALECT_GNU2 = *gccc::TLS_DIALECT_GNU2;
*TLS_DIALECT_SUN = *gccc::TLS_DIALECT_SUN;
*ix86_tls_dialect = *gccc::ix86_tls_dialect;
*CM_32 = *gccc::CM_32;
*CM_SMALL = *gccc::CM_SMALL;
*CM_KERNEL = *gccc::CM_KERNEL;
*CM_MEDIUM = *gccc::CM_MEDIUM;
*CM_LARGE = *gccc::CM_LARGE;
*CM_SMALL_PIC = *gccc::CM_SMALL_PIC;
*CM_MEDIUM_PIC = *gccc::CM_MEDIUM_PIC;
*CM_LARGE_PIC = *gccc::CM_LARGE_PIC;
*ix86_cmodel = *gccc::ix86_cmodel;
*ASM_ATT = *gccc::ASM_ATT;
*ASM_INTEL = *gccc::ASM_INTEL;
*ix86_asm_dialect = *gccc::ix86_asm_dialect;
*ix86_preferred_stack_boundary = *gccc::ix86_preferred_stack_boundary;
*ix86_incoming_stack_boundary = *gccc::ix86_incoming_stack_boundary;
*ix86_branch_cost = *gccc::ix86_branch_cost;
*ix86_section_threshold = *gccc::ix86_section_threshold;
*regclass_map = *gccc::regclass_map;
*IX86_FPCMP_SAHF = *gccc::IX86_FPCMP_SAHF;
*IX86_FPCMP_COMI = *gccc::IX86_FPCMP_COMI;
*IX86_FPCMP_ARITH = *gccc::IX86_FPCMP_ARITH;
*I387_TRUNC = *gccc::I387_TRUNC;
*I387_FLOOR = *gccc::I387_FLOOR;
*I387_CEIL = *gccc::I387_CEIL;
*I387_MASK_PM = *gccc::I387_MASK_PM;
*MAX_386_ENTITIES = *gccc::MAX_386_ENTITIES;
*SLOT_VIRTUAL = *gccc::SLOT_VIRTUAL;
*SLOT_TEMP = *gccc::SLOT_TEMP;
*SLOT_CW_STORED = *gccc::SLOT_CW_STORED;
*SLOT_CW_TRUNC = *gccc::SLOT_CW_TRUNC;
*SLOT_CW_FLOOR = *gccc::SLOT_CW_FLOOR;
*SLOT_CW_CEIL = *gccc::SLOT_CW_CEIL;
*SLOT_CW_MASK_PM = *gccc::SLOT_CW_MASK_PM;
*MAX_386_STACK_LOCALS = *gccc::MAX_386_STACK_LOCALS;
*global_regs = *gccc::global_regs;

my %__default_target_hard_regs_hash;
tie %__default_target_hard_regs_hash,"gcc::target_hard_regs", $gccc::default_target_hard_regs;
$default_target_hard_regs= \%__default_target_hard_regs_hash;
bless $default_target_hard_regs, gcc::target_hard_regs;
*reg_class_names = *gccc::reg_class_names;
*regno_reg_rtx = *gccc::regno_reg_rtx;

my %__x_rtl_hash;
tie %__x_rtl_hash,"gcc::rtl_data", $gccc::x_rtl;
$x_rtl= \%__x_rtl_hash;
bless $x_rtl, gcc::rtl_data;

my %__cfun_hash;
tie %__cfun_hash,"gcc::function", $gccc::cfun;
$cfun= \%__cfun_hash;
bless $cfun, gcc::function;
*virtuals_instantiated = *gccc::virtuals_instantiated;
*trampolines_created = *gccc::trampolines_created;

my %__types_used_by_vars_hash_hash;
tie %__types_used_by_vars_hash_hash,"gcc::htab", $gccc::types_used_by_vars_hash;
$types_used_by_vars_hash= \%__types_used_by_vars_hash_hash;
bless $types_used_by_vars_hash, gcc::htab;

my %__types_used_by_cur_var_decl_hash;
tie %__types_used_by_cur_var_decl_hash,"gcc::VEC_tree_gc", $gccc::types_used_by_cur_var_decl;
$types_used_by_cur_var_decl= \%__types_used_by_cur_var_decl_hash;
bless $types_used_by_cur_var_decl, gcc::VEC_tree_gc;
*init_machine_status = *gccc::init_machine_status;
*CPP_EQ = *gccc::CPP_EQ;
*CPP_NOT = *gccc::CPP_NOT;
*CPP_GREATER = *gccc::CPP_GREATER;
*CPP_LESS = *gccc::CPP_LESS;
*CPP_PLUS = *gccc::CPP_PLUS;
*CPP_MINUS = *gccc::CPP_MINUS;
*CPP_MULT = *gccc::CPP_MULT;
*CPP_DIV = *gccc::CPP_DIV;
*CPP_MOD = *gccc::CPP_MOD;
*CPP_AND = *gccc::CPP_AND;
*CPP_OR = *gccc::CPP_OR;
*CPP_XOR = *gccc::CPP_XOR;
*CPP_RSHIFT = *gccc::CPP_RSHIFT;
*CPP_LSHIFT = *gccc::CPP_LSHIFT;
*CPP_COMPL = *gccc::CPP_COMPL;
*CPP_AND_AND = *gccc::CPP_AND_AND;
*CPP_OR_OR = *gccc::CPP_OR_OR;
*CPP_QUERY = *gccc::CPP_QUERY;
*CPP_COLON = *gccc::CPP_COLON;
*CPP_COMMA = *gccc::CPP_COMMA;
*CPP_OPEN_PAREN = *gccc::CPP_OPEN_PAREN;
*CPP_CLOSE_PAREN = *gccc::CPP_CLOSE_PAREN;
*CPP_EOF = *gccc::CPP_EOF;
*CPP_EQ_EQ = *gccc::CPP_EQ_EQ;
*CPP_NOT_EQ = *gccc::CPP_NOT_EQ;
*CPP_GREATER_EQ = *gccc::CPP_GREATER_EQ;
*CPP_LESS_EQ = *gccc::CPP_LESS_EQ;
*CPP_PLUS_EQ = *gccc::CPP_PLUS_EQ;
*CPP_MINUS_EQ = *gccc::CPP_MINUS_EQ;
*CPP_MULT_EQ = *gccc::CPP_MULT_EQ;
*CPP_DIV_EQ = *gccc::CPP_DIV_EQ;
*CPP_MOD_EQ = *gccc::CPP_MOD_EQ;
*CPP_AND_EQ = *gccc::CPP_AND_EQ;
*CPP_OR_EQ = *gccc::CPP_OR_EQ;
*CPP_XOR_EQ = *gccc::CPP_XOR_EQ;
*CPP_RSHIFT_EQ = *gccc::CPP_RSHIFT_EQ;
*CPP_LSHIFT_EQ = *gccc::CPP_LSHIFT_EQ;
*CPP_HASH = *gccc::CPP_HASH;
*CPP_PASTE = *gccc::CPP_PASTE;
*CPP_OPEN_SQUARE = *gccc::CPP_OPEN_SQUARE;
*CPP_CLOSE_SQUARE = *gccc::CPP_CLOSE_SQUARE;
*CPP_OPEN_BRACE = *gccc::CPP_OPEN_BRACE;
*CPP_CLOSE_BRACE = *gccc::CPP_CLOSE_BRACE;
*CPP_SEMICOLON = *gccc::CPP_SEMICOLON;
*CPP_ELLIPSIS = *gccc::CPP_ELLIPSIS;
*CPP_PLUS_PLUS = *gccc::CPP_PLUS_PLUS;
*CPP_MINUS_MINUS = *gccc::CPP_MINUS_MINUS;
*CPP_DEREF = *gccc::CPP_DEREF;
*CPP_DOT = *gccc::CPP_DOT;
*CPP_SCOPE = *gccc::CPP_SCOPE;
*CPP_DEREF_STAR = *gccc::CPP_DEREF_STAR;
*CPP_DOT_STAR = *gccc::CPP_DOT_STAR;
*CPP_ATSIGN = *gccc::CPP_ATSIGN;
*CPP_NAME = *gccc::CPP_NAME;
*CPP_AT_NAME = *gccc::CPP_AT_NAME;
*CPP_NUMBER = *gccc::CPP_NUMBER;
*CPP_CHAR = *gccc::CPP_CHAR;
*CPP_WCHAR = *gccc::CPP_WCHAR;
*CPP_CHAR16 = *gccc::CPP_CHAR16;
*CPP_CHAR32 = *gccc::CPP_CHAR32;
*CPP_OTHER = *gccc::CPP_OTHER;
*CPP_STRING = *gccc::CPP_STRING;
*CPP_WSTRING = *gccc::CPP_WSTRING;
*CPP_STRING16 = *gccc::CPP_STRING16;
*CPP_STRING32 = *gccc::CPP_STRING32;
*CPP_UTF8STRING = *gccc::CPP_UTF8STRING;
*CPP_OBJC_STRING = *gccc::CPP_OBJC_STRING;
*CPP_HEADER_NAME = *gccc::CPP_HEADER_NAME;
*CPP_COMMENT = *gccc::CPP_COMMENT;
*CPP_MACRO_ARG = *gccc::CPP_MACRO_ARG;
*CPP_PRAGMA = *gccc::CPP_PRAGMA;
*CPP_PRAGMA_EOL = *gccc::CPP_PRAGMA_EOL;
*CPP_PADDING = *gccc::CPP_PADDING;
*N_TTYPES = *gccc::N_TTYPES;
*CPP_LAST_EQ = *gccc::CPP_LAST_EQ;
*CPP_FIRST_DIGRAPH = *gccc::CPP_FIRST_DIGRAPH;
*CPP_LAST_PUNCTUATOR = *gccc::CPP_LAST_PUNCTUATOR;
*CPP_LAST_CPP_OP = *gccc::CPP_LAST_CPP_OP;
*CLK_GNUC89 = *gccc::CLK_GNUC89;
*CLK_GNUC99 = *gccc::CLK_GNUC99;
*CLK_GNUC1X = *gccc::CLK_GNUC1X;
*CLK_STDC89 = *gccc::CLK_STDC89;
*CLK_STDC94 = *gccc::CLK_STDC94;
*CLK_STDC99 = *gccc::CLK_STDC99;
*CLK_STDC1X = *gccc::CLK_STDC1X;
*CLK_GNUCXX = *gccc::CLK_GNUCXX;
*CLK_CXX98 = *gccc::CLK_CXX98;
*CLK_GNUCXX0X = *gccc::CLK_GNUCXX0X;
*CLK_CXX0X = *gccc::CLK_CXX0X;
*CLK_ASM = *gccc::CLK_ASM;
*CPP_TOKEN_FLD_NODE = *gccc::CPP_TOKEN_FLD_NODE;
*CPP_TOKEN_FLD_SOURCE = *gccc::CPP_TOKEN_FLD_SOURCE;
*CPP_TOKEN_FLD_STR = *gccc::CPP_TOKEN_FLD_STR;
*CPP_TOKEN_FLD_ARG_NO = *gccc::CPP_TOKEN_FLD_ARG_NO;
*CPP_TOKEN_FLD_TOKEN_NO = *gccc::CPP_TOKEN_FLD_TOKEN_NO;
*CPP_TOKEN_FLD_PRAGMA = *gccc::CPP_TOKEN_FLD_PRAGMA;
*CPP_TOKEN_FLD_NONE = *gccc::CPP_TOKEN_FLD_NONE;
*DEPS_NONE = *gccc::DEPS_NONE;
*DEPS_USER = *gccc::DEPS_USER;
*DEPS_SYSTEM = *gccc::DEPS_SYSTEM;
*normalized_KC = *gccc::normalized_KC;
*normalized_C = *gccc::normalized_C;
*normalized_identifier_C = *gccc::normalized_identifier_C;
*normalized_none = *gccc::normalized_none;
*NT_VOID = *gccc::NT_VOID;
*NT_MACRO = *gccc::NT_MACRO;
*NT_ASSERTION = *gccc::NT_ASSERTION;
*BT_SPECLINE = *gccc::BT_SPECLINE;
*BT_DATE = *gccc::BT_DATE;
*BT_FILE = *gccc::BT_FILE;
*BT_BASE_FILE = *gccc::BT_BASE_FILE;
*BT_INCLUDE_LEVEL = *gccc::BT_INCLUDE_LEVEL;
*BT_TIME = *gccc::BT_TIME;
*BT_STDC = *gccc::BT_STDC;
*BT_PRAGMA = *gccc::BT_PRAGMA;
*BT_TIMESTAMP = *gccc::BT_TIMESTAMP;
*BT_COUNTER = *gccc::BT_COUNTER;
*BT_FIRST_USER = *gccc::BT_FIRST_USER;
*BT_LAST_USER = *gccc::BT_LAST_USER;
*NTV_MACRO = *gccc::NTV_MACRO;
*NTV_ANSWER = *gccc::NTV_ANSWER;
*NTV_BUILTIN = *gccc::NTV_BUILTIN;
*NTV_ARGUMENT = *gccc::NTV_ARGUMENT;
*NTV_NONE = *gccc::NTV_NONE;
*CPP_DL_WARNING = *gccc::CPP_DL_WARNING;
*CPP_DL_WARNING_SYSHDR = *gccc::CPP_DL_WARNING_SYSHDR;
*CPP_DL_PEDWARN = *gccc::CPP_DL_PEDWARN;
*CPP_DL_ERROR = *gccc::CPP_DL_ERROR;
*CPP_DL_ICE = *gccc::CPP_DL_ICE;
*CPP_DL_NOTE = *gccc::CPP_DL_NOTE;
*CPP_DL_FATAL = *gccc::CPP_DL_FATAL;
*CPP_W_NONE = *gccc::CPP_W_NONE;
*CPP_W_DEPRECATED = *gccc::CPP_W_DEPRECATED;
*CPP_W_COMMENTS = *gccc::CPP_W_COMMENTS;
*CPP_W_MISSING_INCLUDE_DIRS = *gccc::CPP_W_MISSING_INCLUDE_DIRS;
*CPP_W_TRIGRAPHS = *gccc::CPP_W_TRIGRAPHS;
*CPP_W_MULTICHAR = *gccc::CPP_W_MULTICHAR;
*CPP_W_TRADITIONAL = *gccc::CPP_W_TRADITIONAL;
*CPP_W_LONG_LONG = *gccc::CPP_W_LONG_LONG;
*CPP_W_ENDIF_LABELS = *gccc::CPP_W_ENDIF_LABELS;
*CPP_W_NUM_SIGN_CHANGE = *gccc::CPP_W_NUM_SIGN_CHANGE;
*CPP_W_VARIADIC_MACROS = *gccc::CPP_W_VARIADIC_MACROS;
*CPP_W_BUILTIN_MACRO_REDEFINED = *gccc::CPP_W_BUILTIN_MACRO_REDEFINED;
*CPP_W_DOLLARS = *gccc::CPP_W_DOLLARS;
*CPP_W_UNDEF = *gccc::CPP_W_UNDEF;
*CPP_W_UNUSED_MACROS = *gccc::CPP_W_UNUSED_MACROS;
*CPP_W_CXX_OPERATOR_NAMES = *gccc::CPP_W_CXX_OPERATOR_NAMES;
*CPP_W_NORMALIZE = *gccc::CPP_W_NORMALIZE;
*CPP_W_INVALID_PCH = *gccc::CPP_W_INVALID_PCH;
*CPP_W_WARNING_DIRECTIVE = *gccc::CPP_W_WARNING_DIRECTIVE;
*DK_UNSPECIFIED = *gccc::DK_UNSPECIFIED;
*DK_IGNORED = *gccc::DK_IGNORED;
*DK_FATAL = *gccc::DK_FATAL;
*DK_ICE = *gccc::DK_ICE;
*DK_ERROR = *gccc::DK_ERROR;
*DK_SORRY = *gccc::DK_SORRY;
*DK_WARNING = *gccc::DK_WARNING;
*DK_ANACHRONISM = *gccc::DK_ANACHRONISM;
*DK_NOTE = *gccc::DK_NOTE;
*DK_DEBUG = *gccc::DK_DEBUG;
*DK_PEDWARN = *gccc::DK_PEDWARN;
*DK_PERMERROR = *gccc::DK_PERMERROR;
*DK_LAST_DIAGNOSTIC_KIND = *gccc::DK_LAST_DIAGNOSTIC_KIND;
*DK_POP = *gccc::DK_POP;
*progname = *gccc::progname;
*RID_STATIC = *gccc::RID_STATIC;
*RID_UNSIGNED = *gccc::RID_UNSIGNED;
*RID_LONG = *gccc::RID_LONG;
*RID_CONST = *gccc::RID_CONST;
*RID_EXTERN = *gccc::RID_EXTERN;
*RID_REGISTER = *gccc::RID_REGISTER;
*RID_TYPEDEF = *gccc::RID_TYPEDEF;
*RID_SHORT = *gccc::RID_SHORT;
*RID_INLINE = *gccc::RID_INLINE;
*RID_VOLATILE = *gccc::RID_VOLATILE;
*RID_SIGNED = *gccc::RID_SIGNED;
*RID_AUTO = *gccc::RID_AUTO;
*RID_RESTRICT = *gccc::RID_RESTRICT;
*RID_COMPLEX = *gccc::RID_COMPLEX;
*RID_THREAD = *gccc::RID_THREAD;
*RID_SAT = *gccc::RID_SAT;
*RID_FRIEND = *gccc::RID_FRIEND;
*RID_VIRTUAL = *gccc::RID_VIRTUAL;
*RID_EXPLICIT = *gccc::RID_EXPLICIT;
*RID_EXPORT = *gccc::RID_EXPORT;
*RID_MUTABLE = *gccc::RID_MUTABLE;
*RID_IN = *gccc::RID_IN;
*RID_OUT = *gccc::RID_OUT;
*RID_INOUT = *gccc::RID_INOUT;
*RID_BYCOPY = *gccc::RID_BYCOPY;
*RID_BYREF = *gccc::RID_BYREF;
*RID_ONEWAY = *gccc::RID_ONEWAY;
*RID_GETTER = *gccc::RID_GETTER;
*RID_SETTER = *gccc::RID_SETTER;
*RID_READONLY = *gccc::RID_READONLY;
*RID_READWRITE = *gccc::RID_READWRITE;
*RID_ASSIGN = *gccc::RID_ASSIGN;
*RID_RETAIN = *gccc::RID_RETAIN;
*RID_COPY = *gccc::RID_COPY;
*RID_NONATOMIC = *gccc::RID_NONATOMIC;
*RID_IMAGINARY = *gccc::RID_IMAGINARY;
*RID_INT = *gccc::RID_INT;
*RID_CHAR = *gccc::RID_CHAR;
*RID_FLOAT = *gccc::RID_FLOAT;
*RID_DOUBLE = *gccc::RID_DOUBLE;
*RID_VOID = *gccc::RID_VOID;
*RID_INT128 = *gccc::RID_INT128;
*RID_ENUM = *gccc::RID_ENUM;
*RID_STRUCT = *gccc::RID_STRUCT;
*RID_UNION = *gccc::RID_UNION;
*RID_IF = *gccc::RID_IF;
*RID_ELSE = *gccc::RID_ELSE;
*RID_WHILE = *gccc::RID_WHILE;
*RID_DO = *gccc::RID_DO;
*RID_FOR = *gccc::RID_FOR;
*RID_SWITCH = *gccc::RID_SWITCH;
*RID_CASE = *gccc::RID_CASE;
*RID_DEFAULT = *gccc::RID_DEFAULT;
*RID_BREAK = *gccc::RID_BREAK;
*RID_CONTINUE = *gccc::RID_CONTINUE;
*RID_RETURN = *gccc::RID_RETURN;
*RID_GOTO = *gccc::RID_GOTO;
*RID_SIZEOF = *gccc::RID_SIZEOF;
*RID_ASM = *gccc::RID_ASM;
*RID_TYPEOF = *gccc::RID_TYPEOF;
*RID_ALIGNOF = *gccc::RID_ALIGNOF;
*RID_ATTRIBUTE = *gccc::RID_ATTRIBUTE;
*RID_VA_ARG = *gccc::RID_VA_ARG;
*RID_EXTENSION = *gccc::RID_EXTENSION;
*RID_IMAGPART = *gccc::RID_IMAGPART;
*RID_REALPART = *gccc::RID_REALPART;
*RID_LABEL = *gccc::RID_LABEL;
*RID_CHOOSE_EXPR = *gccc::RID_CHOOSE_EXPR;
*RID_TYPES_COMPATIBLE_P = *gccc::RID_TYPES_COMPATIBLE_P;
*RID_DFLOAT32 = *gccc::RID_DFLOAT32;
*RID_DFLOAT64 = *gccc::RID_DFLOAT64;
*RID_DFLOAT128 = *gccc::RID_DFLOAT128;
*RID_FRACT = *gccc::RID_FRACT;
*RID_ACCUM = *gccc::RID_ACCUM;
*RID_CXX_COMPAT_WARN = *gccc::RID_CXX_COMPAT_WARN;
*RID_FUNCTION_NAME = *gccc::RID_FUNCTION_NAME;
*RID_PRETTY_FUNCTION_NAME = *gccc::RID_PRETTY_FUNCTION_NAME;
*RID_C99_FUNCTION_NAME = *gccc::RID_C99_FUNCTION_NAME;
*RID_BOOL = *gccc::RID_BOOL;
*RID_WCHAR = *gccc::RID_WCHAR;
*RID_CLASS = *gccc::RID_CLASS;
*RID_PUBLIC = *gccc::RID_PUBLIC;
*RID_PRIVATE = *gccc::RID_PRIVATE;
*RID_PROTECTED = *gccc::RID_PROTECTED;
*RID_TEMPLATE = *gccc::RID_TEMPLATE;
*RID_NULL = *gccc::RID_NULL;
*RID_CATCH = *gccc::RID_CATCH;
*RID_DELETE = *gccc::RID_DELETE;
*RID_FALSE = *gccc::RID_FALSE;
*RID_NAMESPACE = *gccc::RID_NAMESPACE;
*RID_NEW = *gccc::RID_NEW;
*RID_OFFSETOF = *gccc::RID_OFFSETOF;
*RID_OPERATOR = *gccc::RID_OPERATOR;
*RID_THIS = *gccc::RID_THIS;
*RID_THROW = *gccc::RID_THROW;
*RID_TRUE = *gccc::RID_TRUE;
*RID_TRY = *gccc::RID_TRY;
*RID_TYPENAME = *gccc::RID_TYPENAME;
*RID_TYPEID = *gccc::RID_TYPEID;
*RID_USING = *gccc::RID_USING;
*RID_CHAR16 = *gccc::RID_CHAR16;
*RID_CHAR32 = *gccc::RID_CHAR32;
*RID_CONSTCAST = *gccc::RID_CONSTCAST;
*RID_DYNCAST = *gccc::RID_DYNCAST;
*RID_REINTCAST = *gccc::RID_REINTCAST;
*RID_STATCAST = *gccc::RID_STATCAST;
*RID_HAS_NOTHROW_ASSIGN = *gccc::RID_HAS_NOTHROW_ASSIGN;
*RID_HAS_NOTHROW_CONSTRUCTOR = *gccc::RID_HAS_NOTHROW_CONSTRUCTOR;
*RID_HAS_NOTHROW_COPY = *gccc::RID_HAS_NOTHROW_COPY;
*RID_HAS_TRIVIAL_ASSIGN = *gccc::RID_HAS_TRIVIAL_ASSIGN;
*RID_HAS_TRIVIAL_CONSTRUCTOR = *gccc::RID_HAS_TRIVIAL_CONSTRUCTOR;
*RID_HAS_TRIVIAL_COPY = *gccc::RID_HAS_TRIVIAL_COPY;
*RID_HAS_TRIVIAL_DESTRUCTOR = *gccc::RID_HAS_TRIVIAL_DESTRUCTOR;
*RID_HAS_VIRTUAL_DESTRUCTOR = *gccc::RID_HAS_VIRTUAL_DESTRUCTOR;
*RID_IS_ABSTRACT = *gccc::RID_IS_ABSTRACT;
*RID_IS_BASE_OF = *gccc::RID_IS_BASE_OF;
*RID_IS_CONVERTIBLE_TO = *gccc::RID_IS_CONVERTIBLE_TO;
*RID_IS_CLASS = *gccc::RID_IS_CLASS;
*RID_IS_EMPTY = *gccc::RID_IS_EMPTY;
*RID_IS_ENUM = *gccc::RID_IS_ENUM;
*RID_IS_POD = *gccc::RID_IS_POD;
*RID_IS_POLYMORPHIC = *gccc::RID_IS_POLYMORPHIC;
*RID_IS_STD_LAYOUT = *gccc::RID_IS_STD_LAYOUT;
*RID_IS_TRIVIAL = *gccc::RID_IS_TRIVIAL;
*RID_IS_UNION = *gccc::RID_IS_UNION;
*RID_IS_LITERAL_TYPE = *gccc::RID_IS_LITERAL_TYPE;
*RID_CONSTEXPR = *gccc::RID_CONSTEXPR;
*RID_DECLTYPE = *gccc::RID_DECLTYPE;
*RID_NOEXCEPT = *gccc::RID_NOEXCEPT;
*RID_NULLPTR = *gccc::RID_NULLPTR;
*RID_STATIC_ASSERT = *gccc::RID_STATIC_ASSERT;
*RID_AT_ENCODE = *gccc::RID_AT_ENCODE;
*RID_AT_END = *gccc::RID_AT_END;
*RID_AT_CLASS = *gccc::RID_AT_CLASS;
*RID_AT_ALIAS = *gccc::RID_AT_ALIAS;
*RID_AT_DEFS = *gccc::RID_AT_DEFS;
*RID_AT_PRIVATE = *gccc::RID_AT_PRIVATE;
*RID_AT_PROTECTED = *gccc::RID_AT_PROTECTED;
*RID_AT_PUBLIC = *gccc::RID_AT_PUBLIC;
*RID_AT_PACKAGE = *gccc::RID_AT_PACKAGE;
*RID_AT_PROTOCOL = *gccc::RID_AT_PROTOCOL;
*RID_AT_SELECTOR = *gccc::RID_AT_SELECTOR;
*RID_AT_THROW = *gccc::RID_AT_THROW;
*RID_AT_TRY = *gccc::RID_AT_TRY;
*RID_AT_CATCH = *gccc::RID_AT_CATCH;
*RID_AT_FINALLY = *gccc::RID_AT_FINALLY;
*RID_AT_SYNCHRONIZED = *gccc::RID_AT_SYNCHRONIZED;
*RID_AT_OPTIONAL = *gccc::RID_AT_OPTIONAL;
*RID_AT_REQUIRED = *gccc::RID_AT_REQUIRED;
*RID_AT_PROPERTY = *gccc::RID_AT_PROPERTY;
*RID_AT_SYNTHESIZE = *gccc::RID_AT_SYNTHESIZE;
*RID_AT_DYNAMIC = *gccc::RID_AT_DYNAMIC;
*RID_AT_INTERFACE = *gccc::RID_AT_INTERFACE;
*RID_AT_IMPLEMENTATION = *gccc::RID_AT_IMPLEMENTATION;
*RID_ADDR_SPACE_0 = *gccc::RID_ADDR_SPACE_0;
*RID_ADDR_SPACE_1 = *gccc::RID_ADDR_SPACE_1;
*RID_ADDR_SPACE_2 = *gccc::RID_ADDR_SPACE_2;
*RID_ADDR_SPACE_3 = *gccc::RID_ADDR_SPACE_3;
*RID_ADDR_SPACE_4 = *gccc::RID_ADDR_SPACE_4;
*RID_ADDR_SPACE_5 = *gccc::RID_ADDR_SPACE_5;
*RID_ADDR_SPACE_6 = *gccc::RID_ADDR_SPACE_6;
*RID_ADDR_SPACE_7 = *gccc::RID_ADDR_SPACE_7;
*RID_ADDR_SPACE_8 = *gccc::RID_ADDR_SPACE_8;
*RID_ADDR_SPACE_9 = *gccc::RID_ADDR_SPACE_9;
*RID_ADDR_SPACE_10 = *gccc::RID_ADDR_SPACE_10;
*RID_ADDR_SPACE_11 = *gccc::RID_ADDR_SPACE_11;
*RID_ADDR_SPACE_12 = *gccc::RID_ADDR_SPACE_12;
*RID_ADDR_SPACE_13 = *gccc::RID_ADDR_SPACE_13;
*RID_ADDR_SPACE_14 = *gccc::RID_ADDR_SPACE_14;
*RID_ADDR_SPACE_15 = *gccc::RID_ADDR_SPACE_15;
*RID_FIRST_ADDR_SPACE = *gccc::RID_FIRST_ADDR_SPACE;
*RID_LAST_ADDR_SPACE = *gccc::RID_LAST_ADDR_SPACE;
*RID_MAX = *gccc::RID_MAX;
*RID_FIRST_MODIFIER = *gccc::RID_FIRST_MODIFIER;
*RID_LAST_MODIFIER = *gccc::RID_LAST_MODIFIER;
*RID_FIRST_CXX0X = *gccc::RID_FIRST_CXX0X;
*RID_LAST_CXX0X = *gccc::RID_LAST_CXX0X;
*RID_FIRST_AT = *gccc::RID_FIRST_AT;
*RID_LAST_AT = *gccc::RID_LAST_AT;
*RID_FIRST_PQ = *gccc::RID_FIRST_PQ;
*RID_LAST_PQ = *gccc::RID_LAST_PQ;
*RID_FIRST_PATTR = *gccc::RID_FIRST_PATTR;
*RID_LAST_PATTR = *gccc::RID_LAST_PATTR;
*ridpointers = *gccc::ridpointers;
*CTI_CHAR16_TYPE = *gccc::CTI_CHAR16_TYPE;
*CTI_CHAR32_TYPE = *gccc::CTI_CHAR32_TYPE;
*CTI_WCHAR_TYPE = *gccc::CTI_WCHAR_TYPE;
*CTI_UNDERLYING_WCHAR_TYPE = *gccc::CTI_UNDERLYING_WCHAR_TYPE;
*CTI_WINT_TYPE = *gccc::CTI_WINT_TYPE;
*CTI_SIGNED_SIZE_TYPE = *gccc::CTI_SIGNED_SIZE_TYPE;
*CTI_UNSIGNED_PTRDIFF_TYPE = *gccc::CTI_UNSIGNED_PTRDIFF_TYPE;
*CTI_INTMAX_TYPE = *gccc::CTI_INTMAX_TYPE;
*CTI_UINTMAX_TYPE = *gccc::CTI_UINTMAX_TYPE;
*CTI_WIDEST_INT_LIT_TYPE = *gccc::CTI_WIDEST_INT_LIT_TYPE;
*CTI_WIDEST_UINT_LIT_TYPE = *gccc::CTI_WIDEST_UINT_LIT_TYPE;
*CTI_SIG_ATOMIC_TYPE = *gccc::CTI_SIG_ATOMIC_TYPE;
*CTI_INT8_TYPE = *gccc::CTI_INT8_TYPE;
*CTI_INT16_TYPE = *gccc::CTI_INT16_TYPE;
*CTI_INT32_TYPE = *gccc::CTI_INT32_TYPE;
*CTI_INT64_TYPE = *gccc::CTI_INT64_TYPE;
*CTI_UINT8_TYPE = *gccc::CTI_UINT8_TYPE;
*CTI_UINT16_TYPE = *gccc::CTI_UINT16_TYPE;
*CTI_UINT32_TYPE = *gccc::CTI_UINT32_TYPE;
*CTI_UINT64_TYPE = *gccc::CTI_UINT64_TYPE;
*CTI_INT_LEAST8_TYPE = *gccc::CTI_INT_LEAST8_TYPE;
*CTI_INT_LEAST16_TYPE = *gccc::CTI_INT_LEAST16_TYPE;
*CTI_INT_LEAST32_TYPE = *gccc::CTI_INT_LEAST32_TYPE;
*CTI_INT_LEAST64_TYPE = *gccc::CTI_INT_LEAST64_TYPE;
*CTI_UINT_LEAST8_TYPE = *gccc::CTI_UINT_LEAST8_TYPE;
*CTI_UINT_LEAST16_TYPE = *gccc::CTI_UINT_LEAST16_TYPE;
*CTI_UINT_LEAST32_TYPE = *gccc::CTI_UINT_LEAST32_TYPE;
*CTI_UINT_LEAST64_TYPE = *gccc::CTI_UINT_LEAST64_TYPE;
*CTI_INT_FAST8_TYPE = *gccc::CTI_INT_FAST8_TYPE;
*CTI_INT_FAST16_TYPE = *gccc::CTI_INT_FAST16_TYPE;
*CTI_INT_FAST32_TYPE = *gccc::CTI_INT_FAST32_TYPE;
*CTI_INT_FAST64_TYPE = *gccc::CTI_INT_FAST64_TYPE;
*CTI_UINT_FAST8_TYPE = *gccc::CTI_UINT_FAST8_TYPE;
*CTI_UINT_FAST16_TYPE = *gccc::CTI_UINT_FAST16_TYPE;
*CTI_UINT_FAST32_TYPE = *gccc::CTI_UINT_FAST32_TYPE;
*CTI_UINT_FAST64_TYPE = *gccc::CTI_UINT_FAST64_TYPE;
*CTI_INTPTR_TYPE = *gccc::CTI_INTPTR_TYPE;
*CTI_UINTPTR_TYPE = *gccc::CTI_UINTPTR_TYPE;
*CTI_CHAR_ARRAY_TYPE = *gccc::CTI_CHAR_ARRAY_TYPE;
*CTI_CHAR16_ARRAY_TYPE = *gccc::CTI_CHAR16_ARRAY_TYPE;
*CTI_CHAR32_ARRAY_TYPE = *gccc::CTI_CHAR32_ARRAY_TYPE;
*CTI_WCHAR_ARRAY_TYPE = *gccc::CTI_WCHAR_ARRAY_TYPE;
*CTI_INT_ARRAY_TYPE = *gccc::CTI_INT_ARRAY_TYPE;
*CTI_STRING_TYPE = *gccc::CTI_STRING_TYPE;
*CTI_CONST_STRING_TYPE = *gccc::CTI_CONST_STRING_TYPE;
*CTI_TRUTHVALUE_TYPE = *gccc::CTI_TRUTHVALUE_TYPE;
*CTI_TRUTHVALUE_TRUE = *gccc::CTI_TRUTHVALUE_TRUE;
*CTI_TRUTHVALUE_FALSE = *gccc::CTI_TRUTHVALUE_FALSE;
*CTI_DEFAULT_FUNCTION_TYPE = *gccc::CTI_DEFAULT_FUNCTION_TYPE;
*CTI_FUNCTION_NAME_DECL = *gccc::CTI_FUNCTION_NAME_DECL;
*CTI_PRETTY_FUNCTION_NAME_DECL = *gccc::CTI_PRETTY_FUNCTION_NAME_DECL;
*CTI_C99_FUNCTION_NAME_DECL = *gccc::CTI_C99_FUNCTION_NAME_DECL;
*CTI_SAVED_FUNCTION_NAME_DECLS = *gccc::CTI_SAVED_FUNCTION_NAME_DECLS;
*CTI_VOID_ZERO = *gccc::CTI_VOID_ZERO;
*CTI_NULL = *gccc::CTI_NULL;
*CTI_MAX = *gccc::CTI_MAX;

my %__c_common_reswords_hash;
tie %__c_common_reswords_hash,"gcc::c_common_resword", $gccc::c_common_reswords;
$c_common_reswords= \%__c_common_reswords_hash;
bless $c_common_reswords, gcc::c_common_resword;
*num_c_common_reswords = *gccc::num_c_common_reswords;
*c_global_trees = *gccc::c_global_trees;
*clk_c = *gccc::clk_c;
*clk_objc = *gccc::clk_objc;
*clk_cxx = *gccc::clk_cxx;
*clk_objcxx = *gccc::clk_objcxx;
*c_language = *gccc::c_language;
*RO_NULL = *gccc::RO_NULL;
*RO_ARRAY_INDEXING = *gccc::RO_ARRAY_INDEXING;
*RO_UNARY_STAR = *gccc::RO_UNARY_STAR;
*RO_ARROW = *gccc::RO_ARROW;
*RO_IMPLICIT_CONVERSION = *gccc::RO_IMPLICIT_CONVERSION;
*lang_post_pch_load = *gccc::lang_post_pch_load;
*flag_no_line_commands = *gccc::flag_no_line_commands;
*flag_no_output = *gccc::flag_no_output;
*flag_dump_macros = *gccc::flag_dump_macros;
*flag_dump_includes = *gccc::flag_dump_includes;
*flag_pch_preprocess = *gccc::flag_pch_preprocess;
*pch_file = *gccc::pch_file;
*flag_iso = *gccc::flag_iso;
*warn_unknown_pragmas = *gccc::warn_unknown_pragmas;
*warn_format = *gccc::warn_format;
*flag_cond_mismatch = *gccc::flag_cond_mismatch;
*flag_isoc94 = *gccc::flag_isoc94;
*flag_isoc99 = *gccc::flag_isoc99;
*flag_isoc1x = *gccc::flag_isoc1x;
*flag_hosted = *gccc::flag_hosted;
*print_struct_values = *gccc::print_struct_values;
*constant_string_class_name = *gccc::constant_string_class_name;
*flag_use_repository = *gccc::flag_use_repository;
*cxx98 = *gccc::cxx98;
*cxx0x = *gccc::cxx0x;
*max_tinst_depth = *gccc::max_tinst_depth;
*c_inhibit_evaluation_warnings = *gccc::c_inhibit_evaluation_warnings;
*done_lexing = *gccc::done_lexing;

my %__visibility_options_hash;
tie %__visibility_options_hash,"gcc::visibility_flags", $gccc::visibility_options;
$visibility_options= \%__visibility_options_hash;
bless $visibility_options, gcc::visibility_flags;

my %__c_common_attribute_table_hash;
tie %__c_common_attribute_table_hash,"gcc::attribute_spec", $gccc::c_common_attribute_table;
$c_common_attribute_table= \%__c_common_attribute_table_hash;
bless $c_common_attribute_table, gcc::attribute_spec;

my %__c_common_format_attribute_table_hash;
tie %__c_common_format_attribute_table_hash,"gcc::attribute_spec", $gccc::c_common_format_attribute_table;
$c_common_format_attribute_table= \%__c_common_format_attribute_table_hash;
bless $c_common_format_attribute_table, gcc::attribute_spec;
*make_fname_decl = *gccc::make_fname_decl;
*in_late_binary_op = *gccc::in_late_binary_op;
*c_family_lang_mask = *gccc::c_family_lang_mask;
*pending_lang_change = *gccc::pending_lang_change;
*lv_assign = *gccc::lv_assign;
*lv_increment = *gccc::lv_increment;
*lv_decrement = *gccc::lv_decrement;
*lv_addressof = *gccc::lv_addressof;
*lv_asm = *gccc::lv_asm;
*executable_checksum = *gccc::executable_checksum;
*DIAGNOSTICS_SHOW_PREFIX_ONCE = *gccc::DIAGNOSTICS_SHOW_PREFIX_ONCE;
*DIAGNOSTICS_SHOW_PREFIX_NEVER = *gccc::DIAGNOSTICS_SHOW_PREFIX_NEVER;
*DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE = *gccc::DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;
*pp_none = *gccc::pp_none;
*pp_before = *gccc::pp_before;
*pp_after = *gccc::pp_after;
*identifier_to_locale_alloc = *gccc::identifier_to_locale_alloc;
*identifier_to_locale_free = *gccc::identifier_to_locale_free;
*global_dc = *gccc::global_dc;
*sk_block = *gccc::sk_block;
*sk_cleanup = *gccc::sk_cleanup;
*sk_try = *gccc::sk_try;
*sk_catch = *gccc::sk_catch;
*sk_for = *gccc::sk_for;
*sk_function_parms = *gccc::sk_function_parms;
*sk_class = *gccc::sk_class;
*sk_scoped_enum = *gccc::sk_scoped_enum;
*sk_namespace = *gccc::sk_namespace;
*sk_template_parms = *gccc::sk_template_parms;
*sk_template_spec = *gccc::sk_template_spec;
*sk_omp = *gccc::sk_omp;
*ts_current = *gccc::ts_current;
*ts_global = *gccc::ts_global;
*ts_within_enclosing_non_class = *gccc::ts_within_enclosing_non_class;

my %__global_namespace_hash;
tie %__global_namespace_hash,"gcc::tree_node", $gccc::global_namespace;
$global_namespace= \%__global_namespace_hash;
bless $global_namespace, gcc::tree_node;

my %__global_scope_name_hash;
tie %__global_scope_name_hash,"gcc::tree_node", $gccc::global_scope_name;
$global_scope_name= \%__global_scope_name_hash;
bless $global_scope_name, gcc::tree_node;

my %__global_type_node_hash;
tie %__global_type_node_hash,"gcc::tree_node", $gccc::global_type_node;
$global_type_node= \%__global_type_node_hash;
bless $global_type_node, gcc::tree_node;
*CP_ID_KIND_NONE = *gccc::CP_ID_KIND_NONE;
*CP_ID_KIND_UNQUALIFIED = *gccc::CP_ID_KIND_UNQUALIFIED;
*CP_ID_KIND_UNQUALIFIED_DEPENDENT = *gccc::CP_ID_KIND_UNQUALIFIED_DEPENDENT;
*CP_ID_KIND_TEMPLATE_ID = *gccc::CP_ID_KIND_TEMPLATE_ID;
*CP_ID_KIND_QUALIFIED = *gccc::CP_ID_KIND_QUALIFIED;
*CPP0X_INITIALIZER_LISTS = *gccc::CPP0X_INITIALIZER_LISTS;
*CPP0X_EXPLICIT_CONVERSION = *gccc::CPP0X_EXPLICIT_CONVERSION;
*CPP0X_VARIADIC_TEMPLATES = *gccc::CPP0X_VARIADIC_TEMPLATES;
*CPP0X_LAMBDA_EXPR = *gccc::CPP0X_LAMBDA_EXPR;
*CPP0X_AUTO = *gccc::CPP0X_AUTO;
*CPP0X_SCOPED_ENUMS = *gccc::CPP0X_SCOPED_ENUMS;
*CPP0X_DEFAULTED_DELETED = *gccc::CPP0X_DEFAULTED_DELETED;
*CPP0X_INLINE_NAMESPACES = *gccc::CPP0X_INLINE_NAMESPACES;
*CPO_COMPARISON = *gccc::CPO_COMPARISON;
*CPO_CONVERSION = *gccc::CPO_CONVERSION;
*CPO_CONDITIONAL_EXPR = *gccc::CPO_CONDITIONAL_EXPR;
*ELK_INIT = *gccc::ELK_INIT;
*ELK_MEM_INIT = *gccc::ELK_MEM_INIT;
*ELK_FUNC_CAST = *gccc::ELK_FUNC_CAST;
*ICR_DEFAULT_ARGUMENT = *gccc::ICR_DEFAULT_ARGUMENT;
*ICR_CONVERTING = *gccc::ICR_CONVERTING;
*ICR_INIT = *gccc::ICR_INIT;
*ICR_ARGPASS = *gccc::ICR_ARGPASS;
*ICR_RETURN = *gccc::ICR_RETURN;
*ICR_ASSIGN = *gccc::ICR_ASSIGN;
*ICV_CAST = *gccc::ICV_CAST;
*ICV_SECOND_OF_COND = *gccc::ICV_SECOND_OF_COND;
*ICV_THIRD_OF_COND = *gccc::ICV_THIRD_OF_COND;
*ICV_RIGHT_OF_COMMA = *gccc::ICV_RIGHT_OF_COMMA;
*ICV_LEFT_OF_COMMA = *gccc::ICV_LEFT_OF_COMMA;
*ICV_STATEMENT = *gccc::ICV_STATEMENT;
*ICV_THIRD_IN_FOR = *gccc::ICV_THIRD_IN_FOR;
*CPTK_HAS_NOTHROW_ASSIGN = *gccc::CPTK_HAS_NOTHROW_ASSIGN;
*CPTK_HAS_NOTHROW_CONSTRUCTOR = *gccc::CPTK_HAS_NOTHROW_CONSTRUCTOR;
*CPTK_HAS_NOTHROW_COPY = *gccc::CPTK_HAS_NOTHROW_COPY;
*CPTK_HAS_TRIVIAL_ASSIGN = *gccc::CPTK_HAS_TRIVIAL_ASSIGN;
*CPTK_HAS_TRIVIAL_CONSTRUCTOR = *gccc::CPTK_HAS_TRIVIAL_CONSTRUCTOR;
*CPTK_HAS_TRIVIAL_COPY = *gccc::CPTK_HAS_TRIVIAL_COPY;
*CPTK_HAS_TRIVIAL_DESTRUCTOR = *gccc::CPTK_HAS_TRIVIAL_DESTRUCTOR;
*CPTK_HAS_VIRTUAL_DESTRUCTOR = *gccc::CPTK_HAS_VIRTUAL_DESTRUCTOR;
*CPTK_IS_ABSTRACT = *gccc::CPTK_IS_ABSTRACT;
*CPTK_IS_BASE_OF = *gccc::CPTK_IS_BASE_OF;
*CPTK_IS_CLASS = *gccc::CPTK_IS_CLASS;
*CPTK_IS_CONVERTIBLE_TO = *gccc::CPTK_IS_CONVERTIBLE_TO;
*CPTK_IS_EMPTY = *gccc::CPTK_IS_EMPTY;
*CPTK_IS_ENUM = *gccc::CPTK_IS_ENUM;
*CPTK_IS_POD = *gccc::CPTK_IS_POD;
*CPTK_IS_POLYMORPHIC = *gccc::CPTK_IS_POLYMORPHIC;
*CPTK_IS_STD_LAYOUT = *gccc::CPTK_IS_STD_LAYOUT;
*CPTK_IS_TRIVIAL = *gccc::CPTK_IS_TRIVIAL;
*CPTK_IS_LITERAL_TYPE = *gccc::CPTK_IS_LITERAL_TYPE;
*CPTK_IS_UNION = *gccc::CPTK_IS_UNION;
*CPLD_NONE = *gccc::CPLD_NONE;
*CPLD_COPY = *gccc::CPLD_COPY;
*CPLD_REFERENCE = *gccc::CPLD_REFERENCE;
*TS_CP_GENERIC = *gccc::TS_CP_GENERIC;
*TS_CP_IDENTIFIER = *gccc::TS_CP_IDENTIFIER;
*TS_CP_TPI = *gccc::TS_CP_TPI;
*TS_CP_PTRMEM = *gccc::TS_CP_PTRMEM;
*TS_CP_BINDING = *gccc::TS_CP_BINDING;
*TS_CP_OVERLOAD = *gccc::TS_CP_OVERLOAD;
*TS_CP_BASELINK = *gccc::TS_CP_BASELINK;
*TS_CP_WRAPPER = *gccc::TS_CP_WRAPPER;
*TS_CP_DEFAULT_ARG = *gccc::TS_CP_DEFAULT_ARG;
*TS_CP_STATIC_ASSERT = *gccc::TS_CP_STATIC_ASSERT;
*TS_CP_ARGUMENT_PACK_SELECT = *gccc::TS_CP_ARGUMENT_PACK_SELECT;
*TS_CP_TRAIT_EXPR = *gccc::TS_CP_TRAIT_EXPR;
*TS_CP_LAMBDA_EXPR = *gccc::TS_CP_LAMBDA_EXPR;
*TS_CP_TEMPLATE_INFO = *gccc::TS_CP_TEMPLATE_INFO;
*LAST_TS_CP_ENUM = *gccc::LAST_TS_CP_ENUM;
*CPTI_JAVA_BYTE_TYPE = *gccc::CPTI_JAVA_BYTE_TYPE;
*CPTI_JAVA_SHORT_TYPE = *gccc::CPTI_JAVA_SHORT_TYPE;
*CPTI_JAVA_INT_TYPE = *gccc::CPTI_JAVA_INT_TYPE;
*CPTI_JAVA_LONG_TYPE = *gccc::CPTI_JAVA_LONG_TYPE;
*CPTI_JAVA_FLOAT_TYPE = *gccc::CPTI_JAVA_FLOAT_TYPE;
*CPTI_JAVA_DOUBLE_TYPE = *gccc::CPTI_JAVA_DOUBLE_TYPE;
*CPTI_JAVA_CHAR_TYPE = *gccc::CPTI_JAVA_CHAR_TYPE;
*CPTI_JAVA_BOOLEAN_TYPE = *gccc::CPTI_JAVA_BOOLEAN_TYPE;
*CPTI_WCHAR_DECL = *gccc::CPTI_WCHAR_DECL;
*CPTI_VTABLE_ENTRY_TYPE = *gccc::CPTI_VTABLE_ENTRY_TYPE;
*CPTI_DELTA_TYPE = *gccc::CPTI_DELTA_TYPE;
*CPTI_VTABLE_INDEX_TYPE = *gccc::CPTI_VTABLE_INDEX_TYPE;
*CPTI_CLEANUP_TYPE = *gccc::CPTI_CLEANUP_TYPE;
*CPTI_VTT_PARM_TYPE = *gccc::CPTI_VTT_PARM_TYPE;
*CPTI_CLASS_TYPE = *gccc::CPTI_CLASS_TYPE;
*CPTI_UNKNOWN_TYPE = *gccc::CPTI_UNKNOWN_TYPE;
*CPTI_INIT_LIST_TYPE = *gccc::CPTI_INIT_LIST_TYPE;
*CPTI_VTBL_TYPE = *gccc::CPTI_VTBL_TYPE;
*CPTI_VTBL_PTR_TYPE = *gccc::CPTI_VTBL_PTR_TYPE;
*CPTI_STD = *gccc::CPTI_STD;
*CPTI_ABI = *gccc::CPTI_ABI;
*CPTI_CONST_TYPE_INFO_TYPE = *gccc::CPTI_CONST_TYPE_INFO_TYPE;
*CPTI_TYPE_INFO_PTR_TYPE = *gccc::CPTI_TYPE_INFO_PTR_TYPE;
*CPTI_ABORT_FNDECL = *gccc::CPTI_ABORT_FNDECL;
*CPTI_GLOBAL_DELETE_FNDECL = *gccc::CPTI_GLOBAL_DELETE_FNDECL;
*CPTI_AGGR_TAG = *gccc::CPTI_AGGR_TAG;
*CPTI_CTOR_IDENTIFIER = *gccc::CPTI_CTOR_IDENTIFIER;
*CPTI_COMPLETE_CTOR_IDENTIFIER = *gccc::CPTI_COMPLETE_CTOR_IDENTIFIER;
*CPTI_BASE_CTOR_IDENTIFIER = *gccc::CPTI_BASE_CTOR_IDENTIFIER;
*CPTI_DTOR_IDENTIFIER = *gccc::CPTI_DTOR_IDENTIFIER;
*CPTI_COMPLETE_DTOR_IDENTIFIER = *gccc::CPTI_COMPLETE_DTOR_IDENTIFIER;
*CPTI_BASE_DTOR_IDENTIFIER = *gccc::CPTI_BASE_DTOR_IDENTIFIER;
*CPTI_DELETING_DTOR_IDENTIFIER = *gccc::CPTI_DELETING_DTOR_IDENTIFIER;
*CPTI_DELTA_IDENTIFIER = *gccc::CPTI_DELTA_IDENTIFIER;
*CPTI_IN_CHARGE_IDENTIFIER = *gccc::CPTI_IN_CHARGE_IDENTIFIER;
*CPTI_VTT_PARM_IDENTIFIER = *gccc::CPTI_VTT_PARM_IDENTIFIER;
*CPTI_NELTS_IDENTIFIER = *gccc::CPTI_NELTS_IDENTIFIER;
*CPTI_THIS_IDENTIFIER = *gccc::CPTI_THIS_IDENTIFIER;
*CPTI_PFN_IDENTIFIER = *gccc::CPTI_PFN_IDENTIFIER;
*CPTI_VPTR_IDENTIFIER = *gccc::CPTI_VPTR_IDENTIFIER;
*CPTI_STD_IDENTIFIER = *gccc::CPTI_STD_IDENTIFIER;
*CPTI_LANG_NAME_C = *gccc::CPTI_LANG_NAME_C;
*CPTI_LANG_NAME_CPLUSPLUS = *gccc::CPTI_LANG_NAME_CPLUSPLUS;
*CPTI_LANG_NAME_JAVA = *gccc::CPTI_LANG_NAME_JAVA;
*CPTI_EMPTY_EXCEPT_SPEC = *gccc::CPTI_EMPTY_EXCEPT_SPEC;
*CPTI_NOEXCEPT_TRUE_SPEC = *gccc::CPTI_NOEXCEPT_TRUE_SPEC;
*CPTI_NOEXCEPT_FALSE_SPEC = *gccc::CPTI_NOEXCEPT_FALSE_SPEC;
*CPTI_JCLASS = *gccc::CPTI_JCLASS;
*CPTI_TERMINATE = *gccc::CPTI_TERMINATE;
*CPTI_CALL_UNEXPECTED = *gccc::CPTI_CALL_UNEXPECTED;
*CPTI_ATEXIT_FN_PTR_TYPE = *gccc::CPTI_ATEXIT_FN_PTR_TYPE;
*CPTI_ATEXIT = *gccc::CPTI_ATEXIT;
*CPTI_DSO_HANDLE = *gccc::CPTI_DSO_HANDLE;
*CPTI_DCAST = *gccc::CPTI_DCAST;
*CPTI_KEYED_CLASSES = *gccc::CPTI_KEYED_CLASSES;
*CPTI_NULLPTR = *gccc::CPTI_NULLPTR;
*CPTI_NULLPTR_TYPE = *gccc::CPTI_NULLPTR_TYPE;
*CPTI_MAX = *gccc::CPTI_MAX;
*cp_global_trees = *gccc::cp_global_trees;

my %__scope_chain_hash;
tie %__scope_chain_hash,"gcc::saved_scope", $gccc::scope_chain;
$scope_chain= \%__scope_chain_hash;
bless $scope_chain, gcc::saved_scope;
*statement_code_p = *gccc::statement_code_p;
*lang_c = *gccc::lang_c;
*lang_cplusplus = *gccc::lang_cplusplus;
*lang_java = *gccc::lang_java;
*none_type = *gccc::none_type;
*record_type = *gccc::record_type;
*class_type = *gccc::class_type;
*union_type = *gccc::union_type;
*enum_type = *gccc::enum_type;
*typename_type = *gccc::typename_type;
*clk_none = *gccc::clk_none;
*clk_ordinary = *gccc::clk_ordinary;
*clk_rvalueref = *gccc::clk_rvalueref;
*clk_class = *gccc::clk_class;
*clk_bitfield = *gccc::clk_bitfield;
*clk_packed = *gccc::clk_packed;
*tsk_none = *gccc::tsk_none;
*tsk_invalid_member_spec = *gccc::tsk_invalid_member_spec;
*tsk_invalid_expl_inst = *gccc::tsk_invalid_expl_inst;
*tsk_excessive_parms = *gccc::tsk_excessive_parms;
*tsk_insufficient_parms = *gccc::tsk_insufficient_parms;
*tsk_template = *gccc::tsk_template;
*tsk_expl_spec = *gccc::tsk_expl_spec;
*tsk_expl_inst = *gccc::tsk_expl_inst;
*ak_none = *gccc::ak_none;
*ak_public = *gccc::ak_public;
*ak_protected = *gccc::ak_protected;
*ak_private = *gccc::ak_private;
*sfk_none = *gccc::sfk_none;
*sfk_constructor = *gccc::sfk_constructor;
*sfk_copy_constructor = *gccc::sfk_copy_constructor;
*sfk_move_constructor = *gccc::sfk_move_constructor;
*sfk_copy_assignment = *gccc::sfk_copy_assignment;
*sfk_move_assignment = *gccc::sfk_move_assignment;
*sfk_destructor = *gccc::sfk_destructor;
*sfk_complete_destructor = *gccc::sfk_complete_destructor;
*sfk_base_destructor = *gccc::sfk_base_destructor;
*sfk_deleting_destructor = *gccc::sfk_deleting_destructor;
*sfk_conversion = *gccc::sfk_conversion;
*lk_none = *gccc::lk_none;
*lk_internal = *gccc::lk_internal;
*lk_external = *gccc::lk_external;
*dk_static = *gccc::dk_static;
*dk_thread = *gccc::dk_thread;
*dk_auto = *gccc::dk_auto;
*dk_dynamic = *gccc::dk_dynamic;
*tf_none = *gccc::tf_none;
*tf_error = *gccc::tf_error;
*tf_warning = *gccc::tf_warning;
*tf_ignore_bad_quals = *gccc::tf_ignore_bad_quals;
*tf_keep_type_decl = *gccc::tf_keep_type_decl;
*tf_ptrmem_ok = *gccc::tf_ptrmem_ok;
*tf_user = *gccc::tf_user;
*tf_conv = *gccc::tf_conv;
*tf_no_access_control = *gccc::tf_no_access_control;
*tf_warning_or_error = *gccc::tf_warning_or_error;
*ba_any = *gccc::ba_any;
*ba_unique = *gccc::ba_unique;
*ba_check_bit = *gccc::ba_check_bit;
*ba_check = *gccc::ba_check;
*ba_ignore_scope = *gccc::ba_ignore_scope;
*ba_quiet = *gccc::ba_quiet;
*dk_no_deferred = *gccc::dk_no_deferred;
*dk_deferred = *gccc::dk_deferred;
*dk_no_check = *gccc::dk_no_check;
*bk_inaccessible = *gccc::bk_inaccessible;
*bk_ambig = *gccc::bk_ambig;
*bk_not_base = *gccc::bk_not_base;
*bk_same_type = *gccc::bk_same_type;
*bk_proper_base = *gccc::bk_proper_base;
*bk_via_virtual = *gccc::bk_via_virtual;

my %__integer_two_node_hash;
tie %__integer_two_node_hash,"gcc::tree_node", $gccc::integer_two_node;
$integer_two_node= \%__integer_two_node_hash;
bless $integer_two_node, gcc::tree_node;
*function_depth = *gccc::function_depth;
*cp_unevaluated_operand = *gccc::cp_unevaluated_operand;
*DEDUCE_CALL = *gccc::DEDUCE_CALL;
*DEDUCE_CONV = *gccc::DEDUCE_CONV;
*DEDUCE_EXACT = *gccc::DEDUCE_EXACT;
*current_class_depth = *gccc::current_class_depth;

my %__local_classes_hash;
tie %__local_classes_hash,"gcc::VEC_tree_gc", $gccc::local_classes;
$local_classes= \%__local_classes_hash;
bless $local_classes, gcc::VEC_tree_gc;
*at_eof = *gccc::at_eof;

my %__static_aggregates_hash;
tie %__static_aggregates_hash,"gcc::tree_node", $gccc::static_aggregates;
$static_aggregates= \%__static_aggregates_hash;
bless $static_aggregates, gcc::tree_node;
*NO_SPECIAL = *gccc::NO_SPECIAL;
*DTOR_FLAG = *gccc::DTOR_FLAG;
*TYPENAME_FLAG = *gccc::TYPENAME_FLAG;

my %__operator_name_info_hash;
tie %__operator_name_info_hash,"gcc::operator_name_info_t", $gccc::operator_name_info;
$operator_name_info= \%__operator_name_info_hash;
bless $operator_name_info, gcc::operator_name_info_t;

my %__assignment_operator_name_info_hash;
tie %__assignment_operator_name_info_hash,"gcc::operator_name_info_t", $gccc::assignment_operator_name_info;
$assignment_operator_name_info= \%__assignment_operator_name_info_hash;
bless $assignment_operator_name_info, gcc::operator_name_info_t;
*sc_none = *gccc::sc_none;
*sc_auto = *gccc::sc_auto;
*sc_register = *gccc::sc_register;
*sc_static = *gccc::sc_static;
*sc_extern = *gccc::sc_extern;
*sc_mutable = *gccc::sc_mutable;
*ds_first = *gccc::ds_first;
*ds_signed = *gccc::ds_signed;
*ds_unsigned = *gccc::ds_unsigned;
*ds_short = *gccc::ds_short;
*ds_long = *gccc::ds_long;
*ds_const = *gccc::ds_const;
*ds_volatile = *gccc::ds_volatile;
*ds_restrict = *gccc::ds_restrict;
*ds_inline = *gccc::ds_inline;
*ds_virtual = *gccc::ds_virtual;
*ds_explicit = *gccc::ds_explicit;
*ds_friend = *gccc::ds_friend;
*ds_typedef = *gccc::ds_typedef;
*ds_constexpr = *gccc::ds_constexpr;
*ds_complex = *gccc::ds_complex;
*ds_thread = *gccc::ds_thread;
*ds_last = *gccc::ds_last;
*cdk_id = *gccc::cdk_id;
*cdk_function = *gccc::cdk_function;
*cdk_array = *gccc::cdk_array;
*cdk_pointer = *gccc::cdk_pointer;
*cdk_reference = *gccc::cdk_reference;
*cdk_ptrmem = *gccc::cdk_ptrmem;
*cdk_error = *gccc::cdk_error;
*no_parameters = *gccc::no_parameters;
*pragma_java_exceptions = *gccc::pragma_java_exceptions;
*defer_mark_used_calls = *gccc::defer_mark_used_calls;

my %__deferred_mark_used_calls_hash;
tie %__deferred_mark_used_calls_hash,"gcc::VEC_tree_gc", $gccc::deferred_mark_used_calls;
$deferred_mark_used_calls= \%__deferred_mark_used_calls_hash;
bless $deferred_mark_used_calls, gcc::VEC_tree_gc;
*processing_template_parmlist = *gccc::processing_template_parmlist;

my %__unemitted_tinfo_decls_hash;
tie %__unemitted_tinfo_decls_hash,"gcc::VEC_tree_gc", $gccc::unemitted_tinfo_decls;
$unemitted_tinfo_decls= \%__unemitted_tinfo_decls_hash;
bless $unemitted_tinfo_decls, gcc::VEC_tree_gc;
*BCS_NO_SCOPE = *gccc::BCS_NO_SCOPE;
*BCS_TRY_BLOCK = *gccc::BCS_TRY_BLOCK;
*BCS_FN_BODY = *gccc::BCS_FN_BODY;

my %__cxx_attribute_table_hash;
tie %__cxx_attribute_table_hash,"gcc::attribute_spec", $gccc::cxx_attribute_table;
$cxx_attribute_table= \%__cxx_attribute_table_hash;
bless $cxx_attribute_table, gcc::attribute_spec;
*ce_derived = *gccc::ce_derived;
*ce_normal = *gccc::ce_normal;
*ce_exact = *gccc::ce_exact;
*PRED_COMBINED = *gccc::PRED_COMBINED;
*PRED_DS_THEORY = *gccc::PRED_DS_THEORY;
*PRED_FIRST_MATCH = *gccc::PRED_FIRST_MATCH;
*PRED_NO_PREDICTION = *gccc::PRED_NO_PREDICTION;
*PRED_UNCONDITIONAL = *gccc::PRED_UNCONDITIONAL;
*PRED_LOOP_ITERATIONS = *gccc::PRED_LOOP_ITERATIONS;
*PRED_BUILTIN_EXPECT = *gccc::PRED_BUILTIN_EXPECT;
*PRED_LOOP_ITERATIONS_GUESSED = *gccc::PRED_LOOP_ITERATIONS_GUESSED;
*PRED_CONTINUE = *gccc::PRED_CONTINUE;
*PRED_NORETURN = *gccc::PRED_NORETURN;
*PRED_COLD_FUNCTION = *gccc::PRED_COLD_FUNCTION;
*PRED_LOOP_BRANCH = *gccc::PRED_LOOP_BRANCH;
*PRED_LOOP_EXIT = *gccc::PRED_LOOP_EXIT;
*PRED_POINTER = *gccc::PRED_POINTER;
*PRED_TREE_POINTER = *gccc::PRED_TREE_POINTER;
*PRED_OPCODE_POSITIVE = *gccc::PRED_OPCODE_POSITIVE;
*PRED_OPCODE_NONEQUAL = *gccc::PRED_OPCODE_NONEQUAL;
*PRED_FPOPCODE = *gccc::PRED_FPOPCODE;
*PRED_TREE_OPCODE_POSITIVE = *gccc::PRED_TREE_OPCODE_POSITIVE;
*PRED_TREE_OPCODE_NONEQUAL = *gccc::PRED_TREE_OPCODE_NONEQUAL;
*PRED_TREE_FPOPCODE = *gccc::PRED_TREE_FPOPCODE;
*PRED_CALL = *gccc::PRED_CALL;
*PRED_TREE_EARLY_RETURN = *gccc::PRED_TREE_EARLY_RETURN;
*PRED_GOTO = *gccc::PRED_GOTO;
*PRED_CONST_RETURN = *gccc::PRED_CONST_RETURN;
*PRED_NEGATIVE_RETURN = *gccc::PRED_NEGATIVE_RETURN;
*PRED_NULL_RETURN = *gccc::PRED_NULL_RETURN;
*PRED_MUDFLAP = *gccc::PRED_MUDFLAP;
*END_PREDICTORS = *gccc::END_PREDICTORS;
*NOT_TAKEN = *gccc::NOT_TAKEN;
*TAKEN = *gccc::TAKEN;
*profile_info = *gccc::profile_info;
*BB_NEW = *gccc::BB_NEW;
*BB_REACHABLE = *gccc::BB_REACHABLE;
*BB_IRREDUCIBLE_LOOP = *gccc::BB_IRREDUCIBLE_LOOP;
*BB_SUPERBLOCK = *gccc::BB_SUPERBLOCK;
*BB_DISABLE_SCHEDULE = *gccc::BB_DISABLE_SCHEDULE;
*BB_HOT_PARTITION = *gccc::BB_HOT_PARTITION;
*BB_COLD_PARTITION = *gccc::BB_COLD_PARTITION;
*BB_DUPLICATED = *gccc::BB_DUPLICATED;
*BB_NON_LOCAL_GOTO_TARGET = *gccc::BB_NON_LOCAL_GOTO_TARGET;
*BB_RTL = *gccc::BB_RTL;
*BB_FORWARDER_BLOCK = *gccc::BB_FORWARDER_BLOCK;
*BB_NONTHREADABLE_BLOCK = *gccc::BB_NONTHREADABLE_BLOCK;
*BB_MODIFIED = *gccc::BB_MODIFIED;
*DOM_NONE = *gccc::DOM_NONE;
*DOM_NO_FAST_QUERY = *gccc::DOM_NO_FAST_QUERY;
*DOM_OK = *gccc::DOM_OK;
*PROFILE_ABSENT = *gccc::PROFILE_ABSENT;
*PROFILE_GUESSED = *gccc::PROFILE_GUESSED;
*PROFILE_READ = *gccc::PROFILE_READ;
*CDI_DOMINATORS = *gccc::CDI_DOMINATORS;
*CDI_POST_DOMINATORS = *gccc::CDI_POST_DOMINATORS;

my %__gimple_cfg_hooks_hash;
tie %__gimple_cfg_hooks_hash,"gcc::cfg_hooks", $gccc::gimple_cfg_hooks;
$gimple_cfg_hooks= \%__gimple_cfg_hooks_hash;
bless $gimple_cfg_hooks, gcc::cfg_hooks;

my %__rtl_cfg_hooks_hash;
tie %__rtl_cfg_hooks_hash,"gcc::cfg_hooks", $gccc::rtl_cfg_hooks;
$rtl_cfg_hooks= \%__rtl_cfg_hooks_hash;
bless $rtl_cfg_hooks, gcc::cfg_hooks;

my %__cfg_layout_rtl_cfg_hooks_hash;
tie %__cfg_layout_rtl_cfg_hooks_hash,"gcc::cfg_hooks", $gccc::cfg_layout_rtl_cfg_hooks;
$cfg_layout_rtl_cfg_hooks= \%__cfg_layout_rtl_cfg_hooks_hash;
bless $cfg_layout_rtl_cfg_hooks, gcc::cfg_hooks;

my %__mfb_kj_edge_hash;
tie %__mfb_kj_edge_hash,"gcc::edge_def", $gccc::mfb_kj_edge;
$mfb_kj_edge= \%__mfb_kj_edge_hash;
bless $mfb_kj_edge, gcc::edge_def;

my %__bitmap_zero_bits_hash;
tie %__bitmap_zero_bits_hash,"gcc::bitmap_element", $gccc::bitmap_zero_bits;
$bitmap_zero_bits= \%__bitmap_zero_bits_hash;
bless $bitmap_zero_bits, gcc::bitmap_element;

my %__bitmap_default_obstack_hash;
tie %__bitmap_default_obstack_hash,"gcc::bitmap_obstack", $gccc::bitmap_default_obstack;
$bitmap_default_obstack= \%__bitmap_default_obstack_hash;
bless $bitmap_default_obstack, gcc::bitmap_obstack;
*ssa_op_iter_none = *gccc::ssa_op_iter_none;
*ssa_op_iter_tree = *gccc::ssa_op_iter_tree;
*ssa_op_iter_use = *gccc::ssa_op_iter_use;
*ssa_op_iter_def = *gccc::ssa_op_iter_def;

my %__ipa_escaped_pt_hash;
tie %__ipa_escaped_pt_hash,"gcc::pt_solution", $gccc::ipa_escaped_pt;
$ipa_escaped_pt= \%__ipa_escaped_pt_hash;
bless $ipa_escaped_pt, gcc::pt_solution;
*IFN_LOAD_LANES = *gccc::IFN_LOAD_LANES;
*IFN_STORE_LANES = *gccc::IFN_STORE_LANES;
*IFN_LAST = *gccc::IFN_LAST;
*internal_fn_name_array = *gccc::internal_fn_name_array;
*internal_fn_flags_array = *gccc::internal_fn_flags_array;
*GIMPLE_ERROR_MARK = *gccc::GIMPLE_ERROR_MARK;
*GIMPLE_COND = *gccc::GIMPLE_COND;
*GIMPLE_DEBUG = *gccc::GIMPLE_DEBUG;
*GIMPLE_GOTO = *gccc::GIMPLE_GOTO;
*GIMPLE_LABEL = *gccc::GIMPLE_LABEL;
*GIMPLE_SWITCH = *gccc::GIMPLE_SWITCH;
*GIMPLE_ASSIGN = *gccc::GIMPLE_ASSIGN;
*GIMPLE_ASM = *gccc::GIMPLE_ASM;
*GIMPLE_CALL = *gccc::GIMPLE_CALL;
*GIMPLE_RETURN = *gccc::GIMPLE_RETURN;
*GIMPLE_BIND = *gccc::GIMPLE_BIND;
*GIMPLE_CATCH = *gccc::GIMPLE_CATCH;
*GIMPLE_EH_FILTER = *gccc::GIMPLE_EH_FILTER;
*GIMPLE_EH_MUST_NOT_THROW = *gccc::GIMPLE_EH_MUST_NOT_THROW;
*GIMPLE_RESX = *gccc::GIMPLE_RESX;
*GIMPLE_EH_DISPATCH = *gccc::GIMPLE_EH_DISPATCH;
*GIMPLE_PHI = *gccc::GIMPLE_PHI;
*GIMPLE_TRY = *gccc::GIMPLE_TRY;
*GIMPLE_NOP = *gccc::GIMPLE_NOP;
*GIMPLE_OMP_ATOMIC_LOAD = *gccc::GIMPLE_OMP_ATOMIC_LOAD;
*GIMPLE_OMP_ATOMIC_STORE = *gccc::GIMPLE_OMP_ATOMIC_STORE;
*GIMPLE_OMP_CONTINUE = *gccc::GIMPLE_OMP_CONTINUE;
*GIMPLE_OMP_CRITICAL = *gccc::GIMPLE_OMP_CRITICAL;
*GIMPLE_OMP_FOR = *gccc::GIMPLE_OMP_FOR;
*GIMPLE_OMP_MASTER = *gccc::GIMPLE_OMP_MASTER;
*GIMPLE_OMP_ORDERED = *gccc::GIMPLE_OMP_ORDERED;
*GIMPLE_OMP_PARALLEL = *gccc::GIMPLE_OMP_PARALLEL;
*GIMPLE_OMP_TASK = *gccc::GIMPLE_OMP_TASK;
*GIMPLE_OMP_RETURN = *gccc::GIMPLE_OMP_RETURN;
*GIMPLE_OMP_SECTION = *gccc::GIMPLE_OMP_SECTION;
*GIMPLE_OMP_SECTIONS = *gccc::GIMPLE_OMP_SECTIONS;
*GIMPLE_OMP_SECTIONS_SWITCH = *gccc::GIMPLE_OMP_SECTIONS_SWITCH;
*GIMPLE_OMP_SINGLE = *gccc::GIMPLE_OMP_SINGLE;
*GIMPLE_PREDICT = *gccc::GIMPLE_PREDICT;
*GIMPLE_WITH_CLEANUP_EXPR = *gccc::GIMPLE_WITH_CLEANUP_EXPR;
*LAST_AND_UNUSED_GIMPLE_CODE = *gccc::LAST_AND_UNUSED_GIMPLE_CODE;
*gimple_code_name = *gccc::gimple_code_name;
*gimple_rhs_class_table = *gccc::gimple_rhs_class_table;
*GIMPLE_INVALID_RHS = *gccc::GIMPLE_INVALID_RHS;
*GIMPLE_TERNARY_RHS = *gccc::GIMPLE_TERNARY_RHS;
*GIMPLE_BINARY_RHS = *gccc::GIMPLE_BINARY_RHS;
*GIMPLE_UNARY_RHS = *gccc::GIMPLE_UNARY_RHS;
*GIMPLE_SINGLE_RHS = *gccc::GIMPLE_SINGLE_RHS;
*GF_ASM_INPUT = *gccc::GF_ASM_INPUT;
*GF_ASM_VOLATILE = *gccc::GF_ASM_VOLATILE;
*GF_CALL_CANNOT_INLINE = *gccc::GF_CALL_CANNOT_INLINE;
*GF_CALL_FROM_THUNK = *gccc::GF_CALL_FROM_THUNK;
*GF_CALL_RETURN_SLOT_OPT = *gccc::GF_CALL_RETURN_SLOT_OPT;
*GF_CALL_TAILCALL = *gccc::GF_CALL_TAILCALL;
*GF_CALL_VA_ARG_PACK = *gccc::GF_CALL_VA_ARG_PACK;
*GF_CALL_NOTHROW = *gccc::GF_CALL_NOTHROW;
*GF_CALL_INTERNAL = *gccc::GF_CALL_INTERNAL;
*GF_CALL_INTERNAL_FN = *gccc::GF_CALL_INTERNAL_FN;
*GF_OMP_PARALLEL_COMBINED = *gccc::GF_OMP_PARALLEL_COMBINED;
*GF_OMP_RETURN_NOWAIT = *gccc::GF_OMP_RETURN_NOWAIT;
*GF_OMP_SECTION_LAST = *gccc::GF_OMP_SECTION_LAST;
*GF_PREDICT_TAKEN = *gccc::GF_PREDICT_TAKEN;
*GIMPLE_DEBUG_BIND = *gccc::GIMPLE_DEBUG_BIND;
*GF_PLF_1 = *gccc::GF_PLF_1;
*GF_PLF_2 = *gccc::GF_PLF_2;
*GIMPLE_TRY_CATCH = *gccc::GIMPLE_TRY_CATCH;
*GIMPLE_TRY_FINALLY = *gccc::GIMPLE_TRY_FINALLY;
*GIMPLE_TRY_KIND = *gccc::GIMPLE_TRY_KIND;
*GIMPLE_TRY_CATCH_IS_CLEANUP = *gccc::GIMPLE_TRY_CATCH_IS_CLEANUP;
*GSS_BASE = *gccc::GSS_BASE;
*GSS_WITH_OPS = *gccc::GSS_WITH_OPS;
*GSS_WITH_MEM_OPS_BASE = *gccc::GSS_WITH_MEM_OPS_BASE;
*GSS_WITH_MEM_OPS = *gccc::GSS_WITH_MEM_OPS;
*GSS_CALL = *gccc::GSS_CALL;
*GSS_ASM = *gccc::GSS_ASM;
*GSS_BIND = *gccc::GSS_BIND;
*GSS_PHI = *gccc::GSS_PHI;
*GSS_TRY = *gccc::GSS_TRY;
*GSS_CATCH = *gccc::GSS_CATCH;
*GSS_EH_FILTER = *gccc::GSS_EH_FILTER;
*GSS_EH_MNT = *gccc::GSS_EH_MNT;
*GSS_EH_CTRL = *gccc::GSS_EH_CTRL;
*GSS_WCE = *gccc::GSS_WCE;
*GSS_OMP = *gccc::GSS_OMP;
*GSS_OMP_CRITICAL = *gccc::GSS_OMP_CRITICAL;
*GSS_OMP_FOR = *gccc::GSS_OMP_FOR;
*GSS_OMP_PARALLEL = *gccc::GSS_OMP_PARALLEL;
*GSS_OMP_TASK = *gccc::GSS_OMP_TASK;
*GSS_OMP_SECTIONS = *gccc::GSS_OMP_SECTIONS;
*GSS_OMP_SINGLE = *gccc::GSS_OMP_SINGLE;
*GSS_OMP_CONTINUE = *gccc::GSS_OMP_CONTINUE;
*GSS_OMP_ATOMIC_LOAD = *gccc::GSS_OMP_ATOMIC_LOAD;
*GSS_OMP_ATOMIC_STORE = *gccc::GSS_OMP_ATOMIC_STORE;
*LAST_GSS_ENUM = *gccc::LAST_GSS_ENUM;
*gimple_ops_offset_ = *gccc::gimple_ops_offset_;
*gss_for_code_ = *gccc::gss_for_code_;

my %__currently_expanding_gimple_stmt_hash;
tie %__currently_expanding_gimple_stmt_hash,"gcc::gimple_statement_d", $gccc::currently_expanding_gimple_stmt;
$currently_expanding_gimple_stmt= \%__currently_expanding_gimple_stmt_hash;
bless $currently_expanding_gimple_stmt, gcc::gimple_statement_d;
*GTC_MERGE = *gccc::GTC_MERGE;
*GTC_DIAG = *gccc::GTC_DIAG;
*fb_none = *gccc::fb_none;
*fb_rvalue = *gccc::fb_rvalue;
*fb_lvalue = *gccc::fb_lvalue;
*fb_mayfail = *gccc::fb_mayfail;
*fb_either = *gccc::fb_either;
*GS_ERROR = *gccc::GS_ERROR;
*GS_UNHANDLED = *gccc::GS_UNHANDLED;
*GS_OK = *gccc::GS_OK;
*GS_ALL_DONE = *gccc::GS_ALL_DONE;
*GSI_NEW_STMT = *gccc::GSI_NEW_STMT;
*GSI_SAME_STMT = *gccc::GSI_SAME_STMT;
*GSI_CONTINUE_LINKING = *gccc::GSI_CONTINUE_LINKING;
*LDPS_OK = *gccc::LDPS_OK;
*LDPS_NO_SYMS = *gccc::LDPS_NO_SYMS;
*LDPS_BAD_HANDLE = *gccc::LDPS_BAD_HANDLE;
*LDPS_ERR = *gccc::LDPS_ERR;
*LD_PLUGIN_API_VERSION = *gccc::LD_PLUGIN_API_VERSION;
*LDPO_REL = *gccc::LDPO_REL;
*LDPO_EXEC = *gccc::LDPO_EXEC;
*LDPO_DYN = *gccc::LDPO_DYN;
*LDPK_DEF = *gccc::LDPK_DEF;
*LDPK_WEAKDEF = *gccc::LDPK_WEAKDEF;
*LDPK_UNDEF = *gccc::LDPK_UNDEF;
*LDPK_WEAKUNDEF = *gccc::LDPK_WEAKUNDEF;
*LDPK_COMMON = *gccc::LDPK_COMMON;
*LDPV_DEFAULT = *gccc::LDPV_DEFAULT;
*LDPV_PROTECTED = *gccc::LDPV_PROTECTED;
*LDPV_INTERNAL = *gccc::LDPV_INTERNAL;
*LDPV_HIDDEN = *gccc::LDPV_HIDDEN;
*LDPR_UNKNOWN = *gccc::LDPR_UNKNOWN;
*LDPR_UNDEF = *gccc::LDPR_UNDEF;
*LDPR_PREVAILING_DEF = *gccc::LDPR_PREVAILING_DEF;
*LDPR_PREVAILING_DEF_IRONLY = *gccc::LDPR_PREVAILING_DEF_IRONLY;
*LDPR_PREEMPTED_REG = *gccc::LDPR_PREEMPTED_REG;
*LDPR_PREEMPTED_IR = *gccc::LDPR_PREEMPTED_IR;
*LDPR_RESOLVED_IR = *gccc::LDPR_RESOLVED_IR;
*LDPR_RESOLVED_EXEC = *gccc::LDPR_RESOLVED_EXEC;
*LDPR_RESOLVED_DYN = *gccc::LDPR_RESOLVED_DYN;
*LDPL_INFO = *gccc::LDPL_INFO;
*LDPL_WARNING = *gccc::LDPL_WARNING;
*LDPL_ERROR = *gccc::LDPL_ERROR;
*LDPL_FATAL = *gccc::LDPL_FATAL;
*LDPT_NULL = *gccc::LDPT_NULL;
*LDPT_API_VERSION = *gccc::LDPT_API_VERSION;
*LDPT_GOLD_VERSION = *gccc::LDPT_GOLD_VERSION;
*LDPT_LINKER_OUTPUT = *gccc::LDPT_LINKER_OUTPUT;
*LDPT_OPTION = *gccc::LDPT_OPTION;
*LDPT_REGISTER_CLAIM_FILE_HOOK = *gccc::LDPT_REGISTER_CLAIM_FILE_HOOK;
*LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK = *gccc::LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK;
*LDPT_REGISTER_CLEANUP_HOOK = *gccc::LDPT_REGISTER_CLEANUP_HOOK;
*LDPT_ADD_SYMBOLS = *gccc::LDPT_ADD_SYMBOLS;
*LDPT_GET_SYMBOLS = *gccc::LDPT_GET_SYMBOLS;
*LDPT_ADD_INPUT_FILE = *gccc::LDPT_ADD_INPUT_FILE;
*LDPT_MESSAGE = *gccc::LDPT_MESSAGE;
*LDPT_GET_INPUT_FILE = *gccc::LDPT_GET_INPUT_FILE;
*LDPT_RELEASE_INPUT_FILE = *gccc::LDPT_RELEASE_INPUT_FILE;
*LDPT_ADD_INPUT_LIBRARY = *gccc::LDPT_ADD_INPUT_LIBRARY;
*LDPT_OUTPUT_NAME = *gccc::LDPT_OUTPUT_NAME;
*LDPT_SET_EXTRA_LIBRARY_PATH = *gccc::LDPT_SET_EXTRA_LIBRARY_PATH;
*LDPT_GNU_LD_VERSION = *gccc::LDPT_GNU_LD_VERSION;
*IPA_REF_LOAD = *gccc::IPA_REF_LOAD;
*IPA_REF_STORE = *gccc::IPA_REF_STORE;
*IPA_REF_ADDR = *gccc::IPA_REF_ADDR;
*IPA_REF_CGRAPH = *gccc::IPA_REF_CGRAPH;
*IPA_REF_VARPOOL = *gccc::IPA_REF_VARPOOL;
*AVAIL_UNSET = *gccc::AVAIL_UNSET;
*AVAIL_NOT_AVAILABLE = *gccc::AVAIL_NOT_AVAILABLE;
*AVAIL_OVERWRITABLE = *gccc::AVAIL_OVERWRITABLE;
*AVAIL_AVAILABLE = *gccc::AVAIL_AVAILABLE;
*AVAIL_LOCAL = *gccc::AVAIL_LOCAL;
*cgraph_availability_names = *gccc::cgraph_availability_names;
*ld_plugin_symbol_resolution_names = *gccc::ld_plugin_symbol_resolution_names;
*CIF_OK = *gccc::CIF_OK;
*CIF_UNSPECIFIED = *gccc::CIF_UNSPECIFIED;
*CIF_FUNCTION_NOT_CONSIDERED = *gccc::CIF_FUNCTION_NOT_CONSIDERED;
*CIF_BODY_NOT_AVAILABLE = *gccc::CIF_BODY_NOT_AVAILABLE;
*CIF_REDEFINED_EXTERN_INLINE = *gccc::CIF_REDEFINED_EXTERN_INLINE;
*CIF_FUNCTION_NOT_INLINABLE = *gccc::CIF_FUNCTION_NOT_INLINABLE;
*CIF_FUNCTION_NOT_INLINE_CANDIDATE = *gccc::CIF_FUNCTION_NOT_INLINE_CANDIDATE;
*CIF_LARGE_FUNCTION_GROWTH_LIMIT = *gccc::CIF_LARGE_FUNCTION_GROWTH_LIMIT;
*CIF_LARGE_STACK_FRAME_GROWTH_LIMIT = *gccc::CIF_LARGE_STACK_FRAME_GROWTH_LIMIT;
*CIF_MAX_INLINE_INSNS_SINGLE_LIMIT = *gccc::CIF_MAX_INLINE_INSNS_SINGLE_LIMIT;
*CIF_MAX_INLINE_INSNS_AUTO_LIMIT = *gccc::CIF_MAX_INLINE_INSNS_AUTO_LIMIT;
*CIF_INLINE_UNIT_GROWTH_LIMIT = *gccc::CIF_INLINE_UNIT_GROWTH_LIMIT;
*CIF_RECURSIVE_INLINING = *gccc::CIF_RECURSIVE_INLINING;
*CIF_UNLIKELY_CALL = *gccc::CIF_UNLIKELY_CALL;
*CIF_NOT_DECLARED_INLINED = *gccc::CIF_NOT_DECLARED_INLINED;
*CIF_OPTIMIZING_FOR_SIZE = *gccc::CIF_OPTIMIZING_FOR_SIZE;
*CIF_TARGET_OPTION_MISMATCH = *gccc::CIF_TARGET_OPTION_MISMATCH;
*CIF_MISMATCHED_ARGUMENTS = *gccc::CIF_MISMATCHED_ARGUMENTS;
*CIF_ORIGINALLY_INDIRECT_CALL = *gccc::CIF_ORIGINALLY_INDIRECT_CALL;
*CIF_INDIRECT_UNKNOWN_CALL = *gccc::CIF_INDIRECT_UNKNOWN_CALL;
*CIF_OVERWRITABLE = *gccc::CIF_OVERWRITABLE;
*CIF_N_REASONS = *gccc::CIF_N_REASONS;

my %__cgraph_nodes_hash;
tie %__cgraph_nodes_hash,"gcc::cgraph_node", $gccc::cgraph_nodes;
$cgraph_nodes= \%__cgraph_nodes_hash;
bless $cgraph_nodes, gcc::cgraph_node;
*cgraph_n_nodes = *gccc::cgraph_n_nodes;
*cgraph_max_uid = *gccc::cgraph_max_uid;
*cgraph_edge_max_uid = *gccc::cgraph_edge_max_uid;
*cgraph_max_pid = *gccc::cgraph_max_pid;
*cgraph_global_info_ready = *gccc::cgraph_global_info_ready;
*CGRAPH_STATE_CONSTRUCTION = *gccc::CGRAPH_STATE_CONSTRUCTION;
*CGRAPH_STATE_IPA = *gccc::CGRAPH_STATE_IPA;
*CGRAPH_STATE_IPA_SSA = *gccc::CGRAPH_STATE_IPA_SSA;
*CGRAPH_STATE_EXPANSION = *gccc::CGRAPH_STATE_EXPANSION;
*CGRAPH_STATE_FINISHED = *gccc::CGRAPH_STATE_FINISHED;
*cgraph_function_flags_ready = *gccc::cgraph_function_flags_ready;

my %__cgraph_nodes_queue_hash;
tie %__cgraph_nodes_queue_hash,"gcc::cgraph_node", $gccc::cgraph_nodes_queue;
$cgraph_nodes_queue= \%__cgraph_nodes_queue_hash;
bless $cgraph_nodes_queue, gcc::cgraph_node;

my %__cgraph_new_nodes_hash;
tie %__cgraph_new_nodes_hash,"gcc::cgraph_node", $gccc::cgraph_new_nodes;
$cgraph_new_nodes= \%__cgraph_new_nodes_hash;
bless $cgraph_new_nodes, gcc::cgraph_node;

my %__cgraph_asm_nodes_hash;
tie %__cgraph_asm_nodes_hash,"gcc::cgraph_asm_node", $gccc::cgraph_asm_nodes;
$cgraph_asm_nodes= \%__cgraph_asm_nodes_hash;
bless $cgraph_asm_nodes, gcc::cgraph_asm_node;
*cgraph_order = *gccc::cgraph_order;
*cgraph_dump_file = *gccc::cgraph_dump_file;

my %__varpool_nodes_queue_hash;
tie %__varpool_nodes_queue_hash,"gcc::varpool_node", $gccc::varpool_nodes_queue;
$varpool_nodes_queue= \%__varpool_nodes_queue_hash;
bless $varpool_nodes_queue, gcc::varpool_node;

my %__varpool_nodes_hash;
tie %__varpool_nodes_hash,"gcc::varpool_node", $gccc::varpool_nodes;
$varpool_nodes= \%__varpool_nodes_hash;
bless $varpool_nodes, gcc::varpool_node;
*NEED_PHI_STATE_UNKNOWN = *gccc::NEED_PHI_STATE_UNKNOWN;
*NEED_PHI_STATE_NO = *gccc::NEED_PHI_STATE_NO;
*NEED_PHI_STATE_MAYBE = *gccc::NEED_PHI_STATE_MAYBE;
*EV_DIR_GROWS = *gccc::EV_DIR_GROWS;
*EV_DIR_DECREASES = *gccc::EV_DIR_DECREASES;
*EV_DIR_UNKNOWN = *gccc::EV_DIR_UNKNOWN;

my %__ssa_name_values_hash;
tie %__ssa_name_values_hash,"gcc::VEC_tree_heap", $gccc::ssa_name_values;
$ssa_name_values= \%__ssa_name_values_hash;
bless $ssa_name_values, gcc::VEC_tree_heap;
*MOVE_IMPOSSIBLE = *gccc::MOVE_IMPOSSIBLE;
*MOVE_PRESERVE_EXECUTION = *gccc::MOVE_PRESERVE_EXECUTION;
*MOVE_POSSIBLE = *gccc::MOVE_POSSIBLE;
1;
