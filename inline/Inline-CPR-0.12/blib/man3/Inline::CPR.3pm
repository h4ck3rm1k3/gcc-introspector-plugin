.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPR 3"
.TH CPR 3 "2012-03-09" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Inline::CPR \- C Perl Run. Embed Perl in C, ala Inline
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #!/usr/local/bin/cpr
\&
\&    int main(void) {
\&        
\&        printf("Hello World, I\*(Aqm running under Perl version %s\en",
\&               CPR_eval("use Config; $Config{version}")
\&              );
\&
\&        return 0;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Is it C? Is it Perl? It's neither, it's both. It's \s-1CPR\s0!
.PP
\&\s-1CPR\s0 (C Perl Run) is a \*(L"new language\*(R" that looks like C. You don't need to compile it. You just run it, much like Perl. As an added bonus, you'll get access to the full internals of Perl via the \s-1CPR\s0 \s-1API\s0.
.PP
The idea is that you just put a \s-1CPR\s0 hashbang at the top of your C program and run it like a script. The \s-1CPR\s0 interpreter will run your C code under Perl.
.PP
If your 'hash' doesn't 'bang', you can run your program like this:
.PP
.Vb 1
\&    cpr synopsis.cpr
.Ve
.SH "How does it work?"
.IX Header "How does it work?"
To understand \s-1CPR\s0, you need to understand the Perl module, \f(CW\*(C`Inline.pm\*(C'\fR. Inline lets you write Perl subroutines in other languages, like C. \s-1CPR\s0 is a natural extension of this.
.PP
The \s-1CPR\s0 interpreter (\f(CW\*(C`/usr/local/bin/cpr\*(C'\fR) is a small binary program which performs a bootstrap process that goes like this:
.PP
\&\- The \f(CW\*(C`cpr\*(C'\fR interpreter \f(CW\*(C`exec\*(C'\fRs \f(CW\*(C`perl\*(C'\fR and tells it to run the script \f(CW\*(C`/usr/local/bin/cpr.pl\*(C'\fR.
.PP
\&\- The name of your \s-1CPR\s0 program is passed to \f(CW\*(C`cpr.pl\*(C'\fR.
.PP
\&\- \f(CW\*(C`cpr.pl\*(C'\fR loads your \s-1CPR\s0 source code and uses \f(CW\*(C`Inline::CPR\*(C'\fR to compile it and bind your \f(CW\*(C`main()\*(C'\fR function to Perl.
.PP
\&\- Then \f(CW\*(C`cpr.pl\*(C'\fR simply invokes the \f(CW\*(C`main()\*(C'\fR function and you're off and running.
.SH "Notes on Usage"
.IX Header "Notes on Usage"
.IP "1." 4
The \s-1CPR\s0 tools will get installed in the same directory as the \f(CW\*(C`perl\*(C'\fR binary on your system. (I just used \f(CW\*(C`/usr/local/bin/\*(C'\fR as an example)
.IP "2." 4
If you installed \f(CW\*(C`Inline::CPR\*(C'\fR by hand, the \f(CW\*(C`make\*(C'\fR command will have created the file \f(CW\*(Aq./examples/synopsis.cpr\*(Aq\fR. This is a sample \s-1CPR\s0 program that you can try running. It's the same as the \s-1SYNOPSIS\s0 example above, except that the hashbang will point to your newly installed \s-1CPR\s0 interpreter.
.IP "3." 4
Although Inline::CPR is a module, it is only used to support the \f(CW\*(C`cpr\*(C'\fR interpreter program. You don't ever actually \f(CW\*(C`use\*(C'\fR it in a Perl script.
.IP "4." 4
You must have a \f(CW\*(C`main()\*(C'\fR function in your \s-1CPR\s0 program. This is what \f(CW\*(C`cpr\*(C'\fR binds to.
.IP "5." 4
The \f(CW\*(C`cpr\*(C'\fR interpreter internally changes your function \f(CW\*(C`main()\*(C'\fR to \f(CW\*(C`cpr_main()\*(C'\fR. Otherwise it would conflict with Perl's \f(CW\*(C`main()\*(C'\fR function.
.IP "6." 4
The first time you run a \s-1CPR\s0 program it will seem to \*(L"hang\*(R" for several
seconds. This is normal. The C code is being compiled. Experienced Inline 
users will be familiar with this. (Since your compiled code is cached to disk, subsequent runs will be fast)
.IP "7." 4
\&\s-1CPR\s0 builds and caches your compiled \s-1CPR\s0 code in the directory \f(CW\*(Aq./.cpr/\*(Aq\fR.
.IP "8." 4
\&\s-1CPR\s0 will return (to the system) whatever integer value your \f(CW\*(C`main()\*(C'\fR function returns.
.IP "9." 4
You don't need to \f(CW\*(C`#include\*(C'\fR most of the standard header files. These are automatically included by Inline::CPR.
.IP "10." 4
\&\s-1CPR\s0 will work with Perl 5.005 and higher. The \s-1CPR\s0 \s-1API\s0 will be made to work with those versions. (Maybe even with Perl6)
.SH "The CPR API"
.IX Header "The CPR API"
The \s-1CPR\s0 \s-1API\s0 is just a set of C macros that you can use to access the internals of Perl5. You can also use the Perl5 \s-1API\s0. See \f(CW\*(C`perldoc perlapi\*(C'\fR.
.PP
The main focus of \s-1CPR\s0 will be to develop a wrapper \s-1API\s0 around the current Perl5 one. It will be more consistent, flexible and easy to use.
.PP
Since it should be well thought out, I have currently only implemented one function: CPR_eval. But you should be able to do quite a bit with just that one.
.SS "\fICPR_eval()\fP"
.IX Subsection "CPR_eval()"
Eval a string (char*) in Perl and return the result as a string.
.PP
.Vb 1
\&    const char* CPR_eval(char*);
.Ve
.SH "Why?"
.IX Header "Why?"
Several reasons, (none great).
.IP "1." 4
It's a cute Perl trick. After explaining \s-1CPR\s0 to an uninitiated friend, he said \*(L"My head feels like it's been wrapped around a brick\*(R". That should be reason enough :)
.IP "2." 4
A dead simple way to embed Perl into C. You're not really embedding Perl into C. Your C is being embedded seamlessly into Perl. But since you never see the Perl, you can just \fBthink\fR of it the first way.
.IP "3." 4
A mechanism for designing a new Perl5 \s-1API\s0. The current one is very adhoc. Some macros come from \s-1XS\s0 and others from the P5P. There's a lot of room for improvement. Also, with Perl6 looming, finding a wrapper \s-1API\s0 for Perl5 that might possibly be upwards compatible, is at least worth considering.
.IP "4." 4
Inline::CPR is a good example of how a \s-1CPAN\s0 module can be used to build and install a binary program. It is interesting to note that the C program \f(CW\*(C`cpr.c\*(C'\fR is actually generated by the Perl script \f(CW\*(C`cpr.plc\*(C'\fR at \f(CW\*(C`make\*(C'\fR time.
.PP
Even if there is no \*(L"real world\*(R" use for the \s-1CPR\s0 language, it is at least an easy-to-use tool for playing around with the internals of Perl5. The more \*(L"regular people\*(R" there are playing in the guts, the more useful we'll be for helping improve our language.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.IP "1." 4
\&\s-1CPR\s0 only binds to a \f(CW\*(C`main()\*(C'\fR function with a signature of:
.Sp
.Vb 1
\&    int main(void);
.Ve
.Sp
It will not yet bind to:
.Sp
.Vb 1
\&    int main(int argc, char* argv[]);
.Ve
.Sp
and friends.
.IP "2." 4
There is currently no way to specify configuration options. This will be added soon. Then you'll be able to link in shared libraries and such.
.IP "3." 4
Does not yet support MSWin32.
.SH "MAILING LIST"
.IX Header "MAILING LIST"
The mailing list for \f(CW\*(C`Inline.pm\*(C'\fR and related projects is: inline@perl.org
.PP
To subscribe, send a message to inline\-subscribe@perl.org
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Ingerson <INGY@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001, Brian Ingerson. All Rights Reserved.
.PP
This module is free software. It may be used, redistributed and/or modified under the terms of the Perl Artistic License.
.PP
(see http://www.perl.com/perl/misc/Artistic.html)
